var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
import { g as getNamespacedKey } from "./utils-BHy2C4E0.js";
var o = () => typeof window > "u" || typeof window.document > "u";
var a = () => {
  let r = /* @__PURE__ */ new Map();
  return { clear: () => {
    r.clear();
  }, getItem: (e) => r.get(String(e)) ?? null, removeItem: (e) => {
    r.delete(String(e));
  }, setItem: (e, i) => {
    r.set(String(e), i);
  } };
}, p = a(), t = class {
  constructor(e) {
    __publicField(this, "storage");
    this.storage = e || p;
  }
  get(e, i, o2) {
    let n = this.storage.getItem(e);
    if (!n) return i;
    let s = JSON.parse(n);
    return typeof o2 == "function" && (s = o2(e, s)), s;
  }
  set(e, i, o2) {
    typeof o2 == "function" && (i = o2(e, i)), this.storage.setItem(e, JSON.stringify(i));
  }
  del(e) {
    this.storage.removeItem(e);
  }
  clear() {
    this.storage.clear();
  }
  get backendApi() {
    return this.storage;
  }
};
var c = (r, e) => {
  switch (r) {
    case "session":
      return new t(window.sessionStorage);
    case "local":
      return new t(window.localStorage);
    case "memory":
      return new t();
  }
};
var P = (r, e) => {
  switch (r) {
    case "session":
      return new t();
    case "local":
      return new t();
    case "memory":
      return new t();
  }
};
var I = (r = "local", e) => o() ? P(r) : c(r);
const prefPerPage = (key, defaultValue) => {
  const storage = I("local");
  return {
    get: () => storage.get(getNamespacedKey(key), defaultValue),
    set: (value) => storage.set(getNamespacedKey(key), value)
  };
};
const prefChrome = (key, defaultValue) => {
  async function setValue(key2, value, local = true) {
    return new Promise((resolve, reject) => {
      chrome.runtime.sendMessage(
        { action: "set", text: JSON.stringify({ key: key2, value, local }) },
        (response) => {
          if (response.success) {
            resolve(key2);
          } else {
            reject(`value was not set for key: ${key2}`);
          }
        }
      );
    });
  }
  async function getValue(key2, local = true) {
    return new Promise((resolve, reject) => {
      chrome.runtime.sendMessage(
        { action: "get", text: JSON.stringify({ key: key2, local }) },
        (response) => {
          if (response.success) {
            try {
              const value = JSON.parse(response.value);
              resolve(value);
            } catch (error) {
              resolve(defaultValue);
            }
          } else {
            reject(`could not get value for key: ${key2}`);
          }
        }
      );
    });
  }
  return {
    get: async (local = true) => {
      const v = await getValue(getNamespacedKey(key), local);
      return typeof v === "undefined" ? Promise.resolve(defaultValue) : v;
    },
    set: async (value, local = true) => setValue(getNamespacedKey(key), value, local)
  };
};
export {
  prefChrome as a,
  prefPerPage as p
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
