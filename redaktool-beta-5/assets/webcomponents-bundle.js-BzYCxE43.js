import { c as commonjsGlobal } from "./_commonjsHelpers-CcAunmGO.js";
var webcomponentsBundle = {};
/**
@license @nocompile
Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
(function() {
  var v;
  function ba(a) {
    var b = 0;
    return function() {
      return b < a.length ? { done: false, value: a[b++] } : { done: true };
    };
  }
  var ca = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, c) {
    if (a == Array.prototype || a == Object.prototype) return a;
    a[b] = c.value;
    return a;
  };
  function da(a) {
    a = ["object" == typeof globalThis && globalThis, a, "object" == typeof window && window, "object" == typeof self && self, "object" == typeof commonjsGlobal && commonjsGlobal];
    for (var b = 0; b < a.length; ++b) {
      var c = a[b];
      if (c && c.Math == Math) return c;
    }
    throw Error("Cannot find global object");
  }
  var ea = da(this);
  function fa(a, b) {
    if (b) a: {
      var c = ea;
      a = a.split(".");
      for (var d = 0; d < a.length - 1; d++) {
        var e = a[d];
        if (!(e in c)) break a;
        c = c[e];
      }
      a = a[a.length - 1];
      d = c[a];
      b = b(d);
      b != d && null != b && ca(c, a, { configurable: true, writable: true, value: b });
    }
  }
  fa("Symbol", function(a) {
    function b(e) {
      if (this instanceof b) throw new TypeError("Symbol is not a constructor");
      return new c("jscomp_symbol_" + (e || "") + "_" + d++, e);
    }
    function c(e, f) {
      this.g = e;
      ca(this, "description", { configurable: true, writable: true, value: f });
    }
    if (a) return a;
    c.prototype.toString = function() {
      return this.g;
    };
    var d = 0;
    return b;
  });
  fa("Symbol.iterator", function(a) {
    if (a) return a;
    a = Symbol("Symbol.iterator");
    for (var b = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), c = 0; c < b.length; c++) {
      var d = ea[b[c]];
      "function" === typeof d && "function" != typeof d.prototype[a] && ca(d.prototype, a, { configurable: true, writable: true, value: function() {
        return ja(ba(this));
      } });
    }
    return a;
  });
  function ja(a) {
    a = { next: a };
    a[Symbol.iterator] = function() {
      return this;
    };
    return a;
  }
  function ka(a) {
    var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
    return b ? b.call(a) : { next: ba(a) };
  }
  function w(a) {
    if (!(a instanceof Array)) {
      a = ka(a);
      for (var b, c = []; !(b = a.next()).done; ) c.push(b.value);
      a = c;
    }
    return a;
  }
  var la;
  if ("function" == typeof Object.setPrototypeOf) la = Object.setPrototypeOf;
  else {
    var na;
    a: {
      var oa = { a: true }, pa = {};
      try {
        pa.__proto__ = oa;
        na = pa.a;
        break a;
      } catch (a) {
      }
      na = false;
    }
    la = na ? function(a, b) {
      a.__proto__ = b;
      if (a.__proto__ !== b) throw new TypeError(a + " is not extensible");
      return a;
    } : null;
  }
  var qa = la;
  function ra() {
    this.u = false;
    this.h = null;
    this.Oa = void 0;
    this.g = 1;
    this.ea = 0;
    this.i = null;
  }
  function ua(a) {
    if (a.u) throw new TypeError("Generator is already running");
    a.u = true;
  }
  ra.prototype.O = function(a) {
    this.Oa = a;
  };
  function wa(a, b) {
    a.i = { ab: b, fb: true };
    a.g = a.ea;
  }
  ra.prototype.return = function(a) {
    this.i = { return: a };
    this.g = this.ea;
  };
  function ya(a, b) {
    a.g = 3;
    return { value: b };
  }
  function za(a) {
    this.g = new ra();
    this.h = a;
  }
  function Aa(a, b) {
    ua(a.g);
    var c = a.g.h;
    if (c) return Ba(a, "return" in c ? c["return"] : function(d) {
      return { value: d, done: true };
    }, b, a.g.return);
    a.g.return(b);
    return Ca(a);
  }
  function Ba(a, b, c, d) {
    try {
      var e = b.call(a.g.h, c);
      if (!(e instanceof Object)) throw new TypeError("Iterator result " + e + " is not an object");
      if (!e.done) return a.g.u = false, e;
      var f = e.value;
    } catch (g) {
      return a.g.h = null, wa(a.g, g), Ca(a);
    }
    a.g.h = null;
    d.call(a.g, f);
    return Ca(a);
  }
  function Ca(a) {
    for (; a.g.g; ) try {
      var b = a.h(a.g);
      if (b) return a.g.u = false, { value: b.value, done: false };
    } catch (c) {
      a.g.Oa = void 0, wa(a.g, c);
    }
    a.g.u = false;
    if (a.g.i) {
      b = a.g.i;
      a.g.i = null;
      if (b.fb) throw b.ab;
      return { value: b.return, done: true };
    }
    return { value: void 0, done: true };
  }
  function Da(a) {
    this.next = function(b) {
      ua(a.g);
      a.g.h ? b = Ba(a, a.g.h.next, b, a.g.O) : (a.g.O(b), b = Ca(a));
      return b;
    };
    this.throw = function(b) {
      ua(a.g);
      a.g.h ? b = Ba(a, a.g.h["throw"], b, a.g.O) : (wa(a.g, b), b = Ca(a));
      return b;
    };
    this.return = function(b) {
      return Aa(a, b);
    };
    this[Symbol.iterator] = function() {
      return this;
    };
  }
  function Ea(a, b) {
    b = new Da(new za(b));
    qa && a.prototype && qa(b, a.prototype);
    return b;
  }
  Array.from || (Array.from = function(a) {
    return [].slice.call(a);
  });
  Object.assign || (Object.assign = function(a) {
    for (var b = [].slice.call(arguments, 1), c = 0, d; c < b.length; c++) if (d = b[c]) for (var e = a, f = Object.keys(d), g = 0; g < f.length; g++) {
      var h = f[g];
      e[h] = d[h];
    }
    return a;
  });
  var Fa = setTimeout;
  function Ga() {
  }
  function Ha(a, b) {
    return function() {
      a.apply(b, arguments);
    };
  }
  function A(a) {
    if (!(this instanceof A)) throw new TypeError("Promises must be constructed via new");
    if ("function" !== typeof a) throw new TypeError("not a function");
    this.N = 0;
    this.Ha = false;
    this.I = void 0;
    this.ba = [];
    Ia(a, this);
  }
  function Ja(a, b) {
    for (; 3 === a.N; ) a = a.I;
    0 === a.N ? a.ba.push(b) : (a.Ha = true, Ka(function() {
      var c = 1 === a.N ? b.hb : b.ib;
      if (null === c) (1 === a.N ? La : Ma)(b.promise, a.I);
      else {
        try {
          var d = c(a.I);
        } catch (e) {
          Ma(b.promise, e);
          return;
        }
        La(b.promise, d);
      }
    }));
  }
  function La(a, b) {
    try {
      if (b === a) throw new TypeError("A promise cannot be resolved with itself.");
      if (b && ("object" === typeof b || "function" === typeof b)) {
        var c = b.then;
        if (b instanceof A) {
          a.N = 3;
          a.I = b;
          Na(a);
          return;
        }
        if ("function" === typeof c) {
          Ia(Ha(c, b), a);
          return;
        }
      }
      a.N = 1;
      a.I = b;
      Na(a);
    } catch (d) {
      Ma(a, d);
    }
  }
  function Ma(a, b) {
    a.N = 2;
    a.I = b;
    Na(a);
  }
  function Na(a) {
    2 === a.N && 0 === a.ba.length && Ka(function() {
      a.Ha || "undefined" !== typeof console && console && console.warn("Possible Unhandled Promise Rejection:", a.I);
    });
    for (var b = 0, c = a.ba.length; b < c; b++) Ja(a, a.ba[b]);
    a.ba = null;
  }
  function Oa(a, b, c) {
    this.hb = "function" === typeof a ? a : null;
    this.ib = "function" === typeof b ? b : null;
    this.promise = c;
  }
  function Ia(a, b) {
    var c = false;
    try {
      a(function(d) {
        c || (c = true, La(b, d));
      }, function(d) {
        c || (c = true, Ma(b, d));
      });
    } catch (d) {
      c || (c = true, Ma(b, d));
    }
  }
  A.prototype["catch"] = function(a) {
    return this.then(null, a);
  };
  A.prototype.then = function(a, b) {
    var c = new this.constructor(Ga);
    Ja(this, new Oa(a, b, c));
    return c;
  };
  A.prototype["finally"] = function(a) {
    var b = this.constructor;
    return this.then(function(c) {
      return b.resolve(a()).then(function() {
        return c;
      });
    }, function(c) {
      return b.resolve(a()).then(function() {
        return b.reject(c);
      });
    });
  };
  function Pa(a) {
    return new A(function(b, c) {
      function d(h, k) {
        try {
          if (k && ("object" === typeof k || "function" === typeof k)) {
            var l = k.then;
            if ("function" === typeof l) {
              l.call(k, function(m) {
                d(h, m);
              }, c);
              return;
            }
          }
          e[h] = k;
          0 === --f && b(e);
        } catch (m) {
          c(m);
        }
      }
      if (!a || "undefined" === typeof a.length) return c(new TypeError("Promise.all accepts an array"));
      var e = Array.prototype.slice.call(a);
      if (0 === e.length) return b([]);
      for (var f = e.length, g = 0; g < e.length; g++) d(g, e[g]);
    });
  }
  function Qa(a) {
    return a && "object" === typeof a && a.constructor === A ? a : new A(function(b) {
      b(a);
    });
  }
  function Ra(a) {
    return new A(function(b, c) {
      c(a);
    });
  }
  function Sa(a) {
    return new A(function(b, c) {
      if (!a || "undefined" === typeof a.length) return c(new TypeError("Promise.race accepts an array"));
      for (var d = 0, e = a.length; d < e; d++) Qa(a[d]).then(b, c);
    });
  }
  var Ka = "function" === typeof setImmediate && function(a) {
    setImmediate(a);
  } || function(a) {
    Fa(a, 0);
  };
  if (!window.Promise) {
    window.Promise = A;
    A.prototype.then = A.prototype.then;
    A.all = Pa;
    A.race = Sa;
    A.resolve = Qa;
    A.reject = Ra;
    var Ta = document.createTextNode(""), Ua = [];
    new MutationObserver(function() {
      for (var a = Ua.length, b = 0; b < a; b++) Ua[b]();
      Ua.splice(0, a);
    }).observe(Ta, { characterData: true });
    Ka = function(a) {
      Ua.push(a);
      Ta.textContent = 0 < Ta.textContent.length ? "" : "a";
    };
  }
  (function(a, b) {
    if (!(b in a)) {
      var c = typeof commonjsGlobal === typeof c ? window : commonjsGlobal, d = 0, e = String(Math.random()), f = "__symbol@@" + e, g = a.getOwnPropertyNames, h = a.getOwnPropertyDescriptor, k = a.create, l = a.keys, m = a.freeze || a, q = a.defineProperty, H = a.defineProperties, C = h(a, "getOwnPropertyNames"), t = a.prototype, F = t.hasOwnProperty, E = t.propertyIsEnumerable, N = t.toString, y = function(I, u, G) {
        F.call(I, f) || q(I, f, { enumerable: false, configurable: false, writable: false, value: {} });
        I[f]["@@" + u] = G;
      }, X = function(I, u) {
        var G = k(I);
        g(u).forEach(function(p) {
          sa.call(
            u,
            p
          ) && Va(G, p, u[p]);
        });
        return G;
      }, x = function() {
      }, ta = function(I) {
        return I != f && !F.call(ha, I);
      }, ia = function(I) {
        return I != f && F.call(ha, I);
      }, sa = function(I) {
        var u = String(I);
        return ia(u) ? F.call(this, u) && !!this[f] && this[f]["@@" + u] : E.call(this, I);
      }, n = function(I) {
        q(t, I, { enumerable: false, configurable: true, get: x, set: function(u) {
          xa(this, I, { enumerable: false, configurable: true, writable: true, value: u });
          y(this, I, true);
        } });
        ha[I] = q(a(I), "constructor", kc);
        return m(ha[I]);
      }, J = function G(u) {
        if (this instanceof G) throw new TypeError("Symbol is not a constructor");
        return n("__symbol:".concat(u || "", e, ++d));
      }, ha = k(null), kc = { value: J }, ib = function(u) {
        return ha[u];
      }, Va = function(u, G, p) {
        var r = String(G);
        if (ia(r)) {
          G = xa;
          if (p.enumerable) {
            var B = k(p);
            B.enumerable = false;
          } else B = p;
          G(u, r, B);
          y(u, r, !!p.enumerable);
        } else q(u, G, p);
        return u;
      }, jb = function(u) {
        return g(u).filter(ia).map(ib);
      };
      C.value = Va;
      q(a, "defineProperty", C);
      C.value = jb;
      q(a, b, C);
      C.value = function(u) {
        return g(u).filter(ta);
      };
      q(a, "getOwnPropertyNames", C);
      C.value = function(u, G) {
        var p = jb(G);
        p.length ? l(G).concat(p).forEach(function(r) {
          sa.call(
            G,
            r
          ) && Va(u, r, G[r]);
        }) : H(u, G);
        return u;
      };
      q(a, "defineProperties", C);
      C.value = sa;
      q(t, "propertyIsEnumerable", C);
      C.value = J;
      q(c, "Symbol", C);
      C.value = function(u) {
        u = "__symbol:".concat("__symbol:", u, e);
        return u in t ? ha[u] : n(u);
      };
      q(J, "for", C);
      C.value = function(u) {
        if (ta(u)) throw new TypeError(u + " is not a symbol");
        if (F.call(ha, u) && (u = u.slice(10), "__symbol:" === u.slice(0, 10) && (u = u.slice(10), u !== e))) return u = u.slice(0, u.length - e.length), 0 < u.length ? u : void 0;
      };
      q(J, "keyFor", C);
      C.value = function(u, G) {
        var p = h(u, G);
        p && ia(G) && (p.enumerable = sa.call(u, G));
        return p;
      };
      q(a, "getOwnPropertyDescriptor", C);
      C.value = function(u, G) {
        return 1 === arguments.length || "undefined" === typeof G ? k(u) : X(u, G);
      };
      q(a, "create", C);
      C.value = function() {
        var u = N.call(this);
        return "[object String]" === u && ia(this) ? "[object Symbol]" : u;
      };
      q(t, "toString", C);
      try {
        if (true === k(q({}, "__symbol:", { get: function() {
          return q(this, "__symbol:", { value: true })["__symbol:"];
        } }))["__symbol:"]) var xa = q;
        else throw "IE11";
      } catch (u) {
        xa = function(G, p, r) {
          var B = h(t, p);
          delete t[p];
          q(G, p, r);
          q(t, p, B);
        };
      }
    }
  })(Object, "getOwnPropertySymbols");
  (function(a, b) {
    var c = a.defineProperty, d = a.prototype, e = d.toString, f;
    "iterator match replace search split hasInstance isConcatSpreadable unscopables species toPrimitive toStringTag".split(" ").forEach(function(g) {
      g in b || (c(b, g, { value: b(g) }), "toStringTag" === g && (f = a.getOwnPropertyDescriptor(d, "toString"), f.value = function() {
        var h = e.call(this), k = null == this ? this : this[b.toStringTag];
        return null == k ? h : "[object " + k + "]";
      }, c(d, "toString", f)));
    });
  })(Object, Symbol);
  (function(a, b, c) {
    function d() {
      return this;
    }
    b[a] || (b[a] = function() {
      var e = 0, f = this, g = { next: function() {
        var h = f.length <= e;
        return h ? { done: h } : { done: h, value: f[e++] };
      } };
      g[a] = d;
      return g;
    });
    c[a] || (c[a] = function() {
      var e = String.fromCodePoint, f = this, g = 0, h = f.length, k = { next: function() {
        var l = h <= g, m = l ? "" : e(f.codePointAt(g));
        g += m.length;
        return l ? { done: l } : { done: l, value: m };
      } };
      k[a] = d;
      return k;
    });
  })(Symbol.iterator, Array.prototype, String.prototype);
  var Wa = Object.prototype.toString;
  Object.prototype.toString = function() {
    return void 0 === this ? "[object Undefined]" : null === this ? "[object Null]" : Wa.call(this);
  };
  Object.keys = function(a) {
    return Object.getOwnPropertyNames(a).filter(function(b) {
      return (b = Object.getOwnPropertyDescriptor(a, b)) && b.enumerable;
    });
  };
  String.prototype[Symbol.iterator] && String.prototype.codePointAt || (String.prototype[Symbol.iterator] = function Xa() {
    var b, c = this;
    return Ea(Xa, function(d) {
      1 == d.g && (b = 0);
      if (3 != d.g) return b < c.length ? d = ya(d, c[b]) : (d.g = 0, d = void 0), d;
      b++;
      d.g = 2;
    });
  });
  Set.prototype[Symbol.iterator] || (Set.prototype[Symbol.iterator] = function Ya() {
    var b, c = this, d;
    return Ea(Ya, function(e) {
      1 == e.g && (b = [], c.forEach(function(f) {
        b.push(f);
      }), d = 0);
      if (3 != e.g) return d < b.length ? e = ya(e, b[d]) : (e.g = 0, e = void 0), e;
      d++;
      e.g = 2;
    });
  });
  Map.prototype[Symbol.iterator] || (Map.prototype[Symbol.iterator] = function Za() {
    var b, c = this, d;
    return Ea(Za, function(e) {
      1 == e.g && (b = [], c.forEach(function(f, g) {
        b.push([g, f]);
      }), d = 0);
      if (3 != e.g) return d < b.length ? e = ya(e, b[d]) : (e.g = 0, e = void 0), e;
      d++;
      e.g = 2;
    });
  });
  var $a = document.createEvent("Event");
  $a.initEvent("foo", true, true);
  $a.preventDefault();
  if (!$a.defaultPrevented) {
    var ab = Event.prototype.preventDefault;
    Event.prototype.preventDefault = function() {
      this.cancelable && (ab.call(this), Object.defineProperty(this, "defaultPrevented", { get: function() {
        return true;
      }, configurable: true }));
    };
  }
  var bb = /Trident/.test(navigator.userAgent);
  if (!window.Event || bb && "function" !== typeof window.Event) {
    var cb = window.Event;
    window.Event = function(a, b) {
      b = b || {};
      var c = document.createEvent("Event");
      c.initEvent(a, !!b.bubbles, !!b.cancelable);
      return c;
    };
    if (cb) {
      for (var db in cb) window.Event[db] = cb[db];
      window.Event.prototype = cb.prototype;
    }
  }
  if (!window.CustomEvent || bb && "function" !== typeof window.CustomEvent) window.CustomEvent = function(a, b) {
    b = b || {};
    var c = document.createEvent("CustomEvent");
    c.initCustomEvent(a, !!b.bubbles, !!b.cancelable, b.detail);
    return c;
  }, window.CustomEvent.prototype = window.Event.prototype;
  if (!window.MouseEvent || bb && "function" !== typeof window.MouseEvent) {
    var eb = window.MouseEvent;
    window.MouseEvent = function(a, b) {
      b = b || {};
      var c = document.createEvent("MouseEvent");
      c.initMouseEvent(a, !!b.bubbles, !!b.cancelable, b.view || window, b.detail, b.screenX, b.screenY, b.clientX, b.clientY, b.ctrlKey, b.altKey, b.shiftKey, b.metaKey, b.button, b.relatedTarget);
      return c;
    };
    if (eb) for (var fb in eb) window.MouseEvent[fb] = eb[fb];
    window.MouseEvent.prototype = eb.prototype;
  }
  var gb, hb = function() {
    function a() {
      e++;
    }
    var b = false, c = false, d = { get capture() {
      return b = true;
    }, get once() {
      return c = true;
    } }, e = 0, f = document.createElement("div");
    f.addEventListener("click", a, d);
    var g = b && c;
    g && (f.dispatchEvent(new Event("click")), f.dispatchEvent(new Event("click")), g = 1 == e);
    f.removeEventListener("click", a, d);
    return g;
  }(), kb = null !== (gb = window.EventTarget) && void 0 !== gb ? gb : window.Node;
  if (!hb && "addEventListener" in kb.prototype) {
    var lb = function(a) {
      if (!a || "object" !== typeof a && "function" !== typeof a) {
        var b = !!a;
        a = false;
      } else b = !!a.capture, a = !!a.once;
      return { capture: b, once: a };
    }, mb = kb.prototype.addEventListener, nb = kb.prototype.removeEventListener, qb = /* @__PURE__ */ new WeakMap(), rb = /* @__PURE__ */ new WeakMap(), sb = function(a, b, c) {
      var d = c ? qb : rb;
      c = d.get(a);
      void 0 === c && d.set(a, c = /* @__PURE__ */ new Map());
      a = c.get(b);
      void 0 === a && c.set(b, a = /* @__PURE__ */ new WeakMap());
      return a;
    };
    kb.prototype.addEventListener = function(a, b, c) {
      var d = this;
      if (null != b) {
        c = lb(c);
        var e = c.capture;
        c = c.once;
        var f = sb(this, a, e);
        if (!f.has(b)) {
          var g = c ? function(h) {
            f.delete(b);
            nb.call(d, a, g, e);
            if ("function" === typeof b) return b.call(d, h);
            if ("function" === typeof (null === b || void 0 === b ? void 0 : b.handleEvent)) return b.handleEvent(h);
          } : null;
          f.set(b, g);
          mb.call(this, a, null !== g && void 0 !== g ? g : b, e);
        }
      }
    };
    kb.prototype.removeEventListener = function(a, b, c) {
      if (null != b) {
        c = lb(c).capture;
        var d = sb(this, a, c), e = d.get(b);
        void 0 !== e && (d.delete(b), nb.call(this, a, null !== e && void 0 !== e ? e : b, c));
      }
    };
  }
  Object.getOwnPropertyDescriptor(Node.prototype, "baseURI") || Object.defineProperty(Node.prototype, "baseURI", { get: function() {
    var a = (this.ownerDocument || this).querySelector("base[href]");
    return a && a.href || window.location.href;
  }, configurable: true, enumerable: true });
  var tb, ub, vb = Element.prototype, wb = null !== (tb = Object.getOwnPropertyDescriptor(vb, "attributes")) && void 0 !== tb ? tb : Object.getOwnPropertyDescriptor(Node.prototype, "attributes"), xb = null !== (ub = null === wb || void 0 === wb ? void 0 : wb.get) && void 0 !== ub ? ub : function() {
    return this.attributes;
  }, yb = Array.prototype.map;
  vb.hasOwnProperty("getAttributeNames") || (vb.getAttributeNames = function() {
    return yb.call(xb.call(this), function(a) {
      return a.name;
    });
  });
  var zb, Ab = Element.prototype;
  Ab.hasOwnProperty("matches") || (Ab.matches = null !== (zb = Ab.webkitMatchesSelector) && void 0 !== zb ? zb : Ab.msMatchesSelector);
  var Bb = Node.prototype.appendChild;
  function Cb(a) {
    a = a.prototype;
    a.hasOwnProperty("append") || Object.defineProperty(a, "append", { configurable: true, enumerable: true, writable: true, value: function(b) {
      for (var c = [], d = 0; d < arguments.length; ++d) c[d] = arguments[d];
      c = ka(c);
      for (d = c.next(); !d.done; d = c.next()) d = d.value, Bb.call(this, "string" === typeof d ? document.createTextNode(d) : d);
    } });
  }
  Cb(Document);
  Cb(DocumentFragment);
  Cb(Element);
  var Db, Eb, Fb = Node.prototype.insertBefore, Gb = null !== (Eb = null === (Db = Object.getOwnPropertyDescriptor(Node.prototype, "firstChild")) || void 0 === Db ? void 0 : Db.get) && void 0 !== Eb ? Eb : function() {
    return this.firstChild;
  };
  function Hb(a) {
    a = a.prototype;
    a.hasOwnProperty("prepend") || Object.defineProperty(a, "prepend", { configurable: true, enumerable: true, writable: true, value: function(b) {
      for (var c = [], d = 0; d < arguments.length; ++d) c[d] = arguments[d];
      d = Gb.call(this);
      c = ka(c);
      for (var e = c.next(); !e.done; e = c.next()) e = e.value, Fb.call(this, "string" === typeof e ? document.createTextNode(e) : e, d);
    } });
  }
  Hb(Document);
  Hb(DocumentFragment);
  Hb(Element);
  var Ib, Jb, Kb = Node.prototype.appendChild, Lb = Node.prototype.removeChild, Mb = null !== (Jb = null === (Ib = Object.getOwnPropertyDescriptor(Node.prototype, "firstChild")) || void 0 === Ib ? void 0 : Ib.get) && void 0 !== Jb ? Jb : function() {
    return this.firstChild;
  };
  function Nb(a) {
    a = a.prototype;
    a.hasOwnProperty("replaceChildren") || Object.defineProperty(a, "replaceChildren", { configurable: true, enumerable: true, writable: true, value: function(b) {
      for (var c = [], d = 0; d < arguments.length; ++d) c[d] = arguments[d];
      for (; null !== (d = Mb.call(this)); ) Lb.call(this, d);
      c = ka(c);
      for (d = c.next(); !d.done; d = c.next()) d = d.value, Kb.call(this, "string" === typeof d ? document.createTextNode(d) : d);
    } });
  }
  Nb(Document);
  Nb(DocumentFragment);
  Nb(Element);
  var Ob, Pb, Qb, Rb, Sb = Node.prototype.insertBefore, Tb = null !== (Pb = null === (Ob = Object.getOwnPropertyDescriptor(Node.prototype, "parentNode")) || void 0 === Ob ? void 0 : Ob.get) && void 0 !== Pb ? Pb : function() {
    return this.parentNode;
  }, Ub = null !== (Rb = null === (Qb = Object.getOwnPropertyDescriptor(Node.prototype, "nextSibling")) || void 0 === Qb ? void 0 : Qb.get) && void 0 !== Rb ? Rb : function() {
    return this.nextSibling;
  };
  function Vb(a) {
    a = a.prototype;
    a.hasOwnProperty("after") || Object.defineProperty(a, "after", { configurable: true, enumerable: true, writable: true, value: function(b) {
      for (var c = [], d = 0; d < arguments.length; ++d) c[d] = arguments[d];
      d = Tb.call(this);
      if (null !== d) {
        var e = Ub.call(this);
        c = ka(c);
        for (var f = c.next(); !f.done; f = c.next()) f = f.value, Sb.call(d, "string" === typeof f ? document.createTextNode(f) : f, e);
      }
    } });
  }
  Vb(CharacterData);
  Vb(Element);
  var Wb, Xb, Yb = Node.prototype.insertBefore, Zb = null !== (Xb = null === (Wb = Object.getOwnPropertyDescriptor(Node.prototype, "parentNode")) || void 0 === Wb ? void 0 : Wb.get) && void 0 !== Xb ? Xb : function() {
    return this.parentNode;
  };
  function $b(a) {
    a = a.prototype;
    a.hasOwnProperty("before") || Object.defineProperty(a, "before", { configurable: true, enumerable: true, writable: true, value: function(b) {
      for (var c = [], d = 0; d < arguments.length; ++d) c[d] = arguments[d];
      d = Zb.call(this);
      if (null !== d) {
        c = ka(c);
        for (var e = c.next(); !e.done; e = c.next()) e = e.value, Yb.call(d, "string" === typeof e ? document.createTextNode(e) : e, this);
      }
    } });
  }
  $b(CharacterData);
  $b(Element);
  var ac, bc, cc = Node.prototype.removeChild, dc = null !== (bc = null === (ac = Object.getOwnPropertyDescriptor(Node.prototype, "parentNode")) || void 0 === ac ? void 0 : ac.get) && void 0 !== bc ? bc : function() {
    return this.parentNode;
  };
  function ec(a) {
    a = a.prototype;
    a.hasOwnProperty("remove") || Object.defineProperty(a, "remove", { configurable: true, enumerable: true, writable: true, value: function() {
      var b = dc.call(this);
      b && cc.call(b, this);
    } });
  }
  ec(CharacterData);
  ec(Element);
  var fc, gc, hc = Node.prototype.insertBefore, ic = Node.prototype.removeChild, jc = null !== (gc = null === (fc = Object.getOwnPropertyDescriptor(Node.prototype, "parentNode")) || void 0 === fc ? void 0 : fc.get) && void 0 !== gc ? gc : function() {
    return this.parentNode;
  };
  function lc(a) {
    a = a.prototype;
    a.hasOwnProperty("replaceWith") || Object.defineProperty(a, "replaceWith", { configurable: true, enumerable: true, writable: true, value: function(b) {
      for (var c = [], d = 0; d < arguments.length; ++d) c[d] = arguments[d];
      d = jc.call(this);
      if (null !== d) {
        c = ka(c);
        for (var e = c.next(); !e.done; e = c.next()) e = e.value, hc.call(d, "string" === typeof e ? document.createTextNode(e) : e, this);
        ic.call(d, this);
      }
    } });
  }
  lc(CharacterData);
  lc(Element);
  var mc = window.Element.prototype, nc = window.HTMLElement.prototype, oc = window.SVGElement.prototype;
  !nc.hasOwnProperty("classList") || mc.hasOwnProperty("classList") || oc.hasOwnProperty("classList") || Object.defineProperty(mc, "classList", Object.getOwnPropertyDescriptor(nc, "classList"));
  var pc = Element.prototype, qc = Element.prototype.hasAttribute, rc = Element.prototype.setAttribute, sc = Element.prototype.removeAttribute;
  pc.hasOwnProperty("toggleAttribute") || (pc.toggleAttribute = function(a, b) {
    if (void 0 === b) {
      if (qc.call(this, a)) return sc.call(this, a), false;
      rc.call(this, a, "");
      return true;
    }
    if (b) return qc.call(this, a) || rc.call(this, a, ""), true;
    sc.call(this, a);
    return false;
  });
  var tc = document.createElement("style");
  tc.textContent = "body {transition: opacity ease-in 0.2s; } \nbody[unresolved] {opacity: 0; display: block; overflow: hidden; position: relative; } \n";
  var uc = document.querySelector("head");
  uc.insertBefore(tc, uc.firstChild);
  var vc = window;
  vc.WebComponents = vc.WebComponents || { flags: {} };
  var wc = document.querySelector('script[src*="webcomponents-bundle"]'), xc = /wc-(.+)/, yc = {};
  if (!yc.noOpts) {
    location.search.slice(1).split("&").forEach(function(a) {
      a = a.split("=");
      var b;
      a[0] && (b = a[0].match(xc)) && (yc[b[1]] = a[1] || true);
    });
    if (wc) for (var zc = 0, Ac = void 0; Ac = wc.attributes[zc]; zc++) "src" !== Ac.name && (yc[Ac.name] = Ac.value || true);
    var Bc = {};
    yc.log && yc.log.split && yc.log.split(",").forEach(function(a) {
      Bc[a] = true;
    });
    yc.log = Bc;
  }
  vc.WebComponents.flags = yc;
  var Cc = yc.shadydom;
  if (Cc) {
    vc.ShadyDOM = vc.ShadyDOM || {};
    vc.ShadyDOM.force = Cc;
    var Dc = yc.noPatch;
    vc.ShadyDOM.noPatch = "true" === Dc ? true : Dc;
  }
  var Ec = yc.register || yc.ce;
  Ec && window.customElements && (vc.customElements.forcePolyfill = Ec);
  (function() {
    function a() {
    }
    function b(p, r) {
      if (!p.childNodes.length) return [];
      switch (p.nodeType) {
        case Node.DOCUMENT_NODE:
          return F.call(p, r);
        case Node.DOCUMENT_FRAGMENT_NODE:
          return E.call(p, r);
        default:
          return t.call(p, r);
      }
    }
    var c = "undefined" === typeof HTMLTemplateElement, d = !(document.createDocumentFragment().cloneNode() instanceof DocumentFragment), e = false;
    /Trident/.test(navigator.userAgent) && function() {
      function p(z, R) {
        if (z instanceof DocumentFragment) for (var ob; ob = z.firstChild; ) B.call(this, ob, R);
        else B.call(
          this,
          z,
          R
        );
        return z;
      }
      e = true;
      var r = Node.prototype.cloneNode;
      Node.prototype.cloneNode = function(z) {
        z = r.call(this, z);
        this instanceof DocumentFragment && (z.__proto__ = DocumentFragment.prototype);
        return z;
      };
      DocumentFragment.prototype.querySelectorAll = HTMLElement.prototype.querySelectorAll;
      DocumentFragment.prototype.querySelector = HTMLElement.prototype.querySelector;
      Object.defineProperties(DocumentFragment.prototype, { nodeType: { get: function() {
        return Node.DOCUMENT_FRAGMENT_NODE;
      }, configurable: true }, localName: {
        get: function() {
        },
        configurable: true
      }, nodeName: { get: function() {
        return "#document-fragment";
      }, configurable: true } });
      var B = Node.prototype.insertBefore;
      Node.prototype.insertBefore = p;
      var K = Node.prototype.appendChild;
      Node.prototype.appendChild = function(z) {
        z instanceof DocumentFragment ? p.call(this, z, null) : K.call(this, z);
        return z;
      };
      var aa = Node.prototype.removeChild, ma = Node.prototype.replaceChild;
      Node.prototype.replaceChild = function(z, R) {
        z instanceof DocumentFragment ? (p.call(this, z, R), aa.call(this, R)) : ma.call(this, z, R);
        return R;
      };
      Document.prototype.createDocumentFragment = function() {
        var z = this.createElement("df");
        z.__proto__ = DocumentFragment.prototype;
        return z;
      };
      var va = Document.prototype.importNode;
      Document.prototype.importNode = function(z, R) {
        R = va.call(this, z, R || false);
        z instanceof DocumentFragment && (R.__proto__ = DocumentFragment.prototype);
        return R;
      };
    }();
    var f = Node.prototype.cloneNode, g = Document.prototype.createElement, h = Document.prototype.importNode, k = Node.prototype.removeChild, l = Node.prototype.appendChild, m = Node.prototype.replaceChild, q = DOMParser.prototype.parseFromString, H = Object.getOwnPropertyDescriptor(window.HTMLElement.prototype, "innerHTML") || { get: function() {
      return this.innerHTML;
    }, set: function(p) {
      this.innerHTML = p;
    } }, C = Object.getOwnPropertyDescriptor(window.Node.prototype, "childNodes") || { get: function() {
      return this.childNodes;
    } }, t = Element.prototype.querySelectorAll, F = Document.prototype.querySelectorAll, E = DocumentFragment.prototype.querySelectorAll, N = function() {
      if (!c) {
        var p = document.createElement("template"), r = document.createElement("template");
        r.content.appendChild(document.createElement("div"));
        p.content.appendChild(r);
        p = p.cloneNode(true);
        return 0 === p.content.childNodes.length || 0 === p.content.firstChild.content.childNodes.length || d;
      }
    }();
    if (c) {
      var y = document.implementation.createHTMLDocument("template"), X = true, x = document.createElement("style");
      x.textContent = "template{display:none;}";
      var ta = document.head;
      ta.insertBefore(x, ta.firstElementChild);
      a.prototype = Object.create(HTMLElement.prototype);
      var ia = !document.createElement("div").hasOwnProperty("innerHTML");
      a.Z = function(p) {
        if (!p.content && p.namespaceURI === document.documentElement.namespaceURI) {
          p.content = y.createDocumentFragment();
          for (var r; r = p.firstChild; ) l.call(p.content, r);
          if (ia) p.__proto__ = a.prototype;
          else if (p.cloneNode = function(B) {
            return a.va(this, B);
          }, X) try {
            n(p), J(p);
          } catch (B) {
            X = false;
          }
          a.bootstrap(p.content);
        }
      };
      var sa = { option: ["select"], thead: ["table"], col: ["colgroup", "table"], tr: ["tbody", "table"], th: ["tr", "tbody", "table"], td: ["tr", "tbody", "table"] }, n = function(p) {
        Object.defineProperty(p, "innerHTML", { get: function() {
          return xa(this);
        }, set: function(r) {
          var B = sa[(/<([a-z][^/\0>\x20\t\r\n\f]+)/i.exec(r) || ["", ""])[1].toLowerCase()];
          if (B) for (var K = 0; K < B.length; K++) r = "<" + B[K] + ">" + r + "</" + B[K] + ">";
          y.body.innerHTML = r;
          for (a.bootstrap(y); this.content.firstChild; ) k.call(this.content, this.content.firstChild);
          r = y.body;
          if (B) for (K = 0; K < B.length; K++) r = r.lastChild;
          for (; r.firstChild; ) l.call(this.content, r.firstChild);
        }, configurable: true });
      }, J = function(p) {
        Object.defineProperty(p, "outerHTML", { get: function() {
          return "<template>" + this.innerHTML + "</template>";
        }, set: function(r) {
          if (this.parentNode) {
            y.body.innerHTML = r;
            for (r = this.ownerDocument.createDocumentFragment(); y.body.firstChild; ) l.call(r, y.body.firstChild);
            m.call(this.parentNode, r, this);
          } else throw Error("Failed to set the 'outerHTML' property on 'Element': This element has no parent node.");
        }, configurable: true });
      };
      n(a.prototype);
      J(a.prototype);
      a.bootstrap = function(p) {
        p = b(p, "template");
        for (var r = 0, B = p.length, K; r < B && (K = p[r]); r++) a.Z(K);
      };
      document.addEventListener("DOMContentLoaded", function() {
        a.bootstrap(document);
      });
      Document.prototype.createElement = function() {
        var p = g.apply(this, arguments);
        "template" === p.localName && a.Z(p);
        return p;
      };
      DOMParser.prototype.parseFromString = function() {
        var p = q.apply(this, arguments);
        a.bootstrap(p);
        return p;
      };
      Object.defineProperty(HTMLElement.prototype, "innerHTML", { get: function() {
        return xa(this);
      }, set: function(p) {
        H.set.call(this, p);
        a.bootstrap(this);
      }, configurable: true, enumerable: true });
      var ha = /[&\u00A0"]/g, kc = /[&\u00A0<>]/g, ib = function(p) {
        switch (p) {
          case "&":
            return "&amp;";
          case "<":
            return "&lt;";
          case ">":
            return "&gt;";
          case '"':
            return "&quot;";
          case " ":
            return "&nbsp;";
        }
      };
      x = function(p) {
        for (var r = {}, B = 0; B < p.length; B++) r[p[B]] = true;
        return r;
      };
      var Va = x("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")), jb = x("style script xmp iframe noembed noframes plaintext noscript".split(" ")), xa = function(p, r) {
        "template" === p.localName && (p = p.content);
        for (var B = "", K = r ? r(p) : C.get.call(p), aa = 0, ma = K.length, va; aa < ma && (va = K[aa]); aa++) {
          a: {
            var z = va;
            var R = p;
            var ob = r;
            switch (z.nodeType) {
              case Node.ELEMENT_NODE:
                for (var Kc = z.localName, pb = "<" + Kc, Zh = z.attributes, He = 0; R = Zh[He]; He++) pb += " " + R.name + '="' + R.value.replace(ha, ib) + '"';
                pb += ">";
                z = Va[Kc] ? pb : pb + xa(z, ob) + "</" + Kc + ">";
                break a;
              case Node.TEXT_NODE:
                z = z.data;
                z = R && jb[R.localName] ? z : z.replace(kc, ib);
                break a;
              case Node.COMMENT_NODE:
                z = "<!--" + z.data + "-->";
                break a;
              default:
                throw window.console.error(z), Error("not implemented");
            }
          }
          B += z;
        }
        return B;
      };
    }
    if (c || N) {
      a.va = function(p, r) {
        var B = f.call(p, false);
        this.Z && this.Z(B);
        r && (l.call(B.content, f.call(p.content, true)), I(B.content, p.content));
        return B;
      };
      var I = function(p, r) {
        if (r.querySelectorAll && (r = b(r, "template"), 0 !== r.length)) {
          p = b(p, "template");
          for (var B = 0, K = p.length, aa, ma; B < K; B++) ma = r[B], aa = p[B], a && a.Z && a.Z(ma), m.call(aa.parentNode, u.call(ma, true), aa);
        }
      }, u = Node.prototype.cloneNode = function(p) {
        if (!e && d && this instanceof DocumentFragment) if (p) var r = G.call(this.ownerDocument, this, true);
        else return this.ownerDocument.createDocumentFragment();
        else this.nodeType === Node.ELEMENT_NODE && "template" === this.localName && this.namespaceURI == document.documentElement.namespaceURI ? r = a.va(this, p) : r = f.call(
          this,
          p
        );
        p && I(r, this);
        return r;
      }, G = Document.prototype.importNode = function(p, r) {
        r = r || false;
        if ("template" === p.localName) return a.va(p, r);
        var B = h.call(this, p, r);
        if (r) {
          I(B, p);
          p = b(B, 'script:not([type]),script[type="application/javascript"],script[type="text/javascript"]');
          for (var K, aa = 0; aa < p.length; aa++) {
            K = p[aa];
            r = g.call(document, "script");
            r.textContent = K.textContent;
            for (var ma = K.attributes, va = 0, z; va < ma.length; va++) z = ma[va], r.setAttribute(z.name, z.value);
            m.call(K.parentNode, r, K);
          }
        }
        return B;
      };
    }
    c && (window.HTMLTemplateElement = a);
  })();
  function Fc() {
  }
  Fc.prototype.toJSON = function() {
    return {};
  };
  function D(a) {
    a.__shady || (a.__shady = new Fc());
    return a.__shady;
  }
  function L(a) {
    return a && a.__shady;
  }
  var M = window.ShadyDOM || {};
  M.cb = !(!Element.prototype.attachShadow || !Node.prototype.getRootNode);
  var Gc = Object.getOwnPropertyDescriptor(Node.prototype, "firstChild");
  M.D = !!(Gc && Gc.configurable && Gc.get);
  M.Ba = M.force || !M.cb;
  M.J = M.noPatch || false;
  M.ha = M.preferPerformance;
  M.Da = "on-demand" === M.J;
  var Hc;
  var Ic = M.querySelectorImplementation;
  Hc = -1 < ["native", "selectorEngine"].indexOf(Ic) ? Ic : void 0;
  M.wb = Hc;
  M.Ra = navigator.userAgent.match("Trident");
  function Jc() {
    return Document.prototype.msElementsFromPoint ? "msElementsFromPoint" : "elementsFromPoint";
  }
  function Lc(a) {
    return (a = L(a)) && void 0 !== a.firstChild;
  }
  function O(a) {
    return a instanceof ShadowRoot;
  }
  function Mc(a) {
    return (a = (a = L(a)) && a.root) && Nc(a);
  }
  var Oc = Element.prototype, Pc = Oc.matches || Oc.matchesSelector || Oc.mozMatchesSelector || Oc.msMatchesSelector || Oc.oMatchesSelector || Oc.webkitMatchesSelector, Qc = document.createTextNode(""), Rc = 0, Sc = [];
  new MutationObserver(function() {
    for (; Sc.length; ) try {
      Sc.shift()();
    } catch (a) {
      throw Qc.textContent = Rc++, a;
    }
  }).observe(Qc, { characterData: true });
  function Tc(a) {
    Sc.push(a);
    Qc.textContent = Rc++;
  }
  var Uc = document.contains ? function(a, b) {
    return a.__shady_native_contains(b);
  } : function(a, b) {
    return a === b || a.documentElement && a.documentElement.__shady_native_contains(b);
  };
  function Vc(a, b) {
    for (; b; ) {
      if (b == a) return true;
      b = b.__shady_parentNode;
    }
    return false;
  }
  function Wc(a) {
    for (var b = a.length - 1; 0 <= b; b--) {
      var c = a[b], d = c.getAttribute("id") || c.getAttribute("name");
      d && "length" !== d && isNaN(d) && (a[d] = c);
    }
    a.item = function(e) {
      return a[e];
    };
    a.namedItem = function(e) {
      if ("length" !== e && isNaN(e) && a[e]) return a[e];
      for (var f = ka(a), g = f.next(); !g.done; g = f.next()) if (g = g.value, (g.getAttribute("id") || g.getAttribute("name")) == e) return g;
      return null;
    };
    return a;
  }
  function Xc(a) {
    var b = [];
    for (a = a.__shady_native_firstChild; a; a = a.__shady_native_nextSibling) b.push(a);
    return b;
  }
  function Yc(a) {
    var b = [];
    for (a = a.__shady_firstChild; a; a = a.__shady_nextSibling) b.push(a);
    return b;
  }
  function Zc(a, b, c) {
    c.configurable = true;
    if (c.value) a[b] = c.value;
    else try {
      Object.defineProperty(a, b, c);
    } catch (d) {
    }
  }
  function P(a, b, c, d) {
    c = void 0 === c ? "" : c;
    for (var e in b) d && 0 <= d.indexOf(e) || Zc(a, c + e, b[e]);
  }
  function $c(a, b) {
    for (var c in b) c in a && Zc(a, c, b[c]);
  }
  function Q(a) {
    var b = {};
    Object.getOwnPropertyNames(a).forEach(function(c) {
      b[c] = Object.getOwnPropertyDescriptor(a, c);
    });
    return b;
  }
  function ad(a, b) {
    for (var c = Object.getOwnPropertyNames(b), d = 0, e; d < c.length; d++) e = c[d], a[e] = b[e];
  }
  function bd(a) {
    return a instanceof Node ? a : document.createTextNode("" + a);
  }
  function cd(a) {
    for (var b = [], c = 0; c < arguments.length; ++c) b[c] = arguments[c];
    if (1 === b.length) return bd(b[0]);
    c = document.createDocumentFragment();
    b = ka(b);
    for (var d = b.next(); !d.done; d = b.next()) c.appendChild(bd(d.value));
    return c;
  }
  function dd(a) {
    var b;
    for (b = void 0 === b ? 1 : b; 0 < b; b--) a = a.reduce(function(c, d) {
      Array.isArray(d) ? c.push.apply(c, w(d)) : c.push(d);
      return c;
    }, []);
    return a;
  }
  function ed(a) {
    var b = [], c = /* @__PURE__ */ new Set();
    a = ka(a);
    for (var d = a.next(); !d.done; d = a.next()) d = d.value, c.has(d) || (b.push(d), c.add(d));
    return b;
  }
  var fd = [], gd;
  function hd(a) {
    gd || (gd = true, Tc(id));
    fd.push(a);
  }
  function id() {
    gd = false;
    for (var a = !!fd.length; fd.length; ) fd.shift()();
    return a;
  }
  id.list = fd;
  function jd() {
    this.g = false;
    this.addedNodes = [];
    this.removedNodes = [];
    this.qa = /* @__PURE__ */ new Set();
  }
  function kd(a) {
    a.g || (a.g = true, Tc(function() {
      a.flush();
    }));
  }
  jd.prototype.flush = function() {
    if (this.g) {
      this.g = false;
      var a = this.takeRecords();
      a.length && this.qa.forEach(function(b) {
        b(a);
      });
    }
  };
  jd.prototype.takeRecords = function() {
    if (this.addedNodes.length || this.removedNodes.length) {
      var a = [{ addedNodes: this.addedNodes, removedNodes: this.removedNodes }];
      this.addedNodes = [];
      this.removedNodes = [];
      return a;
    }
    return [];
  };
  function ld(a, b) {
    var c = D(a);
    c.ga || (c.ga = new jd());
    c.ga.qa.add(b);
    var d = c.ga;
    return { Va: b, X: d, Wa: a, takeRecords: function() {
      return d.takeRecords();
    } };
  }
  function md(a) {
    var b = a && a.X;
    b && (b.qa.delete(a.Va), b.qa.size || (D(a.Wa).ga = null));
  }
  function nd(a, b) {
    var c = b.getRootNode();
    return a.map(function(d) {
      var e = c === d.target.getRootNode();
      if (e && d.addedNodes) {
        if (e = [].slice.call(d.addedNodes).filter(function(f) {
          return c === f.getRootNode();
        }), e.length) return d = Object.create(d), Object.defineProperty(d, "addedNodes", { value: e, configurable: true }), d;
      } else if (e) return d;
    }).filter(function(d) {
      return d;
    });
  }
  var od = /[&\u00A0"]/g, pd = /[&\u00A0<>]/g;
  function qd(a) {
    switch (a) {
      case "&":
        return "&amp;";
      case "<":
        return "&lt;";
      case ">":
        return "&gt;";
      case '"':
        return "&quot;";
      case " ":
        return "&nbsp;";
    }
  }
  function rd(a) {
    for (var b = {}, c = 0; c < a.length; c++) b[a[c]] = true;
    return b;
  }
  var sd = rd("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")), td = rd("style script xmp iframe noembed noframes plaintext noscript".split(" "));
  function ud(a, b) {
    "template" === a.localName && (a = a.content);
    for (var c = "", d = b ? b(a) : a.childNodes, e = 0, f = d.length, g = void 0; e < f && (g = d[e]); e++) {
      a: {
        var h = g;
        var k = a, l = b;
        switch (h.nodeType) {
          case Node.ELEMENT_NODE:
            k = h.localName;
            for (var m = "<" + k, q = h.attributes, H = 0, C; C = q[H]; H++) m += " " + C.name + '="' + C.value.replace(od, qd) + '"';
            m += ">";
            h = sd[k] ? m : m + ud(h, l) + "</" + k + ">";
            break a;
          case Node.TEXT_NODE:
            h = h.data;
            h = k && td[k.localName] ? h : h.replace(pd, qd);
            break a;
          case Node.COMMENT_NODE:
            h = "<!--" + h.data + "-->";
            break a;
          default:
            throw window.console.error(h), Error("not implemented");
        }
      }
      c += h;
    }
    return c;
  }
  var vd = M.D, wd = { querySelector: function(a) {
    return this.__shady_native_querySelector(a);
  }, querySelectorAll: function(a) {
    return this.__shady_native_querySelectorAll(a);
  } }, xd = {};
  function yd(a) {
    xd[a] = function(b) {
      return b["__shady_native_" + a];
    };
  }
  function zd(a, b) {
    P(a, b, "__shady_native_");
    for (var c in b) yd(c);
  }
  function S(a, b) {
    b = void 0 === b ? [] : b;
    for (var c = 0; c < b.length; c++) {
      var d = b[c], e = Object.getOwnPropertyDescriptor(a, d);
      e && (Object.defineProperty(a, "__shady_native_" + d, e), e.value ? wd[d] || (wd[d] = e.value) : yd(d));
    }
  }
  var Ad = document.createTreeWalker(document, NodeFilter.SHOW_ALL, null, false), Bd = document.createTreeWalker(document, NodeFilter.SHOW_ELEMENT, null, false), Cd = document.implementation.createHTMLDocument("inert");
  function Dd(a) {
    for (var b; b = a.__shady_native_firstChild; ) a.__shady_native_removeChild(b);
  }
  var Ed = ["firstElementChild", "lastElementChild", "children", "childElementCount"], Fd = ["querySelector", "querySelectorAll", "append", "prepend", "replaceChildren"];
  function Gd() {
    var a = ["dispatchEvent", "addEventListener", "removeEventListener"];
    window.EventTarget ? (S(window.EventTarget.prototype, a), void 0 === window.__shady_native_addEventListener && S(Window.prototype, a)) : (S(Node.prototype, a), S(Window.prototype, a), S(XMLHttpRequest.prototype, a));
    vd ? S(Node.prototype, "parentNode firstChild lastChild previousSibling nextSibling childNodes parentElement textContent".split(" ")) : zd(Node.prototype, {
      parentNode: { get: function() {
        Ad.currentNode = this;
        return Ad.parentNode();
      } },
      firstChild: { get: function() {
        Ad.currentNode = this;
        return Ad.firstChild();
      } },
      lastChild: { get: function() {
        Ad.currentNode = this;
        return Ad.lastChild();
      } },
      previousSibling: { get: function() {
        Ad.currentNode = this;
        return Ad.previousSibling();
      } },
      nextSibling: { get: function() {
        Ad.currentNode = this;
        return Ad.nextSibling();
      } },
      childNodes: { get: function() {
        var b = [];
        Ad.currentNode = this;
        for (var c = Ad.firstChild(); c; ) b.push(c), c = Ad.nextSibling();
        return b;
      } },
      parentElement: { get: function() {
        Bd.currentNode = this;
        return Bd.parentNode();
      } },
      textContent: { get: function() {
        switch (this.nodeType) {
          case Node.ELEMENT_NODE:
          case Node.DOCUMENT_FRAGMENT_NODE:
            for (var b = document.createTreeWalker(this, NodeFilter.SHOW_TEXT, null, false), c = "", d; d = b.nextNode(); ) c += d.nodeValue;
            return c;
          default:
            return this.nodeValue;
        }
      }, set: function(b) {
        if ("undefined" === typeof b || null === b) b = "";
        switch (this.nodeType) {
          case Node.ELEMENT_NODE:
          case Node.DOCUMENT_FRAGMENT_NODE:
            Dd(this);
            (0 < b.length || this.nodeType === Node.ELEMENT_NODE) && this.__shady_native_insertBefore(document.createTextNode(b), void 0);
            break;
          default:
            this.nodeValue = b;
        }
      } }
    });
    S(Node.prototype, "appendChild insertBefore removeChild replaceChild cloneNode contains".split(" "));
    S(HTMLElement.prototype, ["parentElement", "contains"]);
    a = { firstElementChild: { get: function() {
      Bd.currentNode = this;
      return Bd.firstChild();
    } }, lastElementChild: { get: function() {
      Bd.currentNode = this;
      return Bd.lastChild();
    } }, children: { get: function() {
      var b = [];
      Bd.currentNode = this;
      for (var c = Bd.firstChild(); c; ) b.push(c), c = Bd.nextSibling();
      return Wc(b);
    } }, childElementCount: { get: function() {
      return this.children ? this.children.length : 0;
    } } };
    vd ? (S(Element.prototype, Ed), S(Element.prototype, [
      "previousElementSibling",
      "nextElementSibling",
      "innerHTML",
      "className"
    ]), S(HTMLElement.prototype, ["children", "innerHTML", "className"])) : (zd(Element.prototype, a), zd(Element.prototype, { previousElementSibling: { get: function() {
      Bd.currentNode = this;
      return Bd.previousSibling();
    } }, nextElementSibling: { get: function() {
      Bd.currentNode = this;
      return Bd.nextSibling();
    } }, innerHTML: { get: function() {
      return ud(this, Xc);
    }, set: function(b) {
      var c = "template" === this.localName ? this.content : this;
      Dd(c);
      var d = this.localName || "div";
      d = this.namespaceURI && this.namespaceURI !== Cd.namespaceURI ? Cd.createElementNS(this.namespaceURI, d) : Cd.createElement(d);
      d.innerHTML = b;
      for (b = "template" === this.localName ? d.content : d; d = b.__shady_native_firstChild; ) c.__shady_native_insertBefore(d, void 0);
    } }, className: { get: function() {
      return this.getAttribute("class") || "";
    }, set: function(b) {
      this.setAttribute("class", b);
    } } }));
    S(Element.prototype, "setAttribute getAttribute hasAttribute removeAttribute toggleAttribute focus blur".split(" "));
    S(Element.prototype, Fd);
    S(HTMLElement.prototype, ["focus", "blur"]);
    window.HTMLTemplateElement && S(window.HTMLTemplateElement.prototype, ["innerHTML"]);
    vd ? S(DocumentFragment.prototype, Ed) : zd(DocumentFragment.prototype, a);
    S(DocumentFragment.prototype, Fd);
    vd ? (S(Document.prototype, Ed), S(Document.prototype, ["activeElement"])) : zd(Document.prototype, a);
    S(Document.prototype, ["importNode", "getElementById", "elementFromPoint", Jc()]);
    S(Document.prototype, Fd);
  }
  var Hd = Q({ get childNodes() {
    return this.__shady_childNodes;
  }, get firstChild() {
    return this.__shady_firstChild;
  }, get lastChild() {
    return this.__shady_lastChild;
  }, get childElementCount() {
    return this.__shady_childElementCount;
  }, get children() {
    return this.__shady_children;
  }, get firstElementChild() {
    return this.__shady_firstElementChild;
  }, get lastElementChild() {
    return this.__shady_lastElementChild;
  }, get shadowRoot() {
    return this.__shady_shadowRoot;
  } }), Id = Q({ get textContent() {
    return this.__shady_textContent;
  }, set textContent(a) {
    this.__shady_textContent = a;
  }, get innerHTML() {
    return this.__shady_innerHTML;
  }, set innerHTML(a) {
    this.__shady_innerHTML = a;
  } }), Jd = Q({ get parentElement() {
    return this.__shady_parentElement;
  }, get parentNode() {
    return this.__shady_parentNode;
  }, get nextSibling() {
    return this.__shady_nextSibling;
  }, get previousSibling() {
    return this.__shady_previousSibling;
  }, get nextElementSibling() {
    return this.__shady_nextElementSibling;
  }, get previousElementSibling() {
    return this.__shady_previousElementSibling;
  }, get className() {
    return this.__shady_className;
  }, set className(a) {
    this.__shady_className = a;
  } });
  function Kd(a) {
    for (var b in a) {
      var c = a[b];
      c && (c.enumerable = false);
    }
  }
  Kd(Hd);
  Kd(Id);
  Kd(Jd);
  var Ld = M.D || true === M.J, Md = Ld ? function() {
  } : function(a) {
    var b = D(a);
    b.Ta || (b.Ta = true, $c(a, Jd));
  }, Nd = Ld ? function() {
  } : function(a) {
    var b = D(a);
    b.Sa || (b.Sa = true, $c(a, Hd), window.customElements && window.customElements.polyfillWrapFlushCallback && !M.J || $c(a, Id));
  };
  var Od = "__eventWrappers" + Date.now(), Pd = function() {
    var a = Object.getOwnPropertyDescriptor(Event.prototype, "composed");
    return a ? function(b) {
      return a.get.call(b);
    } : null;
  }(), Qd = function() {
    function a() {
    }
    var b = false, c = { get capture() {
      b = true;
      return false;
    } };
    window.addEventListener("test", a, c);
    window.removeEventListener("test", a, c);
    return b;
  }();
  function Rd(a) {
    if (null === a || "object" !== typeof a && "function" !== typeof a) {
      var b = !!a;
      var c = false;
    } else {
      b = !!a.capture;
      c = !!a.once;
      var d = a.U;
    }
    return { Pa: d, capture: b, once: c, Na: Qd ? a : b };
  }
  var Sd = {
    blur: true,
    focus: true,
    focusin: true,
    focusout: true,
    click: true,
    dblclick: true,
    mousedown: true,
    mouseenter: true,
    mouseleave: true,
    mousemove: true,
    mouseout: true,
    mouseover: true,
    mouseup: true,
    wheel: true,
    beforeinput: true,
    input: true,
    keydown: true,
    keyup: true,
    compositionstart: true,
    compositionupdate: true,
    compositionend: true,
    touchstart: true,
    touchend: true,
    touchmove: true,
    touchcancel: true,
    pointerover: true,
    pointerenter: true,
    pointerdown: true,
    pointermove: true,
    pointerup: true,
    pointercancel: true,
    pointerout: true,
    pointerleave: true,
    gotpointercapture: true,
    lostpointercapture: true,
    dragstart: true,
    drag: true,
    dragenter: true,
    dragleave: true,
    dragover: true,
    drop: true,
    dragend: true,
    DOMActivate: true,
    DOMFocusIn: true,
    DOMFocusOut: true,
    keypress: true
  }, Td = { DOMAttrModified: true, DOMAttributeNameChanged: true, DOMCharacterDataModified: true, DOMElementNameChanged: true, DOMNodeInserted: true, DOMNodeInsertedIntoDocument: true, DOMNodeRemoved: true, DOMNodeRemovedFromDocument: true, DOMSubtreeModified: true };
  function Ud(a) {
    return a instanceof Node ? a.__shady_getRootNode() : a;
  }
  function Vd(a, b) {
    var c = [], d = a;
    for (a = Ud(a); d; ) c.push(d), d = d.__shady_assignedSlot ? d.__shady_assignedSlot : d.nodeType === Node.DOCUMENT_FRAGMENT_NODE && d.host && (b || d !== a) ? d.host : d.__shady_parentNode;
    c[c.length - 1] === document && c.push(window);
    return c;
  }
  function Wd(a) {
    a.__composedPath || (a.__composedPath = Vd(a.target, true));
    return a.__composedPath;
  }
  function Xd(a, b) {
    if (!O) return a;
    a = Vd(a, true);
    for (var c = 0, d, e = void 0, f, g = void 0; c < b.length; c++) if (d = b[c], f = Ud(d), f !== e && (g = a.indexOf(f), e = f), !O(f) || -1 < g) return d;
  }
  var Yd = { get composed() {
    void 0 === this.__composed && (Pd ? this.__composed = "focusin" === this.type || "focusout" === this.type || Pd(this) : false !== this.isTrusted && (this.__composed = Sd[this.type]));
    return this.__composed || false;
  }, composedPath: function() {
    this.__composedPath || (this.__composedPath = Vd(this.__target, this.composed));
    return this.__composedPath;
  }, get target() {
    return Xd(this.currentTarget || this.__previousCurrentTarget, this.composedPath());
  }, get relatedTarget() {
    if (!this.__relatedTarget) return null;
    this.__relatedTargetComposedPath || (this.__relatedTargetComposedPath = Vd(this.__relatedTarget, true));
    return Xd(this.currentTarget || this.__previousCurrentTarget, this.__relatedTargetComposedPath);
  }, stopPropagation: function() {
    Event.prototype.stopPropagation.call(this);
    this.ua = true;
  }, stopImmediatePropagation: function() {
    Event.prototype.stopImmediatePropagation.call(this);
    this.ua = this.__immediatePropagationStopped = true;
  } }, Zd = M.D && Object.getOwnPropertyDescriptor(Event.prototype, "eventPhase");
  Zd && (Object.defineProperty(Yd, "eventPhase", { get: function() {
    return this.currentTarget === this.target ? Event.AT_TARGET : this.__shady_native_eventPhase;
  }, enumerable: true, configurable: true }), Object.defineProperty(Yd, "__shady_native_eventPhase", Zd));
  function $d(a) {
    function b(c, d) {
      c = new a(c, d);
      c.__composed = d && !!d.composed;
      return c;
    }
    b.__proto__ = a;
    b.prototype = a.prototype;
    return b;
  }
  var ae = { focus: true, blur: true };
  function be(a) {
    return a.__target !== a.target || a.__relatedTarget !== a.relatedTarget;
  }
  function ce(a, b, c) {
    if (c = b.__handlers && b.__handlers[a.type] && b.__handlers[a.type][c]) for (var d = 0, e; (e = c[d]) && (!be(a) || a.target !== a.relatedTarget) && (e.call(b, a), !a.__immediatePropagationStopped); d++) ;
  }
  var de = new Event("e").hasOwnProperty("currentTarget");
  function ee(a) {
    a = de ? Object.create(a) : a;
    var b = a.composedPath(), c = b.map(function(m) {
      return Xd(m, b);
    }), d = a.bubbles, e = Object.getOwnPropertyDescriptor(a, "currentTarget");
    Object.defineProperty(a, "currentTarget", { configurable: true, enumerable: true, get: function() {
      return k;
    } });
    var f = Event.CAPTURING_PHASE, g = Object.getOwnPropertyDescriptor(a, "eventPhase");
    Object.defineProperty(a, "eventPhase", { configurable: true, enumerable: true, get: function() {
      return f;
    } });
    try {
      for (var h = b.length - 1; 0 <= h; h--) {
        var k = b[h];
        f = k === c[h] ? Event.AT_TARGET : Event.CAPTURING_PHASE;
        ce(a, k, "capture");
        if (a.ua) return;
      }
      for (h = 0; h < b.length; h++) {
        k = b[h];
        var l = k === c[h];
        if (l || d) {
          if (f = l ? Event.AT_TARGET : Event.BUBBLING_PHASE, ce(a, k, "bubble"), a.ua) break;
        }
      }
    } finally {
      de || (e ? Object.defineProperty(a, "currentTarget", e) : delete a.currentTarget, g ? Object.defineProperty(a, "eventPhase", g) : delete a.eventPhase);
    }
  }
  function fe(a, b, c, d) {
    for (var e = 0; e < a.length; e++) {
      var f = a[e], g = f.type, h = f.capture;
      if (b === f.node && c === g && d === h) return e;
    }
    return -1;
  }
  function ge(a) {
    id();
    return !M.ha && this instanceof Node && !Uc(document, this) ? (a.__target || he(a, this), ee(a)) : this.__shady_native_dispatchEvent(a);
  }
  function ie(a, b, c) {
    var d = this, e = Rd(c), f = e.capture, g = e.once, h = e.Pa;
    e = e.Na;
    if (b) {
      var k = typeof b;
      if ("function" === k || "object" === k) {
        if ("object" !== k || b.handleEvent && "function" === typeof b.handleEvent) {
          if (Td[a]) return this.__shady_native_addEventListener(a, b, e);
          var l = h || this;
          if (h = b[Od]) {
            if (-1 < fe(h, l, a, f)) return;
          } else b[Od] = [];
          h = function(m) {
            g && d.__shady_removeEventListener(a, b, c);
            m.__target || he(m);
            if (l !== d) {
              var q = Object.getOwnPropertyDescriptor(m, "currentTarget");
              Object.defineProperty(m, "currentTarget", {
                get: function() {
                  return l;
                },
                configurable: true
              });
              var H = Object.getOwnPropertyDescriptor(m, "eventPhase");
              Object.defineProperty(m, "eventPhase", { configurable: true, enumerable: true, get: function() {
                return f ? Event.CAPTURING_PHASE : Event.BUBBLING_PHASE;
              } });
            }
            m.__previousCurrentTarget = m.currentTarget;
            if (!O(l) && "slot" !== l.localName || -1 != m.composedPath().indexOf(l)) {
              if (m.composed || -1 < m.composedPath().indexOf(l)) {
                if (be(m) && m.target === m.relatedTarget) m.eventPhase === Event.BUBBLING_PHASE && m.stopImmediatePropagation();
                else if (m.eventPhase === Event.CAPTURING_PHASE || m.bubbles || m.target === l || l instanceof Window) {
                  var C = "function" === k ? b.call(l, m) : b.handleEvent && b.handleEvent(m);
                  l !== d && (q ? (Object.defineProperty(m, "currentTarget", q), q = null) : delete m.currentTarget, H ? (Object.defineProperty(m, "eventPhase", H), H = null) : delete m.eventPhase);
                  return C;
                }
              }
            }
          };
          b[Od].push({ node: l, type: a, capture: f, ub: h });
          this.__handlers = this.__handlers || {};
          this.__handlers[a] = this.__handlers[a] || { capture: [], bubble: [] };
          this.__handlers[a][f ? "capture" : "bubble"].push(h);
          ae[a] || this.__shady_native_addEventListener(
            a,
            h,
            e
          );
        }
      }
    }
  }
  function je(a, b, c) {
    if (b) {
      var d = Rd(c);
      c = d.capture;
      var e = d.Pa;
      d = d.Na;
      if (Td[a]) return this.__shady_native_removeEventListener(a, b, d);
      var f = e || this;
      e = void 0;
      var g = null;
      try {
        g = b[Od];
      } catch (h) {
      }
      g && (f = fe(g, f, a, c), -1 < f && (e = g.splice(f, 1)[0].ub, g.length || (b[Od] = void 0)));
      this.__shady_native_removeEventListener(a, e || b, d);
      e && this.__handlers && this.__handlers[a] && (a = this.__handlers[a][c ? "capture" : "bubble"], b = a.indexOf(e), -1 < b && a.splice(b, 1));
    }
  }
  function ke() {
    for (var a in ae) window.__shady_native_addEventListener(a, function(b) {
      b.__target || (he(b), ee(b));
    }, true);
  }
  var le = Q(Yd);
  function he(a, b) {
    b = void 0 === b ? a.target : b;
    a.__target = b;
    a.__relatedTarget = a.relatedTarget;
    if (M.D) {
      b = Object.getPrototypeOf(a);
      if (!b.hasOwnProperty("__shady_patchedProto")) {
        var c = Object.create(b);
        c.__shady_sourceProto = b;
        P(c, le);
        b.__shady_patchedProto = c;
      }
      a.__proto__ = b.__shady_patchedProto;
    } else P(a, le);
  }
  var me = $d(Event), ne = $d(CustomEvent), oe = $d(MouseEvent);
  function pe() {
    if (!Pd && Object.getOwnPropertyDescriptor(Event.prototype, "isTrusted")) {
      var a = function() {
        var b = new MouseEvent("click", { bubbles: true, cancelable: true, composed: true });
        this.__shady_dispatchEvent(b);
      };
      Element.prototype.click ? Element.prototype.click = a : HTMLElement.prototype.click && (HTMLElement.prototype.click = a);
    }
  }
  var qe = Object.getOwnPropertyNames(Element.prototype).filter(function(a) {
    return "on" === a.substring(0, 2);
  }), re = Object.getOwnPropertyNames(HTMLElement.prototype).filter(function(a) {
    return "on" === a.substring(0, 2);
  });
  function se(a) {
    return { set: function(b) {
      var c = D(this), d = a.substring(2);
      c.T || (c.T = {});
      c.T[a] && this.removeEventListener(d, c.T[a]);
      this.__shady_addEventListener(d, b);
      c.T[a] = b;
    }, get: function() {
      var b = L(this);
      return b && b.T && b.T[a];
    }, configurable: true };
  }
  function te(a, b) {
    return { index: a, ia: [], pa: b };
  }
  function ue(a, b, c, d) {
    var e = 0, f = 0, g = 0, h = 0, k = Math.min(b - e, d - f);
    if (0 == e && 0 == f) a: {
      for (g = 0; g < k; g++) if (a[g] !== c[g]) break a;
      g = k;
    }
    if (b == a.length && d == c.length) {
      h = a.length;
      for (var l = c.length, m = 0; m < k - g && ve(a[--h], c[--l]); ) m++;
      h = m;
    }
    e += g;
    f += g;
    b -= h;
    d -= h;
    if (0 == b - e && 0 == d - f) return [];
    if (e == b) {
      for (b = te(e, 0); f < d; ) b.ia.push(c[f++]);
      return [b];
    }
    if (f == d) return [te(e, b - e)];
    k = e;
    g = f;
    d = d - g + 1;
    h = b - k + 1;
    b = Array(d);
    for (l = 0; l < d; l++) b[l] = Array(h), b[l][0] = l;
    for (l = 0; l < h; l++) b[0][l] = l;
    for (l = 1; l < d; l++) for (m = 1; m < h; m++) if (a[k + m - 1] === c[g + l - 1]) b[l][m] = b[l - 1][m - 1];
    else {
      var q = b[l - 1][m] + 1, H = b[l][m - 1] + 1;
      b[l][m] = q < H ? q : H;
    }
    k = b.length - 1;
    g = b[0].length - 1;
    d = b[k][g];
    for (a = []; 0 < k || 0 < g; ) 0 == k ? (a.push(2), g--) : 0 == g ? (a.push(3), k--) : (h = b[k - 1][g - 1], l = b[k - 1][g], m = b[k][g - 1], q = l < m ? l < h ? l : h : m < h ? m : h, q == h ? (h == d ? a.push(0) : (a.push(1), d = h), k--, g--) : q == l ? (a.push(3), k--, d = l) : (a.push(2), g--, d = m));
    a.reverse();
    b = void 0;
    k = [];
    for (g = 0; g < a.length; g++) switch (a[g]) {
      case 0:
        b && (k.push(b), b = void 0);
        e++;
        f++;
        break;
      case 1:
        b || (b = te(e, 0));
        b.pa++;
        e++;
        b.ia.push(c[f]);
        f++;
        break;
      case 2:
        b || (b = te(
          e,
          0
        ));
        b.pa++;
        e++;
        break;
      case 3:
        b || (b = te(e, 0)), b.ia.push(c[f]), f++;
    }
    b && k.push(b);
    return k;
  }
  function ve(a, b) {
    return a === b;
  }
  var we = Q({ dispatchEvent: ge, addEventListener: ie, removeEventListener: je });
  var xe = null;
  function ye() {
    xe || (xe = window.ShadyCSS && window.ShadyCSS.ScopingShim);
    return xe || null;
  }
  function ze(a, b, c) {
    var d = ye();
    return d && "class" === b ? (d.setElementClass(a, c), true) : false;
  }
  function Ae(a, b) {
    var c = ye();
    c && c.unscopeNode(a, b);
  }
  function Be(a, b) {
    var c = ye();
    if (!c) return true;
    if (a.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
      c = true;
      for (a = a.__shady_firstChild; a; a = a.__shady_nextSibling) c = c && Be(a, b);
      return c;
    }
    return a.nodeType !== Node.ELEMENT_NODE ? true : c.currentScopeForNode(a) === b;
  }
  function Ce(a) {
    if (a.nodeType !== Node.ELEMENT_NODE) return "";
    var b = ye();
    return b ? b.currentScopeForNode(a) : "";
  }
  function De(a, b) {
    if (a) for (a.nodeType === Node.ELEMENT_NODE && b(a), a = a.__shady_firstChild; a; a = a.__shady_nextSibling) a.nodeType === Node.ELEMENT_NODE && De(a, b);
  }
  var Ee = window.document, Fe = M.ha, Ge = Object.getOwnPropertyDescriptor(Node.prototype, "isConnected"), Ie = Ge && Ge.get;
  function Je(a) {
    for (var b; b = a.__shady_firstChild; ) a.__shady_removeChild(b);
  }
  function Ke(a) {
    var b = L(a);
    if (b && void 0 !== b.ta) for (b = a.__shady_firstChild; b; b = b.__shady_nextSibling) Ke(b);
    if (a = L(a)) a.ta = void 0;
  }
  function Le(a) {
    var b = a;
    if (a && "slot" === a.localName) {
      var c = L(a);
      (c = c && c.aa) && (b = c.length ? c[0] : Le(a.__shady_nextSibling));
    }
    return b;
  }
  function Me(a, b, c) {
    if (a = (a = L(a)) && a.ga) {
      if (b) if (b.nodeType === Node.DOCUMENT_FRAGMENT_NODE) for (var d = 0, e = b.childNodes.length; d < e; d++) a.addedNodes.push(b.childNodes[d]);
      else a.addedNodes.push(b);
      c && a.removedNodes.push(c);
      kd(a);
    }
  }
  var Te = Q({
    get parentNode() {
      var a = L(this);
      a = a && a.parentNode;
      return void 0 !== a ? a : this.__shady_native_parentNode;
    },
    get firstChild() {
      var a = L(this);
      a = a && a.firstChild;
      return void 0 !== a ? a : this.__shady_native_firstChild;
    },
    get lastChild() {
      var a = L(this);
      a = a && a.lastChild;
      return void 0 !== a ? a : this.__shady_native_lastChild;
    },
    get nextSibling() {
      var a = L(this);
      a = a && a.nextSibling;
      return void 0 !== a ? a : this.__shady_native_nextSibling;
    },
    get previousSibling() {
      var a = L(this);
      a = a && a.previousSibling;
      return void 0 !== a ? a : this.__shady_native_previousSibling;
    },
    get childNodes() {
      if (Lc(this)) {
        var a = L(this);
        if (!a.childNodes) {
          a.childNodes = [];
          for (var b = this.__shady_firstChild; b; b = b.__shady_nextSibling) a.childNodes.push(b);
        }
        var c = a.childNodes;
      } else c = this.__shady_native_childNodes;
      c.item = function(d) {
        return c[d];
      };
      return c;
    },
    get parentElement() {
      var a = L(this);
      (a = a && a.parentNode) && a.nodeType !== Node.ELEMENT_NODE && (a = null);
      return void 0 !== a ? a : this.__shady_native_parentElement;
    },
    get isConnected() {
      if (Ie && Ie.call(this)) return true;
      if (this.nodeType == Node.DOCUMENT_FRAGMENT_NODE) return false;
      var a = this.ownerDocument;
      if (null === a || Uc(a, this)) return true;
      for (a = this; a && !(a instanceof Document); ) a = a.__shady_parentNode || (O(a) ? a.host : void 0);
      return !!(a && a instanceof Document);
    },
    get textContent() {
      if (Lc(this)) {
        for (var a = [], b = this.__shady_firstChild; b; b = b.__shady_nextSibling) b.nodeType !== Node.COMMENT_NODE && a.push(b.__shady_textContent);
        return a.join("");
      }
      return this.__shady_native_textContent;
    },
    set textContent(a) {
      if ("undefined" === typeof a || null === a) a = "";
      switch (this.nodeType) {
        case Node.ELEMENT_NODE:
        case Node.DOCUMENT_FRAGMENT_NODE:
          if (!Lc(this) && M.D) {
            var b = this.__shady_firstChild;
            (b != this.__shady_lastChild || b && b.nodeType != Node.TEXT_NODE) && Je(this);
            this.__shady_native_textContent = a;
          } else Je(this), (0 < a.length || this.nodeType === Node.ELEMENT_NODE) && this.__shady_insertBefore(document.createTextNode(a));
          break;
        default:
          this.nodeValue = a;
      }
    },
    insertBefore: function(a, b) {
      if (this.ownerDocument !== Ee && a.ownerDocument !== Ee) return this.__shady_native_insertBefore(a, b), a;
      if (a === this) throw Error("Failed to execute 'appendChild' on 'Node': The new child element contains the parent.");
      if (b) {
        var c = L(b);
        c = c && c.parentNode;
        if (void 0 !== c && c !== this || void 0 === c && b.__shady_native_parentNode !== this) throw Error("Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.");
      }
      if (b === a) return a;
      Me(this, a);
      var d = [], e = (c = Ne(this)) ? c.host.localName : Ce(this), f = a.__shady_parentNode;
      if (f) {
        var g = Ce(a);
        var h = !!c || !Ne(a) || Fe && void 0 !== this.__noInsertionPoint;
        f.__shady_removeChild(a, h);
      }
      f = true;
      var k = (!Fe || void 0 === a.__noInsertionPoint && void 0 === this.__noInsertionPoint) && !Be(a, e), l = c && !a.__noInsertionPoint && (!Fe || a.nodeType === Node.DOCUMENT_FRAGMENT_NODE);
      if (l || k) k && (g = g || Ce(a)), De(a, function(m) {
        l && "slot" === m.localName && d.push(m);
        if (k) {
          var q = g;
          ye() && (q && Ae(m, q), (q = ye()) && q.scopeNode(m, e));
        }
      });
      d.length && (Oe(c), c.i.push.apply(c.i, w(d)), Pe(c));
      Lc(this) && (Qe(a, this, b), h = L(this), h.root ? (f = false, Mc(this) && Pe(h.root)) : c && "slot" === this.localName && (f = false, Pe(c)));
      f ? (c = O(this) ? this.host : this, b ? (b = Le(b), c.__shady_native_insertBefore(a, b)) : c.__shady_native_appendChild(a)) : a.ownerDocument !== this.ownerDocument && this.ownerDocument.adoptNode(a);
      return a;
    },
    appendChild: function(a) {
      if (this != a || !O(a)) return this.__shady_insertBefore(a);
    },
    removeChild: function(a, b) {
      b = void 0 === b ? false : b;
      if (this.ownerDocument !== Ee) return this.__shady_native_removeChild(a);
      if (a.__shady_parentNode !== this) throw Error("The node to be removed is not a child of this node: " + a);
      Me(this, null, a);
      var c = Ne(a), d = c && Re(c, a), e = L(this);
      if (Lc(this) && (Se(a, this), Mc(this))) {
        Pe(e.root);
        var f = true;
      }
      if (ye() && !b && c && a.nodeType !== Node.TEXT_NODE) {
        var g = Ce(a);
        De(a, function(h) {
          Ae(h, g);
        });
      }
      Ke(a);
      c && ((b = "slot" === this.localName) && (f = true), (d || b) && Pe(c));
      f || (f = O(this) ? this.host : this, (!e.root && "slot" !== a.localName || f === a.__shady_native_parentNode) && f.__shady_native_removeChild(a));
      return a;
    },
    replaceChild: function(a, b) {
      this.__shady_insertBefore(a, b);
      this.__shady_removeChild(b);
      return a;
    },
    cloneNode: function(a) {
      if ("template" == this.localName) return this.__shady_native_cloneNode(a);
      var b = this.__shady_native_cloneNode(false);
      if (a && b.nodeType !== Node.ATTRIBUTE_NODE) {
        a = this.__shady_firstChild;
        for (var c; a; a = a.__shady_nextSibling) c = a.__shady_cloneNode(true), b.__shady_appendChild(c);
      }
      return b;
    },
    getRootNode: function(a) {
      if (this && this.nodeType) {
        var b = D(this), c = b.ta;
        void 0 === c && (O(this) ? (c = this, b.ta = c) : (c = (c = this.__shady_parentNode) ? c.__shady_getRootNode(a) : this, document.documentElement.__shady_native_contains(this) && (b.ta = c)));
        return c;
      }
    },
    contains: function(a) {
      return Vc(this, a);
    }
  });
  var Ve = Q({ get assignedSlot() {
    var a = this.__shady_parentNode;
    (a = a && a.__shady_shadowRoot) && Ue(a);
    return (a = L(this)) && a.assignedSlot || null;
  } });
  var We = /* @__PURE__ */ new Map();
  [["(", { end: ")", sa: true }], ["[", { end: "]", sa: true }], ['"', { end: '"', sa: false }], ["'", { end: "'", sa: false }]].forEach(function(a) {
    var b = ka(a);
    a = b.next().value;
    b = b.next().value;
    We.set(a, b);
  });
  function Xe(a, b, c, d) {
    for (d = void 0 === d ? true : d; b < a.length; b++) if ("\\" === a[b] && b < a.length - 1 && "\n" !== a[b + 1]) b++;
    else {
      if (-1 !== c.indexOf(a[b])) return b;
      if (d && We.has(a[b])) {
        var e = We.get(a[b]);
        b = Xe(a, b + 1, [e.end], e.sa);
      }
    }
    return a.length;
  }
  function Ye(a) {
    function b() {
      if (0 < d.length) {
        for (; " " === d[d.length - 1]; ) d.pop();
        c.push({ La: d.filter(function(k, l) {
          return 0 === l % 2;
        }), Za: d.filter(function(k, l) {
          return 1 === l % 2;
        }) });
        d.length = 0;
      }
    }
    for (var c = [], d = [], e = 0; e < a.length; ) {
      var f = d[d.length - 1], g = Xe(a, e, [",", " ", ">", "+", "~"]), h = g === e ? a[e] : a.substring(e, g);
      if ("," === h) b();
      else if (-1 === [void 0, " ", ">", "+", "~"].indexOf(f) || " " !== h) " " === f && -1 !== [">", "+", "~"].indexOf(h) ? d[d.length - 1] = h : d.push(h);
      e = g + (g === e ? 1 : 0);
    }
    b();
    return c;
  }
  function Ze(a, b, c) {
    var d = [];
    $e(a, b, c, d);
    return d;
  }
  function $e(a, b, c, d) {
    for (a = a.__shady_firstChild; a; a = a.__shady_nextSibling) {
      var e;
      if (e = a.nodeType === Node.ELEMENT_NODE) {
        e = a;
        var f = b, g = c, h = d, k = f(e);
        k && h.push(e);
        g && g(k) ? e = k : ($e(e, f, g, h), e = void 0);
      }
      if (e) break;
    }
  }
  var af = { get firstElementChild() {
    var a = L(this);
    if (a && void 0 !== a.firstChild) {
      for (a = this.__shady_firstChild; a && a.nodeType !== Node.ELEMENT_NODE; ) a = a.__shady_nextSibling;
      return a;
    }
    return this.__shady_native_firstElementChild;
  }, get lastElementChild() {
    var a = L(this);
    if (a && void 0 !== a.lastChild) {
      for (a = this.__shady_lastChild; a && a.nodeType !== Node.ELEMENT_NODE; ) a = a.__shady_previousSibling;
      return a;
    }
    return this.__shady_native_lastElementChild;
  }, get children() {
    return Lc(this) ? Wc(Array.prototype.filter.call(
      Yc(this),
      function(a) {
        return a.nodeType === Node.ELEMENT_NODE;
      }
    )) : this.__shady_native_children;
  }, get childElementCount() {
    var a = this.__shady_children;
    return a ? a.length : 0;
  } }, bf = Q((af.append = function(a) {
    for (var b = [], c = 0; c < arguments.length; ++c) b[c] = arguments[c];
    this.__shady_insertBefore(cd.apply(null, w(b)), null);
  }, af.prepend = function(a) {
    for (var b = [], c = 0; c < arguments.length; ++c) b[c] = arguments[c];
    this.__shady_insertBefore(cd.apply(null, w(b)), this.__shady_firstChild);
  }, af.replaceChildren = function(a) {
    for (var b = [], c = 0; c < arguments.length; ++c) b[c] = arguments[c];
    for (; null !== (c = this.__shady_firstChild); ) this.__shady_removeChild(c);
    this.__shady_insertBefore(cd.apply(null, w(b)), null);
  }, af));
  function cf(a, b) {
    function c(e, f) {
      return (e === a || -1 === f.indexOf(":scope")) && Pc.call(e, f);
    }
    var d = Ye(b);
    if (1 > d.length) return [];
    for (b = dd(Ze(a, function() {
      return true;
    }).map(function(e) {
      return dd(d.map(function(f) {
        var g = f.La, h = g.length - 1;
        return c(e, g[h]) ? { target: e, da: f, fa: e, index: h } : [];
      }));
    })); b.some(function(e) {
      return 0 < e.index;
    }); ) b = dd(b.map(function(e) {
      if (0 >= e.index) return e;
      var f = e.target, g = e.fa, h = e.da;
      e = e.index - 1;
      var k = h.Za[e], l = h.La[e];
      if (" " === k) {
        k = [];
        for (g = g.__shady_parentElement; g; g = g.__shady_parentElement) c(
          g,
          l
        ) && k.push({ target: f, da: h, fa: g, index: e });
        return k;
      }
      if (">" === k) return g = g.__shady_parentElement, c(g, l) ? { target: f, da: h, fa: g, index: e } : [];
      if ("+" === k) return (g = g.__shady_previousElementSibling) && c(g, l) ? { target: f, da: h, fa: g, index: e } : [];
      if ("~" === k) {
        k = [];
        for (g = g.__shady_previousElementSibling; g; g = g.__shady_previousElementSibling) c(g, l) && k.push({ target: f, da: h, fa: g, index: e });
        return k;
      }
      throw Error("Unrecognized combinator: '" + k + "'.");
    }));
    return ed(b.map(function(e) {
      return e.target;
    }));
  }
  var df = M.querySelectorImplementation, ef = Q({ querySelector: function(a) {
    if ("native" === df) {
      var b = Array.prototype.slice.call((this instanceof ShadowRoot ? this.host : this).__shady_native_querySelectorAll(a)), c = this.__shady_getRootNode();
      b = ka(b);
      for (var d = b.next(); !d.done; d = b.next()) if (d = d.value, d.__shady_getRootNode() == c) return d;
      return null;
    }
    if ("selectorEngine" === df) return cf(this, a)[0] || null;
    if (void 0 === df) return Ze(this, function(e) {
      return Pc.call(e, a);
    }, function(e) {
      return !!e;
    })[0] || null;
    throw Error("Unrecognized value of ShadyDOM.querySelectorImplementation: '" + (df + "'"));
  }, querySelectorAll: function(a, b) {
    if (b || "native" === df) {
      b = Array.prototype.slice.call((this instanceof ShadowRoot ? this.host : this).__shady_native_querySelectorAll(a));
      var c = this.__shady_getRootNode();
      return Wc(b.filter(function(d) {
        return d.__shady_getRootNode() == c;
      }));
    }
    if ("selectorEngine" === df) return Wc(cf(this, a));
    if (void 0 === df) return Wc(Ze(this, function(d) {
      return Pc.call(d, a);
    }));
    throw Error("Unrecognized value of ShadyDOM.querySelectorImplementation: '" + (df + "'"));
  } }), ff = M.ha && !M.J ? ad({}, bf) : bf;
  ad(bf, ef);
  var gf = Q({ after: function(a) {
    for (var b = [], c = 0; c < arguments.length; ++c) b[c] = arguments[c];
    c = this.__shady_parentNode;
    if (null !== c) {
      var d = this.__shady_nextSibling;
      c.__shady_insertBefore(cd.apply(null, w(b)), d);
    }
  }, before: function(a) {
    for (var b = [], c = 0; c < arguments.length; ++c) b[c] = arguments[c];
    c = this.__shady_parentNode;
    null !== c && c.__shady_insertBefore(cd.apply(null, w(b)), this);
  }, remove: function() {
    var a = this.__shady_parentNode;
    null !== a && a.__shady_removeChild(this);
  }, replaceWith: function(a) {
    for (var b = [], c = 0; c < arguments.length; ++c) b[c] = arguments[c];
    c = this.__shady_parentNode;
    if (null !== c) {
      var d = this.__shady_nextSibling;
      c.__shady_removeChild(this);
      c.__shady_insertBefore(cd.apply(null, w(b)), d);
    }
  } });
  var hf = window.document;
  function jf(a, b) {
    if ("slot" === b) a = a.__shady_parentNode, Mc(a) && Pe(L(a).root);
    else if ("slot" === a.localName && "name" === b && (b = Ne(a))) {
      if (b.g) {
        kf(b);
        var c = a.Ua, d = lf(a);
        if (d !== c) {
          c = b.h[c];
          var e = c.indexOf(a);
          0 <= e && c.splice(e, 1);
          c = b.h[d] || (b.h[d] = []);
          c.push(a);
          1 < c.length && (b.h[d] = mf(c));
        }
      }
      Pe(b);
    }
  }
  var nf = Q({
    get previousElementSibling() {
      var a = L(this);
      if (a && void 0 !== a.previousSibling) {
        for (a = this.__shady_previousSibling; a && a.nodeType !== Node.ELEMENT_NODE; ) a = a.__shady_previousSibling;
        return a;
      }
      return this.__shady_native_previousElementSibling;
    },
    get nextElementSibling() {
      var a = L(this);
      if (a && void 0 !== a.nextSibling) {
        for (a = this.__shady_nextSibling; a && a.nodeType !== Node.ELEMENT_NODE; ) a = a.__shady_nextSibling;
        return a;
      }
      return this.__shady_native_nextElementSibling;
    },
    get slot() {
      return this.getAttribute("slot");
    },
    set slot(a) {
      this.__shady_setAttribute("slot", a);
    },
    get className() {
      return this.getAttribute("class") || "";
    },
    set className(a) {
      this.__shady_setAttribute("class", a);
    },
    setAttribute: function(a, b) {
      this.ownerDocument !== hf ? this.__shady_native_setAttribute(a, b) : ze(this, a, b) || (this.__shady_native_setAttribute(a, b), jf(this, a));
    },
    removeAttribute: function(a) {
      this.ownerDocument !== hf ? this.__shady_native_removeAttribute(a) : ze(this, a, "") ? "" === this.getAttribute(a) && this.__shady_native_removeAttribute(a) : (this.__shady_native_removeAttribute(a), jf(this, a));
    },
    toggleAttribute: function(a, b) {
      if (this.ownerDocument !== hf) return this.__shady_native_toggleAttribute(a, b);
      if (!ze(this, a, "")) return b = this.__shady_native_toggleAttribute(a, b), jf(this, a), b;
      if ("" === this.getAttribute(a) && !b) return this.__shady_native_toggleAttribute(a, b);
    }
  });
  M.ha || qe.forEach(function(a) {
    nf[a] = se(a);
  });
  var sf = Q({ attachShadow: function(a) {
    if (!this) throw Error("Must provide a host.");
    if (!a) throw Error("Not enough arguments.");
    if (a.shadyUpgradeFragment && !M.Ra) {
      var b = a.shadyUpgradeFragment;
      b.__proto__ = ShadowRoot.prototype;
      of(b, this, a);
      pf(b, b);
      a = b.__noInsertionPoint ? null : b.querySelectorAll("slot");
      b.__noInsertionPoint = void 0;
      if (a && a.length) {
        var c = b;
        Oe(c);
        c.i.push.apply(c.i, w(a));
        Pe(b);
      }
      b.host.__shady_native_appendChild(b);
    } else b = new qf(rf, this, a);
    return this.__CE_shadowRoot = b;
  }, get shadowRoot() {
    var a = L(this);
    return a && a.lb || null;
  } });
  ad(nf, sf);
  var tf = document.implementation.createHTMLDocument("inert"), uf = Q({ get innerHTML() {
    return Lc(this) ? ud("template" === this.localName ? this.content : this, Yc) : this.__shady_native_innerHTML;
  }, set innerHTML(a) {
    if ("template" === this.localName) this.__shady_native_innerHTML = a;
    else {
      Je(this);
      var b = this.localName || "div";
      b = this.namespaceURI && this.namespaceURI !== tf.namespaceURI ? tf.createElementNS(this.namespaceURI, b) : tf.createElement(b);
      for (M.D ? b.__shady_native_innerHTML = a : b.innerHTML = a; a = b.__shady_firstChild; ) this.__shady_insertBefore(a);
    }
  } });
  var vf = Q({ blur: function() {
    var a = L(this);
    (a = (a = a && a.root) && a.activeElement) ? a.__shady_blur() : this.__shady_native_blur();
  } });
  M.ha || re.forEach(function(a) {
    vf[a] = se(a);
  });
  var wf = Q({ assignedNodes: function(a) {
    if ("slot" === this.localName) {
      var b = this.__shady_getRootNode();
      b && O(b) && Ue(b);
      return (b = L(this)) ? (a && a.flatten ? b.aa : b.assignedNodes) || [] : [];
    }
  }, addEventListener: function(a, b, c) {
    if ("slot" !== this.localName || "slotchange" === a) ie.call(this, a, b, c);
    else {
      "object" !== typeof c && (c = { capture: !!c });
      var d = this.__shady_parentNode;
      if (!d) throw Error("ShadyDOM cannot attach event to slot unless it has a `parentNode`");
      c.U = this;
      d.__shady_addEventListener(a, b, c);
    }
  }, removeEventListener: function(a, b, c) {
    if ("slot" !== this.localName || "slotchange" === a) je.call(this, a, b, c);
    else {
      "object" !== typeof c && (c = { capture: !!c });
      var d = this.__shady_parentNode;
      if (!d) throw Error("ShadyDOM cannot attach event to slot unless it has a `parentNode`");
      c.U = this;
      d.__shady_removeEventListener(a, b, c);
    }
  } });
  var xf = Q({ getElementById: function(a) {
    return "" === a ? null : Ze(this, function(b) {
      return b.id == a;
    }, function(b) {
      return !!b;
    })[0] || null;
  } });
  function yf(a, b) {
    for (var c; b && !a.has(c = b.__shady_getRootNode()); ) b = c.host;
    return b;
  }
  function zf(a) {
    var b = /* @__PURE__ */ new Set();
    for (b.add(a); O(a) && a.host; ) a = a.host.__shady_getRootNode(), b.add(a);
    return b;
  }
  var Af = "__shady_native_" + Jc(), Bf = Q({ get activeElement() {
    var a = M.D ? document.__shady_native_activeElement : document.activeElement;
    if (!a || !a.nodeType) return null;
    var b = !!O(this);
    if (!(this === document || b && this.host !== a && this.host.__shady_native_contains(a))) return null;
    for (b = Ne(a); b && b !== this; ) a = b.host, b = Ne(a);
    return this === document ? b ? null : a : b === this ? a : null;
  }, elementsFromPoint: function(a, b) {
    a = document[Af](a, b);
    if (this === document && M.useNativeDocumentEFP) return a;
    a = [].slice.call(a);
    b = zf(this);
    for (var c = /* @__PURE__ */ new Set(), d = 0; d < a.length; d++) c.add(yf(b, a[d]));
    var e = [];
    c.forEach(function(f) {
      return e.push(f);
    });
    return e;
  }, elementFromPoint: function(a, b) {
    return this === document && M.useNativeDocumentEFP ? this.__shady_native_elementFromPoint(a, b) : this.__shady_elementsFromPoint(a, b)[0] || null;
  } });
  var Cf = window.document, Df = Q({ importNode: function(a, b) {
    if (a.ownerDocument !== Cf || "template" === a.localName) return this.__shady_native_importNode(a, b);
    var c = this.__shady_native_importNode(a, false);
    if (b) for (a = a.__shady_firstChild; a; a = a.__shady_nextSibling) b = this.__shady_importNode(a, true), c.__shady_appendChild(b);
    return c;
  } });
  var Ef = Q({ dispatchEvent: ge, addEventListener: ie.bind(window), removeEventListener: je.bind(window) });
  var Ff = {};
  Object.getOwnPropertyDescriptor(HTMLElement.prototype, "parentElement") && (Ff.parentElement = Te.parentElement);
  Object.getOwnPropertyDescriptor(HTMLElement.prototype, "contains") && (Ff.contains = Te.contains);
  Object.getOwnPropertyDescriptor(HTMLElement.prototype, "children") && (Ff.children = bf.children);
  Object.getOwnPropertyDescriptor(HTMLElement.prototype, "innerHTML") && (Ff.innerHTML = uf.innerHTML);
  Object.getOwnPropertyDescriptor(HTMLElement.prototype, "className") && (Ff.className = nf.className);
  var Gf = { EventTarget: [we], Node: [Te, window.EventTarget ? null : we], Text: [Ve], Comment: [Ve], CDATASection: [Ve], ProcessingInstruction: [Ve], Element: [nf, bf, gf, Ve, !M.D || "innerHTML" in Element.prototype ? uf : null, window.HTMLSlotElement ? null : wf], HTMLElement: [vf, Ff], HTMLSlotElement: [wf], DocumentFragment: [ff, xf], Document: [Df, ff, xf, Bf], Window: [Ef], CharacterData: [gf], XMLHttpRequest: [window.EventTarget ? null : we] }, Hf = M.D ? null : ["innerHTML", "textContent"];
  function If(a, b, c, d) {
    b.forEach(function(e) {
      return a && e && P(a, e, c, d);
    });
  }
  function Jf(a) {
    var b = a ? null : Hf, c;
    for (c in Gf) If(window[c] && window[c].prototype, Gf[c], a, b);
  }
  ["Text", "Comment", "CDATASection", "ProcessingInstruction"].forEach(function(a) {
    var b = window[a], c = Object.create(b.prototype);
    c.__shady_protoIsPatched = true;
    If(c, Gf.EventTarget);
    If(c, Gf.Node);
    Gf[a] && If(c, Gf[a]);
    b.prototype.__shady_patchedProto = c;
  });
  function Kf(a) {
    a.__shady_protoIsPatched = true;
    If(a, Gf.EventTarget);
    If(a, Gf.Node);
    If(a, Gf.Element);
    If(a, Gf.HTMLElement);
    If(a, Gf.HTMLSlotElement);
    return a;
  }
  var Lf = M.Da, Mf = M.D;
  function Nf(a, b) {
    if (Lf && !a.__shady_protoIsPatched && !O(a)) {
      var c = Object.getPrototypeOf(a), d = c.hasOwnProperty("__shady_patchedProto") && c.__shady_patchedProto;
      d || (d = Object.create(c), Kf(d), c.__shady_patchedProto = d);
      Object.setPrototypeOf(a, d);
    }
    Mf || (1 === b ? Md(a) : 2 === b && Nd(a));
  }
  function Of(a, b, c, d) {
    Nf(a, 1);
    d = d || null;
    var e = D(a), f = d ? D(d) : null;
    e.previousSibling = d ? f.previousSibling : b.__shady_lastChild;
    if (f = L(e.previousSibling)) f.nextSibling = a;
    if (f = L(e.nextSibling = d)) f.previousSibling = a;
    e.parentNode = b;
    d ? d === c.firstChild && (c.firstChild = a) : (c.lastChild = a, c.firstChild || (c.firstChild = a));
    c.childNodes = null;
  }
  function Qe(a, b, c) {
    Nf(b, 2);
    var d = D(b);
    void 0 !== d.firstChild && (d.childNodes = null);
    if (a.nodeType === Node.DOCUMENT_FRAGMENT_NODE) for (a = a.__shady_native_firstChild; a; a = a.__shady_native_nextSibling) Of(a, b, d, c);
    else Of(a, b, d, c);
  }
  function Se(a, b) {
    var c = D(a);
    b = D(b);
    a === b.firstChild && (b.firstChild = c.nextSibling);
    a === b.lastChild && (b.lastChild = c.previousSibling);
    a = c.previousSibling;
    var d = c.nextSibling;
    a && (D(a).nextSibling = d);
    d && (D(d).previousSibling = a);
    c.parentNode = c.previousSibling = c.nextSibling = void 0;
    void 0 !== b.childNodes && (b.childNodes = null);
  }
  function pf(a, b) {
    var c = D(a);
    if (b || void 0 === c.firstChild) {
      c.childNodes = null;
      var d = c.firstChild = a.__shady_native_firstChild;
      c.lastChild = a.__shady_native_lastChild;
      Nf(a, 2);
      c = d;
      for (d = void 0; c; c = c.__shady_native_nextSibling) {
        var e = D(c);
        e.parentNode = b || a;
        e.nextSibling = c.__shady_native_nextSibling;
        e.previousSibling = d || null;
        d = c;
        Nf(c, 1);
      }
    }
  }
  var Pf = Q({ addEventListener: function(a, b, c) {
    "object" !== typeof c && (c = { capture: !!c });
    c.U = c.U || this;
    this.host.__shady_addEventListener(a, b, c);
  }, removeEventListener: function(a, b, c) {
    "object" !== typeof c && (c = { capture: !!c });
    c.U = c.U || this;
    this.host.__shady_removeEventListener(a, b, c);
  } });
  function Qf(a, b) {
    P(a, Pf, b);
    P(a, Bf, b);
    P(a, uf, b);
    P(a, bf, b);
    M.J && !b ? (P(a, Te, b), P(a, xf, b)) : M.D || (P(a, Jd), P(a, Hd), P(a, Id));
  }
  var rf = {}, Rf = M.deferConnectionCallbacks && "loading" === document.readyState, Sf;
  function Tf(a) {
    var b = [];
    do
      b.unshift(a);
    while (a = a.__shady_parentNode);
    return b;
  }
  function qf(a, b, c) {
    if (a !== rf) throw new TypeError("Illegal constructor");
    this.g = null;
    of(this, b, c);
  }
  function of(a, b, c) {
    a.host = b;
    a.mode = c && c.mode;
    pf(a.host);
    b = D(a.host);
    b.root = a;
    b.lb = "closed" !== a.mode ? a : null;
    b = D(a);
    b.firstChild = b.lastChild = b.parentNode = b.nextSibling = b.previousSibling = null;
    if (M.preferPerformance) for (; b = a.host.__shady_native_firstChild; ) a.host.__shady_native_removeChild(b);
    else Pe(a);
  }
  function Pe(a) {
    a.Y || (a.Y = true, hd(function() {
      return Ue(a);
    }));
  }
  function Ue(a) {
    var b;
    if (b = a.Y) {
      for (var c; a; ) a: {
        a.Y && (c = a), b = a;
        a = b.host.__shady_getRootNode();
        if (O(a) && (b = L(b.host)) && 0 < b.ka) break a;
        a = void 0;
      }
      b = c;
    }
    (c = b) && c._renderSelf();
  }
  qf.prototype._renderSelf = function() {
    var a = Rf;
    Rf = true;
    this.Y = false;
    if (this.g) {
      kf(this);
      for (var b = 0, c; b < this.g.length; b++) {
        c = this.g[b];
        var d = L(c), e = d.assignedNodes;
        d.assignedNodes = [];
        d.aa = [];
        if (d.Ja = e) for (d = 0; d < e.length; d++) {
          var f = L(e[d]);
          f.xa = f.assignedSlot;
          f.assignedSlot === c && (f.assignedSlot = null);
        }
      }
      for (b = this.host.__shady_firstChild; b; b = b.__shady_nextSibling) Uf(this, b);
      for (b = 0; b < this.g.length; b++) {
        c = this.g[b];
        e = L(c);
        if (!e.assignedNodes.length) for (d = c.__shady_firstChild; d; d = d.__shady_nextSibling) Uf(
          this,
          d,
          c
        );
        (d = (d = L(c.__shady_parentNode)) && d.root) && (Nc(d) || d.Y) && d._renderSelf();
        Vf(this, e.aa, e.assignedNodes);
        if (d = e.Ja) {
          for (f = 0; f < d.length; f++) L(d[f]).xa = null;
          e.Ja = null;
          d.length > e.assignedNodes.length && (e.Aa = true);
        }
        e.Aa && (e.Aa = false, Wf(this, c));
      }
      c = this.g;
      b = [];
      for (e = 0; e < c.length; e++) d = c[e].__shady_parentNode, (f = L(d)) && f.root || !(0 > b.indexOf(d)) || b.push(d);
      for (c = 0; c < b.length; c++) {
        f = b[c];
        e = f === this ? this.host : f;
        d = [];
        for (f = f.__shady_firstChild; f; f = f.__shady_nextSibling) if ("slot" == f.localName) for (var g = L(f).aa, h = 0; h < g.length; h++) d.push(g[h]);
        else d.push(f);
        f = Xc(e);
        g = ue(d, d.length, f, f.length);
        for (var k = h = 0, l = void 0; h < g.length && (l = g[h]); h++) {
          for (var m = 0, q = void 0; m < l.ia.length && (q = l.ia[m]); m++) q.__shady_native_parentNode === e && e.__shady_native_removeChild(q), f.splice(l.index + k, 1);
          k -= l.pa;
        }
        k = 0;
        for (l = void 0; k < g.length && (l = g[k]); k++) for (h = f[l.index], m = l.index; m < l.index + l.pa; m++) q = d[m], e.__shady_native_insertBefore(q, h), f.splice(m, 0, q);
      }
    }
    if (!M.preferPerformance && !this.Ia) for (b = this.host.__shady_firstChild; b; b = b.__shady_nextSibling) c = L(b), b.__shady_native_parentNode !== this.host || "slot" !== b.localName && c.assignedSlot || this.host.__shady_native_removeChild(b);
    this.Ia = true;
    Rf = a;
    Sf && Sf();
  };
  function Uf(a, b, c) {
    var d = D(b), e = d.xa;
    d.xa = null;
    c || (c = (a = a.h[b.__shady_slot || "__catchall"]) && a[0]);
    c ? (D(c).assignedNodes.push(b), d.assignedSlot = c) : d.assignedSlot = void 0;
    e !== d.assignedSlot && d.assignedSlot && (D(d.assignedSlot).Aa = true);
  }
  function Vf(a, b, c) {
    for (var d = 0, e = void 0; d < c.length && (e = c[d]); d++) if ("slot" == e.localName) {
      var f = L(e).assignedNodes;
      f && f.length && Vf(a, b, f);
    } else b.push(c[d]);
  }
  function Wf(a, b) {
    b.__shady_native_dispatchEvent(new Event("slotchange"));
    b = L(b);
    b.assignedSlot && Wf(a, b.assignedSlot);
  }
  function Oe(a) {
    a.i = a.i || [];
    a.g = a.g || [];
    a.h = a.h || {};
  }
  function kf(a) {
    if (a.i && a.i.length) {
      for (var b = a.i, c, d = 0; d < b.length; d++) {
        var e = b[d];
        pf(e);
        var f = e.__shady_parentNode;
        pf(f);
        f = L(f);
        f.ka = (f.ka || 0) + 1;
        f = lf(e);
        a.h[f] ? (c = c || {}, c[f] = true, a.h[f].push(e)) : a.h[f] = [e];
        a.g.push(e);
      }
      if (c) for (var g in c) a.h[g] = mf(a.h[g]);
      a.i = [];
    }
  }
  function lf(a) {
    var b = a.name || a.getAttribute("name") || "__catchall";
    return a.Ua = b;
  }
  function mf(a) {
    return a.sort(function(b, c) {
      b = Tf(b);
      for (var d = Tf(c), e = 0; e < b.length; e++) {
        c = b[e];
        var f = d[e];
        if (c !== f) return b = Yc(c.__shady_parentNode), b.indexOf(c) - b.indexOf(f);
      }
    });
  }
  function Re(a, b) {
    if (a.g) {
      kf(a);
      var c = a.h, d;
      for (d in c) for (var e = c[d], f = 0; f < e.length; f++) {
        var g = e[f];
        if (Vc(b, g)) {
          e.splice(f, 1);
          var h = a.g.indexOf(g);
          0 <= h && (a.g.splice(h, 1), (h = L(g.__shady_parentNode)) && h.ka && h.ka--);
          f--;
          g = L(g);
          if (h = g.aa) for (var k = 0; k < h.length; k++) {
            var l = h[k], m = l.__shady_native_parentNode;
            m && m.__shady_native_removeChild(l);
          }
          g.aa = [];
          g.assignedNodes = [];
          h = true;
        }
      }
      return h;
    }
  }
  function Nc(a) {
    kf(a);
    return !(!a.g || !a.g.length);
  }
  (function(a) {
    a.__proto__ = DocumentFragment.prototype;
    Qf(a, "__shady_");
    Qf(a);
    Object.defineProperties(a, { nodeType: { value: Node.DOCUMENT_FRAGMENT_NODE, configurable: true }, nodeName: { value: "#document-fragment", configurable: true }, nodeValue: { value: null, configurable: true } });
    ["localName", "namespaceURI", "prefix"].forEach(function(b) {
      Object.defineProperty(a, b, { value: void 0, configurable: true });
    });
    ["ownerDocument", "baseURI", "isConnected"].forEach(function(b) {
      Object.defineProperty(a, b, {
        get: function() {
          return this.host[b];
        },
        configurable: true
      });
    });
  })(qf.prototype);
  if (window.customElements && window.customElements.define && M.Ba && !M.preferPerformance) {
    var Xf = /* @__PURE__ */ new Map();
    Sf = function() {
      var a = [];
      Xf.forEach(function(d, e) {
        a.push([e, d]);
      });
      Xf.clear();
      for (var b = 0; b < a.length; b++) {
        var c = a[b][0];
        a[b][1] ? c.__shadydom_connectedCallback() : c.__shadydom_disconnectedCallback();
      }
    };
    Rf && document.addEventListener("readystatechange", function() {
      Rf = false;
      Sf();
    }, { once: true });
    var Yf = function(a, b, c) {
      var d = 0, e = "__isConnected" + d++;
      if (b || c) a.prototype.connectedCallback = a.prototype.__shadydom_connectedCallback = function() {
        Rf ? Xf.set(this, true) : this[e] || (this[e] = true, b && b.call(this));
      }, a.prototype.disconnectedCallback = a.prototype.__shadydom_disconnectedCallback = function() {
        Rf ? this.isConnected || Xf.set(this, false) : this[e] && (this[e] = false, c && c.call(this));
      };
      return a;
    }, Zf = window.customElements.define, $f = function(a, b) {
      var c = b.prototype.connectedCallback, d = b.prototype.disconnectedCallback;
      Zf.call(window.customElements, a, Yf(b, c, d));
      b.prototype.connectedCallback = c;
      b.prototype.disconnectedCallback = d;
    };
    window.customElements.define = $f;
    Object.defineProperty(window.CustomElementRegistry.prototype, "define", { value: $f, configurable: true });
  }
  function Ne(a) {
    a = a.__shady_getRootNode();
    if (O(a)) return a;
  }
  function ag(a) {
    this.node = a;
  }
  v = ag.prototype;
  v.addEventListener = function(a, b, c) {
    return this.node.__shady_addEventListener(a, b, c);
  };
  v.removeEventListener = function(a, b, c) {
    return this.node.__shady_removeEventListener(a, b, c);
  };
  v.appendChild = function(a) {
    return this.node.__shady_appendChild(a);
  };
  v.insertBefore = function(a, b) {
    return this.node.__shady_insertBefore(a, b);
  };
  v.removeChild = function(a) {
    return this.node.__shady_removeChild(a);
  };
  v.replaceChild = function(a, b) {
    return this.node.__shady_replaceChild(a, b);
  };
  v.cloneNode = function(a) {
    return this.node.__shady_cloneNode(a);
  };
  v.getRootNode = function(a) {
    return this.node.__shady_getRootNode(a);
  };
  v.contains = function(a) {
    return this.node.__shady_contains(a);
  };
  v.dispatchEvent = function(a) {
    return this.node.__shady_dispatchEvent(a);
  };
  v.setAttribute = function(a, b) {
    this.node.__shady_setAttribute(a, b);
  };
  v.getAttribute = function(a) {
    return this.node.__shady_native_getAttribute(a);
  };
  v.hasAttribute = function(a) {
    return this.node.__shady_native_hasAttribute(a);
  };
  v.removeAttribute = function(a) {
    this.node.__shady_removeAttribute(a);
  };
  v.toggleAttribute = function(a, b) {
    return this.node.__shady_toggleAttribute(a, b);
  };
  v.attachShadow = function(a) {
    return this.node.__shady_attachShadow(a);
  };
  v.focus = function() {
    this.node.__shady_native_focus();
  };
  v.blur = function() {
    this.node.__shady_blur();
  };
  v.importNode = function(a, b) {
    if (this.node.nodeType === Node.DOCUMENT_NODE) return this.node.__shady_importNode(a, b);
  };
  v.getElementById = function(a) {
    if (this.node.nodeType === Node.DOCUMENT_NODE) return this.node.__shady_getElementById(a);
  };
  v.elementsFromPoint = function(a, b) {
    return this.node.__shady_elementsFromPoint(a, b);
  };
  v.elementFromPoint = function(a, b) {
    return this.node.__shady_elementFromPoint(a, b);
  };
  v.querySelector = function(a) {
    return this.node.__shady_querySelector(a);
  };
  v.querySelectorAll = function(a, b) {
    return this.node.__shady_querySelectorAll(a, b);
  };
  v.assignedNodes = function(a) {
    if ("slot" === this.node.localName) return this.node.__shady_assignedNodes(a);
  };
  v.append = function(a) {
    for (var b = [], c = 0; c < arguments.length; ++c) b[c] = arguments[c];
    return this.node.__shady_append.apply(this.node, w(b));
  };
  v.prepend = function(a) {
    for (var b = [], c = 0; c < arguments.length; ++c) b[c] = arguments[c];
    return this.node.__shady_prepend.apply(this.node, w(b));
  };
  v.after = function(a) {
    for (var b = [], c = 0; c < arguments.length; ++c) b[c] = arguments[c];
    return this.node.__shady_after.apply(this.node, w(b));
  };
  v.before = function(a) {
    for (var b = [], c = 0; c < arguments.length; ++c) b[c] = arguments[c];
    return this.node.__shady_before.apply(this.node, w(b));
  };
  v.remove = function() {
    return this.node.__shady_remove();
  };
  v.replaceWith = function(a) {
    for (var b = [], c = 0; c < arguments.length; ++c) b[c] = arguments[c];
    return this.node.__shady_replaceWith.apply(this.node, w(b));
  };
  ea.Object.defineProperties(ag.prototype, {
    activeElement: { configurable: true, enumerable: true, get: function() {
      if (O(this.node) || this.node.nodeType === Node.DOCUMENT_NODE) return this.node.__shady_activeElement;
    } },
    _activeElement: { configurable: true, enumerable: true, get: function() {
      return this.activeElement;
    } },
    host: { configurable: true, enumerable: true, get: function() {
      if (O(this.node)) return this.node.host;
    } },
    parentNode: { configurable: true, enumerable: true, get: function() {
      return this.node.__shady_parentNode;
    } },
    firstChild: {
      configurable: true,
      enumerable: true,
      get: function() {
        return this.node.__shady_firstChild;
      }
    },
    lastChild: { configurable: true, enumerable: true, get: function() {
      return this.node.__shady_lastChild;
    } },
    nextSibling: { configurable: true, enumerable: true, get: function() {
      return this.node.__shady_nextSibling;
    } },
    previousSibling: { configurable: true, enumerable: true, get: function() {
      return this.node.__shady_previousSibling;
    } },
    childNodes: { configurable: true, enumerable: true, get: function() {
      return this.node.__shady_childNodes;
    } },
    parentElement: {
      configurable: true,
      enumerable: true,
      get: function() {
        return this.node.__shady_parentElement;
      }
    },
    firstElementChild: { configurable: true, enumerable: true, get: function() {
      return this.node.__shady_firstElementChild;
    } },
    lastElementChild: { configurable: true, enumerable: true, get: function() {
      return this.node.__shady_lastElementChild;
    } },
    nextElementSibling: { configurable: true, enumerable: true, get: function() {
      return this.node.__shady_nextElementSibling;
    } },
    previousElementSibling: { configurable: true, enumerable: true, get: function() {
      return this.node.__shady_previousElementSibling;
    } },
    children: { configurable: true, enumerable: true, get: function() {
      return this.node.__shady_children;
    } },
    childElementCount: { configurable: true, enumerable: true, get: function() {
      return this.node.__shady_childElementCount;
    } },
    shadowRoot: { configurable: true, enumerable: true, get: function() {
      return this.node.__shady_shadowRoot;
    } },
    assignedSlot: { configurable: true, enumerable: true, get: function() {
      return this.node.__shady_assignedSlot;
    } },
    isConnected: { configurable: true, enumerable: true, get: function() {
      return this.node.__shady_isConnected;
    } },
    innerHTML: {
      configurable: true,
      enumerable: true,
      get: function() {
        return this.node.__shady_innerHTML;
      },
      set: function(a) {
        this.node.__shady_innerHTML = a;
      }
    },
    textContent: { configurable: true, enumerable: true, get: function() {
      return this.node.__shady_textContent;
    }, set: function(a) {
      this.node.__shady_textContent = a;
    } },
    slot: { configurable: true, enumerable: true, get: function() {
      return this.node.__shady_slot;
    }, set: function(a) {
      this.node.__shady_slot = a;
    } },
    className: { configurable: true, enumerable: true, get: function() {
      return this.node.__shady_className;
    }, set: function(a) {
      this.node.__shady_className = a;
    } }
  });
  function bg(a) {
    Object.defineProperty(ag.prototype, a, { get: function() {
      return this.node["__shady_" + a];
    }, set: function(b) {
      this.node["__shady_" + a] = b;
    }, configurable: true });
  }
  qe.forEach(function(a) {
    return bg(a);
  });
  re.forEach(function(a) {
    return bg(a);
  });
  var cg = /* @__PURE__ */ new WeakMap();
  function dg(a) {
    if (O(a) || a instanceof ag) return a;
    var b = cg.get(a);
    b || (b = new ag(a), cg.set(a, b));
    return b;
  }
  if (M.Ba) {
    var eg = M.D ? function(a) {
      return a;
    } : function(a) {
      Nd(a);
      Md(a);
      return a;
    }, ShadyDOM = {
      inUse: M.Ba,
      patch: eg,
      isShadyRoot: O,
      enqueue: hd,
      flush: id,
      flushInitial: function(a) {
        !a.Ia && a.Y && Ue(a);
      },
      settings: M,
      filterMutations: nd,
      observeChildren: ld,
      unobserveChildren: md,
      deferConnectionCallbacks: M.deferConnectionCallbacks,
      preferPerformance: M.preferPerformance,
      handlesDynamicScoping: true,
      wrap: M.J ? dg : eg,
      wrapIfNeeded: true === M.J ? dg : function(a) {
        return a;
      },
      Wrapper: ag,
      composedPath: Wd,
      noPatch: M.J,
      patchOnDemand: M.Da,
      nativeMethods: wd,
      nativeTree: xd,
      patchElementProto: Kf,
      querySelectorImplementation: M.querySelectorImplementation
    };
    window.ShadyDOM = ShadyDOM;
    Gd();
    Jf("__shady_");
    Object.defineProperty(document, "_activeElement", Bf.activeElement);
    P(Window.prototype, Ef, "__shady_");
    M.J ? M.Da && P(Element.prototype, sf) : (Jf(), pe());
    ke();
    window.Event = me;
    window.CustomEvent = ne;
    window.MouseEvent = oe;
    window.ShadowRoot = qf;
  }
  var fg = window.Document.prototype.createElement, gg = window.Document.prototype.createElementNS, hg = window.Document.prototype.importNode, ig = window.Document.prototype.prepend, jg = window.Document.prototype.append, kg = window.DocumentFragment.prototype.prepend, lg = window.DocumentFragment.prototype.append, mg = window.Node.prototype.cloneNode, ng = window.Node.prototype.appendChild, og = window.Node.prototype.insertBefore, pg = window.Node.prototype.removeChild, qg = window.Node.prototype.replaceChild, rg = Object.getOwnPropertyDescriptor(
    window.Node.prototype,
    "textContent"
  ), sg = window.Element.prototype.attachShadow, tg = Object.getOwnPropertyDescriptor(window.Element.prototype, "innerHTML"), ug = window.Element.prototype.getAttribute, vg = window.Element.prototype.setAttribute, wg = window.Element.prototype.removeAttribute, xg = window.Element.prototype.toggleAttribute, yg = window.Element.prototype.getAttributeNS, zg = window.Element.prototype.setAttributeNS, Ag = window.Element.prototype.removeAttributeNS, Bg = window.Element.prototype.insertAdjacentElement, Cg = window.Element.prototype.insertAdjacentHTML, Dg = window.Element.prototype.prepend, Eg = window.Element.prototype.append, Fg = window.Element.prototype.before, Gg = window.Element.prototype.after, Hg = window.Element.prototype.replaceWith, Ig = window.Element.prototype.remove, Jg = window.HTMLElement, Kg = Object.getOwnPropertyDescriptor(window.HTMLElement.prototype, "innerHTML"), Lg = window.HTMLElement.prototype.insertAdjacentElement, Mg = window.HTMLElement.prototype.insertAdjacentHTML;
  var Ng = /* @__PURE__ */ new Set();
  "annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph".split(" ").forEach(function(a) {
    return Ng.add(a);
  });
  function Og(a) {
    var b = Ng.has(a);
    a = /^[a-z][.0-9_a-z]*-[-.0-9_a-z]*$/.test(a);
    return !b && a;
  }
  var Pg = document.contains ? document.contains.bind(document) : document.documentElement.contains.bind(document.documentElement);
  function T(a) {
    var b = a.isConnected;
    if (void 0 !== b) return b;
    if (Pg(a)) return true;
    for (; a && !(a.__CE_isImportDocument || a instanceof Document); ) a = a.parentNode || (window.ShadowRoot && a instanceof ShadowRoot ? a.host : void 0);
    return !(!a || !(a.__CE_isImportDocument || a instanceof Document));
  }
  function Qg(a) {
    var b = a.children;
    if (b) return Array.prototype.slice.call(b);
    b = [];
    for (a = a.firstChild; a; a = a.nextSibling) a.nodeType === Node.ELEMENT_NODE && b.push(a);
    return b;
  }
  function Rg(a, b) {
    for (; b && b !== a && !b.nextSibling; ) b = b.parentNode;
    return b && b !== a ? b.nextSibling : null;
  }
  function Sg(a, b, c) {
    for (var d = a; d; ) {
      if (d.nodeType === Node.ELEMENT_NODE) {
        var e = d;
        b(e);
        var f = e.localName;
        if ("link" === f && "import" === e.getAttribute("rel")) {
          d = e.import;
          void 0 === c && (c = /* @__PURE__ */ new Set());
          if (d instanceof Node && !c.has(d)) for (c.add(d), d = d.firstChild; d; d = d.nextSibling) Sg(d, b, c);
          d = Rg(a, e);
          continue;
        } else if ("template" === f) {
          d = Rg(a, e);
          continue;
        }
        if (e = e.__CE_shadowRoot) for (e = e.firstChild; e; e = e.nextSibling) Sg(e, b, c);
      }
      d = d.firstChild ? d.firstChild : Rg(a, d);
    }
  }
  function Tg() {
    var a = !(null === Ug || void 0 === Ug || !Ug.noDocumentConstructionObserver), b = !(null === Ug || void 0 === Ug || !Ug.shadyDomFastWalk);
    this.ca = [];
    this.g = [];
    this.W = false;
    this.shadyDomFastWalk = b;
    this.sb = !a;
  }
  function Vg(a, b, c, d) {
    var e = window.ShadyDOM;
    if (a.shadyDomFastWalk && e && e.inUse) {
      if (b.nodeType === Node.ELEMENT_NODE && c(b), b.querySelectorAll) for (a = e.nativeMethods.querySelectorAll.call(b, "*"), b = 0; b < a.length; b++) c(a[b]);
    } else Sg(b, c, d);
  }
  function Wg(a, b) {
    a.W = true;
    a.ca.push(b);
  }
  function Xg(a, b) {
    a.W = true;
    a.g.push(b);
  }
  function Yg(a, b) {
    a.W && Vg(a, b, function(c) {
      return Zg(a, c);
    });
  }
  function Zg(a, b) {
    if (a.W && !b.__CE_patched) {
      b.__CE_patched = true;
      for (var c = 0; c < a.ca.length; c++) a.ca[c](b);
      for (c = 0; c < a.g.length; c++) a.g[c](b);
    }
  }
  function $g(a, b) {
    var c = [];
    Vg(a, b, function(e) {
      return c.push(e);
    });
    for (b = 0; b < c.length; b++) {
      var d = c[b];
      1 === d.__CE_state ? a.connectedCallback(d) : ah(a, d);
    }
  }
  function bh(a, b) {
    var c = [];
    Vg(a, b, function(e) {
      return c.push(e);
    });
    for (b = 0; b < c.length; b++) {
      var d = c[b];
      1 === d.__CE_state && a.disconnectedCallback(d);
    }
  }
  function ch(a, b, c) {
    c = void 0 === c ? {} : c;
    var d = c.tb, e = c.upgrade || function(g) {
      return ah(a, g);
    }, f = [];
    Vg(a, b, function(g) {
      a.W && Zg(a, g);
      if ("link" === g.localName && "import" === g.getAttribute("rel")) {
        var h = g.import;
        h instanceof Node && (h.__CE_isImportDocument = true, h.__CE_registry = document.__CE_registry);
        h && "complete" === h.readyState ? h.__CE_documentLoadHandled = true : g.addEventListener("load", function() {
          var k = g.import;
          if (!k.__CE_documentLoadHandled) {
            k.__CE_documentLoadHandled = true;
            var l = /* @__PURE__ */ new Set();
            d && (d.forEach(function(m) {
              return l.add(m);
            }), l.delete(k));
            ch(a, k, { tb: l, upgrade: e });
          }
        });
      } else f.push(g);
    }, d);
    for (b = 0; b < f.length; b++) e(f[b]);
  }
  function ah(a, b) {
    try {
      var c = b.ownerDocument, d = c.__CE_registry;
      var e = d && (c.defaultView || c.__CE_isImportDocument) ? dh(d, b.localName) : void 0;
      if (e && void 0 === b.__CE_state) {
        e.constructionStack.push(b);
        try {
          try {
            if (new e.constructorFunction() !== b) throw Error("The custom element constructor did not produce the element being upgraded.");
          } finally {
            e.constructionStack.pop();
          }
        } catch (k) {
          throw b.__CE_state = 2, k;
        }
        b.__CE_state = 1;
        b.__CE_definition = e;
        if (e.attributeChangedCallback && b.hasAttributes()) {
          var f = e.observedAttributes;
          for (e = 0; e < f.length; e++) {
            var g = f[e], h = b.getAttribute(g);
            null !== h && a.attributeChangedCallback(b, g, null, h, null);
          }
        }
        T(b) && a.connectedCallback(b);
      }
    } catch (k) {
      eh(k);
    }
  }
  Tg.prototype.connectedCallback = function(a) {
    var b = a.__CE_definition;
    if (b.connectedCallback) try {
      b.connectedCallback.call(a);
    } catch (c) {
      eh(c);
    }
  };
  Tg.prototype.disconnectedCallback = function(a) {
    var b = a.__CE_definition;
    if (b.disconnectedCallback) try {
      b.disconnectedCallback.call(a);
    } catch (c) {
      eh(c);
    }
  };
  Tg.prototype.attributeChangedCallback = function(a, b, c, d, e) {
    var f = a.__CE_definition;
    if (f.attributeChangedCallback && -1 < f.observedAttributes.indexOf(b)) try {
      f.attributeChangedCallback.call(a, b, c, d, e);
    } catch (g) {
      eh(g);
    }
  };
  function fh(a, b, c, d) {
    var e = b.__CE_registry;
    if (e && (null === d || "http://www.w3.org/1999/xhtml" === d) && (e = dh(e, c))) try {
      var f = new e.constructorFunction();
      if (void 0 === f.__CE_state || void 0 === f.__CE_definition) throw Error("Failed to construct '" + c + "': The returned value was not constructed with the HTMLElement constructor.");
      if ("http://www.w3.org/1999/xhtml" !== f.namespaceURI) throw Error("Failed to construct '" + c + "': The constructed element's namespace must be the HTML namespace.");
      if (f.hasAttributes()) throw Error("Failed to construct '" + c + "': The constructed element must not have any attributes.");
      if (null !== f.firstChild) throw Error("Failed to construct '" + c + "': The constructed element must not have any children.");
      if (null !== f.parentNode) throw Error("Failed to construct '" + c + "': The constructed element must not have a parent node.");
      if (f.ownerDocument !== b) throw Error("Failed to construct '" + c + "': The constructed element's owner document is incorrect.");
      if (f.localName !== c) throw Error("Failed to construct '" + c + "': The constructed element's local name is incorrect.");
      return f;
    } catch (g) {
      return eh(g), b = null === d ? fg.call(b, c) : gg.call(b, d, c), Object.setPrototypeOf(b, HTMLUnknownElement.prototype), b.__CE_state = 2, b.__CE_definition = void 0, Zg(a, b), b;
    }
    b = null === d ? fg.call(b, c) : gg.call(b, d, c);
    Zg(a, b);
    return b;
  }
  function eh(a) {
    var b = "", c = "", d = 0, e = 0;
    a instanceof Error ? (b = a.message, c = a.sourceURL || a.fileName || "", d = a.line || a.lineNumber || 0, e = a.column || a.columnNumber || 0) : b = "Uncaught " + String(a);
    var f = void 0;
    void 0 === ErrorEvent.prototype.initErrorEvent ? f = new ErrorEvent("error", { cancelable: true, message: b, filename: c, lineno: d, colno: e, error: a }) : (f = document.createEvent("ErrorEvent"), f.initErrorEvent("error", false, true, b, c, d), f.preventDefault = function() {
      Object.defineProperty(this, "defaultPrevented", { configurable: true, get: function() {
        return true;
      } });
    });
    void 0 === f.error && Object.defineProperty(f, "error", { configurable: true, enumerable: true, get: function() {
      return a;
    } });
    window.dispatchEvent(f);
    f.defaultPrevented || console.error(a);
  }
  function gh() {
    var a = this;
    this.I = void 0;
    this.Ka = new Promise(function(b) {
      a.g = b;
    });
  }
  gh.prototype.resolve = function(a) {
    if (this.I) throw Error("Already resolved.");
    this.I = a;
    this.g(a);
  };
  function hh(a) {
    var b = document;
    this.X = void 0;
    this.S = a;
    this.g = b;
    ch(this.S, this.g);
    "loading" === this.g.readyState && (this.X = new MutationObserver(this.h.bind(this)), this.X.observe(this.g, { childList: true, subtree: true }));
  }
  function ih(a) {
    a.X && a.X.disconnect();
  }
  hh.prototype.h = function(a) {
    var b = this.g.readyState;
    "interactive" !== b && "complete" !== b || ih(this);
    for (b = 0; b < a.length; b++) for (var c = a[b].addedNodes, d = 0; d < c.length; d++) ch(this.S, c[d]);
  };
  function U(a) {
    this.ma = /* @__PURE__ */ new Map();
    this.na = /* @__PURE__ */ new Map();
    this.Fa = /* @__PURE__ */ new Map();
    this.wa = false;
    this.za = /* @__PURE__ */ new Map();
    this.la = function(b) {
      return b();
    };
    this.V = false;
    this.oa = [];
    this.S = a;
    this.Ga = a.sb ? new hh(a) : void 0;
  }
  v = U.prototype;
  v.jb = function(a, b) {
    var c = this;
    if (!(b instanceof Function)) throw new TypeError("Custom element constructor getters must be functions.");
    jh(this, a);
    this.ma.set(a, b);
    this.oa.push(a);
    this.V || (this.V = true, this.la(function() {
      return kh(c);
    }));
  };
  v.define = function(a, b) {
    var c = this;
    if (!(b instanceof Function)) throw new TypeError("Custom element constructors must be functions.");
    jh(this, a);
    lh(this, a, b);
    this.oa.push(a);
    this.V || (this.V = true, this.la(function() {
      return kh(c);
    }));
  };
  function jh(a, b) {
    if (!Og(b)) throw new SyntaxError("The element name '" + b + "' is not valid.");
    if (dh(a, b)) throw Error("A custom element with name '" + (b + "' has already been defined."));
    if (a.wa) throw Error("A custom element is already being defined.");
  }
  function lh(a, b, c) {
    a.wa = true;
    var d;
    try {
      var e = c.prototype;
      if (!(e instanceof Object)) throw new TypeError("The custom element constructor's prototype is not an object.");
      var f = function(m) {
        var q = e[m];
        if (void 0 !== q && !(q instanceof Function)) throw Error("The '" + m + "' callback must be a function.");
        return q;
      };
      var g = f("connectedCallback");
      var h = f("disconnectedCallback");
      var k = f("adoptedCallback");
      var l = (d = f("attributeChangedCallback")) && c.observedAttributes || [];
    } catch (m) {
      throw m;
    } finally {
      a.wa = false;
    }
    c = {
      localName: b,
      constructorFunction: c,
      connectedCallback: g,
      disconnectedCallback: h,
      adoptedCallback: k,
      attributeChangedCallback: d,
      observedAttributes: l,
      constructionStack: []
    };
    a.na.set(b, c);
    a.Fa.set(c.constructorFunction, c);
    return c;
  }
  v.upgrade = function(a) {
    ch(this.S, a);
  };
  function kh(a) {
    if (false !== a.V) {
      a.V = false;
      for (var b = [], c = a.oa, d = /* @__PURE__ */ new Map(), e = 0; e < c.length; e++) d.set(c[e], []);
      ch(a.S, document, { upgrade: function(k) {
        if (void 0 === k.__CE_state) {
          var l = k.localName, m = d.get(l);
          m ? m.push(k) : a.na.has(l) && b.push(k);
        }
      } });
      for (e = 0; e < b.length; e++) ah(a.S, b[e]);
      for (e = 0; e < c.length; e++) {
        for (var f = c[e], g = d.get(f), h = 0; h < g.length; h++) ah(a.S, g[h]);
        (f = a.za.get(f)) && f.resolve(void 0);
      }
      c.length = 0;
    }
  }
  v.get = function(a) {
    if (a = dh(this, a)) return a.constructorFunction;
  };
  v.whenDefined = function(a) {
    if (!Og(a)) return Promise.reject(new SyntaxError("'" + a + "' is not a valid custom element name."));
    var b = this.za.get(a);
    if (b) return b.Ka;
    b = new gh();
    this.za.set(a, b);
    var c = this.na.has(a) || this.ma.has(a);
    a = -1 === this.oa.indexOf(a);
    c && a && b.resolve(void 0);
    return b.Ka;
  };
  v.polyfillWrapFlushCallback = function(a) {
    this.Ga && ih(this.Ga);
    var b = this.la;
    this.la = function(c) {
      return a(function() {
        return b(c);
      });
    };
  };
  function dh(a, b) {
    var c = a.na.get(b);
    if (c) return c;
    if (c = a.ma.get(b)) {
      a.ma.delete(b);
      try {
        return lh(a, b, c());
      } catch (d) {
        eh(d);
      }
    }
  }
  U.prototype.define = U.prototype.define;
  U.prototype.upgrade = U.prototype.upgrade;
  U.prototype.get = U.prototype.get;
  U.prototype.whenDefined = U.prototype.whenDefined;
  U.prototype.polyfillDefineLazy = U.prototype.jb;
  U.prototype.polyfillWrapFlushCallback = U.prototype.polyfillWrapFlushCallback;
  function mh(a, b, c) {
    function d(e) {
      return function(f) {
        for (var g = [], h = 0; h < arguments.length; ++h) g[h] = arguments[h];
        h = [];
        for (var k = [], l = 0; l < g.length; l++) {
          var m = g[l];
          m instanceof Element && T(m) && k.push(m);
          if (m instanceof DocumentFragment) for (m = m.firstChild; m; m = m.nextSibling) h.push(m);
          else h.push(m);
        }
        e.apply(this, g);
        for (g = 0; g < k.length; g++) bh(a, k[g]);
        if (T(this)) for (g = 0; g < h.length; g++) k = h[g], k instanceof Element && $g(a, k);
      };
    }
    void 0 !== c.prepend && (b.prepend = d(c.prepend));
    void 0 !== c.append && (b.append = d(c.append));
  }
  function nh(a) {
    Document.prototype.createElement = function(b) {
      return fh(a, this, b, null);
    };
    Document.prototype.importNode = function(b, c) {
      b = hg.call(this, b, !!c);
      this.__CE_registry ? ch(a, b) : Yg(a, b);
      return b;
    };
    Document.prototype.createElementNS = function(b, c) {
      return fh(a, this, c, b);
    };
    mh(a, Document.prototype, { prepend: ig, append: jg });
  }
  function oh(a) {
    function b(d) {
      return function(e) {
        for (var f = [], g = 0; g < arguments.length; ++g) f[g] = arguments[g];
        g = [];
        for (var h = [], k = 0; k < f.length; k++) {
          var l = f[k];
          l instanceof Element && T(l) && h.push(l);
          if (l instanceof DocumentFragment) for (l = l.firstChild; l; l = l.nextSibling) g.push(l);
          else g.push(l);
        }
        d.apply(this, f);
        for (f = 0; f < h.length; f++) bh(a, h[f]);
        if (T(this)) for (f = 0; f < g.length; f++) h = g[f], h instanceof Element && $g(a, h);
      };
    }
    var c = Element.prototype;
    void 0 !== Fg && (c.before = b(Fg));
    void 0 !== Gg && (c.after = b(Gg));
    void 0 !== Hg && (c.replaceWith = function(d) {
      for (var e = [], f = 0; f < arguments.length; ++f) e[f] = arguments[f];
      f = [];
      for (var g = [], h = 0; h < e.length; h++) {
        var k = e[h];
        k instanceof Element && T(k) && g.push(k);
        if (k instanceof DocumentFragment) for (k = k.firstChild; k; k = k.nextSibling) f.push(k);
        else f.push(k);
      }
      h = T(this);
      Hg.apply(this, e);
      for (e = 0; e < g.length; e++) bh(a, g[e]);
      if (h) for (bh(a, this), e = 0; e < f.length; e++) g = f[e], g instanceof Element && $g(a, g);
    });
    void 0 !== Ig && (c.remove = function() {
      var d = T(this);
      Ig.call(this);
      d && bh(a, this);
    });
  }
  function ph(a) {
    function b(e, f) {
      Object.defineProperty(e, "innerHTML", { enumerable: f.enumerable, configurable: true, get: f.get, set: function(g) {
        var h = this, k = void 0;
        T(this) && (k = [], Vg(a, this, function(q) {
          q !== h && k.push(q);
        }));
        f.set.call(this, g);
        if (k) for (var l = 0; l < k.length; l++) {
          var m = k[l];
          1 === m.__CE_state && a.disconnectedCallback(m);
        }
        this.ownerDocument.__CE_registry ? ch(a, this) : Yg(a, this);
        return g;
      } });
    }
    function c(e, f) {
      e.insertAdjacentElement = function(g, h) {
        var k = T(h);
        g = f.call(this, g, h);
        k && bh(a, h);
        T(g) && $g(a, h);
        return g;
      };
    }
    function d(e, f) {
      function g(h, k) {
        for (var l = []; h !== k; h = h.nextSibling) l.push(h);
        for (k = 0; k < l.length; k++) ch(a, l[k]);
      }
      e.insertAdjacentHTML = function(h, k) {
        h = h.toLowerCase();
        if ("beforebegin" === h) {
          var l = this.previousSibling;
          f.call(this, h, k);
          g(l || this.parentNode.firstChild, this);
        } else if ("afterbegin" === h) l = this.firstChild, f.call(this, h, k), g(this.firstChild, l);
        else if ("beforeend" === h) l = this.lastChild, f.call(this, h, k), g(l || this.firstChild, null);
        else if ("afterend" === h) l = this.nextSibling, f.call(this, h, k), g(
          this.nextSibling,
          l
        );
        else throw new SyntaxError("The value provided (" + String(h) + ") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.");
      };
    }
    sg && (Element.prototype.attachShadow = function(e) {
      e = sg.call(this, e);
      if (a.W && !e.__CE_patched) {
        e.__CE_patched = true;
        for (var f = 0; f < a.ca.length; f++) a.ca[f](e);
      }
      return this.__CE_shadowRoot = e;
    });
    tg && tg.get ? b(Element.prototype, tg) : Kg && Kg.get ? b(HTMLElement.prototype, Kg) : Xg(a, function(e) {
      b(e, { enumerable: true, configurable: true, get: function() {
        return mg.call(this, true).innerHTML;
      }, set: function(f) {
        var g = "template" === this.localName, h = g ? this.content : this, k = gg.call(document, this.namespaceURI, this.localName);
        for (k.innerHTML = f; 0 < h.childNodes.length; ) pg.call(h, h.childNodes[0]);
        for (f = g ? k.content : k; 0 < f.childNodes.length; ) ng.call(h, f.childNodes[0]);
      } });
    });
    Element.prototype.setAttribute = function(e, f) {
      if (1 !== this.__CE_state) return vg.call(this, e, f);
      var g = ug.call(this, e);
      vg.call(this, e, f);
      f = ug.call(this, e);
      a.attributeChangedCallback(this, e, g, f, null);
    };
    Element.prototype.setAttributeNS = function(e, f, g) {
      if (1 !== this.__CE_state) return zg.call(
        this,
        e,
        f,
        g
      );
      var h = yg.call(this, e, f);
      zg.call(this, e, f, g);
      g = yg.call(this, e, f);
      a.attributeChangedCallback(this, f, h, g, e);
    };
    Element.prototype.removeAttribute = function(e) {
      if (1 !== this.__CE_state) return wg.call(this, e);
      var f = ug.call(this, e);
      wg.call(this, e);
      null !== f && a.attributeChangedCallback(this, e, f, null, null);
    };
    xg && (Element.prototype.toggleAttribute = function(e, f) {
      if (1 !== this.__CE_state) return xg.call(this, e, f);
      var g = ug.call(this, e), h = null !== g;
      f = xg.call(this, e, f);
      h !== f && a.attributeChangedCallback(this, e, g, f ? "" : null, null);
      return f;
    });
    Element.prototype.removeAttributeNS = function(e, f) {
      if (1 !== this.__CE_state) return Ag.call(this, e, f);
      var g = yg.call(this, e, f);
      Ag.call(this, e, f);
      var h = yg.call(this, e, f);
      g !== h && a.attributeChangedCallback(this, f, g, h, e);
    };
    Lg ? c(HTMLElement.prototype, Lg) : Bg && c(Element.prototype, Bg);
    Mg ? d(HTMLElement.prototype, Mg) : Cg && d(Element.prototype, Cg);
    mh(a, Element.prototype, { prepend: Dg, append: Eg });
    oh(a);
  }
  var qh = {};
  function rh(a) {
    function b() {
      var c = this.constructor;
      var d = document.__CE_registry.Fa.get(c);
      if (!d) throw Error("Failed to construct a custom element: The constructor was not registered with `customElements`.");
      var e = d.constructionStack;
      if (0 === e.length) return e = fg.call(document, d.localName), Object.setPrototypeOf(e, c.prototype), e.__CE_state = 1, e.__CE_definition = d, Zg(a, e), e;
      var f = e.length - 1, g = e[f];
      if (g === qh) throw Error("Failed to construct '" + d.localName + "': This element was already constructed.");
      e[f] = qh;
      Object.setPrototypeOf(g, c.prototype);
      Zg(a, g);
      return g;
    }
    b.prototype = Jg.prototype;
    Object.defineProperty(HTMLElement.prototype, "constructor", { writable: true, configurable: true, enumerable: false, value: b });
    window.HTMLElement = b;
  }
  function sh(a) {
    function b(c, d) {
      Object.defineProperty(c, "textContent", { enumerable: d.enumerable, configurable: true, get: d.get, set: function(e) {
        if (this.nodeType === Node.TEXT_NODE) d.set.call(this, e);
        else {
          var f = void 0;
          if (this.firstChild) {
            var g = this.childNodes, h = g.length;
            if (0 < h && T(this)) {
              f = Array(h);
              for (var k = 0; k < h; k++) f[k] = g[k];
            }
          }
          d.set.call(this, e);
          if (f) for (e = 0; e < f.length; e++) bh(a, f[e]);
        }
      } });
    }
    Node.prototype.insertBefore = function(c, d) {
      if (c instanceof DocumentFragment) {
        var e = Qg(c);
        c = og.call(this, c, d);
        if (T(this)) for (d = 0; d < e.length; d++) $g(a, e[d]);
        return c;
      }
      e = c instanceof Element && T(c);
      d = og.call(this, c, d);
      e && bh(a, c);
      T(this) && $g(a, c);
      return d;
    };
    Node.prototype.appendChild = function(c) {
      if (c instanceof DocumentFragment) {
        var d = Qg(c);
        c = ng.call(this, c);
        if (T(this)) for (var e = 0; e < d.length; e++) $g(a, d[e]);
        return c;
      }
      d = c instanceof Element && T(c);
      e = ng.call(this, c);
      d && bh(a, c);
      T(this) && $g(a, c);
      return e;
    };
    Node.prototype.cloneNode = function(c) {
      c = mg.call(this, !!c);
      this.ownerDocument.__CE_registry ? ch(a, c) : Yg(a, c);
      return c;
    };
    Node.prototype.removeChild = function(c) {
      var d = c instanceof Element && T(c), e = pg.call(this, c);
      d && bh(a, c);
      return e;
    };
    Node.prototype.replaceChild = function(c, d) {
      if (c instanceof DocumentFragment) {
        var e = Qg(c);
        c = qg.call(this, c, d);
        if (T(this)) for (bh(a, d), d = 0; d < e.length; d++) $g(a, e[d]);
        return c;
      }
      e = c instanceof Element && T(c);
      var f = qg.call(this, c, d), g = T(this);
      g && bh(a, d);
      e && bh(a, c);
      g && $g(a, c);
      return f;
    };
    rg && rg.get ? b(Node.prototype, rg) : Wg(a, function(c) {
      b(c, { enumerable: true, configurable: true, get: function() {
        for (var d = [], e = this.firstChild; e; e = e.nextSibling) e.nodeType !== Node.COMMENT_NODE && d.push(e.textContent);
        return d.join("");
      }, set: function(d) {
        for (; this.firstChild; ) pg.call(this, this.firstChild);
        null != d && "" !== d && ng.call(this, document.createTextNode(d));
      } });
    });
  }
  var Ug = window.customElements;
  function th() {
    var a = new Tg();
    rh(a);
    nh(a);
    mh(a, DocumentFragment.prototype, { prepend: kg, append: lg });
    sh(a);
    ph(a);
    window.CustomElementRegistry = U;
    a = new U(a);
    document.__CE_registry = a;
    Object.defineProperty(window, "customElements", { configurable: true, enumerable: true, value: a });
  }
  Ug && !Ug.forcePolyfill && "function" == typeof Ug.define && "function" == typeof Ug.get || th();
  window.__CE_installPolyfill = th;
  function uh() {
    this.end = this.start = 0;
    this.rules = this.parent = this.previous = null;
    this.cssText = this.parsedCssText = "";
    this.atRule = false;
    this.type = 0;
    this.parsedSelector = this.selector = this.keyframesName = "";
  }
  function vh(a) {
    var b = a = a.replace(wh, "").replace(xh, ""), c = new uh();
    c.start = 0;
    c.end = b.length;
    for (var d = c, e = 0, f = b.length; e < f; e++) if ("{" === b[e]) {
      d.rules || (d.rules = []);
      var g = d, h = g.rules[g.rules.length - 1] || null;
      d = new uh();
      d.start = e + 1;
      d.parent = g;
      d.previous = h;
      g.rules.push(d);
    } else "}" === b[e] && (d.end = e + 1, d = d.parent || c);
    return yh(c, a);
  }
  function yh(a, b) {
    var c = b.substring(a.start, a.end - 1);
    a.parsedCssText = a.cssText = c.trim();
    a.parent && (c = b.substring(a.previous ? a.previous.end : a.parent.start, a.start - 1), c = zh(c), c = c.replace(Ah, " "), c = c.substring(c.lastIndexOf(";") + 1), c = a.parsedSelector = a.selector = c.trim(), a.atRule = 0 === c.indexOf("@"), a.atRule ? 0 === c.indexOf("@media") ? a.type = Bh : c.match(Ch) && (a.type = Dh, a.keyframesName = a.selector.split(Ah).pop()) : a.type = 0 === c.indexOf("--") ? Eh : Fh);
    if (c = a.rules) for (var d = 0, e = c.length, f = void 0; d < e && (f = c[d]); d++) yh(
      f,
      b
    );
    return a;
  }
  function zh(a) {
    return a.replace(/\\([0-9a-f]{1,6})\s/gi, function(b, c) {
      b = c;
      for (c = 6 - b.length; c--; ) b = "0" + b;
      return "\\" + b;
    });
  }
  function Gh(a, b, c) {
    c = void 0 === c ? "" : c;
    var d = "";
    if (a.cssText || a.rules) {
      var e = a.rules, f;
      if (f = e) f = e[0], f = !(f && f.selector && 0 === f.selector.indexOf("--"));
      if (f) {
        f = 0;
        for (var g = e.length, h = void 0; f < g && (h = e[f]); f++) d = Gh(h, b, d);
      } else b ? b = a.cssText : (b = a.cssText, b = b.replace(Hh, "").replace(Ih, ""), b = b.replace(Jh, "").replace(Kh, "")), (d = b.trim()) && (d = "  " + d + "\n");
    }
    d && (a.selector && (c += a.selector + " {\n"), c += d, a.selector && (c += "}\n\n"));
    return c;
  }
  var Fh = 1, Dh = 7, Bh = 4, Eh = 1e3, wh = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim, xh = /@import[^;]*;/gim, Hh = /(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim, Ih = /(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim, Jh = /@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim, Kh = /[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim, Ch = /^@[^\s]*keyframes/, Ah = /\s+/g;
  var V = !(window.ShadyDOM && window.ShadyDOM.inUse), Lh;
  function Mh(a) {
    Lh = a && a.shimcssproperties ? false : V || !(navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/) || !window.CSS || !CSS.supports || !CSS.supports("box-shadow", "0 0 0 var(--foo)"));
  }
  var Nh;
  window.ShadyCSS && void 0 !== window.ShadyCSS.cssBuild && (Nh = window.ShadyCSS.cssBuild);
  var Oh = !(!window.ShadyCSS || !window.ShadyCSS.disableRuntime);
  window.ShadyCSS && void 0 !== window.ShadyCSS.nativeCss ? Lh = window.ShadyCSS.nativeCss : window.ShadyCSS ? (Mh(window.ShadyCSS), window.ShadyCSS = void 0) : Mh(window.WebComponents && window.WebComponents.flags);
  var W = Lh;
  var Ph = /(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi, Qh = /(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi, Rh = /(--[\w-]+)\s*([:,;)]|$)/gi, Sh = /(animation\s*:)|(animation-name\s*:)/, Th = /@media\s(.*)/, Uh = /\{[^}]*\}/g;
  var Vh = /* @__PURE__ */ new Set();
  function Wh(a, b) {
    if (!a) return "";
    "string" === typeof a && (a = vh(a));
    b && Xh(a, b);
    return Gh(a, W);
  }
  function Yh(a) {
    !a.__cssRules && a.textContent && (a.__cssRules = vh(a.textContent));
    return a.__cssRules || null;
  }
  function $h(a) {
    return !!a.parent && a.parent.type === Dh;
  }
  function Xh(a, b, c, d) {
    if (a) {
      var e = false, f = a.type;
      if (d && f === Bh) {
        var g = a.selector.match(Th);
        g && (window.matchMedia(g[1]).matches || (e = true));
      }
      f === Fh ? b(a) : c && f === Dh ? c(a) : f === Eh && (e = true);
      if ((a = a.rules) && !e) for (e = 0, f = a.length, g = void 0; e < f && (g = a[e]); e++) Xh(g, b, c, d);
    }
  }
  function ai(a, b, c, d) {
    var e = document.createElement("style");
    b && e.setAttribute("scope", b);
    e.textContent = a;
    bi(e, c, d);
    return e;
  }
  var ci = null;
  function di(a) {
    a = document.createComment(" Shady DOM styles for " + a + " ");
    var b = document.head;
    b.insertBefore(a, (ci ? ci.nextSibling : null) || b.firstChild);
    return ci = a;
  }
  function bi(a, b, c) {
    b = b || document.head;
    b.insertBefore(a, c && c.nextSibling || b.firstChild);
    ci ? a.compareDocumentPosition(ci) === Node.DOCUMENT_POSITION_PRECEDING && (ci = a) : ci = a;
  }
  function ei(a, b) {
    for (var c = 0, d = a.length; b < d; b++) if ("(" === a[b]) c++;
    else if (")" === a[b] && 0 === --c) return b;
    return -1;
  }
  function fi(a, b) {
    var c = a.indexOf("var(");
    if (-1 === c) return b(a, "", "", "");
    var d = ei(a, c + 3), e = a.substring(c + 4, d);
    c = a.substring(0, c);
    a = fi(a.substring(d + 1), b);
    d = e.indexOf(",");
    return -1 === d ? b(c, e.trim(), "", a) : b(c, e.substring(0, d).trim(), e.substring(d + 1).trim(), a);
  }
  function gi(a, b) {
    V ? a.setAttribute("class", b) : window.ShadyDOM.nativeMethods.setAttribute.call(a, "class", b);
  }
  var hi = window.ShadyDOM && window.ShadyDOM.wrap || function(a) {
    return a;
  };
  function ii(a) {
    var b = a.localName, c = "";
    b ? -1 < b.indexOf("-") || (c = b, b = a.getAttribute && a.getAttribute("is") || "") : (b = a.is, c = a.extends);
    return { is: b, ja: c };
  }
  function ji(a) {
    for (var b = [], c = "", d = 0; 0 <= d && d < a.length; d++) if ("(" === a[d]) {
      var e = ei(a, d);
      c += a.slice(d, e + 1);
      d = e;
    } else "," === a[d] ? (b.push(c), c = "") : c += a[d];
    c && b.push(c);
    return b;
  }
  function ki(a) {
    if (void 0 !== Nh) return Nh;
    if (void 0 === a.__cssBuild) {
      var b = a.getAttribute("css-build");
      if (b) a.__cssBuild = b;
      else {
        a: {
          b = "template" === a.localName ? a.content.firstChild : a.firstChild;
          if (b instanceof Comment && (b = b.textContent.trim().split(":"), "css-build" === b[0])) {
            b = b[1];
            break a;
          }
          b = "";
        }
        if ("" !== b) {
          var c = "template" === a.localName ? a.content.firstChild : a.firstChild;
          c.parentNode.removeChild(c);
        }
        a.__cssBuild = b;
      }
    }
    return a.__cssBuild || "";
  }
  function li(a) {
    a = void 0 === a ? "" : a;
    return "" !== a && W ? V ? "shadow" === a : "shady" === a : false;
  }
  function mi() {
  }
  function ni(a, b) {
    oi(pi, a, function(c) {
      qi(c, b || "");
    });
  }
  function oi(a, b, c) {
    b.nodeType === Node.ELEMENT_NODE && c(b);
    var d;
    "template" === b.localName ? d = (b.content || b._content || b).childNodes : d = b.children || b.childNodes;
    if (d) for (b = 0; b < d.length; b++) oi(a, d[b], c);
  }
  function qi(a, b, c) {
    if (b) {
      if (a.classList) c ? (a.classList.remove("style-scope"), a.classList.remove(b)) : (a.classList.add("style-scope"), a.classList.add(b));
      else if (a.getAttribute) {
        var d = a.getAttribute("class");
        c ? d && (b = d.replace("style-scope", "").replace(b, ""), gi(a, b)) : gi(a, (d ? d + " " : "") + "style-scope " + b);
      }
    }
  }
  function ri(a, b, c) {
    oi(pi, a, function(d) {
      qi(d, b, true);
      qi(d, c);
    });
  }
  function si(a, b) {
    oi(pi, a, function(c) {
      qi(c, b || "", true);
    });
  }
  function ti(a, b, c, d, e) {
    var f = pi;
    e = void 0 === e ? "" : e;
    "" === e && (V || "shady" === (void 0 === d ? "" : d) ? e = Wh(b, c) : (a = ii(a), e = ui(f, b, a.is, a.ja, c) + "\n\n"));
    return e.trim();
  }
  function ui(a, b, c, d, e) {
    var f = vi(c, d);
    c = c ? "." + c : "";
    return Wh(b, function(g) {
      g.i || (g.selector = g.G = wi(a, g, a.h, c, f), g.i = true);
      e && e(g, c, f);
    });
  }
  function vi(a, b) {
    return b ? "[is=" + a + "]" : a;
  }
  function wi(a, b, c, d, e) {
    var f = ji(b.selector);
    if (!$h(b)) {
      b = 0;
      for (var g = f.length, h = void 0; b < g && (h = f[b]); b++) f[b] = c.call(a, h, d, e);
    }
    return f.filter(function(k) {
      return !!k;
    }).join(",");
  }
  function xi(a) {
    return a.replace(yi, function(b, c, d) {
      -1 < d.indexOf("+") ? d = d.replace(/\+/g, "___") : -1 < d.indexOf("___") && (d = d.replace(/___/g, "+"));
      return ":" + c + "(" + d + ")";
    });
  }
  function zi(a) {
    for (var b = [], c; c = a.match(Ai); ) {
      var d = c.index, e = ei(a, d);
      if (-1 === e) throw Error(c.input + " selector missing ')'");
      c = a.slice(d, e + 1);
      a = a.replace(c, "");
      b.push(c);
    }
    return { Ea: a, matches: b };
  }
  function Bi(a, b) {
    var c = a.split("");
    return b.reduce(function(d, e, f) {
      return d + e + c[f + 1];
    }, c[0]);
  }
  mi.prototype.h = function(a, b, c) {
    var d = false;
    a = a.trim();
    var e = yi.test(a);
    e && (a = a.replace(yi, function(h, k, l) {
      return ":" + k + "(" + l.replace(/\s/g, "") + ")";
    }), a = xi(a));
    var f = Ai.test(a);
    if (f) {
      var g = zi(a);
      a = g.Ea;
      g = g.matches;
    }
    a = a.replace(Ci, ":host $1");
    a = a.replace(Di, function(h, k, l) {
      d || (h = Ei(l, k, b, c), d = d || h.stop, k = h.Ya, l = h.value);
      return k + l;
    });
    f && (a = Bi(a, g));
    e && (a = xi(a));
    return a = a.replace(Fi, function(h, k, l, m) {
      return '[dir="' + l + '"] ' + k + m + ", " + k + '[dir="' + l + '"]' + m;
    });
  };
  function Ei(a, b, c, d) {
    var e = a.indexOf("::slotted");
    0 <= a.indexOf(":host") ? a = Gi(a, d) : 0 !== e && (a = c ? Hi(a, c) : a);
    c = false;
    0 <= e && (b = "", c = true);
    if (c) {
      var f = true;
      c && (a = a.replace(Ii, function(g, h) {
        return " > " + h;
      }));
    }
    return { value: a, Ya: b, stop: f };
  }
  function Hi(a, b) {
    a = a.split(/(\[.+?\])/);
    for (var c = [], d = 0; d < a.length; d++) if (1 === d % 2) c.push(a[d]);
    else {
      var e = a[d];
      if ("" !== e || d !== a.length - 1) e = e.split(":"), e[0] += b, c.push(e.join(":"));
    }
    return c.join("");
  }
  function Gi(a, b) {
    var c = a.match(Ji);
    return (c = c && c[2].trim() || "") ? c[0].match(Ki) ? a.replace(Ji, function(d, e, f) {
      return b + f;
    }) : c.split(Ki)[0] === b ? c : "should_not_match" : a.replace(":host", b);
  }
  function Li(a) {
    ":root" === a.selector && (a.selector = "html");
  }
  mi.prototype.i = function(a) {
    return a.match(":host") ? "" : a.match("::slotted") ? this.h(a, ":not(.style-scope)") : Hi(a.trim(), ":not(.style-scope)");
  };
  ea.Object.defineProperties(mi.prototype, { g: { configurable: true, enumerable: true, get: function() {
    return "style-scope";
  } } });
  var yi = /:(nth[-\w]+)\(([^)]+)\)/, Di = /(^|[\s>+~]+)((?:\[.+?\]|[^\s>+~=[])+)/g, Ki = /[[.:#*]/, Ci = /^(::slotted)/, Ji = /(:host)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/, Ii = /(?:::slotted)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/, Fi = /(.*):dir\((?:(ltr|rtl))\)(.*)/, Ai = /:(?:matches|any|-(?:webkit|moz)-any)/, pi = new mi();
  function Mi(a, b, c, d, e) {
    this.M = a || null;
    this.h = b || null;
    this.Ca = c || [];
    this.K = null;
    this.cssBuild = e || "";
    this.ja = d || "";
    this.g = this.L = this.R = null;
  }
  function Ni(a) {
    return a ? a.__styleInfo : null;
  }
  function Oi(a, b) {
    return a.__styleInfo = b;
  }
  Mi.prototype.i = function() {
    return this.M;
  };
  Mi.prototype._getStyleRules = Mi.prototype.i;
  function Pi(a) {
    var b = this.matches || this.matchesSelector || this.mozMatchesSelector || this.msMatchesSelector || this.oMatchesSelector || this.webkitMatchesSelector;
    return b && b.call(this, a);
  }
  var Qi = /:host\s*>\s*/, Ri = navigator.userAgent.match("Trident");
  function Si() {
  }
  function Ti(a) {
    var b = {}, c = [], d = 0;
    Xh(a, function(f) {
      Ui(f);
      f.index = d++;
      f = f.F.cssText;
      for (var g; g = Rh.exec(f); ) {
        var h = g[1];
        ":" !== g[2] && (b[h] = true);
      }
    }, function(f) {
      c.push(f);
    });
    a.h = c;
    a = [];
    for (var e in b) a.push(e);
    return a;
  }
  function Ui(a) {
    if (!a.F) {
      var b = {}, c = {};
      Vi(a, c) && (b.P = c, a.rules = null);
      b.cssText = a.parsedCssText.replace(Uh, "").replace(Ph, "");
      a.F = b;
    }
  }
  function Vi(a, b) {
    var c = a.F;
    if (c) {
      if (c.P) return Object.assign(b, c.P), true;
    } else {
      c = a.parsedCssText;
      for (var d; a = Ph.exec(c); ) {
        d = (a[2] || a[3]).trim();
        if ("inherit" !== d || "unset" !== d) b[a[1].trim()] = d;
        d = true;
      }
      return d;
    }
  }
  function Wi(a, b, c) {
    b && (b = 0 <= b.indexOf(";") ? Xi(a, b, c) : fi(b, function(d, e, f, g) {
      if (!e) return d + g;
      (e = Wi(a, c[e], c)) && "initial" !== e ? "apply-shim-inherit" === e && (e = "inherit") : e = Wi(a, c[f] || f, c) || f;
      return d + (e || "") + g;
    }));
    return b && b.trim() || "";
  }
  function Xi(a, b, c) {
    b = b.split(";");
    for (var d = 0, e, f; d < b.length; d++) if (e = b[d]) {
      Qh.lastIndex = 0;
      if (f = Qh.exec(e)) e = Wi(a, c[f[1]], c);
      else if (f = e.indexOf(":"), -1 !== f) {
        var g = e.substring(f);
        g = g.trim();
        g = Wi(a, g, c) || g;
        e = e.substring(0, f) + g;
      }
      b[d] = e && e.lastIndexOf(";") === e.length - 1 ? e.slice(0, -1) : e || "";
    }
    return b.join(";");
  }
  function Yi(a, b) {
    var c = {}, d = [];
    Xh(a, function(e) {
      e.F || Ui(e);
      var f = e.G || e.parsedSelector;
      b && e.F.P && f && Pi.call(b, f) && (Vi(e, c), e = e.index, f = parseInt(e / 32, 10), d[f] = (d[f] || 0) | 1 << e % 32);
    }, null, true);
    return { P: c, key: d };
  }
  function Zi(a, b, c, d) {
    b.F || Ui(b);
    if (b.F.P) {
      var e = ii(a);
      a = e.is;
      e = e.ja;
      e = a ? vi(a, e) : "html";
      var f = b.parsedSelector;
      var g = !!f.match(Qi) || "html" === e && -1 < f.indexOf("html");
      var h = 0 === f.indexOf(":host") && !g;
      "shady" === c && (g = f === e + " > *." + e || -1 !== f.indexOf("html"), h = !g && 0 === f.indexOf(e));
      if (g || h) c = e, h && (b.G || (b.G = wi(pi, b, pi.h, a ? "." + a : "", e)), c = b.G || e), g && "html" === e && (c = b.G || b.O), d({ Ea: c, gb: h, vb: g });
    }
  }
  function $i(a, b, c) {
    var d = {}, e = {};
    Xh(b, function(f) {
      Zi(a, f, c, function(g) {
        Pi.call(a._element || a, g.Ea) && (g.gb ? Vi(f, d) : Vi(f, e));
      });
    }, null, true);
    return { mb: e, eb: d };
  }
  function aj(a, b, c, d) {
    var e = ii(b), f = vi(e.is, e.ja), g = new RegExp("(?:^|[^.#[:])" + (b.extends ? "\\" + f.slice(0, -1) + "\\]" : f) + "($|[.:[\\s>+~])"), h = Ni(b);
    e = h.M;
    h = h.cssBuild;
    var k = bj(e, d);
    return ti(b, e, function(l) {
      var m = "";
      l.F || Ui(l);
      l.F.cssText && (m = Xi(a, l.F.cssText, c));
      l.cssText = m;
      if (!V && !$h(l) && l.cssText) {
        var q = m = l.cssText;
        null == l.Ma && (l.Ma = Sh.test(m));
        if (l.Ma) if (null == l.ra) {
          l.ra = [];
          for (var H in k) q = k[H], q = q(m), m !== q && (m = q, l.ra.push(H));
        } else {
          for (H = 0; H < l.ra.length; ++H) q = k[l.ra[H]], m = q(m);
          q = m;
        }
        l.cssText = q;
        l.G = l.G || l.selector;
        m = "." + d;
        H = ji(l.G);
        q = 0;
        for (var C = H.length, t = void 0; q < C && (t = H[q]); q++) H[q] = t.match(g) ? t.replace(f, m) : m + " " + t;
        l.selector = H.join(",");
      }
    }, h);
  }
  function bj(a, b) {
    a = a.h;
    var c = {};
    if (!V && a) for (var d = 0, e = a[d]; d < a.length; e = a[++d]) {
      var f = e, g = b;
      f.u = new RegExp("\\b" + f.keyframesName + "(?!\\B|-)", "g");
      f.g = f.keyframesName + "-" + g;
      f.G = f.G || f.selector;
      f.selector = f.G.replace(f.keyframesName, f.g);
      c[e.keyframesName] = cj(e);
    }
    return c;
  }
  function cj(a) {
    return function(b) {
      return b.replace(a.u, a.g);
    };
  }
  function dj(a, b) {
    var c = ej, d = Yh(a);
    a.textContent = Wh(d, function(e) {
      var f = e.cssText = e.parsedCssText;
      e.F && e.F.cssText && (f = f.replace(Hh, "").replace(Ih, ""), e.cssText = Xi(c, f, b));
    });
  }
  ea.Object.defineProperties(Si.prototype, { g: { configurable: true, enumerable: true, get: function() {
    return "x-scope";
  } } });
  var ej = new Si();
  var fj = {}, gj = window.customElements;
  if (gj && !V && !Oh) {
    var hj = gj.define;
    gj.define = function(a, b, c) {
      fj[a] || (fj[a] = di(a));
      hj.call(gj, a, b, c);
    };
  }
  function ij() {
    this.cache = {};
  }
  ij.prototype.store = function(a, b, c, d) {
    var e = this.cache[a] || [];
    e.push({ P: b, styleElement: c, L: d });
    100 < e.length && e.shift();
    this.cache[a] = e;
  };
  function jj() {
  }
  var kj = new RegExp(pi.g + "\\s*([^\\s]*)");
  function lj(a) {
    return (a = (a.classList && a.classList.value ? a.classList.value : a.getAttribute("class") || "").match(kj)) ? a[1] : "";
  }
  function mj(a) {
    var b = hi(a).getRootNode();
    return b === a || b === a.ownerDocument ? "" : (a = b.host) ? ii(a).is : "";
  }
  function nj(a) {
    for (var b = 0; b < a.length; b++) {
      var c = a[b];
      if (c.target !== document.documentElement && c.target !== document.head) for (var d = 0; d < c.addedNodes.length; d++) {
        var e = c.addedNodes[d];
        if (e.nodeType === Node.ELEMENT_NODE) {
          var f = e.getRootNode(), g = lj(e);
          if (g && f === e.ownerDocument && ("style" !== e.localName && "template" !== e.localName || "" === ki(e))) si(e, g);
          else if (f instanceof ShadowRoot) for (f = mj(e), f !== g && ri(e, g, f), e = window.ShadyDOM.nativeMethods.querySelectorAll.call(e, ":not(." + pi.g + ")"), g = 0; g < e.length; g++) {
            f = e[g];
            var h = mj(f);
            h && qi(f, h);
          }
        }
      }
    }
  }
  if (!(V || window.ShadyDOM && window.ShadyDOM.handlesDynamicScoping)) {
    var oj = new MutationObserver(nj), pj = function(a) {
      oj.observe(a, { childList: true, subtree: true });
    };
    if (window.customElements && !window.customElements.polyfillWrapFlushCallback) pj(document);
    else {
      var qj = function() {
        pj(document.body);
      };
      window.HTMLImports ? window.HTMLImports.whenReady(qj) : requestAnimationFrame(function() {
        if ("loading" === document.readyState) {
          var a = function() {
            qj();
            document.removeEventListener("readystatechange", a);
          };
          document.addEventListener(
            "readystatechange",
            a
          );
        } else qj();
      });
    }
    jj = function() {
      nj(oj.takeRecords());
    };
  }
  var rj = {};
  var sj = Promise.resolve();
  function tj(a) {
    if (a = rj[a]) a._applyShimCurrentVersion = a._applyShimCurrentVersion || 0, a._applyShimValidatingVersion = a._applyShimValidatingVersion || 0, a._applyShimNextVersion = (a._applyShimNextVersion || 0) + 1;
  }
  function uj(a) {
    return a._applyShimCurrentVersion === a._applyShimNextVersion;
  }
  function vj(a) {
    a._applyShimValidatingVersion = a._applyShimNextVersion;
    a._validating || (a._validating = true, sj.then(function() {
      a._applyShimCurrentVersion = a._applyShimNextVersion;
      a._validating = false;
    }));
  }
  var wj = {}, xj = new ij();
  function Y() {
    this.ea = {};
    this.i = document.documentElement;
    var a = new uh();
    a.rules = [];
    this.u = Oi(this.i, new Mi(a));
    this.O = false;
    this.g = this.h = null;
  }
  v = Y.prototype;
  v.flush = function() {
    jj();
  };
  v.bb = function(a) {
    return Yh(a);
  };
  v.qb = function(a) {
    return Wh(a);
  };
  v.prepareTemplate = function(a, b, c) {
    this.prepareTemplateDom(a, b);
    this.prepareTemplateStyles(a, b, c);
  };
  v.prepareTemplateStyles = function(a, b, c) {
    if (!a._prepared && !Oh) {
      V || fj[b] || (fj[b] = di(b));
      a._prepared = true;
      a.name = b;
      a.extends = c;
      rj[b] = a;
      var d = ki(a), e = li(d);
      c = { is: b, extends: c };
      for (var f = [], g = a.content.querySelectorAll("style"), h = 0; h < g.length; h++) {
        var k = g[h];
        if (k.hasAttribute("shady-unscoped")) {
          if (!V) {
            var l = k.textContent;
            if (!Vh.has(l)) {
              Vh.add(l);
              var m = document.createElement("style");
              m.setAttribute("shady-unscoped", "");
              m.textContent = l;
              document.head.appendChild(m);
            }
            k.parentNode.removeChild(k);
          }
        } else f.push(k.textContent), k.parentNode.removeChild(k);
      }
      f = f.join("").trim() + (wj[b] || "");
      yj(this);
      if (!e) {
        if (g = !d) g = Qh.test(f) || Ph.test(f), Qh.lastIndex = 0, Ph.lastIndex = 0;
        h = vh(f);
        g && W && this.h && this.h.transformRules(h, b);
        a._styleAst = h;
      }
      g = [];
      W || (g = Ti(a._styleAst));
      if (!g.length || W) h = V ? a.content : null, b = fj[b] || null, d = ti(c, a._styleAst, null, d, e ? f : ""), d = d.length ? ai(d, c.is, h, b) : null, a._style = d;
      a.g = g;
    }
  };
  v.kb = function(a, b) {
    wj[b] = a.join(" ");
  };
  v.prepareTemplateDom = function(a, b) {
    if (!Oh) {
      var c = ki(a);
      V || "shady" === c || a._domPrepared || (a._domPrepared = true, ni(a.content, b));
    }
  };
  function zj(a) {
    var b = ii(a), c = b.is;
    b = b.ja;
    var d = fj[c] || null, e = rj[c];
    if (e) {
      c = e._styleAst;
      var f = e.g;
      e = ki(e);
      b = new Mi(c, d, f, b, e);
      Oi(a, b);
      return b;
    }
  }
  function Aj(a) {
    !a.g && window.ShadyCSS && window.ShadyCSS.CustomStyleInterface && (a.g = window.ShadyCSS.CustomStyleInterface, a.g.transformCallback = function(b) {
      a.Qa(b);
    }, a.g.validateCallback = function() {
      requestAnimationFrame(function() {
        (a.g.enqueued || a.O) && a.flushCustomStyles();
      });
    });
  }
  function yj(a) {
    if (!a.h && window.ShadyCSS && window.ShadyCSS.ApplyShim) {
      a.h = window.ShadyCSS.ApplyShim;
      a.h.invalidCallback = tj;
      var b = true;
    } else b = false;
    Aj(a);
    return b;
  }
  v.flushCustomStyles = function() {
    if (!Oh) {
      var a = yj(this);
      if (this.g) {
        var b = this.g.processStyles();
        if ((a || this.g.enqueued) && !li(this.u.cssBuild)) {
          if (W) {
            if (!this.u.cssBuild) for (a = 0; a < b.length; a++) {
              var c = this.g.getStyleForCustomStyle(b[a]);
              if (c && W && this.h) {
                var d = Yh(c);
                yj(this);
                this.h.transformRules(d);
                c.textContent = Wh(d);
              }
            }
          } else {
            Bj(this, b);
            Cj(this, this.i, this.u);
            for (a = 0; a < b.length; a++) (c = this.g.getStyleForCustomStyle(b[a])) && dj(c, this.u.R);
            this.O && this.styleDocument();
          }
          this.g.enqueued = false;
        }
      }
    }
  };
  function Bj(a, b) {
    b = b.map(function(c) {
      return a.g.getStyleForCustomStyle(c);
    }).filter(function(c) {
      return !!c;
    });
    b.sort(function(c, d) {
      c = d.compareDocumentPosition(c);
      return c & Node.DOCUMENT_POSITION_FOLLOWING ? 1 : c & Node.DOCUMENT_POSITION_PRECEDING ? -1 : 0;
    });
    a.u.M.rules = b.map(function(c) {
      return Yh(c);
    });
  }
  v.styleElement = function(a, b) {
    if (Oh) {
      if (b) {
        Ni(a) || Oi(a, new Mi(null));
        var c = Ni(a);
        c.K = c.K || {};
        Object.assign(c.K, b);
        Dj(this, a, c);
      }
    } else if (c = Ni(a) || zj(a)) {
      if (a !== this.i && (this.O = true), b && (c.K = c.K || {}, Object.assign(c.K, b)), W) Dj(this, a, c);
      else if (this.flush(), Cj(this, a, c), c.Ca && c.Ca.length) {
        b = ii(a).is;
        var d;
        a: {
          if (d = xj.cache[b]) for (var e = d.length - 1; 0 <= e; e--) {
            var f = d[e];
            b: {
              var g = c.Ca;
              for (var h = 0; h < g.length; h++) {
                var k = g[h];
                if (f.P[k] !== c.R[k]) {
                  g = false;
                  break b;
                }
              }
              g = true;
            }
            if (g) {
              d = f;
              break a;
            }
          }
          d = void 0;
        }
        g = d ? d.styleElement : null;
        e = c.L;
        (f = d && d.L) || (f = this.ea[b] = (this.ea[b] || 0) + 1, f = b + "-" + f);
        c.L = f;
        f = c.L;
        h = ej;
        h = g ? g.textContent || "" : aj(h, a, c.R, f);
        k = Ni(a);
        var l = k.g;
        l && !V && l !== g && (l._useCount--, 0 >= l._useCount && l.parentNode && l.parentNode.removeChild(l));
        V ? k.g ? (k.g.textContent = h, g = k.g) : h && (g = ai(h, f, a.shadowRoot, k.h)) : g ? g.parentNode || (Ri && -1 < h.indexOf("@media") && (g.textContent = h), bi(g, null, k.h)) : h && (g = ai(h, f, null, k.h));
        g && (g._useCount = g._useCount || 0, k.g != g && g._useCount++, k.g = g);
        f = g;
        V || (g = c.L, k = h = a.getAttribute("class") || "", e && (k = h.replace(new RegExp("\\s*x-scope\\s*" + e + "\\s*", "g"), " ")), k += (k ? " " : "") + "x-scope " + g, h !== k && gi(a, k));
        d || xj.store(b, c.R, f, c.L);
      }
    }
  };
  function Dj(a, b, c) {
    var d = ii(b).is;
    if (c.K) {
      var e = c.K, f;
      for (f in e) null === f ? b.style.removeProperty(f) : b.style.setProperty(f, e[f]);
    }
    e = rj[d];
    if (!(!e && b !== a.i || e && "" !== ki(e)) && e && e._style && !uj(e)) {
      if (uj(e) || e._applyShimValidatingVersion !== e._applyShimNextVersion) yj(a), a.h && a.h.transformRules(e._styleAst, d), e._style.textContent = ti(b, c.M), vj(e);
      V && (a = b.shadowRoot) && (a = a.querySelector("style")) && (a.textContent = ti(b, c.M));
      c.M = e._styleAst;
    }
  }
  function Ej(a, b) {
    return (b = hi(b).getRootNode().host) ? Ni(b) || zj(b) ? b : Ej(a, b) : a.i;
  }
  function Cj(a, b, c) {
    var d = Ej(a, b), e = Ni(d), f = e.R;
    d === a.i || f || (Cj(a, d, e), f = e.R);
    a = Object.create(f || null);
    d = $i(b, c.M, c.cssBuild);
    b = Yi(e.M, b).P;
    Object.assign(a, d.eb, b, d.mb);
    b = c.K;
    for (var g in b) if ((e = b[g]) || 0 === e) a[g] = e;
    g = ej;
    b = Object.getOwnPropertyNames(a);
    for (e = 0; e < b.length; e++) d = b[e], a[d] = Wi(g, a[d], a);
    c.R = a;
  }
  v.styleDocument = function(a) {
    this.styleSubtree(this.i, a);
  };
  v.styleSubtree = function(a, b) {
    var c = hi(a), d = c.shadowRoot, e = a === this.i;
    (d || e) && this.styleElement(a, b);
    if (a = e ? c : d) for (a = Array.from(a.querySelectorAll("*")).filter(function(f) {
      return hi(f).shadowRoot;
    }), b = 0; b < a.length; b++) this.styleSubtree(a[b]);
  };
  v.Qa = function(a) {
    var b = this, c = ki(a);
    c !== this.u.cssBuild && (this.u.cssBuild = c);
    if (!li(c)) {
      var d = Yh(a);
      Xh(d, function(e) {
        if (V) Li(e);
        else {
          var f = pi;
          e.selector = e.parsedSelector;
          Li(e);
          e.selector = e.G = wi(f, e, f.i, void 0, void 0);
        }
        W && "" === c && (yj(b), b.h && b.h.transformRule(e));
      });
      W ? a.textContent = Wh(d) : this.u.M.rules.push(d);
    }
  };
  v.getComputedStyleValue = function(a, b) {
    var c;
    W || (c = (Ni(a) || Ni(Ej(this, a))).R[b]);
    return (c = c || window.getComputedStyle(a).getPropertyValue(b)) ? c.trim() : "";
  };
  v.pb = function(a, b) {
    var c = hi(a).getRootNode();
    b = b ? ("string" === typeof b ? b : String(b)).split(/\s/) : [];
    c = c.host && c.host.localName;
    if (!c) {
      var d = a.getAttribute("class");
      if (d) {
        d = d.split(/\s/);
        for (var e = 0; e < d.length; e++) if (d[e] === pi.g) {
          c = d[e + 1];
          break;
        }
      }
    }
    c && b.push(pi.g, c);
    W || (c = Ni(a)) && c.L && b.push(ej.g, c.L);
    gi(a, b.join(" "));
  };
  v.Xa = function(a) {
    return Ni(a);
  };
  v.ob = function(a, b) {
    qi(a, b);
  };
  v.rb = function(a, b) {
    qi(a, b, true);
  };
  v.nb = function(a) {
    return mj(a);
  };
  v.$a = function(a) {
    return lj(a);
  };
  Y.prototype.flush = Y.prototype.flush;
  Y.prototype.prepareTemplate = Y.prototype.prepareTemplate;
  Y.prototype.styleElement = Y.prototype.styleElement;
  Y.prototype.styleDocument = Y.prototype.styleDocument;
  Y.prototype.styleSubtree = Y.prototype.styleSubtree;
  Y.prototype.getComputedStyleValue = Y.prototype.getComputedStyleValue;
  Y.prototype.setElementClass = Y.prototype.pb;
  Y.prototype._styleInfoForNode = Y.prototype.Xa;
  Y.prototype.transformCustomStyleForDocument = Y.prototype.Qa;
  Y.prototype.getStyleAst = Y.prototype.bb;
  Y.prototype.styleAstToString = Y.prototype.qb;
  Y.prototype.flushCustomStyles = Y.prototype.flushCustomStyles;
  Y.prototype.scopeNode = Y.prototype.ob;
  Y.prototype.unscopeNode = Y.prototype.rb;
  Y.prototype.scopeForNode = Y.prototype.nb;
  Y.prototype.currentScopeForNode = Y.prototype.$a;
  Y.prototype.prepareAdoptedCssText = Y.prototype.kb;
  Object.defineProperties(Y.prototype, { nativeShadow: { get: function() {
    return V;
  } }, nativeCss: { get: function() {
    return W;
  } } });
  var Z = new Y(), Fj, Gj;
  window.ShadyCSS && (Fj = window.ShadyCSS.ApplyShim, Gj = window.ShadyCSS.CustomStyleInterface);
  window.ShadyCSS = {
    ScopingShim: Z,
    prepareTemplate: function(a, b, c) {
      Z.flushCustomStyles();
      Z.prepareTemplate(a, b, c);
    },
    prepareTemplateDom: function(a, b) {
      Z.prepareTemplateDom(a, b);
    },
    prepareTemplateStyles: function(a, b, c) {
      Z.flushCustomStyles();
      Z.prepareTemplateStyles(a, b, c);
    },
    styleSubtree: function(a, b) {
      Z.flushCustomStyles();
      Z.styleSubtree(a, b);
    },
    styleElement: function(a) {
      Z.flushCustomStyles();
      Z.styleElement(a);
    },
    styleDocument: function(a) {
      Z.flushCustomStyles();
      Z.styleDocument(a);
    },
    flushCustomStyles: function() {
      Z.flushCustomStyles();
    },
    getComputedStyleValue: function(a, b) {
      return Z.getComputedStyleValue(a, b);
    },
    nativeCss: W,
    nativeShadow: V,
    cssBuild: Nh,
    disableRuntime: Oh
  };
  Fj && (window.ShadyCSS.ApplyShim = Fj);
  Gj && (window.ShadyCSS.CustomStyleInterface = Gj);
  (function(a) {
    function b(t) {
      "" == t && (f.call(this), this.m = true);
      return t.toLowerCase();
    }
    function c(t) {
      var F = t.charCodeAt(0);
      return 32 < F && 127 > F && -1 == [34, 35, 60, 62, 63, 96].indexOf(F) ? t : encodeURIComponent(t);
    }
    function d(t) {
      var F = t.charCodeAt(0);
      return 32 < F && 127 > F && -1 == [34, 35, 60, 62, 96].indexOf(F) ? t : encodeURIComponent(t);
    }
    function e(t, F, E) {
      function N(ha) {
      }
      var y = F || "scheme start", X = 0, x = "", ta = false, ia = false;
      a: for (; (void 0 != t[X - 1] || 0 == X) && !this.m; ) {
        var n = t[X];
        switch (y) {
          case "scheme start":
            if (n && q.test(n)) x += n.toLowerCase(), y = "scheme";
            else if (F) {
              break a;
            } else {
              x = "";
              y = "no scheme";
              continue;
            }
            break;
          case "scheme":
            if (n && H.test(n)) x += n.toLowerCase();
            else if (":" == n) {
              this.l = x;
              x = "";
              if (F) break a;
              void 0 !== l[this.l] && (this.H = true);
              y = "file" == this.l ? "relative" : this.H && E && E.l == this.l ? "relative or authority" : this.H ? "authority first slash" : "scheme data";
            } else if (F) {
              break a;
            } else {
              x = "";
              X = 0;
              y = "no scheme";
              continue;
            }
            break;
          case "scheme data":
            "?" == n ? (this.A = "?", y = "query") : "#" == n ? (this.C = "#", y = "fragment") : void 0 != n && "	" != n && "\n" != n && "\r" != n && (this.ya += c(n));
            break;
          case "no scheme":
            if (E && void 0 !== l[E.l]) {
              y = "relative";
              continue;
            } else f.call(this), this.m = true;
            break;
          case "relative or authority":
            if ("/" == n && "/" == t[X + 1]) y = "authority ignore slashes";
            else {
              y = "relative";
              continue;
            }
            break;
          case "relative":
            this.H = true;
            "file" != this.l && (this.l = E.l);
            if (void 0 == n) {
              this.o = E.o;
              this.v = E.v;
              this.s = E.s.slice();
              this.A = E.A;
              this.B = E.B;
              this.j = E.j;
              break a;
            } else if ("/" == n || "\\" == n) y = "relative slash";
            else if ("?" == n) this.o = E.o, this.v = E.v, this.s = E.s.slice(), this.A = "?", this.B = E.B, this.j = E.j, y = "query";
            else if ("#" == n) this.o = E.o, this.v = E.v, this.s = E.s.slice(), this.A = E.A, this.C = "#", this.B = E.B, this.j = E.j, y = "fragment";
            else {
              y = t[X + 1];
              var J = t[X + 2];
              if ("file" != this.l || !q.test(n) || ":" != y && "|" != y || void 0 != J && "/" != J && "\\" != J && "?" != J && "#" != J) this.o = E.o, this.v = E.v, this.B = E.B, this.j = E.j, this.s = E.s.slice(), this.s.pop();
              y = "relative path";
              continue;
            }
            break;
          case "relative slash":
            if ("/" == n || "\\" == n) y = "file" == this.l ? "file host" : "authority ignore slashes";
            else {
              "file" != this.l && (this.o = E.o, this.v = E.v, this.B = E.B, this.j = E.j);
              y = "relative path";
              continue;
            }
            break;
          case "authority first slash":
            if ("/" == n) y = "authority second slash";
            else {
              y = "authority ignore slashes";
              continue;
            }
            break;
          case "authority second slash":
            y = "authority ignore slashes";
            if ("/" != n) {
              continue;
            }
            break;
          case "authority ignore slashes":
            if ("/" != n && "\\" != n) {
              y = "authority";
              continue;
            }
            break;
          case "authority":
            if ("@" == n) {
              ta && (x += "%40");
              ta = true;
              for (n = 0; n < x.length; n++) J = x[n], "	" == J || "\n" == J || "\r" == J ? N() : ":" == J && null === this.j ? this.j = "" : (J = c(J), null !== this.j ? this.j += J : this.B += J);
              x = "";
            } else if (void 0 == n || "/" == n || "\\" == n || "?" == n || "#" == n) {
              X -= x.length;
              x = "";
              y = "host";
              continue;
            } else x += n;
            break;
          case "file host":
            if (void 0 == n || "/" == n || "\\" == n || "?" == n || "#" == n) {
              2 != x.length || !q.test(x[0]) || ":" != x[1] && "|" != x[1] ? (0 != x.length && (this.o = b.call(this, x), x = ""), y = "relative path start") : y = "relative path";
              continue;
            } else "	" == n || "\n" == n || "\r" == n ? N() : x += n;
            break;
          case "host":
          case "hostname":
            if (":" != n || ia) if (void 0 == n || "/" == n || "\\" == n || "?" == n || "#" == n) {
              this.o = b.call(this, x);
              x = "";
              y = "relative path start";
              if (F) break a;
              continue;
            } else "	" != n && "\n" != n && "\r" != n ? ("[" == n ? ia = true : "]" == n && (ia = false), x += n) : N();
            else if (this.o = b.call(this, x), x = "", y = "port", "hostname" == F) break a;
            break;
          case "port":
            if (/[0-9]/.test(n)) x += n;
            else if (void 0 == n || "/" == n || "\\" == n || "?" == n || "#" == n || F) {
              "" != x && (x = parseInt(x, 10), x != l[this.l] && (this.v = x + ""), x = "");
              if (F) break a;
              y = "relative path start";
              continue;
            } else "	" == n || "\n" == n || "\r" == n ? N() : (f.call(this), this.m = true);
            break;
          case "relative path start":
            y = "relative path";
            if ("/" != n && "\\" != n) continue;
            break;
          case "relative path":
            if (void 0 != n && "/" != n && "\\" != n && (F || "?" != n && "#" != n)) "	" != n && "\n" != n && "\r" != n && (x += c(n));
            else {
              if (J = m[x.toLowerCase()]) x = J;
              ".." == x ? (this.s.pop(), "/" != n && "\\" != n && this.s.push("")) : "." == x && "/" != n && "\\" != n ? this.s.push("") : "." != x && ("file" == this.l && 0 == this.s.length && 2 == x.length && q.test(x[0]) && "|" == x[1] && (x = x[0] + ":"), this.s.push(x));
              x = "";
              "?" == n ? (this.A = "?", y = "query") : "#" == n && (this.C = "#", y = "fragment");
            }
            break;
          case "query":
            F || "#" != n ? void 0 != n && "	" != n && "\n" != n && "\r" != n && (this.A += d(n)) : (this.C = "#", y = "fragment");
            break;
          case "fragment":
            void 0 != n && "	" != n && "\n" != n && "\r" != n && (this.C += n);
        }
        X++;
      }
    }
    function f() {
      this.B = this.ya = this.l = "";
      this.j = null;
      this.v = this.o = "";
      this.s = [];
      this.C = this.A = "";
      this.H = this.m = false;
    }
    function g(t, F) {
      void 0 === F || F instanceof g || (F = new g(String(F)));
      this.g = t;
      f.call(this);
      e.call(this, this.g.replace(/^[ \t\r\n\f]+|[ \t\r\n\f]+$/g, ""), null, F);
    }
    var h = false;
    try {
      var k = new URL("b", "http://a");
      k.pathname = "c%20d";
      h = "http://a/c%20d" === k.href;
    } catch (t) {
    }
    if (!h) {
      var l = /* @__PURE__ */ Object.create(null);
      l.ftp = 21;
      l.file = 0;
      l.gopher = 70;
      l.http = 80;
      l.https = 443;
      l.ws = 80;
      l.wss = 443;
      var m = /* @__PURE__ */ Object.create(null);
      m["%2e"] = ".";
      m[".%2e"] = "..";
      m["%2e."] = "..";
      m["%2e%2e"] = "..";
      var q = /[a-zA-Z]/, H = /[a-zA-Z0-9+\-.]/;
      g.prototype = { toString: function() {
        return this.href;
      }, get href() {
        if (this.m) return this.g;
        var t = "";
        if ("" != this.B || null != this.j) t = this.B + (null != this.j ? ":" + this.j : "") + "@";
        return this.protocol + (this.H ? "//" + t + this.host : "") + this.pathname + this.A + this.C;
      }, set href(t) {
        f.call(this);
        e.call(this, t);
      }, get protocol() {
        return this.l + ":";
      }, set protocol(t) {
        this.m || e.call(this, t + ":", "scheme start");
      }, get host() {
        return this.m ? "" : this.v ? this.o + ":" + this.v : this.o;
      }, set host(t) {
        !this.m && this.H && e.call(this, t, "host");
      }, get hostname() {
        return this.o;
      }, set hostname(t) {
        !this.m && this.H && e.call(this, t, "hostname");
      }, get port() {
        return this.v;
      }, set port(t) {
        !this.m && this.H && e.call(this, t, "port");
      }, get pathname() {
        return this.m ? "" : this.H ? "/" + this.s.join("/") : this.ya;
      }, set pathname(t) {
        !this.m && this.H && (this.s = [], e.call(this, t, "relative path start"));
      }, get search() {
        return this.m || !this.A || "?" == this.A ? "" : this.A;
      }, set search(t) {
        !this.m && this.H && (this.A = "?", "?" == t[0] && (t = t.slice(1)), e.call(this, t, "query"));
      }, get hash() {
        return this.m || !this.C || "#" == this.C ? "" : this.C;
      }, set hash(t) {
        this.m || (t ? (this.C = "#", "#" == t[0] && (t = t.slice(1)), e.call(this, t, "fragment")) : this.C = "");
      }, get origin() {
        var t;
        if (this.m || !this.l) return "";
        switch (this.l) {
          case "data":
          case "file":
          case "javascript":
          case "mailto":
            return "null";
        }
        return (t = this.host) ? this.l + "://" + t : "";
      } };
      var C = a.URL;
      C && (g.createObjectURL = function(t) {
        return C.createObjectURL.apply(
          C,
          arguments
        );
      }, g.revokeObjectURL = function(t) {
        C.revokeObjectURL(t);
      });
      a.URL = g;
    }
  })(window);
  var Hj = window.customElements, Ij = false, Jj = null;
  Hj.polyfillWrapFlushCallback && Hj.polyfillWrapFlushCallback(function(a) {
    Jj = a;
    Ij && a();
  });
  function Kj() {
    window.HTMLTemplateElement.bootstrap && window.HTMLTemplateElement.bootstrap(window.document);
    Jj && Jj();
    Ij = true;
    window.WebComponents.ready = true;
    document.dispatchEvent(new CustomEvent("WebComponentsReady", { bubbles: true }));
  }
  "complete" !== document.readyState ? (window.addEventListener("load", Kj), window.addEventListener("DOMContentLoaded", function() {
    window.removeEventListener("load", Kj);
    Kj();
  })) : Kj();
}).call(commonjsGlobal);
export {
  webcomponentsBundle as default
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViY29tcG9uZW50cy1idW5kbGUuanMtQnpZQ3hFNDMuanMiLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy93ZWJjb21wb25lbnRzanMvdHNfc3JjL3BsYXRmb3JtL2VzNi1taXNjLnRzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcy8gW3N5bnRoZXRpYzplczYvdXRpbC9hcnJheWl0ZXJhdG9yXSAiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvd2ViY29tcG9uZW50c2pzLyBbc3ludGhldGljOnV0aWwvZGVmaW5lcHJvcGVydHldICIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy93ZWJjb21wb25lbnRzanMvIFtzeW50aGV0aWM6dXRpbC9nbG9iYWxdICIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy93ZWJjb21wb25lbnRzanMvIFtzeW50aGV0aWM6dXRpbC9wb2x5ZmlsbF0gIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcy8gW3N5bnRoZXRpYzplczYvc3ltYm9sXSAiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvd2ViY29tcG9uZW50c2pzLyBbc3ludGhldGljOmVzNi91dGlsL21ha2VpdGVyYXRvcl0gIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcy8gW3N5bnRoZXRpYzplczYvdXRpbC9hcnJheWZyb21pdGVyYWJsZV0gIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcy8gW3N5bnRoZXRpYzplczYvdXRpbC9hcnJheWZyb21pdGVyYXRvcl0gIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcy8gW3N5bnRoZXRpYzplczYvdXRpbC9zZXRwcm90b3R5cGVvZl0gIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcy8gW3N5bnRoZXRpYzplczYvZ2VuZXJhdG9yX2VuZ2luZV0gIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcy90c19zcmMvcGxhdGZvcm0vc3ltYm9sLnRzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Byb21pc2UtcG9seWZpbGwvc3JjL2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Byb21pc2UtcG9seWZpbGwvc3JjL2ZpbmFsbHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvd2ViY29tcG9uZW50c2pzL3RzX3NyYy9wbGF0Zm9ybS9wcm9taXNlLnRzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dldC1vd24tcHJvcGVydHktc3ltYm9scy9idWlsZC9nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMubWF4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcy90c19zcmMvcGxhdGZvcm0vY3VzdG9tLWV2ZW50LnRzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcy90c19zcmMvcGxhdGZvcm0vZXZlbnQtbGlzdGVuZXItb3B0aW9ucy50cyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy93ZWJjb21wb25lbnRzanMvdHNfc3JjL3BsYXRmb3JtL2Jhc2V1cmkudHMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvd2ViY29tcG9uZW50c2pzL3RzX3NyYy9wbGF0Zm9ybS9nZXQtYXR0cmlidXRlLW5hbWVzLnRzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcy90c19zcmMvcGxhdGZvcm0vbWF0Y2hlcy50cyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy93ZWJjb21wb25lbnRzanMvdHNfc3JjL3BsYXRmb3JtL3BhcmVudC1ub2RlL2FwcGVuZC50cyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy93ZWJjb21wb25lbnRzanMvdHNfc3JjL3BsYXRmb3JtL3BhcmVudC1ub2RlL3ByZXBlbmQudHMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvd2ViY29tcG9uZW50c2pzL3RzX3NyYy9wbGF0Zm9ybS9wYXJlbnQtbm9kZS9yZXBsYWNlLWNoaWxkcmVuLnRzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcy90c19zcmMvcGxhdGZvcm0vY2hpbGQtbm9kZS9hZnRlci50cyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy93ZWJjb21wb25lbnRzanMvdHNfc3JjL3BsYXRmb3JtL2NoaWxkLW5vZGUvYmVmb3JlLnRzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcy90c19zcmMvcGxhdGZvcm0vY2hpbGQtbm9kZS9yZW1vdmUudHMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvd2ViY29tcG9uZW50c2pzL3RzX3NyYy9wbGF0Zm9ybS9jaGlsZC1ub2RlL3JlcGxhY2Utd2l0aC50cyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy93ZWJjb21wb25lbnRzanMvdHNfc3JjL3BsYXRmb3JtL3N2Zy1lbGVtZW50LWNsYXNzLWxpc3QudHMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvd2ViY29tcG9uZW50c2pzL3RzX3NyYy9wbGF0Zm9ybS90b2dnbGUtYXR0cmlidXRlLnRzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcy90c19zcmMvdW5yZXNvbHZlZC50cyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy93ZWJjb21wb25lbnRzanMvdHNfc3JjL2ZsYWctcGFyc2VyLnRzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3RlbXBsYXRlL3RlbXBsYXRlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5ZG9tL3NyYy9zaGFkeS1kYXRhLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5ZG9tL3NyYy91dGlscy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWRvbS9zcmMvcGF0Y2gtbmF0aXZlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5ZG9tL3NyYy9mbHVzaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWRvbS9zcmMvb2JzZXJ2ZS1jaGFuZ2VzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5ZG9tL3NyYy9pbm5lckhUTUwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHlkb20vc3JjL3BhdGNoLWluc3RhbmNlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWRvbS9zcmMvcGF0Y2gtZXZlbnRzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5ZG9tL3NyYy9hcnJheS1zcGxpY2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHlkb20vc3JjL3BhdGNoZXMvRXZlbnRUYXJnZXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHlkb20vc3JjL3N0eWxlLXNjb3BpbmcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHlkb20vc3JjL3BhdGNoZXMvTm9kZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWRvbS9zcmMvYXR0YWNoLXNoYWRvdy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWRvbS9zcmMvcGF0Y2hlcy9TbG90YWJsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWRvbS9zcmMvc2VsZWN0b3ItcGFyc2VyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5ZG9tL3NyYy9wYXRjaGVzL1BhcmVudE5vZGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHlkb20vc3JjL3BhdGNoZXMvQ2hpbGROb2RlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5ZG9tL3NyYy9wYXRjaGVzL0VsZW1lbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHlkb20vc3JjL3BhdGNoZXMvRWxlbWVudE9yU2hhZG93Um9vdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWRvbS9zcmMvcGF0Y2hlcy9IVE1MRWxlbWVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWRvbS9zcmMvcGF0Y2hlcy9TbG90LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5ZG9tL3NyYy9wYXRjaGVzL0RvY3VtZW50T3JGcmFnbWVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWRvbS9zcmMvcGF0Y2hlcy9Eb2N1bWVudE9yU2hhZG93Um9vdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWRvbS9zcmMvcGF0Y2hlcy9Eb2N1bWVudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWRvbS9zcmMvcGF0Y2hlcy9XaW5kb3cuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHlkb20vc3JjL3BhdGNoLXByb3RvdHlwZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHlkb20vc3JjL2xpbmstbm9kZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHlkb20vc3JjL3BhdGNoZXMvU2hhZG93Um9vdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWRvbS9zcmMvcGF0Y2gtc2hhZHlSb290LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5ZG9tL3NyYy93cmFwcGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5ZG9tL3NyYy9zaGFkeWRvbS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9jdXN0b20tZWxlbWVudHMvdHNfc3JjL1BhdGNoL05hdGl2ZS50cyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9jdXN0b20tZWxlbWVudHMvdHNfc3JjL1V0aWxpdGllcy50cyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9jdXN0b20tZWxlbWVudHMvdHNfc3JjL0N1c3RvbUVsZW1lbnRJbnRlcm5hbHMudHMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvY3VzdG9tLWVsZW1lbnRzL3RzX3NyYy9jdXN0b20tZWxlbWVudHMudHMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvY3VzdG9tLWVsZW1lbnRzL3RzX3NyYy9DdXN0b21FbGVtZW50U3RhdGUudHMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvY3VzdG9tLWVsZW1lbnRzL3RzX3NyYy9EZWZlcnJlZC50cyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9jdXN0b20tZWxlbWVudHMvdHNfc3JjL0RvY3VtZW50Q29uc3RydWN0aW9uT2JzZXJ2ZXIudHMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvY3VzdG9tLWVsZW1lbnRzL3RzX3NyYy9DdXN0b21FbGVtZW50UmVnaXN0cnkudHMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvY3VzdG9tLWVsZW1lbnRzL3RzX3NyYy9QYXRjaC9JbnRlcmZhY2UvUGFyZW50Tm9kZS50cyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9jdXN0b20tZWxlbWVudHMvdHNfc3JjL1BhdGNoL0RvY3VtZW50LnRzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL2N1c3RvbS1lbGVtZW50cy90c19zcmMvUGF0Y2gvSW50ZXJmYWNlL0NoaWxkTm9kZS50cyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9jdXN0b20tZWxlbWVudHMvdHNfc3JjL1BhdGNoL0VsZW1lbnQudHMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvY3VzdG9tLWVsZW1lbnRzL3RzX3NyYy9BbHJlYWR5Q29uc3RydWN0ZWRNYXJrZXIudHMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvY3VzdG9tLWVsZW1lbnRzL3RzX3NyYy9QYXRjaC9IVE1MRWxlbWVudC50cyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9jdXN0b20tZWxlbWVudHMvdHNfc3JjL1BhdGNoL05vZGUudHMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvY3VzdG9tLWVsZW1lbnRzL3RzX3NyYy9QYXRjaC9Eb2N1bWVudEZyYWdtZW50LnRzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL3NyYy9jc3MtcGFyc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHljc3Mvc3JjL3N0eWxlLXNldHRpbmdzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL3NyYy9jb21tb24tcmVnZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHljc3Mvc3JjL3Vuc2NvcGVkLXN0eWxlLWhhbmRsZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHljc3Mvc3JjL3N0eWxlLXV0aWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHljc3Mvc3JjL3N0eWxlLXRyYW5zZm9ybWVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL3NyYy9zY29waW5nLXNoaW0uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHljc3Mvc3JjL2RvY3VtZW50LXdhdGNoZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHljc3Mvc3JjL3N0eWxlLXByb3BlcnRpZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHljc3Mvc3JjL3N0eWxlLWluZm8uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHljc3Mvc3JjL3N0eWxlLXBsYWNlaG9sZGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL3NyYy9zdHlsZS1jYWNoZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9Ad2ViY29tcG9uZW50cy9zaGFkeWNzcy9zcmMvdGVtcGxhdGUtbWFwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL3NyYy9hcHBseS1zaGltLXV0aWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3NoYWR5Y3NzL3NyYy9jb21tb24tdXRpbHMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvc2hhZHljc3MvZW50cnlwb2ludHMvc2NvcGluZy1zaGltLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0B3ZWJjb21wb25lbnRzL3VybC91cmwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvd2ViY29tcG9uZW50c2pzL3NyYy9lbnRyeXBvaW50cy93ZWJjb21wb25lbnRzLWJ1bmRsZS1pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZFxuICogYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heVxuICogYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHQgQ29kZSBkaXN0cmlidXRlZCBieVxuICogR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUFxuICogcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5cbmV4cG9ydCB7fTtcblxuaWYgKCFBcnJheS5mcm9tKSB7XG4gIEFycmF5LmZyb20gPSA8VD4ob2JqZWN0OiBBcnJheUxpa2U8VD4pOiBBcnJheTxUPiA9PiB7XG4gICAgcmV0dXJuIFtdLnNsaWNlLmNhbGwob2JqZWN0KTtcbiAgfTtcbn1cblxuaWYgKCFPYmplY3QuYXNzaWduKSB7XG4gIGNvbnN0IGFzc2lnbiA9ICh0YXJnZXQ6IG9iamVjdCwgc291cmNlOiBvYmplY3QpID0+IHtcbiAgICBjb25zdCBuJCA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuJC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcCA9IG4kW2ldO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICh0YXJnZXQgYXMgYW55KVtwXSA9IChzb3VyY2UgYXMgYW55KVtwXTtcbiAgICB9XG4gIH07XG5cbiAgT2JqZWN0LmFzc2lnbiA9IGZ1bmN0aW9uICh0YXJnZXQ6IG9iamVjdCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICBjb25zdCBhcmdzOiBvYmplY3RbXSA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICBmb3IgKGxldCBpID0gMCwgczsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHMgPSBhcmdzW2ldO1xuICAgICAgaWYgKHMpIHtcbiAgICAgICAgYXNzaWduKHRhcmdldCwgcyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG59XG4iLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxOCBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbmh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG5odHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlXG5mb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhc1xucGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudFxuZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4vLyBpbXBvcnQgcG9seWZpbGwgZm9yIFN5bWJvbCBhbmQgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc1xuaW1wb3J0ICdnZXQtb3duLXByb3BlcnR5LXN5bWJvbHMvYnVpbGQvZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLm1heCc7XG5cbi8vIEZpeCBpc3N1ZSBpbiB0b1N0cmluZyBwYXRjaCB3aGVuIGNvbXBpbGVkIGludG8gc3RyaWN0IG1vZGUgdmlhIGNsb3N1cmVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMvaXNzdWVzLzE2XG5jb25zdCB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuICB9IGVsc2UgaWYgKHRoaXMgPT09IG51bGwpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgTnVsbF0nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9XG59O1xuXG4vLyBvdmVyd3JpdGUgT2JqZWN0LmtleXMgdG8gZmlsdGVyIG91dCBzeW1ib2xzXG5PYmplY3Qua2V5cyA9IGZ1bmN0aW9uIChvYmo6IG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5maWx0ZXIoKG5hbWUpID0+IHtcbiAgICBjb25zdCBwcm9wID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIG5hbWUpO1xuICAgIHJldHVybiBwcm9wICYmIHByb3AuZW51bWVyYWJsZTtcbiAgfSk7XG59O1xuXG4vLyBpbXBsZW1lbnQgaXRlcmF0b3JzIGZvciBJRSAxMVxuaWYgKCFTdHJpbmcucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gfHwgIVN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQpIHtcbiAgU3RyaW5nLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24qICh0aGlzOiBzdHJpbmcpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHlpZWxkIHRoaXNbaV07XG4gICAgfVxuICB9O1xufVxuXG5pZiAoIVNldC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSkge1xuICBTZXQucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiogPFQ+KHRoaXM6IFNldDxUPikge1xuICAgIGNvbnN0IHRlbXA6IFRbXSA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgIHRlbXAucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZW1wLmxlbmd0aDsgaSsrKSB7XG4gICAgICB5aWVsZCB0ZW1wW2ldO1xuICAgIH1cbiAgfTtcbn1cblxuaWYgKCFNYXAucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0pIHtcbiAgTWFwLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24qIDxLLCBWPih0aGlzOiBNYXA8SywgVj4pIHtcbiAgICBjb25zdCBlbnRyaWVzOiBBcnJheTxbSywgVl0+ID0gW107XG4gICAgdGhpcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICBlbnRyaWVzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICB9KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHlpZWxkIGVudHJpZXNbaV07XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IHByb21pc2VGaW5hbGx5IGZyb20gJy4vZmluYWxseSc7XG5pbXBvcnQgYWxsU2V0dGxlZCBmcm9tICcuL2FsbFNldHRsZWQnO1xuXG4vLyBTdG9yZSBzZXRUaW1lb3V0IHJlZmVyZW5jZSBzbyBwcm9taXNlLXBvbHlmaWxsIHdpbGwgYmUgdW5hZmZlY3RlZCBieVxuLy8gb3RoZXIgY29kZSBtb2RpZnlpbmcgc2V0VGltZW91dCAobGlrZSBzaW5vbi51c2VGYWtlVGltZXJzKCkpXG52YXIgc2V0VGltZW91dEZ1bmMgPSBzZXRUaW1lb3V0O1xuXG5mdW5jdGlvbiBpc0FycmF5KHgpIHtcbiAgcmV0dXJuIEJvb2xlYW4oeCAmJiB0eXBlb2YgeC5sZW5ndGggIT09ICd1bmRlZmluZWQnKTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbi8vIFBvbHlmaWxsIGZvciBGdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZm4uYXBwbHkodGhpc0FyZywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIFByb21pc2UoZm4pIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFByb21pc2UpKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb21pc2VzIG11c3QgYmUgY29uc3RydWN0ZWQgdmlhIG5ldycpO1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdub3QgYSBmdW5jdGlvbicpO1xuICAvKiogQHR5cGUgeyFudW1iZXJ9ICovXG4gIHRoaXMuX3N0YXRlID0gMDtcbiAgLyoqIEB0eXBlIHshYm9vbGVhbn0gKi9cbiAgdGhpcy5faGFuZGxlZCA9IGZhbHNlO1xuICAvKiogQHR5cGUge1Byb21pc2V8dW5kZWZpbmVkfSAqL1xuICB0aGlzLl92YWx1ZSA9IHVuZGVmaW5lZDtcbiAgLyoqIEB0eXBlIHshQXJyYXk8IUZ1bmN0aW9uPn0gKi9cbiAgdGhpcy5fZGVmZXJyZWRzID0gW107XG5cbiAgZG9SZXNvbHZlKGZuLCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlKHNlbGYsIGRlZmVycmVkKSB7XG4gIHdoaWxlIChzZWxmLl9zdGF0ZSA9PT0gMykge1xuICAgIHNlbGYgPSBzZWxmLl92YWx1ZTtcbiAgfVxuICBpZiAoc2VsZi5fc3RhdGUgPT09IDApIHtcbiAgICBzZWxmLl9kZWZlcnJlZHMucHVzaChkZWZlcnJlZCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHNlbGYuX2hhbmRsZWQgPSB0cnVlO1xuICBQcm9taXNlLl9pbW1lZGlhdGVGbihmdW5jdGlvbigpIHtcbiAgICB2YXIgY2IgPSBzZWxmLl9zdGF0ZSA9PT0gMSA/IGRlZmVycmVkLm9uRnVsZmlsbGVkIDogZGVmZXJyZWQub25SZWplY3RlZDtcbiAgICBpZiAoY2IgPT09IG51bGwpIHtcbiAgICAgIChzZWxmLl9zdGF0ZSA9PT0gMSA/IHJlc29sdmUgOiByZWplY3QpKGRlZmVycmVkLnByb21pc2UsIHNlbGYuX3ZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJldDtcbiAgICB0cnkge1xuICAgICAgcmV0ID0gY2Ioc2VsZi5fdmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJlamVjdChkZWZlcnJlZC5wcm9taXNlLCBlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmVzb2x2ZShkZWZlcnJlZC5wcm9taXNlLCByZXQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZShzZWxmLCBuZXdWYWx1ZSkge1xuICB0cnkge1xuICAgIC8vIFByb21pc2UgUmVzb2x1dGlvbiBQcm9jZWR1cmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9wcm9taXNlcy1hcGx1cy9wcm9taXNlcy1zcGVjI3RoZS1wcm9taXNlLXJlc29sdXRpb24tcHJvY2VkdXJlXG4gICAgaWYgKG5ld1ZhbHVlID09PSBzZWxmKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBwcm9taXNlIGNhbm5vdCBiZSByZXNvbHZlZCB3aXRoIGl0c2VsZi4nKTtcbiAgICBpZiAoXG4gICAgICBuZXdWYWx1ZSAmJlxuICAgICAgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG5ld1ZhbHVlID09PSAnZnVuY3Rpb24nKVxuICAgICkge1xuICAgICAgdmFyIHRoZW4gPSBuZXdWYWx1ZS50aGVuO1xuICAgICAgaWYgKG5ld1ZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICBzZWxmLl9zdGF0ZSA9IDM7XG4gICAgICAgIHNlbGYuX3ZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIGZpbmFsZShzZWxmKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkb1Jlc29sdmUoYmluZCh0aGVuLCBuZXdWYWx1ZSksIHNlbGYpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHNlbGYuX3N0YXRlID0gMTtcbiAgICBzZWxmLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIGZpbmFsZShzZWxmKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJlamVjdChzZWxmLCBlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWplY3Qoc2VsZiwgbmV3VmFsdWUpIHtcbiAgc2VsZi5fc3RhdGUgPSAyO1xuICBzZWxmLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICBmaW5hbGUoc2VsZik7XG59XG5cbmZ1bmN0aW9uIGZpbmFsZShzZWxmKSB7XG4gIGlmIChzZWxmLl9zdGF0ZSA9PT0gMiAmJiBzZWxmLl9kZWZlcnJlZHMubGVuZ3RoID09PSAwKSB7XG4gICAgUHJvbWlzZS5faW1tZWRpYXRlRm4oZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXNlbGYuX2hhbmRsZWQpIHtcbiAgICAgICAgUHJvbWlzZS5fdW5oYW5kbGVkUmVqZWN0aW9uRm4oc2VsZi5fdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNlbGYuX2RlZmVycmVkcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGhhbmRsZShzZWxmLCBzZWxmLl9kZWZlcnJlZHNbaV0pO1xuICB9XG4gIHNlbGYuX2RlZmVycmVkcyA9IG51bGw7XG59XG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEhhbmRsZXIob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb21pc2UpIHtcbiAgdGhpcy5vbkZ1bGZpbGxlZCA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogbnVsbDtcbiAgdGhpcy5vblJlamVjdGVkID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT09ICdmdW5jdGlvbicgPyBvblJlamVjdGVkIDogbnVsbDtcbiAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbn1cblxuLyoqXG4gKiBUYWtlIGEgcG90ZW50aWFsbHkgbWlzYmVoYXZpbmcgcmVzb2x2ZXIgZnVuY3Rpb24gYW5kIG1ha2Ugc3VyZVxuICogb25GdWxmaWxsZWQgYW5kIG9uUmVqZWN0ZWQgYXJlIG9ubHkgY2FsbGVkIG9uY2UuXG4gKlxuICogTWFrZXMgbm8gZ3VhcmFudGVlcyBhYm91dCBhc3luY2hyb255LlxuICovXG5mdW5jdGlvbiBkb1Jlc29sdmUoZm4sIHNlbGYpIHtcbiAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICBmbihcbiAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICByZXNvbHZlKHNlbGYsIHZhbHVlKTtcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgIHJlamVjdChzZWxmLCByZWFzb24pO1xuICAgICAgfVxuICAgICk7XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICBkb25lID0gdHJ1ZTtcbiAgICByZWplY3Qoc2VsZiwgZXgpO1xuICB9XG59XG5cblByb21pc2UucHJvdG90eXBlWydjYXRjaCddID0gZnVuY3Rpb24ob25SZWplY3RlZCkge1xuICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0ZWQpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gIC8vIEB0cy1pZ25vcmVcbiAgdmFyIHByb20gPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcihub29wKTtcblxuICBoYW5kbGUodGhpcywgbmV3IEhhbmRsZXIob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb20pKTtcbiAgcmV0dXJuIHByb207XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZVsnZmluYWxseSddID0gcHJvbWlzZUZpbmFsbHk7XG5cblByb21pc2UuYWxsID0gZnVuY3Rpb24oYXJyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAoIWlzQXJyYXkoYXJyKSkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgVHlwZUVycm9yKCdQcm9taXNlLmFsbCBhY2NlcHRzIGFuIGFycmF5JykpO1xuICAgIH1cblxuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyKTtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHJldHVybiByZXNvbHZlKFtdKTtcbiAgICB2YXIgcmVtYWluaW5nID0gYXJncy5sZW5ndGg7XG5cbiAgICBmdW5jdGlvbiByZXMoaSwgdmFsKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAodmFsICYmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICAgIHZhciB0aGVuID0gdmFsLnRoZW47XG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwoXG4gICAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgICAgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgcmVzKGksIHZhbCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHJlamVjdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXJnc1tpXSA9IHZhbDtcbiAgICAgICAgaWYgKC0tcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgcmVzb2x2ZShhcmdzKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgcmVqZWN0KGV4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlcyhpLCBhcmdzW2ldKTtcbiAgICB9XG4gIH0pO1xufTtcblxuUHJvbWlzZS5hbGxTZXR0bGVkID0gYWxsU2V0dGxlZDtcblxuUHJvbWlzZS5yZXNvbHZlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IFByb21pc2UpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9KTtcbn07XG5cblByb21pc2UucmVqZWN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJlamVjdCh2YWx1ZSk7XG4gIH0pO1xufTtcblxuUHJvbWlzZS5yYWNlID0gZnVuY3Rpb24oYXJyKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAoIWlzQXJyYXkoYXJyKSkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgVHlwZUVycm9yKCdQcm9taXNlLnJhY2UgYWNjZXB0cyBhbiBhcnJheScpKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBQcm9taXNlLnJlc29sdmUoYXJyW2ldKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8vIFVzZSBwb2x5ZmlsbCBmb3Igc2V0SW1tZWRpYXRlIGZvciBwZXJmb3JtYW5jZSBnYWluc1xuUHJvbWlzZS5faW1tZWRpYXRlRm4gPVxuICAvLyBAdHMtaWdub3JlXG4gICh0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAnZnVuY3Rpb24nICYmXG4gICAgZnVuY3Rpb24oZm4pIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHNldEltbWVkaWF0ZShmbik7XG4gICAgfSkgfHxcbiAgZnVuY3Rpb24oZm4pIHtcbiAgICBzZXRUaW1lb3V0RnVuYyhmbiwgMCk7XG4gIH07XG5cblByb21pc2UuX3VuaGFuZGxlZFJlamVjdGlvbkZuID0gZnVuY3Rpb24gX3VuaGFuZGxlZFJlamVjdGlvbkZuKGVycikge1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUpIHtcbiAgICBjb25zb2xlLndhcm4oJ1Bvc3NpYmxlIFVuaGFuZGxlZCBQcm9taXNlIFJlamVjdGlvbjonLCBlcnIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvbWlzZTtcbiIsIi8qKlxuICogQHRoaXMge1Byb21pc2V9XG4gKi9cbmZ1bmN0aW9uIGZpbmFsbHlDb25zdHJ1Y3RvcihjYWxsYmFjaykge1xuICB2YXIgY29uc3RydWN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICByZXR1cm4gY29uc3RydWN0b3IucmVzb2x2ZShjYWxsYmFjaygpKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yLnJlc29sdmUoY2FsbGJhY2soKSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gY29uc3RydWN0b3IucmVqZWN0KHJlYXNvbik7XG4gICAgICB9KTtcbiAgICB9XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZpbmFsbHlDb25zdHJ1Y3RvcjtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbmh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG5odHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlXG5mb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhc1xucGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudFxuZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgUHJvbWlzZVBvbHlmaWxsIGZyb20gJ3Byb21pc2UtcG9seWZpbGwvc3JjL2luZGV4LmpzJztcblxuLypcbkFzc2lnbiB0aGUgRVM2IHByb21pc2UgcG9seWZpbGwgdG8gd2luZG93IG91cnNlbHZlcyBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBcImF1dG9cIlxucG9seWZpbGwgdG8gd29yayBhcm91bmRcbmh0dHBzOi8vZ2l0aHViLmNvbS93ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcy9pc3N1ZXMvODM3XG4qL1xuaWYgKCF3aW5kb3cuUHJvbWlzZSkge1xuICB3aW5kb3cuUHJvbWlzZSA9IFByb21pc2VQb2x5ZmlsbDtcbiAgLy8gc2F2ZSBQcm9taXNlIEFQSVxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWFzc2lnbiAqL1xuICAvLyBQcm9taXNlUG9seWZpbGwucHJvdG90eXBlWydjYXRjaCddID0gUHJvbWlzZVBvbHlmaWxsLnByb3RvdHlwZS5jYXRjaDtcbiAgUHJvbWlzZVBvbHlmaWxsLnByb3RvdHlwZVsndGhlbiddID0gUHJvbWlzZVBvbHlmaWxsLnByb3RvdHlwZS50aGVuO1xuICAvLyBQcm9taXNlUG9seWZpbGwucHJvdG90eXBlWydmaW5hbGx5J10gPSBQcm9taXNlUG9seWZpbGwucHJvdG90eXBlLmZpbmFsbHk7XG4gIFByb21pc2VQb2x5ZmlsbFsnYWxsJ10gPSBQcm9taXNlUG9seWZpbGwuYWxsO1xuICBQcm9taXNlUG9seWZpbGxbJ3JhY2UnXSA9IFByb21pc2VQb2x5ZmlsbC5yYWNlO1xuICBQcm9taXNlUG9seWZpbGxbJ3Jlc29sdmUnXSA9IFByb21pc2VQb2x5ZmlsbC5yZXNvbHZlO1xuICBQcm9taXNlUG9seWZpbGxbJ3JlamVjdCddID0gUHJvbWlzZVBvbHlmaWxsLnJlamVjdDtcbiAgLyogZXNsaW50LWVuYWJsZSAqL1xuXG4gIC8vIGFwcHJvYWNoIGNvcGllZCBmcm9tXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Qb2x5bWVyL3BvbHltZXIvYmxvYi92My4wLjIvbGliL3V0aWxzL2FzeW5jLmpzXG4gIGNvbnN0IG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gIGNvbnN0IHR3aWRkbGVOb2RlID0gZnVuY3Rpb24gdHdpZGRsZU5vZGUoKSB7XG4gICAgbm9kZS50ZXh0Q29udGVudCA9IG5vZGUudGV4dENvbnRlbnQhLmxlbmd0aCA+IDAgPyAnJyA6ICdhJztcbiAgfTtcbiAgLyoqIEB0eXBlIHshQXJyYXk8ZnVuY3Rpb24oKTp2b2lkPn0gKi9cbiAgY29uc3QgY2FsbGJhY2tzOiBBcnJheTwoKSA9PiB2b2lkPiA9IFtdO1xuICBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7XG4gICAgY29uc3QgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYWxsYmFja3NbaV0oKTtcbiAgICB9XG4gICAgY2FsbGJhY2tzLnNwbGljZSgwLCBsZW4pO1xuICB9KS5vYnNlcnZlKG5vZGUsIHtjaGFyYWN0ZXJEYXRhOiB0cnVlfSk7XG5cbiAgLy8gc2V0IF9pbW1lZGlhdGVGbiB0byBhIE11dGF0aW9uT2JzZXJ2ZXIgZm9yIGNsb3NlLXRvLW5hdGl2ZSB0aW1pbmdcbiAgUHJvbWlzZVBvbHlmaWxsLl9pbW1lZGlhdGVGbiA9IChmbjogKCkgPT4gdm9pZCkgPT4ge1xuICAgIGNhbGxiYWNrcy5wdXNoKGZuKTtcbiAgICB0d2lkZGxlTm9kZSgpO1xuICB9O1xufVxuIiwiLyohXG5Db3B5cmlnaHQgKEMpIDIwMTUgYnkgV2ViUmVmbGVjdGlvblxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuXG5cbiovXG4oZnVuY3Rpb24gKE9iamVjdCwgR09QUykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gKEMpIEFuZHJlYSBHaWFtbWFyY2hpIC0gTWl0IFN0eWxlXG5cbiAgaWYgKEdPUFMgaW4gT2JqZWN0KSB7IHJldHVybjsgfVxuXG4gIHZhclxuICAgIHNldERlc2NyaXB0b3IsXG4gICAgRyA9IHR5cGVvZiBnbG9iYWwgPT09IHR5cGVvZiBHID8gd2luZG93IDogZ2xvYmFsLFxuICAgIGlkID0gMCxcbiAgICByYW5kb20gPSBTdHJpbmcoTWF0aC5yYW5kb20oKSksXG4gICAgcHJlZml4ID0gJ19fXFx4MDFzeW1ib2w6JyxcbiAgICBwcmVmaXhMZW5ndGggPSBwcmVmaXgubGVuZ3RoLFxuICAgIGludGVybmFsU3ltYm9sID0gJ19fXFx4MDFzeW1ib2xAQCcgKyByYW5kb20sXG4gICAgRFAgPSAnZGVmaW5lUHJvcGVydHknLFxuICAgIERQaWVzID0gJ2RlZmluZVByb3BlcnRpZXMnLFxuICAgIEdPUE4gPSAnZ2V0T3duUHJvcGVydHlOYW1lcycsXG4gICAgR09QRCA9ICdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLFxuICAgIFBJRSA9ICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICAgZ09QTiA9IE9iamVjdFtHT1BOXSxcbiAgICBnT1BEID0gT2JqZWN0W0dPUERdLFxuICAgIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGUsXG4gICAga2V5cyA9IE9iamVjdC5rZXlzLFxuICAgIGZyZWV6ZSA9IE9iamVjdC5mcmVlemUgfHwgT2JqZWN0LFxuICAgIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0W0RQXSxcbiAgICAkZGVmaW5lUHJvcGVydGllcyA9IE9iamVjdFtEUGllc10sXG4gICAgZGVzY3JpcHRvciA9IGdPUEQoT2JqZWN0LCBHT1BOKSxcbiAgICBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGUsXG4gICAgaE9QID0gT2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHksXG4gICAgcElFID0gT2JqZWN0UHJvdG9bUElFXSxcbiAgICB0b1N0cmluZyA9IE9iamVjdFByb3RvLnRvU3RyaW5nLFxuICAgIGFkZEludGVybmFsSWZOZWVkZWQgPSBmdW5jdGlvbiAobywgdWlkLCBlbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhPUC5jYWxsKG8sIGludGVybmFsU3ltYm9sKSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShvLCBpbnRlcm5hbFN5bWJvbCwge1xuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgIHZhbHVlOiB7fVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIG9baW50ZXJuYWxTeW1ib2xdWydAQCcgKyB1aWRdID0gZW51bWVyYWJsZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIH0sXG4gICAgY3JlYXRlV2l0aFN5bWJvbHMgPSBmdW5jdGlvbiAocHJvdG8sIGRlc2NyaXB0b3JzKSB7XG4gICAgICB2YXIgc2VsZiA9IGNyZWF0ZShwcm90byk7XG4gICAgICBnT1BOKGRlc2NyaXB0b3JzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoZGVzY3JpcHRvcnMsIGtleSkpIHtcbiAgICAgICAgICAkZGVmaW5lUHJvcGVydHkoc2VsZiwga2V5LCBkZXNjcmlwdG9yc1trZXldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuICAgIGNvcHlBc05vbkVudW1lcmFibGUgPSBmdW5jdGlvbiAoZGVzY3JpcHRvcikge1xuICAgICAgdmFyIG5ld0Rlc2NyaXB0b3IgPSBjcmVhdGUoZGVzY3JpcHRvcik7XG4gICAgICBuZXdEZXNjcmlwdG9yLmVudW1lcmFibGUgPSBmYWxzZTtcbiAgICAgIHJldHVybiBuZXdEZXNjcmlwdG9yO1xuICAgIH0sXG4gICAgZ2V0ID0gZnVuY3Rpb24gZ2V0KCkge30sXG4gICAgb25seU5vblN5bWJvbHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuICAgICAgcmV0dXJuIG5hbWUgIT0gaW50ZXJuYWxTeW1ib2wgJiYgIWhPUC5jYWxsKHNvdXJjZSwgbmFtZSk7XG4gICAgfSxcbiAgICBvbmx5U3ltYm9scyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG4gICAgICByZXR1cm4gbmFtZSAhPSBpbnRlcm5hbFN5bWJvbCAmJiBoT1AuY2FsbChzb3VyY2UsIG5hbWUpO1xuICAgIH0sXG4gICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgICAgIHZhciB1aWQgPSBTdHJpbmcoa2V5KTtcbiAgICAgIHJldHVybiBvbmx5U3ltYm9scyh1aWQpID8gaE9QLmNhbGwodGhpcywgdWlkKSAmJiAhIXRoaXNbaW50ZXJuYWxTeW1ib2xdICYmIHRoaXNbaW50ZXJuYWxTeW1ib2xdWydAQCcgKyB1aWRdIDogcElFLmNhbGwodGhpcywga2V5KTtcbiAgICB9LFxuICAgIHNldEFuZEdldFN5bWJvbCA9IGZ1bmN0aW9uICh1aWQpIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0ge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGdldCxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBzZXREZXNjcmlwdG9yKHRoaXMsIHVpZCwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGFkZEludGVybmFsSWZOZWVkZWQodGhpcywgdWlkLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGRlZmluZVByb3BlcnR5KE9iamVjdFByb3RvLCB1aWQsIGRlc2NyaXB0b3IpO1xuICAgICAgc291cmNlW3VpZF0gPSBkZWZpbmVQcm9wZXJ0eShcbiAgICAgICAgT2JqZWN0KHVpZCksXG4gICAgICAgICdjb25zdHJ1Y3RvcicsXG4gICAgICAgIHNvdXJjZUNvbnN0cnVjdG9yXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZyZWV6ZShzb3VyY2VbdWlkXSk7XG4gICAgfSxcbiAgICBTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woZGVzY3JpcHRpb24pIHtcbiAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgU3ltYm9sKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldEFuZEdldFN5bWJvbChwcmVmaXguY29uY2F0KGRlc2NyaXB0aW9uIHx8ICcnLCByYW5kb20sICsraWQpKTtcbiAgICB9LFxuICAgIHNvdXJjZSA9IGNyZWF0ZShudWxsKSxcbiAgICBzb3VyY2VDb25zdHJ1Y3RvciA9IHsgdmFsdWU6IFN5bWJvbCB9LFxuICAgIHNvdXJjZU1hcCA9IGZ1bmN0aW9uICh1aWQpIHtcbiAgICAgIHJldHVybiBzb3VyY2VbdWlkXTtcbiAgICB9LFxuICAgICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3Aobywga2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgICB2YXIgdWlkID0gU3RyaW5nKGtleSk7XG4gICAgICBpZiAob25seVN5bWJvbHModWlkKSkge1xuICAgICAgICBzZXREZXNjcmlwdG9yKG8sIHVpZCwgZGVzY3JpcHRvci5lbnVtZXJhYmxlID8gY29weUFzTm9uRW51bWVyYWJsZShkZXNjcmlwdG9yKSA6IGRlc2NyaXB0b3IpO1xuICAgICAgICBhZGRJbnRlcm5hbElmTmVlZGVkKG8sIHVpZCwgISFkZXNjcmlwdG9yLmVudW1lcmFibGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkobywga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvO1xuICAgIH0sXG4gICAgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhvKSB7XG4gICAgICByZXR1cm4gZ09QTihvKS5maWx0ZXIob25seVN5bWJvbHMpLm1hcChzb3VyY2VNYXApO1xuICAgIH07XG4gIGRlc2NyaXB0b3IudmFsdWUgPSAkZGVmaW5lUHJvcGVydHk7XG4gIGRlZmluZVByb3BlcnR5KE9iamVjdCwgRFAsIGRlc2NyaXB0b3IpO1xuXG4gIGRlc2NyaXB0b3IudmFsdWUgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuICBkZWZpbmVQcm9wZXJ0eShPYmplY3QsIEdPUFMsIGRlc2NyaXB0b3IpO1xuXG4gIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKG8pIHtcbiAgICByZXR1cm4gZ09QTihvKS5maWx0ZXIob25seU5vblN5bWJvbHMpO1xuICB9O1xuICBkZWZpbmVQcm9wZXJ0eShPYmplY3QsIEdPUE4sIGRlc2NyaXB0b3IpO1xuXG4gIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKG8sIGRlc2NyaXB0b3JzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzKGRlc2NyaXB0b3JzKTtcbiAgICBpZiAoc3ltYm9scy5sZW5ndGgpIHtcbiAgICAgIGtleXMoZGVzY3JpcHRvcnMpLmNvbmNhdChzeW1ib2xzKS5mb3JFYWNoKGZ1bmN0aW9uICh1aWQpIHtcbiAgICAgICAgaWYgKHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoZGVzY3JpcHRvcnMsIHVpZCkpIHtcbiAgICAgICAgICAkZGVmaW5lUHJvcGVydHkobywgdWlkLCBkZXNjcmlwdG9yc1t1aWRdKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRkZWZpbmVQcm9wZXJ0aWVzKG8sIGRlc2NyaXB0b3JzKTtcbiAgICB9XG4gICAgcmV0dXJuIG87XG4gIH07XG4gIGRlZmluZVByb3BlcnR5KE9iamVjdCwgRFBpZXMsIGRlc2NyaXB0b3IpO1xuXG4gIGRlc2NyaXB0b3IudmFsdWUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgZGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG8sIFBJRSwgZGVzY3JpcHRvcik7XG5cbiAgZGVzY3JpcHRvci52YWx1ZSA9IFN5bWJvbDtcbiAgZGVmaW5lUHJvcGVydHkoRywgJ1N5bWJvbCcsIGRlc2NyaXB0b3IpO1xuXG4gIC8vIGRlZmluaW5nIGBTeW1ib2wuZm9yKGtleSlgXG4gIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHVpZCA9IHByZWZpeC5jb25jYXQocHJlZml4LCBrZXksIHJhbmRvbSk7XG4gICAgcmV0dXJuIHVpZCBpbiBPYmplY3RQcm90byA/IHNvdXJjZVt1aWRdIDogc2V0QW5kR2V0U3ltYm9sKHVpZCk7XG4gIH07XG4gIGRlZmluZVByb3BlcnR5KFN5bWJvbCwgJ2ZvcicsIGRlc2NyaXB0b3IpO1xuXG4gIC8vIGRlZmluaW5nIGBTeW1ib2wua2V5Rm9yKHN5bWJvbClgXG4gIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoc3ltYm9sKSB7XG4gICAgaWYgKG9ubHlOb25TeW1ib2xzKHN5bWJvbCkpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihzeW1ib2wgKyAnIGlzIG5vdCBhIHN5bWJvbCcpOyB9XG4gICAgaWYgKCFoT1AuY2FsbChzb3VyY2UsIHN5bWJvbCkpIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIHZhciBsYWJlbCA9IHN5bWJvbC5zbGljZShwcmVmaXhMZW5ndGgpO1xuICAgIGlmIChsYWJlbC5zbGljZSgwLCBwcmVmaXhMZW5ndGgpICE9PSBwcmVmaXgpIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIGxhYmVsID0gbGFiZWwuc2xpY2UocHJlZml4TGVuZ3RoKTtcbiAgICBpZiAobGFiZWwgPT09IHJhbmRvbSkge1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgbGFiZWwgPSBsYWJlbC5zbGljZSgwLCBsYWJlbC5sZW5ndGggLSByYW5kb20ubGVuZ3RoKTtcbiAgICByZXR1cm4gbGFiZWwubGVuZ3RoID4gMCA/IGxhYmVsIDogdm9pZCAwO1xuICB9O1xuICBkZWZpbmVQcm9wZXJ0eShTeW1ib2wsICdrZXlGb3InLCBkZXNjcmlwdG9yKTtcblxuICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG8sIGtleSkge1xuICAgIHZhciBkZXNjcmlwdG9yID0gZ09QRChvLCBrZXkpO1xuICAgIGlmIChkZXNjcmlwdG9yICYmIG9ubHlTeW1ib2xzKGtleSkpIHtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwobywga2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gIH07XG4gIGRlZmluZVByb3BlcnR5KE9iamVjdCwgR09QRCwgZGVzY3JpcHRvcik7XG5cbiAgZGVzY3JpcHRvci52YWx1ZSA9IGZ1bmN0aW9uIChwcm90bywgZGVzY3JpcHRvcnMpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSB8fCB0eXBlb2YgZGVzY3JpcHRvcnMgPT09ICd1bmRlZmluZWQnID8gY3JlYXRlKHByb3RvKSA6IGNyZWF0ZVdpdGhTeW1ib2xzKHByb3RvLCBkZXNjcmlwdG9ycyk7XG4gIH07XG4gIGRlZmluZVByb3BlcnR5KE9iamVjdCwgJ2NyZWF0ZScsIGRlc2NyaXB0b3IpO1xuXG4gIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0ciA9IHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gICAgcmV0dXJuIHN0ciA9PT0gJ1tvYmplY3QgU3RyaW5nXScgJiYgb25seVN5bWJvbHModGhpcykgPyAnW29iamVjdCBTeW1ib2xdJyA6IHN0cjtcbiAgfTtcbiAgZGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG8sICd0b1N0cmluZycsIGRlc2NyaXB0b3IpO1xuXG4gIHRyeSB7IC8vIGZhaWxzIGluIGZldyBwcmUgRVMgNS4xIGVuZ2luZXNcbiAgICBpZiAoXG4gICAgICBjcmVhdGUoZGVmaW5lUHJvcGVydHkoe30sIHByZWZpeCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkodGhpcywgcHJlZml4LCB7IHZhbHVlOiB0cnVlIH0pW3ByZWZpeF07XG4gICAgICAgIH1cbiAgICAgIH0pKVtwcmVmaXhdID09PSB0cnVlXG4gICAgKSB7XG4gICAgICBzZXREZXNjcmlwdG9yID0gZGVmaW5lUHJvcGVydHk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93ICdJRTExJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby10aHJvdy1saXRlcmFsXG4gICAgfVxuICB9IGNhdGNoIChvX08pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgICBzZXREZXNjcmlwdG9yID0gZnVuY3Rpb24gKG8sIGtleSwgZGVzY3JpcHRvcikge1xuICAgICAgdmFyIHByb3RvRGVzY3JpcHRvciA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gICAgICBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgICAgIGRlZmluZVByb3BlcnR5KG8sIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICBkZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2NyaXB0b3IpO1xuICAgIH07XG4gIH1cblxufShPYmplY3QsICdnZXRPd25Qcm9wZXJ0eVN5bWJvbHMnKSk7XG5cbihmdW5jdGlvbiAoTywgU3ltYm9sKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXJcbiAgICBkUCA9IE8uZGVmaW5lUHJvcGVydHksXG4gICAgT2JqZWN0UHJvdG8gPSBPLnByb3RvdHlwZSxcbiAgICB0b1N0cmluZyA9IE9iamVjdFByb3RvLnRvU3RyaW5nLFxuICAgIHRvU3RyaW5nVGFnID0gJ3RvU3RyaW5nVGFnJyxcbiAgICBkZXNjcmlwdG9yO1xuICBbXG4gICAgJ2l0ZXJhdG9yJywgLy8gQSBtZXRob2QgcmV0dXJuaW5nIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIGZvciBhbiBvYmplY3QuIFVzZWQgYnkgZm9yLi4ub2YuXG4gICAgJ21hdGNoJywgLy8gQSBtZXRob2QgdGhhdCBtYXRjaGVzIGFnYWluc3QgYSBzdHJpbmcsIGFsc28gdXNlZCB0byBkZXRlcm1pbmUgaWYgYW4gb2JqZWN0IG1heSBiZSB1c2VkIGFzIGEgcmVndWxhciBleHByZXNzaW9uLiBVc2VkIGJ5IFN0cmluZy5wcm90b3R5cGUubWF0Y2goKS5cbiAgICAncmVwbGFjZScsIC8vIEEgbWV0aG9kIHRoYXQgcmVwbGFjZXMgbWF0Y2hlZCBzdWJzdHJpbmdzIG9mIGEgc3RyaW5nLiBVc2VkIGJ5IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSgpLlxuICAgICdzZWFyY2gnLCAvLyBBIG1ldGhvZCB0aGF0IHJldHVybnMgdGhlIGluZGV4IHdpdGhpbiBhIHN0cmluZyB0aGF0IG1hdGNoZXMgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbi4gVXNlZCBieSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaCgpLlxuICAgICdzcGxpdCcsIC8vIEEgbWV0aG9kIHRoYXQgc3BsaXRzIGEgc3RyaW5nIGF0IHRoZSBpbmRpY2VzIHRoYXQgbWF0Y2ggYSByZWd1bGFyIGV4cHJlc3Npb24uIFVzZWQgYnkgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCgpLlxuICAgICdoYXNJbnN0YW5jZScsIC8vIEEgbWV0aG9kIGRldGVybWluaW5nIGlmIGEgY29uc3RydWN0b3Igb2JqZWN0IHJlY29nbml6ZXMgYW4gb2JqZWN0IGFzIGl0cyBpbnN0YW5jZS4gVXNlZCBieSBpbnN0YW5jZW9mLlxuICAgICdpc0NvbmNhdFNwcmVhZGFibGUnLCAvLyBBIEJvb2xlYW4gdmFsdWUgaW5kaWNhdGluZyBpZiBhbiBvYmplY3Qgc2hvdWxkIGJlIGZsYXR0ZW5lZCB0byBpdHMgYXJyYXkgZWxlbWVudHMuIFVzZWQgYnkgQXJyYXkucHJvdG90eXBlLmNvbmNhdCgpLlxuICAgICd1bnNjb3BhYmxlcycsIC8vIEFuIEFycmF5IG9mIHN0cmluZyB2YWx1ZXMgdGhhdCBhcmUgcHJvcGVydHkgdmFsdWVzLiBUaGVzZSBhcmUgZXhjbHVkZWQgZnJvbSB0aGUgd2l0aCBlbnZpcm9ubWVudCBiaW5kaW5ncyBvZiB0aGUgYXNzb2NpYXRlZCBvYmplY3RzLlxuICAgICdzcGVjaWVzJywgLy8gQSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB0aGF0IGlzIHVzZWQgdG8gY3JlYXRlIGRlcml2ZWQgb2JqZWN0cy5cbiAgICAndG9QcmltaXRpdmUnLCAvLyBBIG1ldGhvZCBjb252ZXJ0aW5nIGFuIG9iamVjdCB0byBhIHByaW1pdGl2ZSB2YWx1ZS5cbiAgICB0b1N0cmluZ1RhZyAvLyBBIHN0cmluZyB2YWx1ZSB1c2VkIGZvciB0aGUgZGVmYXVsdCBkZXNjcmlwdGlvbiBvZiBhbiBvYmplY3QuIFVzZWQgYnkgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpLlxuICBdLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAoIShuYW1lIGluIFN5bWJvbCkpIHtcbiAgICAgIGRQKFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogU3ltYm9sKG5hbWUpIH0pO1xuICAgICAgaWYgKG5hbWUgPT09IHRvU3RyaW5nVGFnKSB7XG4gICAgICAgIGRlc2NyaXB0b3IgPSBPLmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3RQcm90bywgJ3RvU3RyaW5nJyk7XG4gICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHN0ciA9IHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gICAgICAgICAgdmFyIHRzdCA9IHRoaXMgPT0gbnVsbCA/IHRoaXMgOiB0aGlzW1N5bWJvbC50b1N0cmluZ1RhZ107XG4gICAgICAgICAgcmV0dXJuIHRzdCA9PSBudWxsID8gc3RyIDogJ1tvYmplY3QgJyArIHRzdCArICddJztcbiAgICAgICAgfTtcbiAgICAgICAgZFAoT2JqZWN0UHJvdG8sICd0b1N0cmluZycsIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59KE9iamVjdCwgU3ltYm9sKSk7XG5cbihmdW5jdGlvbiAoU2ksIEFQLCBTUCkge1xuXG4gIGZ1bmN0aW9uIHJldHVyblRoaXMoKSB7IHJldHVybiB0aGlzOyB9XG5cbiAgLypcbiAgICogbWFrZSBBcnJheXMgdXNhYmxlIGFzIGl0ZXJhdG9yc1xuICAgKiBzbyB0aGF0IG90aGVyIGl0ZXJhYmxlcyBjYW4gY29weSBzYW1lIGxvZ2ljXG4gICAqL1xuICBpZiAoIUFQW1NpXSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIEFQW1NpXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhclxuICAgICAgICBpID0gMCxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIGl0ZXJhdG9yID0ge1xuICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgICB2YXIgZG9uZSA9IHNlbGYubGVuZ3RoIDw9IGk7XG4gICAgICAgICAgICByZXR1cm4gZG9uZSA/IHsgZG9uZTogZG9uZSB9IDogeyBkb25lOiBkb25lLCB2YWx1ZTogc2VsZltpKytdIH07XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgaXRlcmF0b3JbU2ldID0gcmV0dXJuVGhpcztcbiAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICB9O1xuICB9XG5cbiAgLypcbiAgICogbWFrZSBTdHJpbmdzIHVzYWJsZSBhcyBpdGVyYXRvcnNcbiAgICogdG8gc2ltcGxpZnkgQXJyYXkuZnJvbSBhbmQgZm9yL29mIGxpa2UgbG9vcHNcbiAgICovXG4gIGlmICghU1BbU2ldKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgU1BbU2ldID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyXG4gICAgICAgIGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludCxcbiAgICAgICAgc2VsZiA9IHRoaXMsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICBsZW5ndGggPSBzZWxmLmxlbmd0aCxcbiAgICAgICAgaXRlcmF0b3IgPSB7XG4gICAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICAgIHZhclxuICAgICAgICAgICAgICBkb25lID0gbGVuZ3RoIDw9IGksXG4gICAgICAgICAgICAgIGMgPSBkb25lID8gJycgOiBmcm9tQ29kZVBvaW50KHNlbGYuY29kZVBvaW50QXQoaSkpO1xuICAgICAgICAgICAgaSArPSBjLmxlbmd0aDtcbiAgICAgICAgICAgIHJldHVybiBkb25lID8geyBkb25lOiBkb25lIH0gOiB7IGRvbmU6IGRvbmUsIHZhbHVlOiBjIH07XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgaXRlcmF0b3JbU2ldID0gcmV0dXJuVGhpcztcbiAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICB9O1xuICB9XG5cbn0oU3ltYm9sLml0ZXJhdG9yLCBBcnJheS5wcm90b3R5cGUsIFN0cmluZy5wcm90b3R5cGUpKTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kXG4gKiBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5XG4gKiBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5XG4gKiBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQXG4gKiByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuZXhwb3J0IHt9O1xuXG4vLyBkZWZhdWx0UHJldmVudGVkIGlzIGJyb2tlbiBpbiBJRS5cbi8vIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvNzkwMzg5L2V2ZW50LWRlZmF1bHRwcmV2ZW50ZWQtcmV0dXJucy1mYWxzZS1hZnRlci1wcmV2ZW50ZGVmYXVsdC13YXMtY2FsbGVkXG5jb25zdCB3b3JraW5nRGVmYXVsdFByZXZlbnRlZCA9ICgoKSA9PiB7XG4gIGNvbnN0IGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgZS5pbml0RXZlbnQoJ2ZvbycsIHRydWUsIHRydWUpO1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIHJldHVybiBlLmRlZmF1bHRQcmV2ZW50ZWQ7XG59KSgpO1xuXG5pZiAoIXdvcmtpbmdEZWZhdWx0UHJldmVudGVkKSB7XG4gIGNvbnN0IG9yaWdQcmV2ZW50RGVmYXVsdCA9IEV2ZW50LnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdDtcbiAgRXZlbnQucHJvdG90eXBlLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24gKHRoaXM6IEV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLmNhbmNlbGFibGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvcmlnUHJldmVudERlZmF1bHQuY2FsbCh0aGlzKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZGVmYXVsdFByZXZlbnRlZCcsIHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIH0pO1xuICB9O1xufVxuXG5jb25zdCBpc0lFID0gL1RyaWRlbnQvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8vIEV2ZW50IGNvbnN0cnVjdG9yIHNoaW1cbmlmICghd2luZG93LkV2ZW50IHx8IChpc0lFICYmIHR5cGVvZiB3aW5kb3cuRXZlbnQgIT09ICdmdW5jdGlvbicpKSB7XG4gIGNvbnN0IG9yaWdFdmVudCA9IHdpbmRvdy5FdmVudCBhcyB0eXBlb2YgRXZlbnQ7XG4gIHdpbmRvd1snRXZlbnQnXSA9ICgoKGluVHlwZTogc3RyaW5nLCBwYXJhbXM/OiBFdmVudEluaXQpID0+IHtcbiAgICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gICAgY29uc3QgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGUuaW5pdEV2ZW50KGluVHlwZSwgQm9vbGVhbihwYXJhbXMuYnViYmxlcyksIEJvb2xlYW4ocGFyYW1zLmNhbmNlbGFibGUpKTtcbiAgICByZXR1cm4gZTtcbiAgfSkgYXMgdW5rbm93bikgYXMgdHlwZW9mIEV2ZW50O1xuICBpZiAob3JpZ0V2ZW50KSB7XG4gICAgZm9yIChjb25zdCBpIGluIG9yaWdFdmVudCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICh3aW5kb3dbJ0V2ZW50J10gYXMgYW55KVtpXSA9IChvcmlnRXZlbnQgYXMgYW55KVtpXTtcbiAgICB9XG4gICAgd2luZG93WydFdmVudCddLnByb3RvdHlwZSA9IG9yaWdFdmVudC5wcm90b3R5cGU7XG4gIH1cbn1cblxuLy8gQ3VzdG9tRXZlbnQgY29uc3RydWN0b3Igc2hpbVxuaWYgKCF3aW5kb3cuQ3VzdG9tRXZlbnQgfHwgKGlzSUUgJiYgdHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCAhPT0gJ2Z1bmN0aW9uJykpIHtcbiAgd2luZG93WydDdXN0b21FdmVudCddID0gKCg8VD4oXG4gICAgaW5UeXBlOiBzdHJpbmcsXG4gICAgcGFyYW1zPzogQ3VzdG9tRXZlbnRJbml0PFQ+XG4gICkgPT4ge1xuICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcbiAgICBjb25zdCBlOiBDdXN0b21FdmVudDxUPiA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgIGUuaW5pdEN1c3RvbUV2ZW50KFxuICAgICAgaW5UeXBlLFxuICAgICAgQm9vbGVhbihwYXJhbXMuYnViYmxlcyksXG4gICAgICBCb29sZWFuKHBhcmFtcy5jYW5jZWxhYmxlKSxcbiAgICAgIHBhcmFtcy5kZXRhaWwhXG4gICAgKTtcbiAgICByZXR1cm4gZTtcbiAgfSkgYXMgdW5rbm93bikgYXMgdHlwZW9mIEN1c3RvbUV2ZW50O1xuICB3aW5kb3dbJ0N1c3RvbUV2ZW50J10ucHJvdG90eXBlID0gd2luZG93LkV2ZW50LnByb3RvdHlwZSBhcyBDdXN0b21FdmVudDtcbn1cblxuaWYgKCF3aW5kb3cuTW91c2VFdmVudCB8fCAoaXNJRSAmJiB0eXBlb2Ygd2luZG93Lk1vdXNlRXZlbnQgIT09ICdmdW5jdGlvbicpKSB7XG4gIGNvbnN0IG9yaWdNb3VzZUV2ZW50ID0gd2luZG93Lk1vdXNlRXZlbnQgYXMgdHlwZW9mIE1vdXNlRXZlbnQ7XG4gIHdpbmRvd1snTW91c2VFdmVudCddID0gKCgoaW5UeXBlOiBzdHJpbmcsIHBhcmFtcz86IE1vdXNlRXZlbnRJbml0KSA9PiB7XG4gICAgcGFyYW1zID0gcGFyYW1zIHx8IHt9O1xuICAgIGNvbnN0IGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudCcpO1xuICAgIGUuaW5pdE1vdXNlRXZlbnQoXG4gICAgICBpblR5cGUsXG4gICAgICBCb29sZWFuKHBhcmFtcy5idWJibGVzKSxcbiAgICAgIEJvb2xlYW4ocGFyYW1zLmNhbmNlbGFibGUpLFxuICAgICAgcGFyYW1zLnZpZXcgfHwgd2luZG93LFxuICAgICAgcGFyYW1zLmRldGFpbCEsXG4gICAgICBwYXJhbXMuc2NyZWVuWCEsXG4gICAgICBwYXJhbXMuc2NyZWVuWSEsXG4gICAgICBwYXJhbXMuY2xpZW50WCEsXG4gICAgICBwYXJhbXMuY2xpZW50WSEsXG4gICAgICBwYXJhbXMuY3RybEtleSEsXG4gICAgICBwYXJhbXMuYWx0S2V5ISxcbiAgICAgIHBhcmFtcy5zaGlmdEtleSEsXG4gICAgICBwYXJhbXMubWV0YUtleSEsXG4gICAgICBwYXJhbXMuYnV0dG9uISxcbiAgICAgIHBhcmFtcy5yZWxhdGVkVGFyZ2V0IVxuICAgICk7XG4gICAgcmV0dXJuIGU7XG4gIH0pIGFzIHVua25vd24pIGFzIHR5cGVvZiBNb3VzZUV2ZW50O1xuICBpZiAob3JpZ01vdXNlRXZlbnQpIHtcbiAgICBmb3IgKGNvbnN0IGogaW4gb3JpZ01vdXNlRXZlbnQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAod2luZG93Lk1vdXNlRXZlbnQgYXMgYW55KVtqXSA9IChvcmlnTW91c2VFdmVudCBhcyBhbnkpW2pdO1xuICAgIH1cbiAgfVxuICB3aW5kb3dbJ01vdXNlRXZlbnQnXS5wcm90b3R5cGUgPSBvcmlnTW91c2VFdmVudC5wcm90b3R5cGU7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZFxuICogYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heVxuICogYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHQgQ29kZSBkaXN0cmlidXRlZCBieVxuICogR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUFxuICogcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5cbmV4cG9ydCB7fTtcblxuLy8gT2xkZXIgYnJvd3NlcnMgbGlrZSBJRSBkbyBub3Qgc3VwcG9ydCBhbiBvYmplY3QgYXMgdGhlIG9wdGlvbnMgcGFyYW1ldGVyXG4vLyB0byBhZGQvcmVtb3ZlRXZlbnRMaXN0ZW5lci5cbi8vIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvNzkwMzg5L2V2ZW50LWRlZmF1bHRwcmV2ZW50ZWQtcmV0dXJucy1mYWxzZS1hZnRlci1wcmV2ZW50ZGVmYXVsdC13YXMtY2FsbGVkXG5jb25zdCBzdXBwb3J0c0V2ZW50T3B0aW9ucyA9ICgoKSA9PiB7XG4gIGxldCBzdXBwb3J0ZWQgPSBmYWxzZTtcbiAgbGV0IG9uY2VTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgY29uc3QgZXZlbnRPcHRpb25zID0ge1xuICAgIGdldCBjYXB0dXJlKCkge1xuICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICBnZXQgb25jZSgpIHtcbiAgICAgIG9uY2VTdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgfTtcbiAgbGV0IGNhbGxDb3VudCA9IDA7XG4gIGNvbnN0IGxpc3RlbmVyID0gKCkgPT4ge1xuICAgIGNhbGxDb3VudCsrO1xuICB9O1xuICBjb25zdCBkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIC8vIE5PVEU6IFRoZXNlIHdpbGwgYmUgdW5wYXRjaGVkIGF0IHRoaXMgcG9pbnQuXG4gIGQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBsaXN0ZW5lciwgZXZlbnRPcHRpb25zKTtcbiAgbGV0IGZ1bGx5U3VwcG9ydGVkID0gc3VwcG9ydGVkICYmIG9uY2VTdXBwb3J0ZWQ7XG4gIC8vIE9uY2UgKyBjYXB0dXJlIGJyb2tlbiBvbiBFZGdlID49IDE3IDwgNzkuXG4gIGlmIChmdWxseVN1cHBvcnRlZCkge1xuICAgIGQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NsaWNrJykpO1xuICAgIGQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NsaWNrJykpO1xuICAgIGZ1bGx5U3VwcG9ydGVkID0gY2FsbENvdW50ID09IDE7XG4gIH1cbiAgZC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGxpc3RlbmVyLCBldmVudE9wdGlvbnMpO1xuICByZXR1cm4gZnVsbHlTdXBwb3J0ZWQ7XG59KSgpO1xuXG5jb25zdCBuYXRpdmVFdmVudFRhcmdldCA9IHdpbmRvdy5FdmVudFRhcmdldCA/PyB3aW5kb3cuTm9kZTtcblxuaWYgKFxuICAhc3VwcG9ydHNFdmVudE9wdGlvbnMgJiZcbiAgJ2FkZEV2ZW50TGlzdGVuZXInIGluIG5hdGl2ZUV2ZW50VGFyZ2V0LnByb3RvdHlwZVxuKSB7XG4gIGNvbnN0IHBhcnNlRXZlbnRPcHRpb25zID0gKFxuICAgIG9wdGlvbnNPckNhcHR1cmU/OiBib29sZWFuIHwgQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnNcbiAgKSA9PiB7XG4gICAgbGV0IGNhcHR1cmUsIG9uY2U7XG4gICAgaWYgKFxuICAgICAgb3B0aW9uc09yQ2FwdHVyZSAmJlxuICAgICAgKHR5cGVvZiBvcHRpb25zT3JDYXB0dXJlID09PSAnb2JqZWN0JyB8fFxuICAgICAgICB0eXBlb2Ygb3B0aW9uc09yQ2FwdHVyZSA9PT0gJ2Z1bmN0aW9uJylcbiAgICApIHtcbiAgICAgIGNhcHR1cmUgPSBCb29sZWFuKChvcHRpb25zT3JDYXB0dXJlIGFzIEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zKS5jYXB0dXJlKTtcbiAgICAgIG9uY2UgPSBCb29sZWFuKChvcHRpb25zT3JDYXB0dXJlIGFzIEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zKS5vbmNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FwdHVyZSA9IEJvb2xlYW4ob3B0aW9uc09yQ2FwdHVyZSk7XG4gICAgICBvbmNlID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBjYXB0dXJlLFxuICAgICAgb25jZSxcbiAgICB9O1xuICB9O1xuXG4gIGNvbnN0IG9yaWdBZGRFdmVudExpc3RlbmVyID0gbmF0aXZlRXZlbnRUYXJnZXQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXI7XG4gIGNvbnN0IG9yaWdSZW1vdmVFdmVudExpc3RlbmVyID1cbiAgICBuYXRpdmVFdmVudFRhcmdldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcjtcblxuICB0eXBlIExpc3RlbmVyTWFwID0gV2Vha01hcDxcbiAgICBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0LFxuICAgIEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3QgfCBudWxsXG4gID47XG4gIHR5cGUgVHlwZU1hcCA9IE1hcDxzdHJpbmcsIExpc3RlbmVyTWFwPjtcbiAgdHlwZSBFbGVtZW50TGlzdGVuZXJNYXAgPSBXZWFrTWFwPEV2ZW50VGFyZ2V0LCBUeXBlTWFwPjtcblxuICBjb25zdCBjYXB0dXJlTGlzdGVuZXJNYXA6IEVsZW1lbnRMaXN0ZW5lck1hcCA9IG5ldyBXZWFrTWFwKCk7XG4gIGNvbnN0IGxpc3RlbmVyTWFwOiBFbGVtZW50TGlzdGVuZXJNYXAgPSBuZXcgV2Vha01hcCgpO1xuXG4gIGNvbnN0IGdldExpc3RlbmVyTWFwID0gKFxuICAgIHRhcmdldDogRXZlbnRUYXJnZXQsXG4gICAgdHlwZTogc3RyaW5nLFxuICAgIGNhcHR1cmU6IGJvb2xlYW5cbiAgKSA9PiB7XG4gICAgY29uc3QgZWxNYXAgPSBjYXB0dXJlID8gY2FwdHVyZUxpc3RlbmVyTWFwIDogbGlzdGVuZXJNYXA7XG4gICAgbGV0IHR5cGVNYXAgPSBlbE1hcC5nZXQodGFyZ2V0KTtcbiAgICBpZiAodHlwZU1hcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlbE1hcC5zZXQodGFyZ2V0LCAodHlwZU1hcCA9IG5ldyBNYXAoKSkpO1xuICAgIH1cbiAgICBsZXQgbGlzdGVuZXJzID0gdHlwZU1hcC5nZXQodHlwZSk7XG4gICAgaWYgKGxpc3RlbmVycyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0eXBlTWFwLnNldCh0eXBlLCAobGlzdGVuZXJzID0gbmV3IFdlYWtNYXAoKSkpO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdGVuZXJzO1xuICB9O1xuXG4gIG5hdGl2ZUV2ZW50VGFyZ2V0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKFxuICAgIHR5cGU6IHN0cmluZyxcbiAgICBsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCB8IG51bGwsXG4gICAgb3B0aW9ucz86IGJvb2xlYW4gfCBBZGRFdmVudExpc3RlbmVyT3B0aW9ucyB8IHVuZGVmaW5lZFxuICApIHtcbiAgICBpZiAobGlzdGVuZXIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7Y2FwdHVyZSwgb25jZX0gPSBwYXJzZUV2ZW50T3B0aW9ucyhvcHRpb25zKTtcbiAgICBjb25zdCBtYXAgPSBnZXRMaXN0ZW5lck1hcCh0aGlzLCB0eXBlLCBjYXB0dXJlKTtcbiAgICBpZiAoIW1hcC5oYXMobGlzdGVuZXIpKSB7XG4gICAgICBjb25zdCBjYWNoZWRMaXN0ZW5lciA9IG9uY2VcbiAgICAgICAgPyAoZTogRXZlbnQpID0+IHtcbiAgICAgICAgICAgIG1hcC5kZWxldGUobGlzdGVuZXIpO1xuICAgICAgICAgICAgb3JpZ1JlbW92ZUV2ZW50TGlzdGVuZXIuY2FsbCh0aGlzLCB0eXBlLCBjYWNoZWRMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHJldHVybiBsaXN0ZW5lci5jYWxsKHRoaXMsIGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGxpc3RlbmVyPy5oYW5kbGVFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICByZXR1cm4gbGlzdGVuZXIuaGFuZGxlRXZlbnQoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICA6IG51bGw7XG4gICAgICBtYXAuc2V0KGxpc3RlbmVyLCBjYWNoZWRMaXN0ZW5lcik7XG4gICAgICAvLyBOb3RlLCB0aGUgY2FjaGVkIGxpc3RlbmVyIGlzIG51bGwgaWYgbm8gd3JhcHBlciBpcyB1c2VkIHRvIGF2b2lkXG4gICAgICAvLyBhIHN0cm9uZyByZWYgdG8gaXQ7XG4gICAgICBvcmlnQWRkRXZlbnRMaXN0ZW5lci5jYWxsKFxuICAgICAgICB0aGlzLFxuICAgICAgICB0eXBlLFxuICAgICAgICBjYWNoZWRMaXN0ZW5lciA/PyBsaXN0ZW5lcixcbiAgICAgICAgY2FwdHVyZVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgbmF0aXZlRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoXG4gICAgdHlwZTogc3RyaW5nLFxuICAgIGxpc3RlbmVyOiBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0IHwgbnVsbCxcbiAgICBvcHRpb25zPzogYm9vbGVhbiB8IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zIHwgdW5kZWZpbmVkXG4gICkge1xuICAgIGlmIChsaXN0ZW5lciA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHtjYXB0dXJlfSA9IHBhcnNlRXZlbnRPcHRpb25zKG9wdGlvbnMpO1xuICAgIGNvbnN0IG1hcCA9IGdldExpc3RlbmVyTWFwKHRoaXMsIHR5cGUsIGNhcHR1cmUpO1xuICAgIGNvbnN0IGNhY2hlZExpc3RlbmVyID0gbWFwLmdldChsaXN0ZW5lcik7XG4gICAgaWYgKGNhY2hlZExpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG1hcC5kZWxldGUobGlzdGVuZXIpO1xuICAgICAgLy8gTm90ZSwgdGhlIGNhY2hlZCBsaXN0ZW5lciBpcyBudWxsIGlmIG5vIHdyYXBwZXIgd2FzIHVzZWQgc28gdGhhdCBhXG4gICAgICAvLyBzdHJvbmcgcmVmIHRvIGl0IGlzIG5vdCBrZXB0LlxuICAgICAgb3JpZ1JlbW92ZUV2ZW50TGlzdGVuZXIuY2FsbChcbiAgICAgICAgdGhpcyxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgY2FjaGVkTGlzdGVuZXIgPz8gbGlzdGVuZXIsXG4gICAgICAgIGNhcHR1cmVcbiAgICAgICk7XG4gICAgfVxuICB9O1xufVxuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE4IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbmh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmVcbmZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0IENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzXG5wYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzbyBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50XG5mb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbmV4cG9ydCB7fTtcblxuLy8gSW1wbGVtZW50IE5vZGUuYmFzZVVSSSBmb3IgSUUgMTFcbi8vIGFkYXB0ZWQgZnJvbVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYmNvbXBvbmVudHMvaHRtbC1pbXBvcnRzL2Jsb2IvdjEuMi4wL3NyYy9odG1sLWltcG9ydHMuanNcblxuY29uc3QgbmF0aXZlX2Jhc2VVUkkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICBOb2RlLnByb3RvdHlwZSxcbiAgJ2Jhc2VVUkknXG4pO1xuaWYgKCFuYXRpdmVfYmFzZVVSSSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsICdiYXNlVVJJJywge1xuICAgIGdldCh0aGlzOiBOb2RlKTogc3RyaW5nIHtcbiAgICAgIC8vIHRoaXMub3duZXJEb2N1bWVudCBpcyBgbnVsbGAgZm9yIGRvY3VtZW50c1xuICAgICAgY29uc3QgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8ICh0aGlzIGFzIERvY3VtZW50KTtcbiAgICAgIGNvbnN0IGJhc2UgPSBkb2MucXVlcnlTZWxlY3RvcignYmFzZVtocmVmXScpIGFzIEhUTUxCYXNlRWxlbWVudDtcbiAgICAgIHJldHVybiAoYmFzZSAmJiBiYXNlLmhyZWYpIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gIH0pO1xufVxuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDIwIFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbmh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmVcbmZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0IENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzXG5wYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzbyBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50XG5mb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbmV4cG9ydCB7fTtcblxuY29uc3QgRWxlbWVudF9wcm90b3R5cGUgPSBFbGVtZW50LnByb3RvdHlwZTtcbi8vIEluIElFMTEsIHRoZSBgYXR0cmlidXRlc2AgZGVzY3JpcHRvciBpcyBvbiBgTm9kZS5wcm90b3R5cGVgLlxuY29uc3QgYXR0cmlidXRlc0Rlc2NyaXB0b3IgPVxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEVsZW1lbnRfcHJvdG90eXBlLCAnYXR0cmlidXRlcycpID8/XG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTm9kZS5wcm90b3R5cGUsICdhdHRyaWJ1dGVzJyk7XG4vLyBJbiBTYWZhcmkgOSwgdGhlIGBhdHRyaWJ1dGVzYCBkZXNjcmlwdG9yJ3MgZ2V0dGVyIGlzIHVuZGVmaW5lZC4gSW4gQ2hyb21lIDQxLFxuLy8gdGhlIGBhdHRyaWJ1dGVzYCBkZXNjcmlwdG9yIGlzIGEgZGF0YSBkZXNjcmlwdG9yIG9uIGVhY2ggRWxlbWVudCBpbnN0YW5jZS5cbmNvbnN0IGdldEF0dHJpYnV0ZXMgPVxuICBhdHRyaWJ1dGVzRGVzY3JpcHRvcj8uZ2V0ID8/XG4gIGZ1bmN0aW9uICh0aGlzOiBFbGVtZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcztcbiAgfTtcbmNvbnN0IG1hcCA9IEFycmF5LnByb3RvdHlwZS5tYXA7XG5cbmlmICghRWxlbWVudF9wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoJ2dldEF0dHJpYnV0ZU5hbWVzJykpIHtcbiAgRWxlbWVudF9wcm90b3R5cGUuZ2V0QXR0cmlidXRlTmFtZXMgPSBmdW5jdGlvbiBnZXRBdHRyaWJ1dGVOYW1lcyhcbiAgICB0aGlzOiBFbGVtZW50XG4gICk6IEFycmF5PHN0cmluZz4ge1xuICAgIHJldHVybiBtYXAuY2FsbChcbiAgICAgIGdldEF0dHJpYnV0ZXMuY2FsbCh0aGlzKSxcbiAgICAgIChhdHRyKSA9PiBhdHRyLm5hbWVcbiAgICApIGFzIEFycmF5PHN0cmluZz47XG4gIH07XG59XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMjAgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG5odHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZVxuZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHQgQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXNcbnBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnRcbmZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuZXhwb3J0IHt9O1xuXG5jb25zdCBFbGVtZW50X3Byb3RvdHlwZSA9IEVsZW1lbnQucHJvdG90eXBlO1xuXG5pZiAoIUVsZW1lbnRfcHJvdG90eXBlLmhhc093blByb3BlcnR5KCdtYXRjaGVzJykpIHtcbiAgRWxlbWVudF9wcm90b3R5cGUubWF0Y2hlcyA9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAoKEVsZW1lbnRfcHJvdG90eXBlIGFzIGFueSkud2Via2l0TWF0Y2hlc1NlbGVjdG9yIGFzIEVsZW1lbnRbJ21hdGNoZXMnXSkgPz9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICgoRWxlbWVudF9wcm90b3R5cGUgYXMgYW55KS5tc01hdGNoZXNTZWxlY3RvciBhcyBFbGVtZW50WydtYXRjaGVzJ10pO1xufVxuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDIwIFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuZXhwb3J0IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxudHlwZSBDb25zdHJ1Y3RvcjxUPiA9IG5ldyAoLi4uYXJnczogQXJyYXk8YW55PikgPT4gVDtcblxuY29uc3QgbmF0aXZlQXBwZW5kQ2hpbGQgPSBOb2RlLnByb3RvdHlwZS5hcHBlbmRDaGlsZDtcblxuY29uc3QgaW5zdGFsbEFwcGVuZCA9IDxUPihjb25zdHJ1Y3RvcjogQ29uc3RydWN0b3I8VD4pID0+IHtcbiAgY29uc3QgcHJvdG90eXBlID0gY29uc3RydWN0b3IucHJvdG90eXBlO1xuICBpZiAocHJvdG90eXBlLmhhc093blByb3BlcnR5KCdhcHBlbmQnKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdhcHBlbmQnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZCguLi5hcmdzOiBBcnJheTxOb2RlIHwgc3RyaW5nPikge1xuICAgICAgZm9yIChjb25zdCBhcmcgb2YgYXJncykge1xuICAgICAgICBuYXRpdmVBcHBlbmRDaGlsZC5jYWxsKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShhcmcpIDogYXJnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59O1xuXG5pbnN0YWxsQXBwZW5kKERvY3VtZW50KTtcbmluc3RhbGxBcHBlbmQoRG9jdW1lbnRGcmFnbWVudCk7XG5pbnN0YWxsQXBwZW5kKEVsZW1lbnQpO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDIwIFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuZXhwb3J0IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxudHlwZSBDb25zdHJ1Y3RvcjxUPiA9IG5ldyAoLi4uYXJnczogQXJyYXk8YW55PikgPT4gVDtcblxuY29uc3QgbmF0aXZlSW5zZXJ0QmVmb3JlID0gTm9kZS5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlO1xuY29uc3QgbmF0aXZlR2V0Rmlyc3RDaGlsZCA9XG4gIC8vIEluIENocm9tZSA0MSwgYGZpcnN0Q2hpbGRgIGlzIGEgZGF0YSBkZXNjcmlwdG9yIG9uIGV2ZXJ5IGluc3RhbmNlLCBub3QgYVxuICAvLyBhY2Nlc3NvciBkZXNjcmlwdG9yIG9uIGBOb2RlLnByb3RvdHlwZWAuXG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTm9kZS5wcm90b3R5cGUsICdmaXJzdENoaWxkJyk/LmdldCA/P1xuICAvLyBJbiBTYWZhcmkgOSwgdGhlIGBmaXJzdENoaWxkYCBkZXNjcmlwdG9yJ3MgYGdldGAgYW5kIGBzZXRgIGFyZSB1bmRlZmluZWQuXG4gIGZ1bmN0aW9uICh0aGlzOiBOb2RlKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlyc3RDaGlsZDtcbiAgfTtcblxuY29uc3QgaW5zdGFsbFByZXBlbmQgPSA8VD4oY29uc3RydWN0b3I6IENvbnN0cnVjdG9yPFQ+KSA9PiB7XG4gIGNvbnN0IHByb3RvdHlwZSA9IGNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgaWYgKHByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSgncHJlcGVuZCcpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ3ByZXBlbmQnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBlbmQoLi4uYXJnczogQXJyYXk8Tm9kZSB8IHN0cmluZz4pIHtcbiAgICAgIGNvbnN0IGZpcnN0Q2hpbGQgPSBuYXRpdmVHZXRGaXJzdENoaWxkLmNhbGwodGhpcyk7XG4gICAgICBmb3IgKGNvbnN0IGFyZyBvZiBhcmdzKSB7XG4gICAgICAgIGNvbnN0IG5ld05vZGUgPVxuICAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYXJnKSA6IGFyZztcbiAgICAgICAgbmF0aXZlSW5zZXJ0QmVmb3JlLmNhbGwodGhpcywgbmV3Tm9kZSwgZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59O1xuXG5pbnN0YWxsUHJlcGVuZChEb2N1bWVudCk7XG5pbnN0YWxsUHJlcGVuZChEb2N1bWVudEZyYWdtZW50KTtcbmluc3RhbGxQcmVwZW5kKEVsZW1lbnQpO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDIwIFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuZXhwb3J0IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxudHlwZSBDb25zdHJ1Y3RvcjxUPiA9IG5ldyAoLi4uYXJnczogQXJyYXk8YW55PikgPT4gVDtcblxuY29uc3QgbmF0aXZlQXBwZW5kQ2hpbGQgPSBOb2RlLnByb3RvdHlwZS5hcHBlbmRDaGlsZDtcbmNvbnN0IG5hdGl2ZVJlbW92ZUNoaWxkID0gTm9kZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQ7XG5jb25zdCBuYXRpdmVHZXRGaXJzdENoaWxkID1cbiAgLy8gSW4gQ2hyb21lIDQxLCBgZmlyc3RDaGlsZGAgaXMgYSBkYXRhIGRlc2NyaXB0b3Igb24gZXZlcnkgaW5zdGFuY2UsIG5vdCBhXG4gIC8vIGFjY2Vzc29yIGRlc2NyaXB0b3Igb24gYE5vZGUucHJvdG90eXBlYC5cbiAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihOb2RlLnByb3RvdHlwZSwgJ2ZpcnN0Q2hpbGQnKT8uZ2V0ID8/XG4gIC8vIEluIFNhZmFyaSA5LCB0aGUgYGZpcnN0Q2hpbGRgIGRlc2NyaXB0b3IncyBgZ2V0YCBhbmQgYHNldGAgYXJlIHVuZGVmaW5lZC5cbiAgZnVuY3Rpb24gKHRoaXM6IE5vZGUpIHtcbiAgICByZXR1cm4gdGhpcy5maXJzdENoaWxkO1xuICB9O1xuXG5jb25zdCBpbnN0YWxsUmVwbGFjZUNoaWxkcmVuID0gPFQ+KGNvbnN0cnVjdG9yOiBDb25zdHJ1Y3RvcjxUPikgPT4ge1xuICBjb25zdCBwcm90b3R5cGUgPSBjb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIGlmIChwcm90b3R5cGUuaGFzT3duUHJvcGVydHkoJ3JlcGxhY2VDaGlsZHJlbicpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ3JlcGxhY2VDaGlsZHJlbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVwbGFjZUNoaWxkcmVuKC4uLmFyZ3M6IEFycmF5PE5vZGUgfCBzdHJpbmc+KSB7XG4gICAgICBsZXQgY2hpbGQ7XG4gICAgICB3aGlsZSAoKGNoaWxkID0gbmF0aXZlR2V0Rmlyc3RDaGlsZC5jYWxsKHRoaXMpKSAhPT0gbnVsbCkge1xuICAgICAgICBuYXRpdmVSZW1vdmVDaGlsZC5jYWxsKHRoaXMsIGNoaWxkKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBhcmcgb2YgYXJncykge1xuICAgICAgICBuYXRpdmVBcHBlbmRDaGlsZC5jYWxsKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShhcmcpIDogYXJnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59O1xuXG5pbnN0YWxsUmVwbGFjZUNoaWxkcmVuKERvY3VtZW50KTtcbmluc3RhbGxSZXBsYWNlQ2hpbGRyZW4oRG9jdW1lbnRGcmFnbWVudCk7XG5pbnN0YWxsUmVwbGFjZUNoaWxkcmVuKEVsZW1lbnQpO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDIwIFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuZXhwb3J0IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxudHlwZSBDb25zdHJ1Y3RvcjxUPiA9IG5ldyAoLi4uYXJnczogQXJyYXk8YW55PikgPT4gVDtcblxuY29uc3QgbmF0aXZlSW5zZXJ0QmVmb3JlID0gTm9kZS5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlO1xuY29uc3QgbmF0aXZlR2V0UGFyZW50Tm9kZSA9XG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTm9kZS5wcm90b3R5cGUsICdwYXJlbnROb2RlJyk/LmdldCA/P1xuICAvLyBJbiBTYWZhcmkgOSwgdGhlIGBwYXJlbnROb2RlYCBkZXNjcmlwdG9yJ3MgYGdldGAgYW5kIGBzZXRgIGFyZSB1bmRlZmluZWQuXG4gIGZ1bmN0aW9uICh0aGlzOiBOb2RlKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZTtcbiAgfTtcbmNvbnN0IG5hdGl2ZUdldE5leHRTaWJsaW5nID1cbiAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihOb2RlLnByb3RvdHlwZSwgJ25leHRTaWJsaW5nJyk/LmdldCA/P1xuICAvLyBJbiBTYWZhcmkgOSwgdGhlIGBuZXh0U2libGluZ2AgZGVzY3JpcHRvcidzIGBnZXRgIGFuZCBgc2V0YCBhcmVcbiAgLy8gdW5kZWZpbmVkLlxuICBmdW5jdGlvbiAodGhpczogTm9kZSkge1xuICAgIHJldHVybiB0aGlzLm5leHRTaWJsaW5nO1xuICB9O1xuXG5jb25zdCBpbnN0YWxsQWZ0ZXIgPSA8VD4oY29uc3RydWN0b3I6IENvbnN0cnVjdG9yPFQ+KSA9PiB7XG4gIGNvbnN0IHByb3RvdHlwZSA9IGNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgaWYgKHByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSgnYWZ0ZXInKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdhZnRlcicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWZ0ZXIoLi4uYXJnczogQXJyYXk8Tm9kZSB8IHN0cmluZz4pIHtcbiAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBuYXRpdmVHZXRQYXJlbnROb2RlLmNhbGwodGhpcyk7XG4gICAgICBpZiAocGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5leHRTaWJsaW5nID0gbmF0aXZlR2V0TmV4dFNpYmxpbmcuY2FsbCh0aGlzKTtcbiAgICAgIGZvciAoY29uc3QgYXJnIG9mIGFyZ3MpIHtcbiAgICAgICAgbmF0aXZlSW5zZXJ0QmVmb3JlLmNhbGwoXG4gICAgICAgICAgcGFyZW50Tm9kZSxcbiAgICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGFyZykgOiBhcmcsXG4gICAgICAgICAgbmV4dFNpYmxpbmdcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn07XG5cbmluc3RhbGxBZnRlcihDaGFyYWN0ZXJEYXRhKTtcbmluc3RhbGxBZnRlcihFbGVtZW50KTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAyMCBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbmV4cG9ydCB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbnR5cGUgQ29uc3RydWN0b3I8VD4gPSBuZXcgKC4uLmFyZ3M6IEFycmF5PGFueT4pID0+IFQ7XG5cbmNvbnN0IG5hdGl2ZUluc2VydEJlZm9yZSA9IE5vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZTtcbmNvbnN0IG5hdGl2ZUdldFBhcmVudE5vZGUgPVxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE5vZGUucHJvdG90eXBlLCAncGFyZW50Tm9kZScpPy5nZXQgPz9cbiAgLy8gSW4gU2FmYXJpIDksIHRoZSBgcGFyZW50Tm9kZWAgZGVzY3JpcHRvcidzIGBnZXRgIGFuZCBgc2V0YCBhcmUgdW5kZWZpbmVkLlxuICBmdW5jdGlvbiAodGhpczogTm9kZSkge1xuICAgIHJldHVybiB0aGlzLnBhcmVudE5vZGU7XG4gIH07XG5cbmNvbnN0IGluc3RhbGxCZWZvcmUgPSA8VD4oY29uc3RydWN0b3I6IENvbnN0cnVjdG9yPFQ+KSA9PiB7XG4gIGNvbnN0IHByb3RvdHlwZSA9IGNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgaWYgKHByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSgnYmVmb3JlJykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCAnYmVmb3JlJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBiZWZvcmUoLi4uYXJnczogQXJyYXk8Tm9kZSB8IHN0cmluZz4pIHtcbiAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBuYXRpdmVHZXRQYXJlbnROb2RlLmNhbGwodGhpcyk7XG4gICAgICBpZiAocGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGZvciAoY29uc3QgYXJnIG9mIGFyZ3MpIHtcbiAgICAgICAgbmF0aXZlSW5zZXJ0QmVmb3JlLmNhbGwoXG4gICAgICAgICAgcGFyZW50Tm9kZSxcbiAgICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGFyZykgOiBhcmcsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufTtcblxuaW5zdGFsbEJlZm9yZShDaGFyYWN0ZXJEYXRhKTtcbmluc3RhbGxCZWZvcmUoRWxlbWVudCk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMjAgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5leHBvcnQge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG50eXBlIENvbnN0cnVjdG9yPFQ+ID0gbmV3ICguLi5hcmdzOiBBcnJheTxhbnk+KSA9PiBUO1xuXG5jb25zdCBuYXRpdmVSZW1vdmVDaGlsZCA9IE5vZGUucHJvdG90eXBlLnJlbW92ZUNoaWxkO1xuY29uc3QgbmF0aXZlR2V0UGFyZW50Tm9kZSA9XG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTm9kZS5wcm90b3R5cGUsICdwYXJlbnROb2RlJyk/LmdldCA/P1xuICAvLyBJbiBTYWZhcmkgOSwgdGhlIGBwYXJlbnROb2RlYCBkZXNjcmlwdG9yJ3MgYGdldGAgYW5kIGBzZXRgIGFyZSB1bmRlZmluZWQuXG4gIGZ1bmN0aW9uICh0aGlzOiBOb2RlKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZTtcbiAgfTtcblxuY29uc3QgaW5zdGFsbFJlbW92ZSA9IDxUPihjb25zdHJ1Y3RvcjogQ29uc3RydWN0b3I8VD4pID0+IHtcbiAgY29uc3QgcHJvdG90eXBlID0gY29uc3RydWN0b3IucHJvdG90eXBlO1xuICBpZiAocHJvdG90eXBlLmhhc093blByb3BlcnR5KCdyZW1vdmUnKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90b3R5cGUsICdyZW1vdmUnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBuYXRpdmVHZXRQYXJlbnROb2RlLmNhbGwodGhpcyk7XG4gICAgICBpZiAocGFyZW50Tm9kZSkge1xuICAgICAgICBuYXRpdmVSZW1vdmVDaGlsZC5jYWxsKHBhcmVudE5vZGUsIHRoaXMpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufTtcblxuaW5zdGFsbFJlbW92ZShDaGFyYWN0ZXJEYXRhKTtcbmluc3RhbGxSZW1vdmUoRWxlbWVudCk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMjAgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5leHBvcnQge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG50eXBlIENvbnN0cnVjdG9yPFQ+ID0gbmV3ICguLi5hcmdzOiBBcnJheTxhbnk+KSA9PiBUO1xuXG5jb25zdCBuYXRpdmVJbnNlcnRCZWZvcmUgPSBOb2RlLnByb3RvdHlwZS5pbnNlcnRCZWZvcmU7XG5jb25zdCBuYXRpdmVSZW1vdmVDaGlsZCA9IE5vZGUucHJvdG90eXBlLnJlbW92ZUNoaWxkO1xuY29uc3QgbmF0aXZlR2V0UGFyZW50Tm9kZSA9XG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTm9kZS5wcm90b3R5cGUsICdwYXJlbnROb2RlJyk/LmdldCA/P1xuICAvLyBJbiBTYWZhcmkgOSwgdGhlIGBwYXJlbnROb2RlYCBkZXNjcmlwdG9yJ3MgYGdldGAgYW5kIGBzZXRgIGFyZSB1bmRlZmluZWQuXG4gIGZ1bmN0aW9uICh0aGlzOiBOb2RlKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZTtcbiAgfTtcblxuY29uc3QgaW5zdGFsbFJlcGxhY2VXaXRoID0gPFQ+KGNvbnN0cnVjdG9yOiBDb25zdHJ1Y3RvcjxUPikgPT4ge1xuICBjb25zdCBwcm90b3R5cGUgPSBjb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIGlmIChwcm90b3R5cGUuaGFzT3duUHJvcGVydHkoJ3JlcGxhY2VXaXRoJykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCAncmVwbGFjZVdpdGgnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlcGxhY2VXaXRoKC4uLmFyZ3M6IEFycmF5PE5vZGUgfCBzdHJpbmc+KSB7XG4gICAgICBjb25zdCBwYXJlbnROb2RlID0gbmF0aXZlR2V0UGFyZW50Tm9kZS5jYWxsKHRoaXMpO1xuICAgICAgaWYgKHBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGNvbnN0IGFyZyBvZiBhcmdzKSB7XG4gICAgICAgIG5hdGl2ZUluc2VydEJlZm9yZS5jYWxsKFxuICAgICAgICAgIHBhcmVudE5vZGUsXG4gICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShhcmcpIDogYXJnLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgbmF0aXZlUmVtb3ZlQ2hpbGQuY2FsbChwYXJlbnROb2RlLCB0aGlzKTtcbiAgICB9LFxuICB9KTtcbn07XG5cbmluc3RhbGxSZXBsYWNlV2l0aChDaGFyYWN0ZXJEYXRhKTtcbmluc3RhbGxSZXBsYWNlV2l0aChFbGVtZW50KTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAyMCBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbmh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG5odHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlXG5mb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhc1xucGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudFxuZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5leHBvcnQge307XG5cbmNvbnN0IEVsZW1lbnRfcHJvdG90eXBlID0gd2luZG93LkVsZW1lbnQucHJvdG90eXBlO1xuY29uc3QgSFRNTEVsZW1lbnRfcHJvdG90eXBlID0gd2luZG93LkhUTUxFbGVtZW50LnByb3RvdHlwZTtcbmNvbnN0IFNWR0VsZW1lbnRfcHJvdG90eXBlID0gd2luZG93WydTVkdFbGVtZW50J10ucHJvdG90eXBlO1xuXG4vLyBUaGFua3MgdG8gQGp1c3RpbmZhZ25hbmkgZm9yIGZpbmRpbmcgdGhpczpcbi8vXG4vLyBJbiBJRTExLCBgY2xhc3NMaXN0YCBpcyBvbmx5IHN1cHBvcnRlZCBvbiBgSFRNTEVsZW1lbnRgIGluc3RhbmNlczogdGhlXG4vLyBkZXNjcmlwdG9yIGlzIGFuIG93biBwcm9wZXJ0eSBvZiBgSFRNTEVsZW1lbnQucHJvdG90eXBlYCBhbmQgaXMgYW4gYWNjZXNzb3Jcbi8vIGRlc2NyaXB0b3Igd2l0aCBgc2V0YCBhcyBgdW5kZWZpbmVkYCBhbmQgbm8gYGdldGAuIEhvd2V2ZXIsIGl0IHNlZW1zIHRvIGJlXG4vLyBpbXBsZW1lbnRlZCBnZW5lcmljYWxseSBlbm91Z2ggc3VjaCB0aGF0IGNvcHlpbmcgaXQgdG8gc29tZXRoaW5nIGluIHRoZVxuLy8gcHJvdG90eXBlIGNoYWluIG9mIGBTVkdFbGVtZW50YCBjb3JyZWN0bHkgYWRkcyBzdXBwb3J0IGZvciBgY2xhc3NMaXN0YCAoYXNcbi8vIGZhciBhcyBgRE9NVG9rZW5MaXN0YCBpbXBsZW1lbnRlZCBpbiBJRTExKS5cbmlmIChcbiAgSFRNTEVsZW1lbnRfcHJvdG90eXBlLmhhc093blByb3BlcnR5KCdjbGFzc0xpc3QnKSAmJlxuICAhRWxlbWVudF9wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoJ2NsYXNzTGlzdCcpICYmXG4gICFTVkdFbGVtZW50X3Byb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSgnY2xhc3NMaXN0Jylcbikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgRWxlbWVudF9wcm90b3R5cGUsXG4gICAgJ2NsYXNzTGlzdCcsXG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihIVE1MRWxlbWVudF9wcm90b3R5cGUsICdjbGFzc0xpc3QnKSFcbiAgKTtcbn1cbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAyMCBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbmh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG5odHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlXG5mb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhc1xucGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudFxuZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5leHBvcnQge307XG5cbmNvbnN0IEVsZW1lbnRfcHJvdG90eXBlID0gRWxlbWVudC5wcm90b3R5cGU7XG5jb25zdCBuYXRpdmVIYXNBdHRyaWJ1dGUgPSBFbGVtZW50LnByb3RvdHlwZS5oYXNBdHRyaWJ1dGU7XG5jb25zdCBuYXRpdmVTZXRBdHRyaWJ1dGUgPSBFbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGU7XG5jb25zdCBuYXRpdmVSZW1vdmVBdHRyaWJ1dGUgPSBFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGU7XG5cbmlmICghRWxlbWVudF9wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoJ3RvZ2dsZUF0dHJpYnV0ZScpKSB7XG4gIEVsZW1lbnRfcHJvdG90eXBlLnRvZ2dsZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uIHRvZ2dsZUF0dHJpYnV0ZShcbiAgICB0aGlzOiBFbGVtZW50LFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBmb3JjZT86IGJvb2xlYW5cbiAgKTogYm9vbGVhbiB7XG4gICAgaWYgKGZvcmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChuYXRpdmVIYXNBdHRyaWJ1dGUuY2FsbCh0aGlzLCBuYW1lKSkge1xuICAgICAgICBuYXRpdmVSZW1vdmVBdHRyaWJ1dGUuY2FsbCh0aGlzLCBuYW1lKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmF0aXZlU2V0QXR0cmlidXRlLmNhbGwodGhpcywgbmFtZSwgJycpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZvcmNlKSB7XG4gICAgICBpZiAoIW5hdGl2ZUhhc0F0dHJpYnV0ZS5jYWxsKHRoaXMsIG5hbWUpKSB7XG4gICAgICAgIG5hdGl2ZVNldEF0dHJpYnV0ZS5jYWxsKHRoaXMsIG5hbWUsICcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBmb3JjZSBpcyBmYWxzZXlcbiAgICBuYXRpdmVSZW1vdmVBdHRyaWJ1dGUuY2FsbCh0aGlzLCBuYW1lKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZFxuICogYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heVxuICogYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHQgQ29kZSBkaXN0cmlidXRlZCBieVxuICogR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUFxuICogcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5cbmV4cG9ydCB7fTtcblxuLy8gSXQncyBkZXNpcmVhYmxlIHRvIHByb3ZpZGUgYSBkZWZhdWx0IHN0eWxlc2hlZXRcbi8vIHRoYXQncyBjb252ZW5pZW50IGZvciBzdHlsaW5nIHVucmVzb2x2ZWQgZWxlbWVudHMsIGJ1dFxuLy8gaXQncyBjdW1iZXJzb21lIHRvIGhhdmUgdG8gaW5jbHVkZSB0aGlzIG1hbnVhbGx5IGluIGV2ZXJ5IHBhZ2UuXG4vLyBJdCB3b3VsZCBtYWtlIHNlbnNlIHRvIHB1dCBpbnNpZGUgc29tZSBIVE1MSW1wb3J0IGJ1dFxuLy8gdGhlIEhUTUxJbXBvcnRzIHBvbHlmaWxsIGRvZXMgbm90IGFsbG93IGxvYWRpbmcgb2Ygc3R5bGVzaGVldHNcbi8vIHRoYXQgYmxvY2sgcmVuZGVyaW5nLiBUaGVyZWZvcmUgdGhpcyBpbmplY3Rpb24gaXMgdG9sZXJhdGVkIGhlcmUuXG4vL1xuLy8gTk9URTogcG9zaXRpb246IHJlbGF0aXZlIGZpeGVzIElFJ3MgZmFpbHVyZSB0byBpbmhlcml0IG9wYWNpdHlcbi8vIHdoZW4gYSBjaGlsZCBpcyBub3Qgc3RhdGljYWxseSBwb3NpdGlvbmVkLlxuY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuc3R5bGUudGV4dENvbnRlbnQgPVxuICAnJyArXG4gICdib2R5IHsnICtcbiAgJ3RyYW5zaXRpb246IG9wYWNpdHkgZWFzZS1pbiAwLjJzOycgK1xuICAnIH0gXFxuJyArXG4gICdib2R5W3VucmVzb2x2ZWRdIHsnICtcbiAgJ29wYWNpdHk6IDA7IGRpc3BsYXk6IGJsb2NrOyBvdmVyZmxvdzogaGlkZGVuOyBwb3NpdGlvbjogcmVsYXRpdmU7JyArXG4gICcgfSBcXG4nO1xuY29uc3QgaGVhZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKSE7XG5oZWFkLmluc2VydEJlZm9yZShzdHlsZSwgaGVhZC5maXJzdENoaWxkKTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNCBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kXG4gKiBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5XG4gKiBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5XG4gKiBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQXG4gKiByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuZXhwb3J0IHt9O1xuXG5pbnRlcmZhY2UgRXh0ZW5kZWRXaW5kb3cgZXh0ZW5kcyBXaW5kb3cge1xuICBXZWJDb21wb25lbnRzPzoge2ZsYWdzPzogRmxhZ3N9O1xuICBTaGFkeURPTT86IHtmb3JjZT86IGJvb2xlYW4gfCBzdHJpbmc7IG5vUGF0Y2g/OiBib29sZWFuIHwgc3RyaW5nfTtcbiAgY3VzdG9tRWxlbWVudHM6IEN1c3RvbUVsZW1lbnRSZWdpc3RyeSAmIHtcbiAgICBmb3JjZVBvbHlmaWxsPzogc3RyaW5nIHwgYm9vbGVhbjtcbiAgfTtcbn1cblxudHlwZSBGbGFncyA9IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IGJvb2xlYW4gfCBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj47XG5cbi8vIEVzdGFibGlzaCBzY29wZS5cbmNvbnN0IGV4dGVuZGVkV2luZG93ID0gKHdpbmRvdyBhcyB1bmtub3duKSBhcyBFeHRlbmRlZFdpbmRvdztcbmV4dGVuZGVkV2luZG93WydXZWJDb21wb25lbnRzJ10gPSBleHRlbmRlZFdpbmRvd1snV2ViQ29tcG9uZW50cyddIHx8IHtcbiAgJ2ZsYWdzJzoge30sXG59O1xuXG4vLyBsb2FkaW5nIHNjcmlwdFxuY29uc3QgZmlsZSA9ICd3ZWJjb21wb25lbnRzLWJ1bmRsZSc7XG5jb25zdCBzY3JpcHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzY3JpcHRbc3JjKj1cIicgKyBmaWxlICsgJ1wiXScpO1xuY29uc3QgZmxhZ01hdGNoZXIgPSAvd2MtKC4rKS87XG5cbi8vIE5vdGUocmljdGljKTogYSBsb3Qgb2YgdGhpcyBjb2RlIGxvb2tzIHdyb25nLiBTaG91bGQgd2UgYmUgcHVsbGluZ1xuLy8gICAgIHRoZSBmbGFncyBsb2NhbCB2YXJpYWJsZSBvZmYgb2Ygd2luZG93LldlYkNvbXBvbmVudHMuZmxhZ3M/IElmIG5vdFxuLy8gICAgIHRoZW4gd2h5IGNoZWNrIGZvciBub09wdHMsIHdoaWNoIGNhbid0IHBvc3NpYmx5IGhhdmUgYmVlbiBzZXQ/XG5cbi8vIEZsYWdzLiBDb252ZXJ0IHVybCBhcmd1bWVudHMgdG8gZmxhZ3NcbmNvbnN0IGZsYWdzOiBGbGFncyA9IHt9O1xuaWYgKCFmbGFnc1snbm9PcHRzJ10pIHtcbiAgLy8gZnJvbSB1cmxcbiAgbG9jYXRpb24uc2VhcmNoXG4gICAgLnNsaWNlKDEpXG4gICAgLnNwbGl0KCcmJylcbiAgICAuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICBjb25zdCBwYXJ0cyA9IG9wdGlvbi5zcGxpdCgnPScpO1xuICAgICAgbGV0IG1hdGNoO1xuICAgICAgaWYgKHBhcnRzWzBdICYmIChtYXRjaCA9IHBhcnRzWzBdLm1hdGNoKGZsYWdNYXRjaGVyKSkpIHtcbiAgICAgICAgZmxhZ3NbbWF0Y2hbMV1dID0gcGFydHNbMV0gfHwgdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgLy8gZnJvbSBzY3JpcHRcbiAgaWYgKHNjcmlwdCkge1xuICAgIGZvciAobGV0IGkgPSAwLCBhOyAoYSA9IHNjcmlwdC5hdHRyaWJ1dGVzW2ldKTsgaSsrKSB7XG4gICAgICBpZiAoYS5uYW1lICE9PSAnc3JjJykge1xuICAgICAgICBmbGFnc1thLm5hbWVdID0gYS52YWx1ZSB8fCB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBsb2cgZmxhZ3NcbiAgY29uc3QgbG9nOiBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPiA9IHt9O1xuICBpZiAoZmxhZ3NbJ2xvZyddICYmIChmbGFnc1snbG9nJ10gYXMgc3RyaW5nKVsnc3BsaXQnXSkge1xuICAgIGNvbnN0IHBhcnRzID0gKGZsYWdzWydsb2cnXSBhcyBzdHJpbmcpLnNwbGl0KCcsJyk7XG4gICAgcGFydHMuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgbG9nW2ZdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuICBmbGFnc1snbG9nJ10gPSBsb2c7XG59XG5cbi8vIGV4cG9ydHNcbmV4dGVuZGVkV2luZG93WydXZWJDb21wb25lbnRzJ11bJ2ZsYWdzJ10gPSBmbGFncztcbmNvbnN0IGZvcmNlU2hhZHkgPSBmbGFnc1snc2hhZHlkb20nXSBhcyBib29sZWFuIHwgc3RyaW5nO1xuaWYgKGZvcmNlU2hhZHkpIHtcbiAgZXh0ZW5kZWRXaW5kb3dbJ1NoYWR5RE9NJ10gPSBleHRlbmRlZFdpbmRvd1snU2hhZHlET00nXSB8fCB7fTtcbiAgZXh0ZW5kZWRXaW5kb3dbJ1NoYWR5RE9NJ11bJ2ZvcmNlJ10gPSBmb3JjZVNoYWR5O1xuICBjb25zdCBub1BhdGNoID0gZmxhZ3NbJ25vUGF0Y2gnXSBhcyBib29sZWFuIHwgc3RyaW5nO1xuICBleHRlbmRlZFdpbmRvd1snU2hhZHlET00nXVsnbm9QYXRjaCddID0gbm9QYXRjaCA9PT0gJ3RydWUnID8gdHJ1ZSA6IG5vUGF0Y2g7XG59XG5cbmNvbnN0IGZvcmNlQ0UgPSAoZmxhZ3NbJ3JlZ2lzdGVyJ10gfHwgZmxhZ3NbJ2NlJ10pIGFzIGJvb2xlYW4gfCBzdHJpbmc7XG5pZiAoZm9yY2VDRSAmJiB3aW5kb3dbJ2N1c3RvbUVsZW1lbnRzJ10pIHtcbiAgZXh0ZW5kZWRXaW5kb3dbJ2N1c3RvbUVsZW1lbnRzJ11bJ2ZvcmNlUG9seWZpbGwnXSA9IGZvcmNlQ0U7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuLy8gbWluaW1hbCB0ZW1wbGF0ZSBwb2x5ZmlsbFxuKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBuZWVkc1RlbXBsYXRlID0gdHlwZW9mIEhUTUxUZW1wbGF0ZUVsZW1lbnQgPT09ICd1bmRlZmluZWQnO1xuICB2YXIgYnJva2VuRG9jRnJhZ21lbnQgPSAhKFxuICAgIGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKS5jbG9uZU5vZGUoKSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnRcbiAgKTtcbiAgdmFyIG5lZWRzRG9jRnJhZyA9IGZhbHNlO1xuXG4gIC8vIE5PVEU6IFJlcGxhY2UgRG9jdW1lbnRGcmFnbWVudCB0byB3b3JrIGFyb3VuZCBJRTExIGJ1ZyB0aGF0XG4gIC8vIGNhdXNlcyBjaGlsZHJlbiBvZiBhIGRvY3VtZW50IGZyYWdtZW50IG1vZGlmaWVkIHdoaWxlXG4gIC8vIHRoZXJlIGlzIGEgbXV0YXRpb24gb2JzZXJ2ZXIgdG8gbm90IGhhdmUgYSBwYXJlbnROb2RlLCBvclxuICAvLyBoYXZlIGEgYnJva2VuIHBhcmVudE5vZGUgKCE/ISlcbiAgaWYgKC9UcmlkZW50Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5lZWRzRG9jRnJhZyA9IHRydWU7XG5cbiAgICAgIHZhciBvcmlnQ2xvbmVOb2RlID0gTm9kZS5wcm90b3R5cGUuY2xvbmVOb2RlO1xuICAgICAgTm9kZS5wcm90b3R5cGUuY2xvbmVOb2RlID0gZnVuY3Rpb24gY2xvbmVOb2RlKGRlZXApIHtcbiAgICAgICAgdmFyIG5ld0RvbSA9IG9yaWdDbG9uZU5vZGUuY2FsbCh0aGlzLCBkZWVwKTtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KSB7XG4gICAgICAgICAgbmV3RG9tLl9fcHJvdG9fXyA9IERvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdEb207XG4gICAgICB9O1xuXG4gICAgICAvLyBJRSdzIERvY3VtZW50RnJhZ21lbnQgcXVlcnlTZWxlY3RvciBjb2RlIGRvZXNuJ3Qgd29yayB3aGVuXG4gICAgICAvLyBjYWxsZWQgb24gYW4gZWxlbWVudCBpbnN0YW5jZVxuICAgICAgRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbCA9XG4gICAgICAgIEhUTUxFbGVtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsO1xuICAgICAgRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvciA9XG4gICAgICAgIEhUTUxFbGVtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yO1xuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZSwge1xuICAgICAgICAnbm9kZVR5cGUnOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB9LFxuXG4gICAgICAgICdsb2NhbE5hbWUnOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB9LFxuXG4gICAgICAgICdub2RlTmFtZSc6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnI2RvY3VtZW50LWZyYWdtZW50JztcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgb3JpZ0luc2VydEJlZm9yZSA9IE5vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZTtcbiAgICAgIGZ1bmN0aW9uIGluc2VydEJlZm9yZShuZXdOb2RlLCByZWZOb2RlKSB7XG4gICAgICAgIGlmIChuZXdOb2RlIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCkge1xuICAgICAgICAgIHZhciBjaGlsZDtcbiAgICAgICAgICB3aGlsZSAoKGNoaWxkID0gbmV3Tm9kZS5maXJzdENoaWxkKSkge1xuICAgICAgICAgICAgb3JpZ0luc2VydEJlZm9yZS5jYWxsKHRoaXMsIGNoaWxkLCByZWZOb2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3JpZ0luc2VydEJlZm9yZS5jYWxsKHRoaXMsIG5ld05vZGUsIHJlZk5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdOb2RlO1xuICAgICAgfVxuICAgICAgTm9kZS5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlID0gaW5zZXJ0QmVmb3JlO1xuXG4gICAgICB2YXIgb3JpZ0FwcGVuZENoaWxkID0gTm9kZS5wcm90b3R5cGUuYXBwZW5kQ2hpbGQ7XG4gICAgICBOb2RlLnByb3RvdHlwZS5hcHBlbmRDaGlsZCA9IGZ1bmN0aW9uIGFwcGVuZENoaWxkKGNoaWxkKSB7XG4gICAgICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpIHtcbiAgICAgICAgICBpbnNlcnRCZWZvcmUuY2FsbCh0aGlzLCBjaGlsZCwgbnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3JpZ0FwcGVuZENoaWxkLmNhbGwodGhpcywgY2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH07XG5cbiAgICAgIHZhciBvcmlnUmVtb3ZlQ2hpbGQgPSBOb2RlLnByb3RvdHlwZS5yZW1vdmVDaGlsZDtcbiAgICAgIHZhciBvcmlnUmVwbGFjZUNoaWxkID0gTm9kZS5wcm90b3R5cGUucmVwbGFjZUNoaWxkO1xuICAgICAgTm9kZS5wcm90b3R5cGUucmVwbGFjZUNoaWxkID0gZnVuY3Rpb24gcmVwbGFjZUNoaWxkKG5ld0NoaWxkLCBvbGRDaGlsZCkge1xuICAgICAgICBpZiAobmV3Q2hpbGQgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KSB7XG4gICAgICAgICAgaW5zZXJ0QmVmb3JlLmNhbGwodGhpcywgbmV3Q2hpbGQsIG9sZENoaWxkKTtcbiAgICAgICAgICBvcmlnUmVtb3ZlQ2hpbGQuY2FsbCh0aGlzLCBvbGRDaGlsZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3JpZ1JlcGxhY2VDaGlsZC5jYWxsKHRoaXMsIG5ld0NoaWxkLCBvbGRDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9sZENoaWxkO1xuICAgICAgfTtcblxuICAgICAgRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQgPSBmdW5jdGlvbiBjcmVhdGVEb2N1bWVudEZyYWdtZW50KCkge1xuICAgICAgICB2YXIgZnJhZyA9IHRoaXMuY3JlYXRlRWxlbWVudCgnZGYnKTtcbiAgICAgICAgZnJhZy5fX3Byb3RvX18gPSBEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZTtcbiAgICAgICAgcmV0dXJuIGZyYWc7XG4gICAgICB9O1xuXG4gICAgICB2YXIgb3JpZ0ltcG9ydE5vZGUgPSBEb2N1bWVudC5wcm90b3R5cGUuaW1wb3J0Tm9kZTtcbiAgICAgIERvY3VtZW50LnByb3RvdHlwZS5pbXBvcnROb2RlID0gZnVuY3Rpb24gaW1wb3J0Tm9kZShpbXBOb2RlLCBkZWVwKSB7XG4gICAgICAgIGRlZXAgPSBkZWVwIHx8IGZhbHNlO1xuICAgICAgICB2YXIgbmV3Tm9kZSA9IG9yaWdJbXBvcnROb2RlLmNhbGwodGhpcywgaW1wTm9kZSwgZGVlcCk7XG4gICAgICAgIGlmIChpbXBOb2RlIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCkge1xuICAgICAgICAgIG5ld05vZGUuX19wcm90b19fID0gRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld05vZGU7XG4gICAgICB9O1xuICAgIH0pKCk7XG4gIH1cblxuICAvLyBOT1RFOiB3ZSByZWx5IG9uIHRoaXMgY2xvbmVOb2RlIG5vdCBjYXVzaW5nIGVsZW1lbnQgdXBncmFkZS5cbiAgLy8gVGhpcyBtZWFucyB0aGlzIHBvbHlmaWxsIG11c3QgbG9hZCBiZWZvcmUgdGhlIENFIHBvbHlmaWxsIGFuZFxuICAvLyB0aGlzIHdvdWxkIG5lZWQgdG8gYmUgcmUtd29ya2VkIGlmIGEgYnJvd3NlciBzdXBwb3J0cyBuYXRpdmUgQ0VcbiAgLy8gYnV0IG5vdCA8dGVtcGxhdGU+LlxuICB2YXIgY2FwdHVyZWRDbG9uZU5vZGUgPSBOb2RlLnByb3RvdHlwZS5jbG9uZU5vZGU7XG4gIHZhciBjYXB0dXJlZENyZWF0ZUVsZW1lbnQgPSBEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRWxlbWVudDtcbiAgdmFyIGNhcHR1cmVkSW1wb3J0Tm9kZSA9IERvY3VtZW50LnByb3RvdHlwZS5pbXBvcnROb2RlO1xuICB2YXIgY2FwdHVyZWRSZW1vdmVDaGlsZCA9IE5vZGUucHJvdG90eXBlLnJlbW92ZUNoaWxkO1xuICB2YXIgY2FwdHVyZWRBcHBlbmRDaGlsZCA9IE5vZGUucHJvdG90eXBlLmFwcGVuZENoaWxkO1xuICB2YXIgY2FwdHVyZWRSZXBsYWNlQ2hpbGQgPSBOb2RlLnByb3RvdHlwZS5yZXBsYWNlQ2hpbGQ7XG4gIHZhciBjYXB0dXJlZFBhcnNlRnJvbVN0cmluZyA9IERPTVBhcnNlci5wcm90b3R5cGUucGFyc2VGcm9tU3RyaW5nO1xuICB2YXIgY2FwdHVyZWRIVE1MRWxlbWVudElubmVySFRNTCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXG4gICAgd2luZG93LkhUTUxFbGVtZW50LnByb3RvdHlwZSxcbiAgICAnaW5uZXJIVE1MJ1xuICApIHx8IHtcbiAgICAvKipcbiAgICAgKiBAdGhpcyB7IUhUTUxFbGVtZW50fVxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlubmVySFRNTDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEB0aGlzIHshSFRNTEVsZW1lbnR9XG4gICAgICogQHBhcmFtIHtzdHJpbmd9XG4gICAgICovXG4gICAgc2V0OiBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgdGhpcy5pbm5lckhUTUwgPSB0ZXh0O1xuICAgIH0sXG4gIH07XG4gIHZhciBjYXB0dXJlZENoaWxkTm9kZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgIHdpbmRvdy5Ob2RlLnByb3RvdHlwZSxcbiAgICAnY2hpbGROb2RlcydcbiAgKSB8fCB7XG4gICAgLyoqXG4gICAgICogQHRoaXMgeyFOb2RlfVxuICAgICAqIEByZXR1cm4geyFOb2RlTGlzdH1cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNoaWxkTm9kZXM7XG4gICAgfSxcbiAgfTtcblxuICB2YXIgZWxlbWVudFF1ZXJ5U2VsZWN0b3JBbGwgPSBFbGVtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsO1xuICB2YXIgZG9jUXVlcnlTZWxlY3RvckFsbCA9IERvY3VtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsO1xuICB2YXIgZnJhZ1F1ZXJ5U2VsZWN0b3JBbGwgPSBEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsO1xuXG4gIHZhciBzY3JpcHRTZWxlY3RvciA9XG4gICAgJ3NjcmlwdDpub3QoW3R5cGVdKSxzY3JpcHRbdHlwZT1cImFwcGxpY2F0aW9uL2phdmFzY3JpcHRcIl0sc2NyaXB0W3R5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIl0nO1xuXG4gIGZ1bmN0aW9uIFFTQShub2RlLCBzZWxlY3Rvcikge1xuICAgIC8vIElFIDExIHRocm93cyBhIFN5bnRheEVycm9yIHdpdGggYHNjcmlwdFNlbGVjdG9yYCBpZiB0aGUgbm9kZSBoYXMgbm8gY2hpbGRyZW4gZHVlIHRvIHRoZSBgOm5vdChbdHlwZV0pYCBzeW50YXhcbiAgICBpZiAoIW5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgc3dpdGNoIChub2RlLm5vZGVUeXBlKSB7XG4gICAgICBjYXNlIE5vZGUuRE9DVU1FTlRfTk9ERTpcbiAgICAgICAgcmV0dXJuIGRvY1F1ZXJ5U2VsZWN0b3JBbGwuY2FsbChub2RlLCBzZWxlY3Rvcik7XG4gICAgICBjYXNlIE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpcbiAgICAgICAgcmV0dXJuIGZyYWdRdWVyeVNlbGVjdG9yQWxsLmNhbGwobm9kZSwgc2VsZWN0b3IpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRRdWVyeVNlbGVjdG9yQWxsLmNhbGwobm9kZSwgc2VsZWN0b3IpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHJldHVybnMgdHJ1ZSBpZiBuZXN0ZWQgdGVtcGxhdGVzIGNhbm5vdCBiZSBjbG9uZWQgKHRoZXkgY2Fubm90IGJlIG9uXG4gIC8vIHNvbWUgaW1wbCdzIGxpa2UgU2FmYXJpIDggYW5kIEVkZ2UpXG4gIC8vIE9SIGlmIGNsb25pbmcgYSBkb2N1bWVudCBmcmFnbWVudCBkb2VzIG5vdCByZXN1bHQgaW4gYSBkb2N1bWVudCBmcmFnbWVudFxuICB2YXIgbmVlZHNDbG9uaW5nID0gKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIW5lZWRzVGVtcGxhdGUpIHtcbiAgICAgIHZhciB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgICAgIHZhciB0MiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG4gICAgICB0Mi5jb250ZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcbiAgICAgIHQuY29udGVudC5hcHBlbmRDaGlsZCh0Mik7XG4gICAgICB2YXIgY2xvbmUgPSB0LmNsb25lTm9kZSh0cnVlKTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGNsb25lLmNvbnRlbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgY2xvbmUuY29udGVudC5maXJzdENoaWxkLmNvbnRlbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgYnJva2VuRG9jRnJhZ21lbnRcbiAgICAgICk7XG4gICAgfVxuICB9KSgpO1xuXG4gIHZhciBURU1QTEFURV9UQUcgPSAndGVtcGxhdGUnO1xuICB2YXIgUG9seWZpbGxlZEhUTUxUZW1wbGF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBpZiAobmVlZHNUZW1wbGF0ZSkge1xuICAgIHZhciBjb250ZW50RG9jID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCd0ZW1wbGF0ZScpO1xuICAgIHZhciBjYW5EZWNvcmF0ZSA9IHRydWU7XG5cbiAgICB2YXIgdGVtcGxhdGVTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgdGVtcGxhdGVTdHlsZS50ZXh0Q29udGVudCA9IFRFTVBMQVRFX1RBRyArICd7ZGlzcGxheTpub25lO30nO1xuXG4gICAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkO1xuICAgIGhlYWQuaW5zZXJ0QmVmb3JlKHRlbXBsYXRlU3R5bGUsIGhlYWQuZmlyc3RFbGVtZW50Q2hpbGQpO1xuXG4gICAgLyoqXG4gICAgICBQcm92aWRlcyBhIG1pbmltYWwgc2hpbSBmb3IgdGhlIDx0ZW1wbGF0ZT4gZWxlbWVudC5cbiAgICAqL1xuICAgIFBvbHlmaWxsZWRIVE1MVGVtcGxhdGVFbGVtZW50LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoXG4gICAgICBIVE1MRWxlbWVudC5wcm90b3R5cGVcbiAgICApO1xuXG4gICAgLy8gaWYgZWxlbWVudHMgZG8gbm90IGhhdmUgYGlubmVySFRNTGAgb24gaW5zdGFuY2VzLCB0aGVuXG4gICAgLy8gdGVtcGxhdGVzIGNhbiBiZSBwYXRjaGVkIGJ5IHN3aXp6bGluZyB0aGVpciBwcm90b3R5cGVzLlxuICAgIHZhciBjYW5Qcm90b1BhdGNoID0gIWRvY3VtZW50XG4gICAgICAuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIC5oYXNPd25Qcm9wZXJ0eSgnaW5uZXJIVE1MJyk7XG5cbiAgICAvKipcbiAgICAgIFRoZSBgZGVjb3JhdGVgIG1ldGhvZCBtb3ZlcyBlbGVtZW50IGNoaWxkcmVuIHRvIHRoZSB0ZW1wbGF0ZSdzIGBjb250ZW50YC5cbiAgICAgIE5PVEU6IHRoZXJlIGlzIG5vIHN1cHBvcnQgZm9yIGR5bmFtaWNhbGx5IGFkZGluZyBlbGVtZW50cyB0byB0ZW1wbGF0ZXMuXG4gICAgKi9cbiAgICBQb2x5ZmlsbGVkSFRNTFRlbXBsYXRlRWxlbWVudC5kZWNvcmF0ZSA9IGZ1bmN0aW9uICh0ZW1wbGF0ZSkge1xuICAgICAgLy8gaWYgdGhlIHRlbXBsYXRlIGlzIGRlY29yYXRlZCBvciBub3QgaW4gSFRNTCBuYW1lc3BhY2UsIHJldHVybiBmYXN0XG4gICAgICBpZiAoXG4gICAgICAgIHRlbXBsYXRlLmNvbnRlbnQgfHxcbiAgICAgICAgdGVtcGxhdGUubmFtZXNwYWNlVVJJICE9PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGVtcGxhdGUuY29udGVudCA9IGNvbnRlbnREb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgdmFyIGNoaWxkO1xuICAgICAgd2hpbGUgKChjaGlsZCA9IHRlbXBsYXRlLmZpcnN0Q2hpbGQpKSB7XG4gICAgICAgIGNhcHR1cmVkQXBwZW5kQ2hpbGQuY2FsbCh0ZW1wbGF0ZS5jb250ZW50LCBjaGlsZCk7XG4gICAgICB9XG4gICAgICAvLyBOT1RFOiBwcmVmZXIgcHJvdG90eXBlIHBhdGNoaW5nIGZvciBwZXJmb3JtYW5jZSBhbmRcbiAgICAgIC8vIGJlY2F1c2Ugb24gc29tZSBicm93c2VycyAoSUUxMSksIHJlLWRlZmluaW5nIGBpbm5lckhUTUxgXG4gICAgICAvLyBjYW4gcmVzdWx0IGluIGludGVybWl0dGVudCBlcnJvcnMuXG4gICAgICBpZiAoY2FuUHJvdG9QYXRjaCkge1xuICAgICAgICB0ZW1wbGF0ZS5fX3Byb3RvX18gPSBQb2x5ZmlsbGVkSFRNTFRlbXBsYXRlRWxlbWVudC5wcm90b3R5cGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZW1wbGF0ZS5jbG9uZU5vZGUgPSBmdW5jdGlvbiAoZGVlcCkge1xuICAgICAgICAgIHJldHVybiBQb2x5ZmlsbGVkSFRNTFRlbXBsYXRlRWxlbWVudC5fY2xvbmVOb2RlKHRoaXMsIGRlZXApO1xuICAgICAgICB9O1xuICAgICAgICAvLyBhZGQgaW5uZXJIVE1MIHRvIHRlbXBsYXRlLCBpZiBwb3NzaWJsZVxuICAgICAgICAvLyBOb3RlOiB0aGlzIHRocm93cyBvbiBTYWZhcmkgN1xuICAgICAgICBpZiAoY2FuRGVjb3JhdGUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGVmaW5lSW5uZXJIVE1MKHRlbXBsYXRlKTtcbiAgICAgICAgICAgIGRlZmluZU91dGVySFRNTCh0ZW1wbGF0ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjYW5EZWNvcmF0ZSA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gYm9vdHN0cmFwIHJlY3Vyc2l2ZWx5XG4gICAgICBQb2x5ZmlsbGVkSFRNTFRlbXBsYXRlRWxlbWVudC5ib290c3RyYXAodGVtcGxhdGUuY29udGVudCk7XG4gICAgfTtcblxuICAgIC8vIFRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvYmxvYi83M2Q3ZTYyNTljNjNhYzQ1ZjQyYzY1OTNkYThjMjc5NmM2Y2U5MjgxL3NyYy9tYW5pcHVsYXRpb24vd3JhcE1hcC5qc1xuICAgIHZhciB0b3BMZXZlbFdyYXBwaW5nTWFwID0ge1xuICAgICAgJ29wdGlvbic6IFsnc2VsZWN0J10sXG4gICAgICAndGhlYWQnOiBbJ3RhYmxlJ10sXG4gICAgICAnY29sJzogWydjb2xncm91cCcsICd0YWJsZSddLFxuICAgICAgJ3RyJzogWyd0Ym9keScsICd0YWJsZSddLFxuICAgICAgJ3RoJzogWyd0cicsICd0Ym9keScsICd0YWJsZSddLFxuICAgICAgJ3RkJzogWyd0cicsICd0Ym9keScsICd0YWJsZSddLFxuICAgIH07XG5cbiAgICB2YXIgZ2V0VGFnTmFtZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAvLyBUYWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L2Jsb2IvNzNkN2U2MjU5YzYzYWM0NWY0MmM2NTkzZGE4YzI3OTZjNmNlOTI4MS9zcmMvbWFuaXB1bGF0aW9uL3Zhci9ydGFnTmFtZS5qc1xuICAgICAgcmV0dXJuICgvPChbYS16XVteL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pLmV4ZWModGV4dCkgfHwgW1xuICAgICAgICAnJyxcbiAgICAgICAgJycsXG4gICAgICBdKVsxXS50b0xvd2VyQ2FzZSgpO1xuICAgIH07XG5cbiAgICB2YXIgZGVmaW5lSW5uZXJIVE1MID0gZnVuY3Rpb24gZGVmaW5lSW5uZXJIVE1MKG9iaikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ2lubmVySFRNTCcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldElubmVySFRNTCh0aGlzKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgICAgIC8vIEZvciBJRTExLCB3cmFwIHRoZSB0ZXh0IGluIHRoZSBjb3JyZWN0ICh0YWJsZSkgY29udGV4dFxuICAgICAgICAgIHZhciB3cmFwID0gdG9wTGV2ZWxXcmFwcGluZ01hcFtnZXRUYWdOYW1lKHRleHQpXTtcbiAgICAgICAgICBpZiAod3JhcCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3cmFwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIHRleHQgPSAnPCcgKyB3cmFwW2ldICsgJz4nICsgdGV4dCArICc8LycgKyB3cmFwW2ldICsgJz4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250ZW50RG9jLmJvZHkuaW5uZXJIVE1MID0gdGV4dDtcbiAgICAgICAgICBQb2x5ZmlsbGVkSFRNTFRlbXBsYXRlRWxlbWVudC5ib290c3RyYXAoY29udGVudERvYyk7XG4gICAgICAgICAgd2hpbGUgKHRoaXMuY29udGVudC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICBjYXB0dXJlZFJlbW92ZUNoaWxkLmNhbGwodGhpcy5jb250ZW50LCB0aGlzLmNvbnRlbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBib2R5ID0gY29udGVudERvYy5ib2R5O1xuICAgICAgICAgIC8vIElmIHdlIGhhZCB3cmFwcGVkLCBnZXQgYmFjayB0byB0aGUgb3JpZ2luYWwgbm9kZVxuICAgICAgICAgIGlmICh3cmFwKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHdyYXAubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgYm9keSA9IGJvZHkubGFzdENoaWxkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB3aGlsZSAoYm9keS5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICBjYXB0dXJlZEFwcGVuZENoaWxkLmNhbGwodGhpcy5jb250ZW50LCBib2R5LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBkZWZpbmVPdXRlckhUTUwgPSBmdW5jdGlvbiBkZWZpbmVPdXRlckhUTUwob2JqKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCAnb3V0ZXJIVE1MJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gYDwke1RFTVBMQVRFX1RBR30+JHt0aGlzLmlubmVySFRNTH08LyR7VEVNUExBVEVfVEFHfT5gO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChpbm5lckhUTUwpIHtcbiAgICAgICAgICBpZiAodGhpcy5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBjb250ZW50RG9jLmJvZHkuaW5uZXJIVE1MID0gaW5uZXJIVE1MO1xuICAgICAgICAgICAgdmFyIGRvY0ZyYWcgPSB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICAgICAgd2hpbGUgKGNvbnRlbnREb2MuYm9keS5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgIGNhcHR1cmVkQXBwZW5kQ2hpbGQuY2FsbChkb2NGcmFnLCBjb250ZW50RG9jLmJvZHkuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXB0dXJlZFJlcGxhY2VDaGlsZC5jYWxsKHRoaXMucGFyZW50Tm9kZSwgZG9jRnJhZywgdGhpcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgXCJGYWlsZWQgdG8gc2V0IHRoZSAnb3V0ZXJIVE1MJyBwcm9wZXJ0eSBvbiAnRWxlbWVudCc6IFRoaXMgZWxlbWVudCBoYXMgbm8gcGFyZW50IG5vZGUuXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgZGVmaW5lSW5uZXJIVE1MKFBvbHlmaWxsZWRIVE1MVGVtcGxhdGVFbGVtZW50LnByb3RvdHlwZSk7XG4gICAgZGVmaW5lT3V0ZXJIVE1MKFBvbHlmaWxsZWRIVE1MVGVtcGxhdGVFbGVtZW50LnByb3RvdHlwZSk7XG5cbiAgICAvKipcbiAgICAgIFRoZSBgYm9vdHN0cmFwYCBtZXRob2QgaXMgY2FsbGVkIGF1dG9tYXRpY2FsbHkgYW5kIFwiZml4ZXNcIiBhbGxcbiAgICAgIDx0ZW1wbGF0ZT4gZWxlbWVudHMgaW4gdGhlIGRvY3VtZW50IHJlZmVyZW5jZWQgYnkgdGhlIGBkb2NgIGFyZ3VtZW50LlxuICAgICovXG4gICAgUG9seWZpbGxlZEhUTUxUZW1wbGF0ZUVsZW1lbnQuYm9vdHN0cmFwID0gZnVuY3Rpb24gYm9vdHN0cmFwKGRvYykge1xuICAgICAgdmFyIHRlbXBsYXRlcyA9IFFTQShkb2MsIFRFTVBMQVRFX1RBRyk7XG4gICAgICBmb3IgKFxuICAgICAgICB2YXIgaSA9IDAsIGwgPSB0ZW1wbGF0ZXMubGVuZ3RoLCB0O1xuICAgICAgICBpIDwgbCAmJiAodCA9IHRlbXBsYXRlc1tpXSk7XG4gICAgICAgIGkrK1xuICAgICAgKSB7XG4gICAgICAgIFBvbHlmaWxsZWRIVE1MVGVtcGxhdGVFbGVtZW50LmRlY29yYXRlKHQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBhdXRvLWJvb3RzdHJhcHBpbmcgZm9yIG1haW4gZG9jdW1lbnRcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgUG9seWZpbGxlZEhUTUxUZW1wbGF0ZUVsZW1lbnQuYm9vdHN0cmFwKGRvY3VtZW50KTtcbiAgICB9KTtcblxuICAgIC8vIFBhdGNoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgdG8gZW5zdXJlIG5ld2x5IGNyZWF0ZWQgdGVtcGxhdGVzIGhhdmUgY29udGVudFxuICAgIERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gY3JlYXRlRWxlbWVudCgpIHtcbiAgICAgIHZhciBlbCA9IGNhcHR1cmVkQ3JlYXRlRWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKGVsLmxvY2FsTmFtZSA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICBQb2x5ZmlsbGVkSFRNTFRlbXBsYXRlRWxlbWVudC5kZWNvcmF0ZShlbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZWw7XG4gICAgfTtcblxuICAgIERPTVBhcnNlci5wcm90b3R5cGUucGFyc2VGcm9tU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGVsID0gY2FwdHVyZWRQYXJzZUZyb21TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIFBvbHlmaWxsZWRIVE1MVGVtcGxhdGVFbGVtZW50LmJvb3RzdHJhcChlbCk7XG4gICAgICByZXR1cm4gZWw7XG4gICAgfTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShIVE1MRWxlbWVudC5wcm90b3R5cGUsICdpbm5lckhUTUwnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGdldElubmVySFRNTCh0aGlzKTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgIGNhcHR1cmVkSFRNTEVsZW1lbnRJbm5lckhUTUwuc2V0LmNhbGwodGhpcywgdGV4dCk7XG4gICAgICAgIFBvbHlmaWxsZWRIVE1MVGVtcGxhdGVFbGVtZW50LmJvb3RzdHJhcCh0aGlzKTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgLy8gaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvdGhlLWVuZC5odG1sI2VzY2FwaW5nU3RyaW5nXG4gICAgdmFyIGVzY2FwZUF0dHJSZWdFeHAgPSAvWyZcXHUwMEEwXCJdL2c7XG4gICAgdmFyIGVzY2FwZURhdGFSZWdFeHAgPSAvWyZcXHUwMEEwPD5dL2c7XG5cbiAgICB2YXIgZXNjYXBlUmVwbGFjZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgY2FzZSAnJic6XG4gICAgICAgICAgcmV0dXJuICcmYW1wOyc7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgIHJldHVybiAnJmx0Oyc7XG4gICAgICAgIGNhc2UgJz4nOlxuICAgICAgICAgIHJldHVybiAnJmd0Oyc7XG4gICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICByZXR1cm4gJyZxdW90Oyc7XG4gICAgICAgIGNhc2UgJ1xcdTAwQTAnOlxuICAgICAgICAgIHJldHVybiAnJm5ic3A7JztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGVzY2FwZUF0dHIgPSBmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIHMucmVwbGFjZShlc2NhcGVBdHRyUmVnRXhwLCBlc2NhcGVSZXBsYWNlKTtcbiAgICB9O1xuXG4gICAgdmFyIGVzY2FwZURhdGEgPSBmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIHMucmVwbGFjZShlc2NhcGVEYXRhUmVnRXhwLCBlc2NhcGVSZXBsYWNlKTtcbiAgICB9O1xuXG4gICAgdmFyIG1ha2VTZXQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gICAgICB2YXIgc2V0ID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZXRbYXJyW2ldXSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2V0O1xuICAgIH07XG5cbiAgICAvLyBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrLyN2b2lkLWVsZW1lbnRzXG4gICAgdmFyIHZvaWRFbGVtZW50cyA9IG1ha2VTZXQoW1xuICAgICAgJ2FyZWEnLFxuICAgICAgJ2Jhc2UnLFxuICAgICAgJ2JyJyxcbiAgICAgICdjb2wnLFxuICAgICAgJ2NvbW1hbmQnLFxuICAgICAgJ2VtYmVkJyxcbiAgICAgICdocicsXG4gICAgICAnaW1nJyxcbiAgICAgICdpbnB1dCcsXG4gICAgICAna2V5Z2VuJyxcbiAgICAgICdsaW5rJyxcbiAgICAgICdtZXRhJyxcbiAgICAgICdwYXJhbScsXG4gICAgICAnc291cmNlJyxcbiAgICAgICd0cmFjaycsXG4gICAgICAnd2JyJyxcbiAgICBdKTtcblxuICAgIHZhciBwbGFpbnRleHRQYXJlbnRzID0gbWFrZVNldChbXG4gICAgICAnc3R5bGUnLFxuICAgICAgJ3NjcmlwdCcsXG4gICAgICAneG1wJyxcbiAgICAgICdpZnJhbWUnLFxuICAgICAgJ25vZW1iZWQnLFxuICAgICAgJ25vZnJhbWVzJyxcbiAgICAgICdwbGFpbnRleHQnLFxuICAgICAgJ25vc2NyaXB0JyxcbiAgICBdKTtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgICAqIEBwYXJhbSB7Tm9kZX0gcGFyZW50Tm9kZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb249fSBjYWxsYmFja1xuICAgICAqL1xuICAgIHZhciBnZXRPdXRlckhUTUwgPSBmdW5jdGlvbiAobm9kZSwgcGFyZW50Tm9kZSwgY2FsbGJhY2spIHtcbiAgICAgIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuICAgICAgICBjYXNlIE5vZGUuRUxFTUVOVF9OT0RFOiB7XG4gICAgICAgICAgdmFyIHRhZ05hbWUgPSBub2RlLmxvY2FsTmFtZTtcbiAgICAgICAgICB2YXIgcyA9ICc8JyArIHRhZ05hbWU7XG4gICAgICAgICAgdmFyIGF0dHJzID0gbm9kZS5hdHRyaWJ1dGVzO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBhdHRyOyAoYXR0ciA9IGF0dHJzW2ldKTsgaSsrKSB7XG4gICAgICAgICAgICBzICs9ICcgJyArIGF0dHIubmFtZSArICc9XCInICsgZXNjYXBlQXR0cihhdHRyLnZhbHVlKSArICdcIic7XG4gICAgICAgICAgfVxuICAgICAgICAgIHMgKz0gJz4nO1xuICAgICAgICAgIGlmICh2b2lkRWxlbWVudHNbdGFnTmFtZV0pIHtcbiAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcyArIGdldElubmVySFRNTChub2RlLCBjYWxsYmFjaykgKyAnPC8nICsgdGFnTmFtZSArICc+JztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIE5vZGUuVEVYVF9OT0RFOiB7XG4gICAgICAgICAgdmFyIGRhdGEgPSAvKiogQHR5cGUge1RleHR9ICovIChub2RlKS5kYXRhO1xuICAgICAgICAgIGlmIChwYXJlbnROb2RlICYmIHBsYWludGV4dFBhcmVudHNbcGFyZW50Tm9kZS5sb2NhbE5hbWVdKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGVzY2FwZURhdGEoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBOb2RlLkNPTU1FTlRfTk9ERToge1xuICAgICAgICAgIHJldHVybiAnPCEtLScgKyAvKiogQHR5cGUge0NvbW1lbnR9ICovIChub2RlKS5kYXRhICsgJy0tPic7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKG5vZGUpO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGNhbGxiYWNrXG4gICAgICovXG4gICAgdmFyIGdldElubmVySFRNTCA9IGZ1bmN0aW9uIChub2RlLCBjYWxsYmFjaykge1xuICAgICAgaWYgKG5vZGUubG9jYWxOYW1lID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIG5vZGUgPSAvKiogQHR5cGUge0hUTUxUZW1wbGF0ZUVsZW1lbnR9ICovIChub2RlKS5jb250ZW50O1xuICAgICAgfVxuICAgICAgdmFyIHMgPSAnJztcbiAgICAgIHZhciBjJCA9IGNhbGxiYWNrID8gY2FsbGJhY2sobm9kZSkgOiBjYXB0dXJlZENoaWxkTm9kZXMuZ2V0LmNhbGwobm9kZSk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGMkLmxlbmd0aCwgY2hpbGQ7IGkgPCBsICYmIChjaGlsZCA9IGMkW2ldKTsgaSsrKSB7XG4gICAgICAgIHMgKz0gZ2V0T3V0ZXJIVE1MKGNoaWxkLCBub2RlLCBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcztcbiAgICB9O1xuICB9XG5cbiAgLy8gbWFrZSBjbG9uaW5nL2ltcG9ydGluZyB3b3JrIVxuICBpZiAobmVlZHNUZW1wbGF0ZSB8fCBuZWVkc0Nsb25pbmcpIHtcbiAgICBQb2x5ZmlsbGVkSFRNTFRlbXBsYXRlRWxlbWVudC5fY2xvbmVOb2RlID0gZnVuY3Rpb24gX2Nsb25lTm9kZShcbiAgICAgIHRlbXBsYXRlLFxuICAgICAgZGVlcFxuICAgICkge1xuICAgICAgdmFyIGNsb25lID0gY2FwdHVyZWRDbG9uZU5vZGUuY2FsbCh0ZW1wbGF0ZSwgZmFsc2UpO1xuICAgICAgLy8gTk9URTogZGVjb3JhdGUgZG9lc24ndCBhdXRvLWZpeCBjaGlsZHJlbiBiZWNhdXNlIHRoZXkgYXJlIGFscmVhZHlcbiAgICAgIC8vIGRlY29yYXRlZCBzbyB0aGV5IG5lZWQgc3BlY2lhbCBjbG9uZSBmaXh1cC5cbiAgICAgIGlmICh0aGlzLmRlY29yYXRlKSB7XG4gICAgICAgIHRoaXMuZGVjb3JhdGUoY2xvbmUpO1xuICAgICAgfVxuICAgICAgaWYgKGRlZXApIHtcbiAgICAgICAgLy8gTk9URTogdXNlIG5hdGl2ZSBjbG9uZSBub2RlIHRvIG1ha2Ugc3VyZSBDRSdzIHdyYXBwZWRcbiAgICAgICAgLy8gY2xvbmVOb2RlIGRvZXMgbm90IGNhdXNlIGVsZW1lbnRzIHRvIHVwZ3JhZGUuXG4gICAgICAgIGNhcHR1cmVkQXBwZW5kQ2hpbGQuY2FsbChcbiAgICAgICAgICBjbG9uZS5jb250ZW50LFxuICAgICAgICAgIGNhcHR1cmVkQ2xvbmVOb2RlLmNhbGwodGVtcGxhdGUuY29udGVudCwgdHJ1ZSlcbiAgICAgICAgKTtcbiAgICAgICAgLy8gbm93IGVuc3VyZSBuZXN0ZWQgdGVtcGxhdGVzIGFyZSBjbG9uZWQgY29ycmVjdGx5LlxuICAgICAgICBmaXhDbG9uZWREb20oY2xvbmUuY29udGVudCwgdGVtcGxhdGUuY29udGVudCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2xvbmU7XG4gICAgfTtcblxuICAgIC8vIEdpdmVuIGEgc291cmNlIGFuZCBjbG9uZWQgc3VidHJlZSwgZmluZCA8dGVtcGxhdGU+J3MgaW4gdGhlIGNsb25lZFxuICAgIC8vIHN1YnRyZWUgYW5kIHJlcGxhY2UgdGhlbSB3aXRoIGNsb25lZCA8dGVtcGxhdGU+J3MgZnJvbSBzb3VyY2UuXG4gICAgLy8gV2UgbXVzdCBkbyB0aGlzIGJlY2F1c2Ugb25seSB0aGUgc291cmNlIHRlbXBsYXRlcyBoYXZlIHByb3BlciAuY29udGVudC5cbiAgICB2YXIgZml4Q2xvbmVkRG9tID0gZnVuY3Rpb24gZml4Q2xvbmVkRG9tKGNsb25lLCBzb3VyY2UpIHtcbiAgICAgIC8vIGRvIG5vdGhpbmcgaWYgY2xvbmVkIG5vZGUgaXMgbm90IGFuIGVsZW1lbnRcbiAgICAgIGlmICghc291cmNlLnF1ZXJ5U2VsZWN0b3JBbGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gdGhlc2UgdHdvIGxpc3RzIHNob3VsZCBiZSBjb2luY2lkZW50XG4gICAgICB2YXIgcyQgPSBRU0Eoc291cmNlLCBURU1QTEFURV9UQUcpO1xuICAgICAgaWYgKHMkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgdCQgPSBRU0EoY2xvbmUsIFRFTVBMQVRFX1RBRyk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHQkLmxlbmd0aCwgdCwgczsgaSA8IGw7IGkrKykge1xuICAgICAgICBzID0gcyRbaV07XG4gICAgICAgIHQgPSB0JFtpXTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFBvbHlmaWxsZWRIVE1MVGVtcGxhdGVFbGVtZW50ICYmXG4gICAgICAgICAgUG9seWZpbGxlZEhUTUxUZW1wbGF0ZUVsZW1lbnQuZGVjb3JhdGVcbiAgICAgICAgKSB7XG4gICAgICAgICAgUG9seWZpbGxlZEhUTUxUZW1wbGF0ZUVsZW1lbnQuZGVjb3JhdGUocyk7XG4gICAgICAgIH1cbiAgICAgICAgY2FwdHVyZWRSZXBsYWNlQ2hpbGQuY2FsbCh0LnBhcmVudE5vZGUsIGNsb25lTm9kZS5jYWxsKHMsIHRydWUpLCB0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gbWFrZSBzdXJlIHNjcmlwdHMgaW5zaWRlIG9mIGEgY2xvbmVkIHRlbXBsYXRlIGFyZSBleGVjdXRhYmxlXG4gICAgdmFyIGZpeENsb25lZFNjcmlwdHMgPSBmdW5jdGlvbiBmaXhDbG9uZWRTY3JpcHRzKGZyYWdtZW50KSB7XG4gICAgICB2YXIgc2NyaXB0cyA9IFFTQShmcmFnbWVudCwgc2NyaXB0U2VsZWN0b3IpO1xuICAgICAgZm9yICh2YXIgbnMsIHMsIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzID0gc2NyaXB0c1tpXTtcbiAgICAgICAgbnMgPSBjYXB0dXJlZENyZWF0ZUVsZW1lbnQuY2FsbChkb2N1bWVudCwgJ3NjcmlwdCcpO1xuICAgICAgICBucy50ZXh0Q29udGVudCA9IHMudGV4dENvbnRlbnQ7XG4gICAgICAgIHZhciBhdHRycyA9IHMuYXR0cmlidXRlcztcbiAgICAgICAgZm9yICh2YXIgYWkgPSAwLCBhOyBhaSA8IGF0dHJzLmxlbmd0aDsgYWkrKykge1xuICAgICAgICAgIGEgPSBhdHRyc1thaV07XG4gICAgICAgICAgbnMuc2V0QXR0cmlidXRlKGEubmFtZSwgYS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FwdHVyZWRSZXBsYWNlQ2hpbGQuY2FsbChzLnBhcmVudE5vZGUsIG5zLCBzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gb3ZlcnJpZGUgYWxsIGNsb25pbmcgdG8gZml4IHRoZSBjbG9uZWQgc3VidHJlZSB0byBjb250YWluIHByb3Blcmx5XG4gICAgLy8gY2xvbmVkIHRlbXBsYXRlcy5cbiAgICB2YXIgY2xvbmVOb2RlID0gKE5vZGUucHJvdG90eXBlLmNsb25lTm9kZSA9IGZ1bmN0aW9uIGNsb25lTm9kZShkZWVwKSB7XG4gICAgICB2YXIgZG9tO1xuICAgICAgLy8gd29ya2Fyb3VuZCBmb3IgRWRnZSBidWcgY2xvbmluZyBkb2N1bWVudEZyYWdtZW50c1xuICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvODYxOTY0Ni9cbiAgICAgIGlmIChcbiAgICAgICAgIW5lZWRzRG9jRnJhZyAmJlxuICAgICAgICBicm9rZW5Eb2NGcmFnbWVudCAmJlxuICAgICAgICB0aGlzIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudFxuICAgICAgKSB7XG4gICAgICAgIGlmICghZGVlcCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRvbSA9IGltcG9ydE5vZGUuY2FsbCh0aGlzLm93bmVyRG9jdW1lbnQsIHRoaXMsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICB0aGlzLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJlxuICAgICAgICB0aGlzLmxvY2FsTmFtZSA9PT0gVEVNUExBVEVfVEFHICYmXG4gICAgICAgIHRoaXMubmFtZXNwYWNlVVJJID09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUklcbiAgICAgICkge1xuICAgICAgICBkb20gPSBQb2x5ZmlsbGVkSFRNTFRlbXBsYXRlRWxlbWVudC5fY2xvbmVOb2RlKHRoaXMsIGRlZXApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9tID0gY2FwdHVyZWRDbG9uZU5vZGUuY2FsbCh0aGlzLCBkZWVwKTtcbiAgICAgIH1cbiAgICAgIC8vIHRlbXBsYXRlLmNvbnRlbnQgaXMgY2xvbmVkIGlmZiBgZGVlcGAuXG4gICAgICBpZiAoZGVlcCkge1xuICAgICAgICBmaXhDbG9uZWREb20oZG9tLCB0aGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkb207XG4gICAgfSk7XG5cbiAgICAvLyBOT1RFOiB3ZSBhcmUgY2xvbmluZyBpbnN0ZWFkIG9mIGltcG9ydGluZyA8dGVtcGxhdGU+J3MuXG4gICAgLy8gSG93ZXZlciwgdGhlIG93bmVyRG9jdW1lbnQgb2YgdGhlIGNsb25lZCB0ZW1wbGF0ZSB3aWxsIGJlIGNvcnJlY3QhXG4gICAgLy8gVGhpcyBpcyBiZWNhdXNlIHRoZSBuYXRpdmUgaW1wb3J0IG5vZGUgY3JlYXRlcyB0aGUgcmlnaHQgZG9jdW1lbnQgb3duZWRcbiAgICAvLyBzdWJ0cmVlIGFuZCBgZml4Q2xvbmVkRG9tYCBpbnNlcnRzIGNsb25lZCB0ZW1wbGF0ZXMgaW50byB0aGlzIHN1YnRyZWUsXG4gICAgLy8gdGh1cyB1cGRhdGluZyB0aGUgb3duZXIgZG9jLlxuICAgIHZhciBpbXBvcnROb2RlID0gKERvY3VtZW50LnByb3RvdHlwZS5pbXBvcnROb2RlID0gZnVuY3Rpb24gaW1wb3J0Tm9kZShcbiAgICAgIGVsZW1lbnQsXG4gICAgICBkZWVwXG4gICAgKSB7XG4gICAgICBkZWVwID0gZGVlcCB8fCBmYWxzZTtcbiAgICAgIGlmIChlbGVtZW50LmxvY2FsTmFtZSA9PT0gVEVNUExBVEVfVEFHKSB7XG4gICAgICAgIHJldHVybiBQb2x5ZmlsbGVkSFRNTFRlbXBsYXRlRWxlbWVudC5fY2xvbmVOb2RlKGVsZW1lbnQsIGRlZXApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGRvbSA9IGNhcHR1cmVkSW1wb3J0Tm9kZS5jYWxsKHRoaXMsIGVsZW1lbnQsIGRlZXApO1xuICAgICAgICBpZiAoZGVlcCkge1xuICAgICAgICAgIGZpeENsb25lZERvbShkb20sIGVsZW1lbnQpO1xuICAgICAgICAgIGZpeENsb25lZFNjcmlwdHMoZG9tKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9tO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKG5lZWRzVGVtcGxhdGUpIHtcbiAgICB3aW5kb3cuSFRNTFRlbXBsYXRlRWxlbWVudCA9IFBvbHlmaWxsZWRIVE1MVGVtcGxhdGVFbGVtZW50O1xuICB9XG59KSgpO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuZXhwb3J0IGNsYXNzIFNoYWR5RGF0YSB7XG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlU2hhZHlEYXRhRm9yTm9kZShub2RlKSB7XG4gIGlmICghbm9kZS5fX3NoYWR5KSB7XG4gICAgbm9kZS5fX3NoYWR5ID0gbmV3IFNoYWR5RGF0YSgpO1xuICB9XG4gIHJldHVybiBub2RlLl9fc2hhZHk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGFkeURhdGFGb3JOb2RlKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS5fX3NoYWR5O1xufVxuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCB7c2hhZHlEYXRhRm9yTm9kZX0gZnJvbSAnLi9zaGFkeS1kYXRhLmpzJztcblxuLyoqIEB0eXBlIHshT2JqZWN0fSAqL1xuZXhwb3J0IGNvbnN0IHNldHRpbmdzID0gd2luZG93WydTaGFkeURPTSddIHx8IHt9O1xuXG5zZXR0aW5ncy5oYXNOYXRpdmVTaGFkb3dET00gPSBCb29sZWFuKFxuICBFbGVtZW50LnByb3RvdHlwZS5hdHRhY2hTaGFkb3cgJiYgTm9kZS5wcm90b3R5cGUuZ2V0Um9vdE5vZGVcbik7XG5cbi8vIFRoZSB1c2VyIG1pZ2h0IG5lZWQgdG8gcGFzcyB0aGUgY3VzdG9tIGVsZW1lbnRzIHBvbHlmaWxsIGEgZmxhZyBieSBzZXR0aW5nIGFuXG4vLyBvYmplY3QgdG8gYGN1c3RvbUVsZW1lbnRzYCwgc28gY2hlY2sgZm9yIGBjdXN0b21FbGVtZW50cy5kZWZpbmVgIGFsc28uXG5leHBvcnQgY29uc3QgaGFzQ3VzdG9tRWxlbWVudHMgPSAoKSA9PlxuICBCb29sZWFuKHdpbmRvdy5jdXN0b21FbGVtZW50cyAmJiB3aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKTtcbi8vIFRoZSBjdXN0b20gZWxlbWVudHMgcG9seWZpbGwgaXMgdHlwaWNhbGx5IGxvYWRlZCBhZnRlciBTaGFkeSBET00sIHNvIHRoaXNcbi8vIGNoZWNrIGlzbid0IHJlbGlhYmxlIGR1cmluZyBpbml0aWFsIGV2YWx1YXRpb24uIEhvd2V2ZXIsIGJlY2F1c2UgdGhlXG4vLyBwb2x5ZmlsbHMgYXJlIGxvYWRlZCBpbW1lZGlhdGVseSBhZnRlciBvbmUgYW5vdGhlciwgaXQgd29ya3MgYXQgcnVudGltZS5cbmV4cG9ydCBjb25zdCBoYXNQb2x5ZmlsbGVkQ3VzdG9tRWxlbWVudHMgPSAoKSA9PlxuICBCb29sZWFuKFxuICAgIHdpbmRvdy5jdXN0b21FbGVtZW50cyAmJiB3aW5kb3cuY3VzdG9tRWxlbWVudHNbJ3BvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2snXVxuICApO1xuXG5jb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihOb2RlLnByb3RvdHlwZSwgJ2ZpcnN0Q2hpbGQnKTtcblxuc2V0dGluZ3MuaGFzRGVzY3JpcHRvcnMgPSBCb29sZWFuKGRlc2MgJiYgZGVzYy5jb25maWd1cmFibGUgJiYgZGVzYy5nZXQpO1xuc2V0dGluZ3MuaW5Vc2UgPSBzZXR0aW5nc1snZm9yY2UnXSB8fCAhc2V0dGluZ3MuaGFzTmF0aXZlU2hhZG93RE9NO1xuc2V0dGluZ3Mubm9QYXRjaCA9IC8qKiBAdHlwZSB7c3RyaW5nfGJvb2xlYW59ICovIChzZXR0aW5nc1snbm9QYXRjaCddIHx8IGZhbHNlKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWFzc2lnblxuc2V0dGluZ3MucHJlZmVyUGVyZm9ybWFuY2UgPSBzZXR0aW5nc1sncHJlZmVyUGVyZm9ybWFuY2UnXTtcbnNldHRpbmdzLnBhdGNoT25EZW1hbmQgPSBzZXR0aW5ncy5ub1BhdGNoID09PSAnb24tZGVtYW5kJztcbnNldHRpbmdzLnF1ZXJ5U2VsZWN0b3JJbXBsZW1lbnRhdGlvbiA9ICgoKSA9PiB7XG4gIGNvbnN0IGFjY2VwdGVkVmFsdWVzID0gWyduYXRpdmUnLCAnc2VsZWN0b3JFbmdpbmUnXTtcbiAgY29uc3QgdXNlclZhbHVlID0gc2V0dGluZ3NbJ3F1ZXJ5U2VsZWN0b3JJbXBsZW1lbnRhdGlvbiddO1xuICBpZiAoYWNjZXB0ZWRWYWx1ZXMuaW5kZXhPZih1c2VyVmFsdWUpID4gLTEpIHtcbiAgICByZXR1cm4gdXNlclZhbHVlO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59KSgpO1xuXG5jb25zdCBJU19JRSA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goJ1RyaWRlbnQnKTtcbnNldHRpbmdzLklTX0lFID0gSVNfSUU7XG5cbi8vIEhlbHBlciBmb3IgcHJlZml4ZWQgcHJvcGVydGllcy5cbmV4cG9ydCBjb25zdCBnZXRQcm9wZXJ0eU5hbWUgPSAob2JqLCBuYW1lKSA9PiB7XG4gIGNvbnN0IHByZWZpeGVkID0gYG1zJHtuYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpfWA7XG4gIHJldHVybiBvYmpbcHJlZml4ZWRdID8gcHJlZml4ZWQgOiBuYW1lO1xufTtcblxuZXhwb3J0IGNvbnN0IGNhblVwZ3JhZGUgPSAoKSA9PiAhc2V0dGluZ3MuSVNfSUU7XG5cbmV4cG9ydCBjb25zdCBpc1RyYWNraW5nTG9naWNhbENoaWxkTm9kZXMgPSAobm9kZSkgPT4ge1xuICBjb25zdCBub2RlRGF0YSA9IHNoYWR5RGF0YUZvck5vZGUobm9kZSk7XG4gIHJldHVybiBub2RlRGF0YSAmJiBub2RlRGF0YS5maXJzdENoaWxkICE9PSB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgaXNTaGFkeVJvb3QgPSAob2JqKSA9PiBvYmogaW5zdGFuY2VvZiBTaGFkb3dSb290O1xuXG5leHBvcnQgY29uc3QgaGFzU2hhZG93Um9vdFdpdGhTbG90ID0gKG5vZGUpID0+IHtcbiAgY29uc3Qgbm9kZURhdGEgPSBzaGFkeURhdGFGb3JOb2RlKG5vZGUpO1xuICBsZXQgcm9vdCA9IG5vZGVEYXRhICYmIG5vZGVEYXRhLnJvb3Q7XG4gIHJldHVybiByb290ICYmIHJvb3QuX2hhc0luc2VydGlvblBvaW50KCk7XG59O1xuXG5sZXQgcCA9IEVsZW1lbnQucHJvdG90eXBlO1xubGV0IG1hdGNoZXMgPVxuICBwLm1hdGNoZXMgfHxcbiAgcC5tYXRjaGVzU2VsZWN0b3IgfHxcbiAgcC5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcbiAgcC5tc01hdGNoZXNTZWxlY3RvciB8fFxuICBwLm9NYXRjaGVzU2VsZWN0b3IgfHxcbiAgcC53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XG5cbmV4cG9ydCBjb25zdCBtYXRjaGVzU2VsZWN0b3IgPSAoZWxlbWVudCwgc2VsZWN0b3IpID0+IHtcbiAgcmV0dXJuIG1hdGNoZXMuY2FsbChlbGVtZW50LCBzZWxlY3Rvcik7XG59O1xuXG5leHBvcnQgY29uc3QgbWl4aW4gPSAodGFyZ2V0LCBzb3VyY2UpID0+IHtcbiAgZm9yICh2YXIgaSBpbiBzb3VyY2UpIHtcbiAgICB0YXJnZXRbaV0gPSBzb3VyY2VbaV07XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8vIE5PVEUsIHByZWZlciBNdXRhdGlvbk9ic2VydmVyIG92ZXIgUHJvbWlzZSBmb3IgbWljcm90YXNrIHRpbWluZ1xuLy8gZm9yIGNvbnNpc3RlbmN5IHgtcGxhdGZvcm0uXG5sZXQgdHdpZGRsZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbmxldCBjb250ZW50ID0gMDtcbmxldCBxdWV1ZSA9IFtdO1xubmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4ge1xuICB3aGlsZSAocXVldWUubGVuZ3RoKSB7XG4gICAgLy8gY2F0Y2ggZXJyb3JzIGluIHVzZXIgY29kZS4uLlxuICAgIHRyeSB7XG4gICAgICBxdWV1ZS5zaGlmdCgpKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZW5xdWV1ZSBhbm90aGVyIHJlY29yZCBhbmQgdGhyb3dcbiAgICAgIHR3aWRkbGUudGV4dENvbnRlbnQgPSBjb250ZW50Kys7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxufSkub2JzZXJ2ZSh0d2lkZGxlLCB7Y2hhcmFjdGVyRGF0YTogdHJ1ZX0pO1xuXG4vLyB1c2UgTXV0YXRpb25PYnNlcnZlciB0byBnZXQgbWljcm90YXNrIGFzeW5jIHRpbWluZy5cbmV4cG9ydCBjb25zdCBtaWNyb3Rhc2sgPSAoY2FsbGJhY2spID0+IHtcbiAgcXVldWUucHVzaChjYWxsYmFjayk7XG4gIHR3aWRkbGUudGV4dENvbnRlbnQgPSBjb250ZW50Kys7XG59O1xuXG4vKiogQHR5cGUge2Z1bmN0aW9uKCFEb2N1bWVudCwgIU5vZGUpOiBib29sZWFufSAqL1xuZXhwb3J0IGNvbnN0IGRvY3VtZW50Q29udGFpbnMgPSAoKCkgPT4ge1xuICBpZiAoZG9jdW1lbnQuY29udGFpbnMpIHtcbiAgICByZXR1cm4gKGRvYywgbm9kZSkgPT4gZG9jW05BVElWRV9QUkVGSVggKyAnY29udGFpbnMnXShub2RlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGRvYywgbm9kZSkgPT5cbiAgICAgIGRvYyA9PT0gbm9kZSB8fFxuICAgICAgKGRvYy5kb2N1bWVudEVsZW1lbnQgJiZcbiAgICAgICAgZG9jLmRvY3VtZW50RWxlbWVudFtOQVRJVkVfUFJFRklYICsgJ2NvbnRhaW5zJ10obm9kZSkpO1xuICB9XG59KSgpO1xuXG5leHBvcnQgY29uc3QgY29udGFpbnMgPSAoY29udGFpbmVyLCBub2RlKSA9PiB7XG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUgPT0gY29udGFpbmVyKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbm9kZSA9IG5vZGVbU0hBRFlfUFJFRklYICsgJ3BhcmVudE5vZGUnXTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5jb25zdCBnZXROb2RlSFRNTENvbGxlY3Rpb25OYW1lID0gKG5vZGUpID0+XG4gIG5vZGUuZ2V0QXR0cmlidXRlKCdpZCcpIHx8IG5vZGUuZ2V0QXR0cmlidXRlKCduYW1lJyk7XG5cbmNvbnN0IGlzVmFsaWRIVE1MQ29sbGVjdGlvbk5hbWUgPSAobmFtZSkgPT4gbmFtZSAhPT0gJ2xlbmd0aCcgJiYgaXNOYU4obmFtZSk7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVQb2x5ZmlsbGVkSFRNTENvbGxlY3Rpb24gPSAobm9kZXMpID0+IHtcbiAgLy8gTm90ZTogbG9vcCBpbiByZXZlcnNlIHNvIHRoYXQgdGhlIGZpcnN0IG5hbWVkIGl0ZW0gbWF0Y2hlcyB0aGUgbmFtZWQgcHJvcGVydHlcbiAgZm9yIChsZXQgbCA9IG5vZGVzLmxlbmd0aCAtIDE7IGwgPj0gMDsgbC0tKSB7XG4gICAgY29uc3Qgbm9kZSA9IG5vZGVzW2xdO1xuICAgIGNvbnN0IG5hbWUgPSBnZXROb2RlSFRNTENvbGxlY3Rpb25OYW1lKG5vZGUpO1xuXG4gICAgaWYgKG5hbWUgJiYgaXNWYWxpZEhUTUxDb2xsZWN0aW9uTmFtZShuYW1lKSkge1xuICAgICAgbm9kZXNbbmFtZV0gPSBub2RlO1xuICAgIH1cbiAgfVxuICBub2Rlcy5pdGVtID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgcmV0dXJuIG5vZGVzW2luZGV4XTtcbiAgfTtcbiAgbm9kZXMubmFtZWRJdGVtID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAoaXNWYWxpZEhUTUxDb2xsZWN0aW9uTmFtZShuYW1lKSAmJiBub2Rlc1tuYW1lXSkge1xuICAgICAgcmV0dXJuIG5vZGVzW25hbWVdO1xuICAgIH1cblxuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlcykge1xuICAgICAgY29uc3Qgbm9kZU5hbWUgPSBnZXROb2RlSFRNTENvbGxlY3Rpb25OYW1lKG5vZGUpO1xuXG4gICAgICBpZiAobm9kZU5hbWUgPT0gbmFtZSkge1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbiAgcmV0dXJuIG5vZGVzO1xufTtcblxuZXhwb3J0IGNvbnN0IE5BVElWRV9QUkVGSVggPSAnX19zaGFkeV9uYXRpdmVfJztcbmV4cG9ydCBjb25zdCBTSEFEWV9QUkVGSVggPSAnX19zaGFkeV8nO1xuXG5leHBvcnQgY29uc3QgbmF0aXZlQ2hpbGROb2Rlc0FycmF5ID0gKHBhcmVudCkgPT4ge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgZm9yIChcbiAgICBsZXQgbiA9IHBhcmVudFtOQVRJVkVfUFJFRklYICsgJ2ZpcnN0Q2hpbGQnXTtcbiAgICBuO1xuICAgIG4gPSBuW05BVElWRV9QUkVGSVggKyAnbmV4dFNpYmxpbmcnXVxuICApIHtcbiAgICByZXN1bHQucHVzaChuKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGNvbnN0IGNoaWxkTm9kZXNBcnJheSA9IChwYXJlbnQpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAoXG4gICAgbGV0IG4gPSBwYXJlbnRbU0hBRFlfUFJFRklYICsgJ2ZpcnN0Q2hpbGQnXTtcbiAgICBuO1xuICAgIG4gPSBuW1NIQURZX1BSRUZJWCArICduZXh0U2libGluZyddXG4gICkge1xuICAgIHJlc3VsdC5wdXNoKG4pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5jb25zdCBwYXRjaFByb3BlcnR5ID0gKHByb3RvLCBuYW1lLCBkZXNjcmlwdG9yKSA9PiB7XG4gIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgLy8gTk9URTogd2UgcHJlZmVyIHdyaXRpbmcgZGlyZWN0bHkgYmVjYXVzZSBzb21lIGJyb3dzZXJzXG4gIC8vIGhhdmUgZGVzY3JpcHRvcnMgdGhhdCBhcmUgd3JpdGFibGUgYnV0IG5vdCBjb25maWd1cmFibGUgKGUuZy5cbiAgLy8gYGFwcGVuZENoaWxkYCBvbiBvbGRlciBicm93c2VycylcbiAgaWYgKGRlc2NyaXB0b3IudmFsdWUpIHtcbiAgICBwcm90b1tuYW1lXSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgbmFtZSwgZGVzY3JpcHRvcik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gdGhpcyBlcnJvciBpcyBoYXJtbGVzcyBzbyB3ZSBqdXN0IHRyYXAgaXQuXG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFBhdGNoIGEgZ3JvdXAgb2YgYWNjZXNzb3JzIG9uIGFuIG9iamVjdC4gQnkgZGVmYXVsdCB0aGlzIG92ZXJyaWRlc1xuICogQHBhcmFtIHshT2JqZWN0fSBwcm90b1xuICogQHBhcmFtIHshT2JqZWN0fSBkZXNjcmlwdG9yc1xuICogQHBhcmFtIHtzdHJpbmc9fSBwcmVmaXhcbiAqIEBwYXJhbSB7QXJyYXk9fSBkaXNhbGxvd2VkUGF0Y2hlc1xuICovXG5leHBvcnQgY29uc3QgcGF0Y2hQcm9wZXJ0aWVzID0gKFxuICBwcm90byxcbiAgZGVzY3JpcHRvcnMsXG4gIHByZWZpeCA9ICcnLFxuICBkaXNhbGxvd2VkUGF0Y2hlc1xuKSA9PiB7XG4gIGZvciAobGV0IG5hbWUgaW4gZGVzY3JpcHRvcnMpIHtcbiAgICBpZiAoZGlzYWxsb3dlZFBhdGNoZXMgJiYgZGlzYWxsb3dlZFBhdGNoZXMuaW5kZXhPZihuYW1lKSA+PSAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcGF0Y2hQcm9wZXJ0eShwcm90bywgcHJlZml4ICsgbmFtZSwgZGVzY3JpcHRvcnNbbmFtZV0pO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcGF0Y2hFeGlzdGluZ1Byb3BlcnRpZXMgPSAocHJvdG8sIGRlc2NyaXB0b3JzKSA9PiB7XG4gIGZvciAobGV0IG5hbWUgaW4gZGVzY3JpcHRvcnMpIHtcbiAgICBpZiAobmFtZSBpbiBwcm90bykge1xuICAgICAgcGF0Y2hQcm9wZXJ0eShwcm90bywgbmFtZSwgZGVzY3JpcHRvcnNbbmFtZV0pO1xuICAgIH1cbiAgfVxufTtcblxuLy8gbm90ZSwgdGhpcyBpcyBub3QgYSBwZXJmZWN0IHBvbHlmaWxsIHNpbmNlIGl0IGRvZXNuJ3QgaW5jbHVkZSBzeW1ib2xzXG4vKiogQHJldHVybiB7IU9iamVjdDwhT2JqZWN0UHJvcGVydHlEZXNjcmlwdG9yPn0gKi9cbmV4cG9ydCBjb25zdCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID0gKG9iaikgPT4ge1xuICBjb25zdCBkZXNjcmlwdG9ycyA9IHt9O1xuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICBkZXNjcmlwdG9yc1tuYW1lXSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBuYW1lKTtcbiAgfSk7XG4gIHJldHVybiBkZXNjcmlwdG9ycztcbn07XG5cbmV4cG9ydCBjb25zdCBhc3NpZ24gPSAodGFyZ2V0LCBzb3VyY2UpID0+IHtcbiAgY29uc3QgbmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2UpO1xuICBmb3IgKGxldCBpID0gMCwgcDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgcCA9IG5hbWVzW2ldO1xuICAgIHRhcmdldFtwXSA9IHNvdXJjZVtwXTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGFycmF5RnJvbSA9IChvYmplY3QpID0+IHtcbiAgcmV0dXJuIFtdLnNsaWNlLmNhbGwoLyoqIEB0eXBlIHtJQXJyYXlMaWtlfSAqLyAob2JqZWN0KSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgc2luZ2xlIHZhbHVlIHRvIGEgbm9kZSBmb3IgYGNvbnZlcnROb2Rlc0ludG9BTm9kZWAuXG4gKlxuICogQHBhcmFtIHsqfSBhcmdcbiAqIEByZXR1cm4geyFOb2RlfVxuICovXG5jb25zdCBjb252ZXJ0SW50b0FOb2RlID0gKGFyZykgPT4ge1xuICAvLyBgXCJcIiArIGFyZ2AgaXMgdXNlZCB0byBpbXBsaWNpdGx5IGNvZXJjZSB0aGUgdmFsdWUgdG8gYSBzdHJpbmcgKGNvZXJjaW5nIGFcbiAgLy8gc3ltYm9sICpzaG91bGQqIGZhaWwgaGVyZSkgYmVmb3JlIHBhc3NpbmcgdG8gYGNyZWF0ZVRleHROb2RlYCwgd2hpY2ggaGFzXG4gIC8vIGFyZ3VtZW50IHR5cGUgYChudW1iZXJ8c3RyaW5nKWAuXG4gIHJldHVybiAhKGFyZyBpbnN0YW5jZW9mIE5vZGUpID8gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycgKyBhcmcpIDogYXJnO1xufTtcblxuLyoqXG4gKiBJbXBsZW1lbnRzICdjb252ZXJ0IG5vZGVzIGludG8gYSBub2RlJy4gVGhlIHNwZWMgdGV4dCBpbmRpY2F0ZXMgdGhhdCBzdHJpbmdzXG4gKiBiZWNvbWUgdGV4dCBub2RlcywgYnV0IGRvZXNuJ3QgZGVzY3JpYmUgd2hhdCBzaG91bGQgaGFwcGVuIGlmIGEgbm9uLU5vZGUsXG4gKiBub24tc3RyaW5nIHZhbHVlIGlzIGZvdW5kIGluIHRoZSBhcmd1bWVudHMgbGlzdC4gSW4gcHJhY3RpY2UsIGJyb3dzZXJzIGNvZXJjZVxuICogdGhlc2UgdmFsdWVzIHRvIHN0cmluZ3MgYW5kIGNvbnZlcnQgdGhvc2UgdG8gdGV4dCBub2Rlcy5cbiAqIGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jY29udmVydGluZy1ub2Rlcy1pbnRvLWEtbm9kZVxuICpcbiAqIEBwYXJhbSB7Li4uKn0gYXJnc1xuICogQHJldHVybiB7IU5vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCBjb252ZXJ0Tm9kZXNJbnRvQU5vZGUgPSAoLi4uYXJncykgPT4ge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gY29udmVydEludG9BTm9kZShhcmdzWzBdKTtcbiAgfVxuXG4gIGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICBmb3IgKGNvbnN0IGFyZyBvZiBhcmdzKSB7XG4gICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoY29udmVydEludG9BTm9kZShhcmcpKTtcbiAgfVxuICByZXR1cm4gZnJhZ21lbnQ7XG59O1xuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gYEFycmF5LnByb3RvdHlwZS5mbGF0YC4gQ2xvc3VyZSBkb2VzIG5vdCBjb21waWxlIG91dCB0aGlzXG4gKiBmdW5jdGlvbiwgc28gd2UgbmVlZCBhbiBpbXBsZW1lbnRhdGlvbiBmb3IgYnJvd3NlcnMgdGhhdCBkb24ndCBuYXRpdmVseVxuICogc3VwcG9ydCBpdC5cbiAqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHshQXJyYXk8IVQgfCAhQXJyYXk8IVQ+Pn0gYXJyYXlcbiAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aFxuICogQHJldHVybiB7IUFycmF5PCFUPn1cbiAqL1xuZXhwb3J0IGNvbnN0IGZsYXQgPSAoYXJyYXksIGRlcHRoID0gMSkgPT4ge1xuICBmb3IgKDsgZGVwdGggPiAwOyBkZXB0aC0tKSB7XG4gICAgYXJyYXkgPSBhcnJheS5yZWR1Y2UoKGFjYywgaXRlbSkgPT4ge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcbiAgICAgICAgYWNjLnB1c2goLi4uaXRlbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY2MucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufTtcblxuLyoqXG4gKiBEZWR1cGxpY2F0ZXMgaXRlbXMgaW4gYW4gYXJyYXkuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBjb3VsZCBub3JtYWxseSBiZSBpbXBsZW1lbnRlZCBhcyBtZXJlbHkgYEFycmF5LmZyb20obmV3XG4gKiBTZXQoLi4uKSlgLiBIb3dldmVyLCBpbiBJRSAxMSwgYFNldGAgZG9lcyBub3Qgc3VwcG9ydCBiZWluZyBjb25zdHJ1Y3RlZCB3aXRoXG4gKiBhbiBpdGVyYWJsZS4gRnVydGhlciwgc29tZSBwb2x5ZmlsbHMgZm9yIGBBcnJheS5mcm9tYCBlZmZlY3RpdmVseSBkZWZhdWx0IHRvXG4gKiBgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoLi4uKWAgd2hlbiB0aGV5IGFyZSB1bmFibGUgdG8gZmluZFxuICogYFtTeW1ib2wuaXRlcmF0b3JdYDsgdGhpcyBpcyBpbmNvbXBhdGlibGUgd2l0aCBgU2V0YCB3aGljaCBoYXMgbm8gYGxlbmd0aGAgb3JcbiAqIGluZGV4YWJsZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0geyFBcnJheTwhVD59IGFycmF5XG4gKiBAcmV0dXJuIHshQXJyYXk8IVQ+fVxuICovXG5leHBvcnQgY29uc3QgZGVkdXBsaWNhdGUgPSAoYXJyYXkpID0+IHtcbiAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gIGZvciAoY29uc3QgaXRlbSBvZiBhcnJheSkge1xuICAgIGlmICghc2V0LmhhcyhpdGVtKSkge1xuICAgICAgcmVzdWx0cy5wdXNoKGl0ZW0pO1xuICAgICAgc2V0LmFkZChpdGVtKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHtwYXRjaFByb3BlcnRpZXN9IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHtnZXRJbm5lckhUTUx9IGZyb20gJy4vaW5uZXJIVE1MLmpzJztcblxuY29uc3QgaGFzRGVzY3JpcHRvcnMgPSB1dGlscy5zZXR0aW5ncy5oYXNEZXNjcmlwdG9ycztcbmV4cG9ydCBjb25zdCBOQVRJVkVfUFJFRklYID0gdXRpbHMuTkFUSVZFX1BSRUZJWDtcblxuLy8gT2JqZWN0IG9uIHdoaWNoIHJhdyBuYXRpdmUgbWV0aG9kcyBhcmUgc3RvcmVkLlxuLy8gZS5nLiBgbmF0aXZlTWV0aG9kcy5xdWVyeVNlbGVjdG9yLmNhbGwobm9kZSwgc2VsZWN0b3IpYFxuLy8gc2FtZSBhcyBgbm9kZS5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKWBcbmV4cG9ydCBjb25zdCBuYXRpdmVNZXRob2RzID0ge1xuICAvKiogQHRoaXMge0VsZW1lbnR9ICovXG4gIHF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdGhpc1tOQVRJVkVfUFJFRklYICsgJ3F1ZXJ5U2VsZWN0b3InXShzZWxlY3Rvcik7XG4gIH0sXG4gIC8qKiBAdGhpcyB7RWxlbWVudH0gKi9cbiAgcXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcikge1xuICAgIHJldHVybiB0aGlzW05BVElWRV9QUkVGSVggKyAncXVlcnlTZWxlY3RvckFsbCddKHNlbGVjdG9yKTtcbiAgfSxcbn07XG4vLyBPYmplY3Qgb24gd2hpY2ggcmF3IG5hdGl2ZSBhY2Nlc3NvcnMgYXJlIGF2YWlsYWJsZSB2aWEgYGFjY2Vzc29yTmFtZShub2RlKWAuXG4vLyBlLmcuIGBuYXRpdmVUcmVlLmZpcnN0Q2hpbGQobm9kZSlgXG4vLyBzYW1lIGFzIGBub2RlLmZpcnN0Q2hpbGRgXG5leHBvcnQgY29uc3QgbmF0aXZlVHJlZSA9IHt9O1xuXG5jb25zdCBpbnN0YWxsTmF0aXZlQWNjZXNzb3IgPSAobmFtZSkgPT4ge1xuICBuYXRpdmVUcmVlW25hbWVdID0gKG5vZGUpID0+IG5vZGVbTkFUSVZFX1BSRUZJWCArIG5hbWVdO1xufTtcblxuY29uc3QgaW5zdGFsbE5hdGl2ZU1ldGhvZCA9IChuYW1lLCBmbikgPT4ge1xuICBpZiAoIW5hdGl2ZU1ldGhvZHNbbmFtZV0pIHtcbiAgICBuYXRpdmVNZXRob2RzW25hbWVdID0gZm47XG4gIH1cbn07XG5cbmNvbnN0IGRlZmluZU5hdGl2ZUFjY2Vzc29ycyA9IChwcm90bywgZGVzY3JpcHRvcnMpID0+IHtcbiAgcGF0Y2hQcm9wZXJ0aWVzKHByb3RvLCBkZXNjcmlwdG9ycywgTkFUSVZFX1BSRUZJWCk7XG4gIC8vIG1ha2UgbmF0aXZlIGFjY2Vzc29ycyBhdmFpbGFibGUgdG8gdXNlcnNcbiAgZm9yIChsZXQgcHJvcCBpbiBkZXNjcmlwdG9ycykge1xuICAgIGluc3RhbGxOYXRpdmVBY2Nlc3Nvcihwcm9wKTtcbiAgfVxufTtcblxuY29uc3QgY29weVByb3BlcnRpZXMgPSAocHJvdG8sIGxpc3QgPSBbXSkgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBuYW1lID0gbGlzdFtpXTtcbiAgICBjb25zdCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm90bywgbmFtZSk7XG4gICAgaWYgKGRlc2NyaXB0b3IpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgTkFUSVZFX1BSRUZJWCArIG5hbWUsIGRlc2NyaXB0b3IpO1xuICAgICAgLy8gbWFrZSBuYXRpdmUgbWV0aG9kcy9hY2Nlc3NvcnMgYXZhaWxhYmxlIHRvIHVzZXJzXG4gICAgICBpZiAoZGVzY3JpcHRvci52YWx1ZSkge1xuICAgICAgICBpbnN0YWxsTmF0aXZlTWV0aG9kKG5hbWUsIGRlc2NyaXB0b3IudmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5zdGFsbE5hdGl2ZUFjY2Vzc29yKG5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqIEB0eXBlIHshVHJlZVdhbGtlcn0gKi9cbmNvbnN0IG5vZGVXYWxrZXIgPSBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKFxuICBkb2N1bWVudCxcbiAgTm9kZUZpbHRlci5TSE9XX0FMTCxcbiAgbnVsbCxcbiAgZmFsc2Vcbik7XG5cbi8qKiBAdHlwZSB7IVRyZWVXYWxrZXJ9ICovXG5jb25zdCBlbGVtZW50V2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihcbiAgZG9jdW1lbnQsXG4gIE5vZGVGaWx0ZXIuU0hPV19FTEVNRU5ULFxuICBudWxsLFxuICBmYWxzZVxuKTtcblxuLyoqIEB0eXBlIHshRG9jdW1lbnR9ICovXG5jb25zdCBpbmVydERvYyA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgnaW5lcnQnKTtcblxuY29uc3QgY2xlYXJOb2RlID0gKG5vZGUpID0+IHtcbiAgbGV0IGZpcnN0Q2hpbGQ7XG4gIHdoaWxlICgoZmlyc3RDaGlsZCA9IG5vZGVbTkFUSVZFX1BSRUZJWCArICdmaXJzdENoaWxkJ10pKSB7XG4gICAgbm9kZVtOQVRJVkVfUFJFRklYICsgJ3JlbW92ZUNoaWxkJ10oZmlyc3RDaGlsZCk7XG4gIH1cbn07XG5cbmNvbnN0IFBhcmVudE5vZGVBY2Nlc3NvcnMgPSBbXG4gICdmaXJzdEVsZW1lbnRDaGlsZCcsXG4gICdsYXN0RWxlbWVudENoaWxkJyxcbiAgJ2NoaWxkcmVuJyxcbiAgJ2NoaWxkRWxlbWVudENvdW50Jyxcbl07XG5cbmNvbnN0IFBhcmVudE5vZGVNZXRob2RzID0gW1xuICAncXVlcnlTZWxlY3RvcicsXG4gICdxdWVyeVNlbGVjdG9yQWxsJyxcbiAgJ2FwcGVuZCcsXG4gICdwcmVwZW5kJyxcbiAgJ3JlcGxhY2VDaGlsZHJlbicsXG5dO1xuXG5leHBvcnQgY29uc3QgYWRkTmF0aXZlUHJlZml4ZWRQcm9wZXJ0aWVzID0gKCkgPT4ge1xuICAvLyBFdmVudFRhcmdldFxuICBjb25zdCBldmVudFByb3BzID0gW1xuICAgICdkaXNwYXRjaEV2ZW50JyxcbiAgICAnYWRkRXZlbnRMaXN0ZW5lcicsXG4gICAgJ3JlbW92ZUV2ZW50TGlzdGVuZXInLFxuICBdO1xuICBpZiAod2luZG93LkV2ZW50VGFyZ2V0KSB7XG4gICAgY29weVByb3BlcnRpZXMod2luZG93LkV2ZW50VGFyZ2V0LnByb3RvdHlwZSwgZXZlbnRQcm9wcyk7XG5cbiAgICAvLyBJbiBGaXJlZm94IDMxLCBgRXZlbnRUYXJnZXRgIGV4aXN0cywgYnV0IGBFdmVudFRhcmdldC5wcm90b3R5cGVgIGlzIG5vdFxuICAgIC8vIGluIHRoZSBwcm90b3R5cGUgY2hhaW4gb2YgYHdpbmRvd2AgYW5kLCBzdHJhbmdlbHksXG4gICAgLy8gYHdpbmRvdyBpbnN0YW5jZW9mIEV2ZW50VGFyZ2V0YCBzdGlsbCByZXR1cm5zIHRydWUuXG4gICAgaWYgKHdpbmRvd1tOQVRJVkVfUFJFRklYICsgJ2FkZEV2ZW50TGlzdGVuZXInXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb3B5UHJvcGVydGllcyhXaW5kb3cucHJvdG90eXBlLCBldmVudFByb3BzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29weVByb3BlcnRpZXMoTm9kZS5wcm90b3R5cGUsIGV2ZW50UHJvcHMpO1xuICAgIGNvcHlQcm9wZXJ0aWVzKFdpbmRvdy5wcm90b3R5cGUsIGV2ZW50UHJvcHMpO1xuICAgIGNvcHlQcm9wZXJ0aWVzKFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZSwgZXZlbnRQcm9wcyk7XG4gIH1cblxuICAvLyBOb2RlXG4gIGlmIChoYXNEZXNjcmlwdG9ycykge1xuICAgIGNvcHlQcm9wZXJ0aWVzKE5vZGUucHJvdG90eXBlLCBbXG4gICAgICAncGFyZW50Tm9kZScsXG4gICAgICAnZmlyc3RDaGlsZCcsXG4gICAgICAnbGFzdENoaWxkJyxcbiAgICAgICdwcmV2aW91c1NpYmxpbmcnLFxuICAgICAgJ25leHRTaWJsaW5nJyxcbiAgICAgICdjaGlsZE5vZGVzJyxcbiAgICAgICdwYXJlbnRFbGVtZW50JyxcbiAgICAgICd0ZXh0Q29udGVudCcsXG4gICAgXSk7XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5lTmF0aXZlQWNjZXNzb3JzKE5vZGUucHJvdG90eXBlLCB7XG4gICAgICBwYXJlbnROb2RlOiB7XG4gICAgICAgIC8qKiBAdGhpcyB7Tm9kZX0gKi9cbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIG5vZGVXYWxrZXIuY3VycmVudE5vZGUgPSB0aGlzO1xuICAgICAgICAgIHJldHVybiBub2RlV2Fsa2VyLnBhcmVudE5vZGUoKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBmaXJzdENoaWxkOiB7XG4gICAgICAgIC8qKiBAdGhpcyB7Tm9kZX0gKi9cbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIG5vZGVXYWxrZXIuY3VycmVudE5vZGUgPSB0aGlzO1xuICAgICAgICAgIHJldHVybiBub2RlV2Fsa2VyLmZpcnN0Q2hpbGQoKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBsYXN0Q2hpbGQ6IHtcbiAgICAgICAgLyoqIEB0aGlzIHtOb2RlfSAqL1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgbm9kZVdhbGtlci5jdXJyZW50Tm9kZSA9IHRoaXM7XG4gICAgICAgICAgcmV0dXJuIG5vZGVXYWxrZXIubGFzdENoaWxkKCk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgcHJldmlvdXNTaWJsaW5nOiB7XG4gICAgICAgIC8qKiBAdGhpcyB7Tm9kZX0gKi9cbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIG5vZGVXYWxrZXIuY3VycmVudE5vZGUgPSB0aGlzO1xuICAgICAgICAgIHJldHVybiBub2RlV2Fsa2VyLnByZXZpb3VzU2libGluZygpO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIG5leHRTaWJsaW5nOiB7XG4gICAgICAgIC8qKiBAdGhpcyB7Tm9kZX0gKi9cbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIG5vZGVXYWxrZXIuY3VycmVudE5vZGUgPSB0aGlzO1xuICAgICAgICAgIHJldHVybiBub2RlV2Fsa2VyLm5leHRTaWJsaW5nKCk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgLy8gVE9ETyhzb3J2ZWxsKTogbWFrZSB0aGlzIGEgTm9kZUxpc3Qgb3Igd2hhdGV2ZXJcbiAgICAgIGNoaWxkTm9kZXM6IHtcbiAgICAgICAgLyoqIEB0aGlzIHtOb2RlfSAqL1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgY29uc3Qgbm9kZXMgPSBbXTtcbiAgICAgICAgICBub2RlV2Fsa2VyLmN1cnJlbnROb2RlID0gdGhpcztcbiAgICAgICAgICBsZXQgbiA9IG5vZGVXYWxrZXIuZmlyc3RDaGlsZCgpO1xuICAgICAgICAgIHdoaWxlIChuKSB7XG4gICAgICAgICAgICBub2Rlcy5wdXNoKG4pO1xuICAgICAgICAgICAgbiA9IG5vZGVXYWxrZXIubmV4dFNpYmxpbmcoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5vZGVzO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHBhcmVudEVsZW1lbnQ6IHtcbiAgICAgICAgLyoqIEB0aGlzIHtOb2RlfSAqL1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgZWxlbWVudFdhbGtlci5jdXJyZW50Tm9kZSA9IHRoaXM7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnRXYWxrZXIucGFyZW50Tm9kZSgpO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHRleHRDb250ZW50OiB7XG4gICAgICAgIC8qKiBAdGhpcyB7Tm9kZX0gKi9cbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHN3aXRjaCAodGhpcy5ub2RlVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpcbiAgICAgICAgICAgIGNhc2UgTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFOlxuICAgICAgICAgICAgICAvLyBUT0RPKHNvcnZlbGwpOiBUaGlzIGNhbm5vdCBiZSBhIHNpbmdsZSBUcmVlV2Fsa2VyIHRoYXQncyByZXVzZWRcbiAgICAgICAgICAgICAgLy8gYXQgbGVhc3QgZm9yIFNhZmFyaSA5LCBidXQgaXQncyB1bmNsZWFyIHdoeS5cbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNhc2UtZGVjbGFyYXRpb25zXG4gICAgICAgICAgICAgIGNvbnN0IHRleHRXYWxrZXIgPSBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgTm9kZUZpbHRlci5TSE9XX1RFWFQsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY2FzZS1kZWNsYXJhdGlvbnNcbiAgICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSAnJyxcbiAgICAgICAgICAgICAgICBuO1xuICAgICAgICAgICAgICB3aGlsZSAoKG4gPSB0ZXh0V2Fsa2VyLm5leHROb2RlKCkpKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyhzb3J2ZWxsKTogY2FuJ3QgdXNlIHRleHRDb250ZW50IHNpbmNlIHdlIHBhdGNoIGl0IG9uIE5vZGUucHJvdG90eXBlIVxuICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHNob3VsZCBwcm9iYWJseSBwYXRjaCBpdCBvbmx5IG9uIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgY29udGVudCArPSBuLm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLm5vZGVWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8vIE5lZWRlZCBvbiBicm93c2VycyB0aGF0IGRvIG5vdCBwcm9wZXIgYWNjZXNzb3JzIChlLmcuIG9sZCB2ZXJzaW9ucyBvZiBDaHJvbWUpXG4gICAgICAgIC8qKiBAdGhpcyB7Tm9kZX0gKi9cbiAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhbHVlID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN3aXRjaCAodGhpcy5ub2RlVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpcbiAgICAgICAgICAgIGNhc2UgTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFOlxuICAgICAgICAgICAgICBjbGVhck5vZGUodGhpcyk7XG4gICAgICAgICAgICAgIC8vIERvY3VtZW50IGZyYWdtZW50cyBtdXN0IGhhdmUgbm8gY2hpbGRub2RlcyBpZiBzZXR0aW5nIGEgYmxhbmsgc3RyaW5nXG4gICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwIHx8IHRoaXMubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAgICAgLy8gTm90ZTogb2xkIENocm9tZSB2ZXJzaW9ucyByZXF1aXJlIDJuZCBhcmd1bWVudCBoZXJlXG4gICAgICAgICAgICAgICAgdGhpc1tOQVRJVkVfUFJFRklYICsgJ2luc2VydEJlZm9yZSddKFxuICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodmFsdWUpLFxuICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIC8vIFRPRE8oc29ydmVsbCk6IGNhbid0IGRvIHRoaXMgaWYgcGF0Y2ggbm9kZVZhbHVlLlxuICAgICAgICAgICAgICB0aGlzLm5vZGVWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgY29weVByb3BlcnRpZXMoTm9kZS5wcm90b3R5cGUsIFtcbiAgICAnYXBwZW5kQ2hpbGQnLFxuICAgICdpbnNlcnRCZWZvcmUnLFxuICAgICdyZW1vdmVDaGlsZCcsXG4gICAgJ3JlcGxhY2VDaGlsZCcsXG4gICAgJ2Nsb25lTm9kZScsXG4gICAgJ2NvbnRhaW5zJyxcbiAgXSk7XG5cbiAgLy8gTk9URSwgb24gc29tZSBicm93c2VycyBJRSAxMSAvIEVkZ2UgMTUgc29tZSBwcm9wZXJ0aWVzIGFyZSBpbmNvcnJlY3RseSBvbiBIVE1MRWxlbWVudFxuICBjb3B5UHJvcGVydGllcyhIVE1MRWxlbWVudC5wcm90b3R5cGUsIFsncGFyZW50RWxlbWVudCcsICdjb250YWlucyddKTtcblxuICBjb25zdCBQYXJlbnROb2RlV2Fsa2VyRGVzY3JpcHRvcnMgPSB7XG4gICAgZmlyc3RFbGVtZW50Q2hpbGQ6IHtcbiAgICAgIC8qKiBAdGhpcyB7UGFyZW50Tm9kZX0gKi9cbiAgICAgIGdldCgpIHtcbiAgICAgICAgZWxlbWVudFdhbGtlci5jdXJyZW50Tm9kZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBlbGVtZW50V2Fsa2VyLmZpcnN0Q2hpbGQoKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICBsYXN0RWxlbWVudENoaWxkOiB7XG4gICAgICAvKiogQHRoaXMge1BhcmVudE5vZGV9ICovXG4gICAgICBnZXQoKSB7XG4gICAgICAgIGVsZW1lbnRXYWxrZXIuY3VycmVudE5vZGUgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZWxlbWVudFdhbGtlci5sYXN0Q2hpbGQoKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjaGlsZHJlbjoge1xuICAgICAgLyoqIEB0aGlzIHtQYXJlbnROb2RlfSAqL1xuICAgICAgZ2V0KCkge1xuICAgICAgICBsZXQgbm9kZXMgPSBbXTtcbiAgICAgICAgZWxlbWVudFdhbGtlci5jdXJyZW50Tm9kZSA9IHRoaXM7XG4gICAgICAgIGxldCBuID0gZWxlbWVudFdhbGtlci5maXJzdENoaWxkKCk7XG4gICAgICAgIHdoaWxlIChuKSB7XG4gICAgICAgICAgbm9kZXMucHVzaChuKTtcbiAgICAgICAgICBuID0gZWxlbWVudFdhbGtlci5uZXh0U2libGluZygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1dGlscy5jcmVhdGVQb2x5ZmlsbGVkSFRNTENvbGxlY3Rpb24obm9kZXMpO1xuICAgICAgfSxcbiAgICB9LFxuICAgIGNoaWxkRWxlbWVudENvdW50OiB7XG4gICAgICAvKiogQHRoaXMge1BhcmVudE5vZGV9ICovXG4gICAgICBnZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIC8vIEVsZW1lbnRcbiAgaWYgKGhhc0Rlc2NyaXB0b3JzKSB7XG4gICAgY29weVByb3BlcnRpZXMoRWxlbWVudC5wcm90b3R5cGUsIFBhcmVudE5vZGVBY2Nlc3NvcnMpO1xuXG4gICAgY29weVByb3BlcnRpZXMoRWxlbWVudC5wcm90b3R5cGUsIFtcbiAgICAgICdwcmV2aW91c0VsZW1lbnRTaWJsaW5nJyxcbiAgICAgICduZXh0RWxlbWVudFNpYmxpbmcnLFxuICAgICAgJ2lubmVySFRNTCcsXG4gICAgICAnY2xhc3NOYW1lJyxcbiAgICBdKTtcblxuICAgIC8vIE5PVEUsIG9uIHNvbWUgYnJvd3NlcnMgSUUgMTEgLyBFZGdlIDE1IHNvbWUgcHJvcGVydGllcyBhcmUgaW5jb3JyZWN0bHkgb24gSFRNTEVsZW1lbnRcbiAgICBjb3B5UHJvcGVydGllcyhIVE1MRWxlbWVudC5wcm90b3R5cGUsIFtcbiAgICAgICdjaGlsZHJlbicsXG4gICAgICAnaW5uZXJIVE1MJyxcbiAgICAgICdjbGFzc05hbWUnLFxuICAgIF0pO1xuICB9IGVsc2Uge1xuICAgIGRlZmluZU5hdGl2ZUFjY2Vzc29ycyhFbGVtZW50LnByb3RvdHlwZSwgUGFyZW50Tm9kZVdhbGtlckRlc2NyaXB0b3JzKTtcbiAgICBkZWZpbmVOYXRpdmVBY2Nlc3NvcnMoRWxlbWVudC5wcm90b3R5cGUsIHtcbiAgICAgIHByZXZpb3VzRWxlbWVudFNpYmxpbmc6IHtcbiAgICAgICAgLyoqIEB0aGlzIHtFbGVtZW50fSAqL1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgZWxlbWVudFdhbGtlci5jdXJyZW50Tm9kZSA9IHRoaXM7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnRXYWxrZXIucHJldmlvdXNTaWJsaW5nKCk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgbmV4dEVsZW1lbnRTaWJsaW5nOiB7XG4gICAgICAgIC8qKiBAdGhpcyB7RWxlbWVudH0gKi9cbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIGVsZW1lbnRXYWxrZXIuY3VycmVudE5vZGUgPSB0aGlzO1xuICAgICAgICAgIHJldHVybiBlbGVtZW50V2Fsa2VyLm5leHRTaWJsaW5nKCk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgaW5uZXJIVE1MOiB7XG4gICAgICAgIC8qKiBAdGhpcyB7RWxlbWVudH0gKi9cbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBnZXRJbm5lckhUTUwodGhpcywgdXRpbHMubmF0aXZlQ2hpbGROb2Rlc0FycmF5KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gTmVlZGVkIG9uIGJyb3dzZXJzIHRoYXQgZG8gbm90IHByb3BlciBhY2Nlc3NvcnMgKGUuZy4gb2xkIHZlcnNpb25zIG9mIENocm9tZSlcbiAgICAgICAgLyoqIEB0aGlzIHtFbGVtZW50fSAqL1xuICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICBjb25zdCBjb250ZW50ID1cbiAgICAgICAgICAgIHRoaXMubG9jYWxOYW1lID09PSAndGVtcGxhdGUnXG4gICAgICAgICAgICAgID8gLyoqIEB0eXBlIHtIVE1MVGVtcGxhdGVFbGVtZW50fSAqLyAodGhpcykuY29udGVudFxuICAgICAgICAgICAgICA6IHRoaXM7XG4gICAgICAgICAgY2xlYXJOb2RlKGNvbnRlbnQpO1xuICAgICAgICAgIGNvbnN0IGNvbnRhaW5lck5hbWUgPSB0aGlzLmxvY2FsTmFtZSB8fCAnZGl2JztcbiAgICAgICAgICBsZXQgaHRtbENvbnRhaW5lcjtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhdGhpcy5uYW1lc3BhY2VVUkkgfHxcbiAgICAgICAgICAgIHRoaXMubmFtZXNwYWNlVVJJID09PSBpbmVydERvYy5uYW1lc3BhY2VVUklcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGh0bWxDb250YWluZXIgPSBpbmVydERvYy5jcmVhdGVFbGVtZW50KGNvbnRhaW5lck5hbWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBodG1sQ29udGFpbmVyID0gaW5lcnREb2MuY3JlYXRlRWxlbWVudE5TKFxuICAgICAgICAgICAgICB0aGlzLm5hbWVzcGFjZVVSSSxcbiAgICAgICAgICAgICAgY29udGFpbmVyTmFtZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaHRtbENvbnRhaW5lci5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgICAgICAgICBjb25zdCBuZXdDb250ZW50ID1cbiAgICAgICAgICAgIHRoaXMubG9jYWxOYW1lID09PSAndGVtcGxhdGUnXG4gICAgICAgICAgICAgID8gLyoqIEB0eXBlIHtIVE1MVGVtcGxhdGVFbGVtZW50fSAqLyAoaHRtbENvbnRhaW5lcikuY29udGVudFxuICAgICAgICAgICAgICA6IGh0bWxDb250YWluZXI7XG4gICAgICAgICAgbGV0IGZpcnN0Q2hpbGQ7XG4gICAgICAgICAgd2hpbGUgKChmaXJzdENoaWxkID0gbmV3Q29udGVudFtOQVRJVkVfUFJFRklYICsgJ2ZpcnN0Q2hpbGQnXSkpIHtcbiAgICAgICAgICAgIC8vIE5vdGU6IG9sZCBDaHJvbWUgdmVyc2lvbnMgcmVxdWlyZSAybmQgYXJndW1lbnQgaGVyZVxuICAgICAgICAgICAgY29udGVudFtOQVRJVkVfUFJFRklYICsgJ2luc2VydEJlZm9yZSddKGZpcnN0Q2hpbGQsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGNsYXNzTmFtZToge1xuICAgICAgICAvKiogQHRoaXMge0VsZW1lbnR9ICovXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJyc7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBAdGhpcyB7RWxlbWVudH0gKi9cbiAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGNvcHlQcm9wZXJ0aWVzKEVsZW1lbnQucHJvdG90eXBlLCBbXG4gICAgJ3NldEF0dHJpYnV0ZScsXG4gICAgJ2dldEF0dHJpYnV0ZScsXG4gICAgJ2hhc0F0dHJpYnV0ZScsXG4gICAgJ3JlbW92ZUF0dHJpYnV0ZScsXG4gICAgJ3RvZ2dsZUF0dHJpYnV0ZScsXG4gICAgLy8gb24gb2xkZXIgU2FmYXJpLCB0aGVzZSBhcmUgb24gRWxlbWVudC5cbiAgICAnZm9jdXMnLFxuICAgICdibHVyJyxcbiAgXSk7XG4gIGNvcHlQcm9wZXJ0aWVzKEVsZW1lbnQucHJvdG90eXBlLCBQYXJlbnROb2RlTWV0aG9kcyk7XG5cbiAgLy8gSFRNTEVsZW1lbnRcbiAgY29weVByb3BlcnRpZXMoSFRNTEVsZW1lbnQucHJvdG90eXBlLCBbJ2ZvY3VzJywgJ2JsdXInXSk7XG5cbiAgLy8gSFRNTFRlbXBsYXRlRWxlbWVudFxuICBpZiAod2luZG93LkhUTUxUZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICBjb3B5UHJvcGVydGllcyh3aW5kb3cuSFRNTFRlbXBsYXRlRWxlbWVudC5wcm90b3R5cGUsIFsnaW5uZXJIVE1MJ10pO1xuICB9XG5cbiAgLy8gRG9jdW1lbnRGcmFnbWVudFxuICBpZiAoaGFzRGVzY3JpcHRvcnMpIHtcbiAgICAvLyBOT1RFLCBJRSAxMSBkb2VzIG5vdCBoYXZlIG9uIERvY3VtZW50RnJhZ21lbnRcbiAgICAvLyBmaXJzdEVsZW1lbnRDaGlsZFxuICAgIC8vIGxhc3RFbGVtZW50Q2hpbGRcbiAgICBjb3B5UHJvcGVydGllcyhEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZSwgUGFyZW50Tm9kZUFjY2Vzc29ycyk7XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5lTmF0aXZlQWNjZXNzb3JzKFxuICAgICAgRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUsXG4gICAgICBQYXJlbnROb2RlV2Fsa2VyRGVzY3JpcHRvcnNcbiAgICApO1xuICB9XG5cbiAgY29weVByb3BlcnRpZXMoRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUsIFBhcmVudE5vZGVNZXRob2RzKTtcblxuICAvLyBEb2N1bWVudFxuICBpZiAoaGFzRGVzY3JpcHRvcnMpIHtcbiAgICBjb3B5UHJvcGVydGllcyhEb2N1bWVudC5wcm90b3R5cGUsIFBhcmVudE5vZGVBY2Nlc3NvcnMpO1xuICAgIGNvcHlQcm9wZXJ0aWVzKERvY3VtZW50LnByb3RvdHlwZSwgWydhY3RpdmVFbGVtZW50J10pO1xuICB9IGVsc2Uge1xuICAgIGRlZmluZU5hdGl2ZUFjY2Vzc29ycyhEb2N1bWVudC5wcm90b3R5cGUsIFBhcmVudE5vZGVXYWxrZXJEZXNjcmlwdG9ycyk7XG4gIH1cblxuICBjb3B5UHJvcGVydGllcyhEb2N1bWVudC5wcm90b3R5cGUsIFtcbiAgICAnaW1wb3J0Tm9kZScsXG4gICAgJ2dldEVsZW1lbnRCeUlkJyxcbiAgICAnZWxlbWVudEZyb21Qb2ludCcsXG4gICAgdXRpbHMuZ2V0UHJvcGVydHlOYW1lKERvY3VtZW50LnByb3RvdHlwZSwgJ2VsZW1lbnRzRnJvbVBvaW50JyksXG4gIF0pO1xuICBjb3B5UHJvcGVydGllcyhEb2N1bWVudC5wcm90b3R5cGUsIFBhcmVudE5vZGVNZXRob2RzKTtcbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcblxuLy8gcmVuZGVyIGVucXVldWVyL2ZsdXNoZXJcbmxldCBmbHVzaExpc3QgPSBbXTtcbmxldCBzY2hlZHVsZWQ7XG5leHBvcnQgZnVuY3Rpb24gZW5xdWV1ZShjYWxsYmFjaykge1xuICBpZiAoIXNjaGVkdWxlZCkge1xuICAgIHNjaGVkdWxlZCA9IHRydWU7XG4gICAgdXRpbHMubWljcm90YXNrKGZsdXNoKTtcbiAgfVxuICBmbHVzaExpc3QucHVzaChjYWxsYmFjayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgc2NoZWR1bGVkID0gZmFsc2U7XG4gIGxldCBkaWRGbHVzaCA9IEJvb2xlYW4oZmx1c2hMaXN0Lmxlbmd0aCk7XG4gIHdoaWxlIChmbHVzaExpc3QubGVuZ3RoKSB7XG4gICAgZmx1c2hMaXN0LnNoaWZ0KCkoKTtcbiAgfVxuICByZXR1cm4gZGlkRmx1c2g7XG59XG5cbmZsdXNoWydsaXN0J10gPSBmbHVzaExpc3Q7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7ZW5zdXJlU2hhZHlEYXRhRm9yTm9kZX0gZnJvbSAnLi9zaGFkeS1kYXRhLmpzJztcblxuY2xhc3MgQXN5bmNPYnNlcnZlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3NjaGVkdWxlZCA9IGZhbHNlO1xuICAgIHRoaXMuYWRkZWROb2RlcyA9IFtdO1xuICAgIHRoaXMucmVtb3ZlZE5vZGVzID0gW107XG4gICAgdGhpcy5jYWxsYmFja3MgPSBuZXcgU2V0KCk7XG4gIH1cblxuICBzY2hlZHVsZSgpIHtcbiAgICBpZiAoIXRoaXMuX3NjaGVkdWxlZCkge1xuICAgICAgdGhpcy5fc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgIHV0aWxzLm1pY3JvdGFzaygoKSA9PiB7XG4gICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZsdXNoKCkge1xuICAgIGlmICh0aGlzLl9zY2hlZHVsZWQpIHtcbiAgICAgIHRoaXMuX3NjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgbGV0IG11dGF0aW9ucyA9IHRoaXMudGFrZVJlY29yZHMoKTtcbiAgICAgIGlmIChtdXRhdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgY2IobXV0YXRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGFrZVJlY29yZHMoKSB7XG4gICAgaWYgKHRoaXMuYWRkZWROb2Rlcy5sZW5ndGggfHwgdGhpcy5yZW1vdmVkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBsZXQgbXV0YXRpb25zID0gW1xuICAgICAgICB7XG4gICAgICAgICAgYWRkZWROb2RlczogdGhpcy5hZGRlZE5vZGVzLFxuICAgICAgICAgIHJlbW92ZWROb2RlczogdGhpcy5yZW1vdmVkTm9kZXMsXG4gICAgICAgIH0sXG4gICAgICBdO1xuICAgICAgdGhpcy5hZGRlZE5vZGVzID0gW107XG4gICAgICB0aGlzLnJlbW92ZWROb2RlcyA9IFtdO1xuICAgICAgcmV0dXJuIG11dGF0aW9ucztcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG5cbi8vIFRPRE8oc29ydmVsbCk6IGNvbnNpZGVyIGluc3RlYWQgcG9seWZpbGxpbmcgTXV0YXRpb25PYnNlcnZlclxuLy8gZGlyZWN0bHkgc28gdGhhdCB1c2VycyBkbyBub3QgaGF2ZSB0byBmb3JrIHRoZWlyIGNvZGUuXG4vLyBTdXBwb3J0aW5nIHRoZSBlbnRpcmUgYXBpIG1heSBiZSBjaGFsbGVuZ2luZzogZS5nLiBmaWx0ZXJpbmcgb3V0XG4vLyByZW1vdmVkIG5vZGVzIGluIHRoZSB3cm9uZyBzY29wZSBhbmQgc2VlaW5nIG5vbi1kaXN0cmlidXRpbmdcbi8vIHN1YnRyZWUgY2hpbGQgbXV0YXRpb25zLlxuZXhwb3J0IGxldCBvYnNlcnZlQ2hpbGRyZW4gPSBmdW5jdGlvbiAobm9kZSwgY2FsbGJhY2spIHtcbiAgY29uc3Qgc2QgPSBlbnN1cmVTaGFkeURhdGFGb3JOb2RlKG5vZGUpO1xuICBpZiAoIXNkLm9ic2VydmVyKSB7XG4gICAgc2Qub2JzZXJ2ZXIgPSBuZXcgQXN5bmNPYnNlcnZlcigpO1xuICB9XG4gIHNkLm9ic2VydmVyLmNhbGxiYWNrcy5hZGQoY2FsbGJhY2spO1xuICBsZXQgb2JzZXJ2ZXIgPSBzZC5vYnNlcnZlcjtcbiAgcmV0dXJuIHtcbiAgICBfY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgIF9vYnNlcnZlcjogb2JzZXJ2ZXIsXG4gICAgX25vZGU6IG5vZGUsXG4gICAgdGFrZVJlY29yZHMoKSB7XG4gICAgICByZXR1cm4gb2JzZXJ2ZXIudGFrZVJlY29yZHMoKTtcbiAgICB9LFxuICB9O1xufTtcblxuZXhwb3J0IGxldCB1bm9ic2VydmVDaGlsZHJlbiA9IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgbGV0IG9ic2VydmVyID0gaGFuZGxlICYmIGhhbmRsZS5fb2JzZXJ2ZXI7XG4gIGlmIChvYnNlcnZlcikge1xuICAgIG9ic2VydmVyLmNhbGxiYWNrcy5kZWxldGUoaGFuZGxlLl9jYWxsYmFjayk7XG4gICAgaWYgKCFvYnNlcnZlci5jYWxsYmFja3Muc2l6ZSkge1xuICAgICAgZW5zdXJlU2hhZHlEYXRhRm9yTm9kZShoYW5kbGUuX25vZGUpLm9ic2VydmVyID0gbnVsbDtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJNdXRhdGlvbnMobXV0YXRpb25zLCB0YXJnZXQpIHtcbiAgLyoqIEBjb25zdCB7Tm9kZX0gKi9cbiAgY29uc3QgdGFyZ2V0Um9vdE5vZGUgPSB0YXJnZXQuZ2V0Um9vdE5vZGUoKTtcbiAgcmV0dXJuIG11dGF0aW9uc1xuICAgIC5tYXAoZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICAvKiogQGNvbnN0IHtib29sZWFufSAqL1xuICAgICAgY29uc3QgbXV0YXRpb25JblNjb3BlID0gdGFyZ2V0Um9vdE5vZGUgPT09IG11dGF0aW9uLnRhcmdldC5nZXRSb290Tm9kZSgpO1xuICAgICAgaWYgKG11dGF0aW9uSW5TY29wZSAmJiBtdXRhdGlvbi5hZGRlZE5vZGVzKSB7XG4gICAgICAgIGxldCBub2RlcyA9IHV0aWxzLmFycmF5RnJvbShtdXRhdGlvbi5hZGRlZE5vZGVzKS5maWx0ZXIoZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0Um9vdE5vZGUgPT09IG4uZ2V0Um9vdE5vZGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChub2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICBtdXRhdGlvbiA9IE9iamVjdC5jcmVhdGUobXV0YXRpb24pO1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtdXRhdGlvbiwgJ2FkZGVkTm9kZXMnLCB7XG4gICAgICAgICAgICB2YWx1ZTogbm9kZXMsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIG11dGF0aW9uO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG11dGF0aW9uSW5TY29wZSkge1xuICAgICAgICByZXR1cm4gbXV0YXRpb247XG4gICAgICB9XG4gICAgfSlcbiAgICAuZmlsdGVyKGZ1bmN0aW9uIChtKSB7XG4gICAgICByZXR1cm4gbTtcbiAgICB9KTtcbn1cbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNiBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbi8vIENyaWJiZWQgZnJvbSBTaGFkb3dET00gcG9seWZpbGxcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJjb21wb25lbnRzL3dlYmNvbXBvbmVudHNqcy9ibG9iL21hc3Rlci9zcmMvU2hhZG93RE9NL3dyYXBwZXJzL0hUTUxFbGVtZW50LmpzI0wyOFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIGlubmVySFRNTCBhbmQgb3V0ZXJIVE1MXG5cbi8vIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3RoZS1lbmQuaHRtbCNlc2NhcGluZ1N0cmluZ1xubGV0IGVzY2FwZUF0dHJSZWdFeHAgPSAvWyZcXHUwMEEwXCJdL2c7XG5sZXQgZXNjYXBlRGF0YVJlZ0V4cCA9IC9bJlxcdTAwQTA8Pl0vZztcblxuZnVuY3Rpb24gZXNjYXBlUmVwbGFjZShjKSB7XG4gIHN3aXRjaCAoYykge1xuICAgIGNhc2UgJyYnOlxuICAgICAgcmV0dXJuICcmYW1wOyc7XG4gICAgY2FzZSAnPCc6XG4gICAgICByZXR1cm4gJyZsdDsnO1xuICAgIGNhc2UgJz4nOlxuICAgICAgcmV0dXJuICcmZ3Q7JztcbiAgICBjYXNlICdcIic6XG4gICAgICByZXR1cm4gJyZxdW90Oyc7XG4gICAgY2FzZSAnXFx1MDBBMCc6XG4gICAgICByZXR1cm4gJyZuYnNwOyc7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXNjYXBlQXR0cihzKSB7XG4gIHJldHVybiBzLnJlcGxhY2UoZXNjYXBlQXR0clJlZ0V4cCwgZXNjYXBlUmVwbGFjZSk7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZURhdGEocykge1xuICByZXR1cm4gcy5yZXBsYWNlKGVzY2FwZURhdGFSZWdFeHAsIGVzY2FwZVJlcGxhY2UpO1xufVxuXG5mdW5jdGlvbiBtYWtlU2V0KGFycikge1xuICBsZXQgc2V0ID0ge307XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgc2V0W2FycltpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBzZXQ7XG59XG5cbi8vIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvI3ZvaWQtZWxlbWVudHNcbmxldCB2b2lkRWxlbWVudHMgPSBtYWtlU2V0KFtcbiAgJ2FyZWEnLFxuICAnYmFzZScsXG4gICdicicsXG4gICdjb2wnLFxuICAnY29tbWFuZCcsXG4gICdlbWJlZCcsXG4gICdocicsXG4gICdpbWcnLFxuICAnaW5wdXQnLFxuICAna2V5Z2VuJyxcbiAgJ2xpbmsnLFxuICAnbWV0YScsXG4gICdwYXJhbScsXG4gICdzb3VyY2UnLFxuICAndHJhY2snLFxuICAnd2JyJyxcbl0pO1xuXG5sZXQgcGxhaW50ZXh0UGFyZW50cyA9IG1ha2VTZXQoW1xuICAnc3R5bGUnLFxuICAnc2NyaXB0JyxcbiAgJ3htcCcsXG4gICdpZnJhbWUnLFxuICAnbm9lbWJlZCcsXG4gICdub2ZyYW1lcycsXG4gICdwbGFpbnRleHQnLFxuICAnbm9zY3JpcHQnLFxuXSk7XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcGFyYW0ge05vZGV9IHBhcmVudE5vZGVcbiAqIEBwYXJhbSB7RnVuY3Rpb249fSBjYWxsYmFja1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3V0ZXJIVE1MKG5vZGUsIHBhcmVudE5vZGUsIGNhbGxiYWNrKSB7XG4gIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuICAgIGNhc2UgTm9kZS5FTEVNRU5UX05PREU6IHtcbiAgICAgIGxldCB0YWdOYW1lID0gbm9kZS5sb2NhbE5hbWU7XG4gICAgICBsZXQgcyA9ICc8JyArIHRhZ05hbWU7XG4gICAgICBsZXQgYXR0cnMgPSBub2RlLmF0dHJpYnV0ZXM7XG4gICAgICBmb3IgKGxldCBpID0gMCwgYXR0cjsgKGF0dHIgPSBhdHRyc1tpXSk7IGkrKykge1xuICAgICAgICBzICs9ICcgJyArIGF0dHIubmFtZSArICc9XCInICsgZXNjYXBlQXR0cihhdHRyLnZhbHVlKSArICdcIic7XG4gICAgICB9XG4gICAgICBzICs9ICc+JztcbiAgICAgIGlmICh2b2lkRWxlbWVudHNbdGFnTmFtZV0pIHtcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgICB9XG4gICAgICByZXR1cm4gcyArIGdldElubmVySFRNTChub2RlLCBjYWxsYmFjaykgKyAnPC8nICsgdGFnTmFtZSArICc+JztcbiAgICB9XG4gICAgY2FzZSBOb2RlLlRFWFRfTk9ERToge1xuICAgICAgbGV0IGRhdGEgPSAvKiogQHR5cGUge1RleHR9ICovIChub2RlKS5kYXRhO1xuICAgICAgaWYgKHBhcmVudE5vZGUgJiYgcGxhaW50ZXh0UGFyZW50c1twYXJlbnROb2RlLmxvY2FsTmFtZV0pIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXNjYXBlRGF0YShkYXRhKTtcbiAgICB9XG4gICAgY2FzZSBOb2RlLkNPTU1FTlRfTk9ERToge1xuICAgICAgcmV0dXJuICc8IS0tJyArIC8qKiBAdHlwZSB7Q29tbWVudH0gKi8gKG5vZGUpLmRhdGEgKyAnLS0+JztcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgd2luZG93LmNvbnNvbGUuZXJyb3Iobm9kZSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICogQHBhcmFtIHtGdW5jdGlvbj19IGNhbGxiYWNrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbm5lckhUTUwobm9kZSwgY2FsbGJhY2spIHtcbiAgaWYgKG5vZGUubG9jYWxOYW1lID09PSAndGVtcGxhdGUnKSB7XG4gICAgbm9kZSA9IC8qKiBAdHlwZSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gKi8gKG5vZGUpLmNvbnRlbnQ7XG4gIH1cbiAgbGV0IHMgPSAnJztcbiAgbGV0IGMkID0gY2FsbGJhY2sgPyBjYWxsYmFjayhub2RlKSA6IG5vZGUuY2hpbGROb2RlcztcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBjJC5sZW5ndGgsIGNoaWxkOyBpIDwgbCAmJiAoY2hpbGQgPSBjJFtpXSk7IGkrKykge1xuICAgIHMgKz0gZ2V0T3V0ZXJIVE1MKGNoaWxkLCBub2RlLCBjYWxsYmFjayk7XG4gIH1cbiAgcmV0dXJuIHM7XG59XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7ZW5zdXJlU2hhZHlEYXRhRm9yTm9kZX0gZnJvbSAnLi9zaGFkeS1kYXRhLmpzJztcblxuZXhwb3J0IGNvbnN0IEluc2lkZURlc2NyaXB0b3JzID0gdXRpbHMuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh7XG4gIC8qKiBAdGhpcyB7Tm9kZX0gKi9cbiAgZ2V0IGNoaWxkTm9kZXMoKSB7XG4gICAgcmV0dXJuIHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2NoaWxkTm9kZXMnXTtcbiAgfSxcblxuICAvKiogQHRoaXMge05vZGV9ICovXG4gIGdldCBmaXJzdENoaWxkKCkge1xuICAgIHJldHVybiB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICdmaXJzdENoaWxkJ107XG4gIH0sXG5cbiAgLyoqIEB0aGlzIHtOb2RlfSAqL1xuICBnZXQgbGFzdENoaWxkKCkge1xuICAgIHJldHVybiB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICdsYXN0Q2hpbGQnXTtcbiAgfSxcblxuICAvKiogQHRoaXMge05vZGV9ICovXG4gIGdldCBjaGlsZEVsZW1lbnRDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAnY2hpbGRFbGVtZW50Q291bnQnXTtcbiAgfSxcblxuICAvKiogQHRoaXMge05vZGV9ICovXG4gIGdldCBjaGlsZHJlbigpIHtcbiAgICByZXR1cm4gdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAnY2hpbGRyZW4nXTtcbiAgfSxcblxuICAvKiogQHRoaXMge05vZGV9ICovXG4gIGdldCBmaXJzdEVsZW1lbnRDaGlsZCgpIHtcbiAgICByZXR1cm4gdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAnZmlyc3RFbGVtZW50Q2hpbGQnXTtcbiAgfSxcblxuICAvKiogQHRoaXMge05vZGV9ICovXG4gIGdldCBsYXN0RWxlbWVudENoaWxkKCkge1xuICAgIHJldHVybiB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICdsYXN0RWxlbWVudENoaWxkJ107XG4gIH0sXG5cbiAgLyoqIEB0aGlzIHtOb2RlfSAqL1xuICBnZXQgc2hhZG93Um9vdCgpIHtcbiAgICByZXR1cm4gdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAnc2hhZG93Um9vdCddO1xuICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBUZXh0Q29udGVudElubmVySFRNTERlc2NyaXB0b3JzID0gdXRpbHMuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh7XG4gIC8qKiBAdGhpcyB7Tm9kZX0gKi9cbiAgZ2V0IHRleHRDb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICd0ZXh0Q29udGVudCddO1xuICB9LFxuXG4gIC8qKiBAdGhpcyB7Tm9kZX0gKi9cbiAgc2V0IHRleHRDb250ZW50KHZhbHVlKSB7XG4gICAgdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAndGV4dENvbnRlbnQnXSA9IHZhbHVlO1xuICB9LFxuXG4gIC8qKiBAdGhpcyB7Tm9kZX0gKi9cbiAgZ2V0IGlubmVySFRNTCgpIHtcbiAgICByZXR1cm4gdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAnaW5uZXJIVE1MJ107XG4gIH0sXG5cbiAgLyoqIEB0aGlzIHtOb2RlfSAqL1xuICBzZXQgaW5uZXJIVE1MKHZhbHVlKSB7XG4gICAgdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAnaW5uZXJIVE1MJ10gPSB2YWx1ZTtcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgT3V0c2lkZURlc2NyaXB0b3JzID0gdXRpbHMuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh7XG4gIC8qKiBAdGhpcyB7Tm9kZX0gKi9cbiAgZ2V0IHBhcmVudEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3BhcmVudEVsZW1lbnQnXTtcbiAgfSxcblxuICAvKiogQHRoaXMge05vZGV9ICovXG4gIGdldCBwYXJlbnROb2RlKCkge1xuICAgIHJldHVybiB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICdwYXJlbnROb2RlJ107XG4gIH0sXG5cbiAgLyoqIEB0aGlzIHtOb2RlfSAqL1xuICBnZXQgbmV4dFNpYmxpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ25leHRTaWJsaW5nJ107XG4gIH0sXG5cbiAgLyoqIEB0aGlzIHtOb2RlfSAqL1xuICBnZXQgcHJldmlvdXNTaWJsaW5nKCkge1xuICAgIHJldHVybiB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICdwcmV2aW91c1NpYmxpbmcnXTtcbiAgfSxcblxuICAvKiogQHRoaXMge05vZGV9ICovXG4gIGdldCBuZXh0RWxlbWVudFNpYmxpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ25leHRFbGVtZW50U2libGluZyddO1xuICB9LFxuXG4gIC8qKiBAdGhpcyB7Tm9kZX0gKi9cbiAgZ2V0IHByZXZpb3VzRWxlbWVudFNpYmxpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3ByZXZpb3VzRWxlbWVudFNpYmxpbmcnXTtcbiAgfSxcblxuICAvKiogQHRoaXMge05vZGV9ICovXG4gIGdldCBjbGFzc05hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2NsYXNzTmFtZSddO1xuICB9LFxuXG4gIC8qKiBAdGhpcyB7Tm9kZX0gKi9cbiAgc2V0IGNsYXNzTmFtZSh2YWx1ZSkge1xuICAgIHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2NsYXNzTmFtZSddID0gdmFsdWU7XG4gIH0sXG59KTtcblxuY29uc3QgbWFrZU5vbkVudW1lcmFibGUgPSAoZGVzY3JpcHRvcnMpID0+IHtcbiAgZm9yIChsZXQgcHJvcCBpbiBkZXNjcmlwdG9ycykge1xuICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBkZXNjcmlwdG9yc1twcm9wXTtcbiAgICAvLyBOT1RFLCB0aGUgb25seSBrbm93biByZWFzb24gdGhlIGRlc2NyaXB0b3Igd291bGRuJ3QgZXhpc3QgaGVyZSBpc1xuICAgIC8vIGlmIHNvbWVvbmUgaGFzIHBhdGNoZWQgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCwgYnV0IHdlJ3ZlIHNlZW4gdGhpc1xuICAgIC8vIHNvIHRoaXMgaXMganVzdCB0byBiZSBleHRyYSBzYWZlLlxuICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBmYWxzZTtcbiAgICB9XG4gIH1cbn07XG5cbm1ha2VOb25FbnVtZXJhYmxlKEluc2lkZURlc2NyaXB0b3JzKTtcbm1ha2VOb25FbnVtZXJhYmxlKFRleHRDb250ZW50SW5uZXJIVE1MRGVzY3JpcHRvcnMpO1xubWFrZU5vbkVudW1lcmFibGUoT3V0c2lkZURlc2NyaXB0b3JzKTtcblxuY29uc3Qgbm9JbnN0YW5jZVBhdGNoaW5nID1cbiAgdXRpbHMuc2V0dGluZ3MuaGFzRGVzY3JpcHRvcnMgfHwgdXRpbHMuc2V0dGluZ3Mubm9QYXRjaCA9PT0gdHJ1ZTtcblxuLy8gZW5zdXJlIGFuIGVsZW1lbnQgaGFzIHBhdGNoZWQgXCJvdXRzaWRlXCIgYWNjZXNzb3JzOyBuby1vcCB3aGVuIG5vdCBuZWVkZWRcbmV4cG9ydCBsZXQgcGF0Y2hPdXRzaWRlRWxlbWVudEFjY2Vzc29ycyA9IG5vSW5zdGFuY2VQYXRjaGluZ1xuICA/IGZ1bmN0aW9uICgpIHt9XG4gIDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IHNkID0gZW5zdXJlU2hhZHlEYXRhRm9yTm9kZShlbGVtZW50KTtcbiAgICAgIGlmICghc2QuX19vdXRzaWRlQWNjZXNzb3JzKSB7XG4gICAgICAgIHNkLl9fb3V0c2lkZUFjY2Vzc29ycyA9IHRydWU7XG4gICAgICAgIHV0aWxzLnBhdGNoRXhpc3RpbmdQcm9wZXJ0aWVzKGVsZW1lbnQsIE91dHNpZGVEZXNjcmlwdG9ycyk7XG4gICAgICB9XG4gICAgfTtcblxuLy8gZW5zdXJlIGFuIGVsZW1lbnQgaGFzIHBhdGNoZWQgXCJpbnNpZGVcIiBhY2Nlc3NvcnM7IG5vLW9wIHdoZW4gbm90IG5lZWRlZFxuZXhwb3J0IGxldCBwYXRjaEluc2lkZUVsZW1lbnRBY2Nlc3NvcnMgPSBub0luc3RhbmNlUGF0Y2hpbmdcbiAgPyBmdW5jdGlvbiAoKSB7fVxuICA6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBjb25zdCBzZCA9IGVuc3VyZVNoYWR5RGF0YUZvck5vZGUoZWxlbWVudCk7XG4gICAgICBpZiAoIXNkLl9faW5zaWRlQWNjZXNzb3JzKSB7XG4gICAgICAgIHNkLl9faW5zaWRlQWNjZXNzb3JzID0gdHJ1ZTtcbiAgICAgICAgdXRpbHMucGF0Y2hFeGlzdGluZ1Byb3BlcnRpZXMoZWxlbWVudCwgSW5zaWRlRGVzY3JpcHRvcnMpO1xuICAgICAgICAvLyBOT1RFOiBUaGVyZSBhcmUgY29tcGF0aWJpbGl0eSBpc3N1ZXMgd2l0aCBwYXRjaGVzIGZvciBgdGV4dENvbnRlbnRgXG4gICAgICAgIC8vIGFuZCBgaW5uZXJIVE1MYCBiZXR3ZWVuIENFIGFuZCBTRC4gU2luY2UgU0QgcGF0Y2hlcyBhcmUgYXBwbGllZFxuICAgICAgICAvLyB2aWEgYFNoYWR5RE9NLnBhdGNoYCBhbmQgQ0UgcGF0Y2hlcyBhcmUgYXBwbGllZCBhcyB0aGUgdHJlZSBpcyB3YWxrZWQsXG4gICAgICAgIC8vIFNEIHBhdGNoZXMgb3ZlcndyaXRlIENFIHBhdGNoZXMuXG4gICAgICAgIC8vICogV2hlbiBTRCBpcyBpbiBwYXRjaGluZyBtb2RlLCBTRCBjYWxscyB0aHJvdWdoIHRvIG5hdGl2ZVxuICAgICAgICAvLyBtZXRob2RzIG5vdCBwYXRjaGVkIGJ5IENFIChzaW5jZSBTRCBpcyBhdCB0aGUgYm90dG9tKSBhbmQgQ0UgZG9lcyBub3RcbiAgICAgICAgLy8gdXBncmFkZSwgY29ubmVjdCwgb3IgZGlzY29ubmVjdCBlbGVtZW50cy4gVGhlcmVmb3JlIGRvICpub3QgcGF0Y2gqXG4gICAgICAgIC8vIHRoZXNlIGFjY2Vzc29ycyBpbiB0aGlzIGNhc2UuXG4gICAgICAgIC8vICogV2hlbiBTRCBpcyBpbiBgbm9QYXRjaGAgbW9kZSwgdGhlIFNEIHBhdGNoZXMgY2FsbCB0aHJvdWdoIHRvXG4gICAgICAgIC8vIFwibmF0aXZlXCIgbWV0aG9kcyB0aGF0IGFyZSBwYXRjaGVkIGJ5IENFIChzaW5jZSBDRSBpcyBhdCB0aGUgYm90dG9tKS5cbiAgICAgICAgLy8gVGhlcmVmb3JlIGNvbnRpbnVlIHRvIHBhdGNoIGluIHRoaXMgY2FzZS5cbiAgICAgICAgLy8gSWYgdGhlIGN1c3RvbSBlbGVtZW50cyBwb2x5ZmlsbCBpcyBub3QgbG9hZGVkLCB0aGVuIHRoZXNlIGFjY2Vzc29yc1xuICAgICAgICAvLyBzaG91bGQgYmUgcGF0Y2hlZCBzbyB0aGV5IHdvcmsgY29ycmVjdGx5LlxuICAgICAgICBpZiAoIXV0aWxzLmhhc1BvbHlmaWxsZWRDdXN0b21FbGVtZW50cygpIHx8IHV0aWxzLnNldHRpbmdzLm5vUGF0Y2gpIHtcbiAgICAgICAgICB1dGlscy5wYXRjaEV4aXN0aW5nUHJvcGVydGllcyhcbiAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICBUZXh0Q29udGVudElubmVySFRNTERlc2NyaXB0b3JzXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7Zmx1c2h9IGZyb20gJy4vZmx1c2guanMnO1xuaW1wb3J0IHtzaGFkeURhdGFGb3JOb2RlLCBlbnN1cmVTaGFkeURhdGFGb3JOb2RlfSBmcm9tICcuL3NoYWR5LWRhdGEuanMnO1xuXG4vKlxuTWFrZSB0aGlzIG5hbWUgdW5pcXVlIHNvIGl0IGlzIHVubGlrZWx5IHRvIGNvbmZsaWN0IHdpdGggcHJvcGVydGllcyBvbiBvYmplY3RzIHBhc3NlZCB0byBgYWRkRXZlbnRMaXN0ZW5lcmBcbmh0dHBzOi8vZ2l0aHViLmNvbS93ZWJjb21wb25lbnRzL3NoYWR5ZG9tL2lzc3Vlcy8xNzNcbiovXG5jb25zdCAvKiogc3RyaW5nICovIGV2ZW50V3JhcHBlcnNOYW1lID0gYF9fZXZlbnRXcmFwcGVycyR7RGF0ZS5ub3coKX1gO1xuXG4vKiogQHR5cGUgez9mdW5jdGlvbighRXZlbnQpOiBib29sZWFufSAqL1xuY29uc3QgY29tcG9zZWRHZXR0ZXIgPSAoKCkgPT4ge1xuICBjb25zdCBjb21wb3NlZFByb3AgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgIEV2ZW50LnByb3RvdHlwZSxcbiAgICAnY29tcG9zZWQnXG4gICk7XG4gIHJldHVybiBjb21wb3NlZFByb3AgPyAoZXYpID0+IGNvbXBvc2VkUHJvcC5nZXQuY2FsbChldikgOiBudWxsO1xufSkoKTtcblxuY29uc3Qgc3VwcG9ydHNFdmVudE9wdGlvbnMgPSAoKCkgPT4ge1xuICBsZXQgc3VwcG9ydGVkID0gZmFsc2U7XG4gIGxldCBldmVudE9wdGlvbnMgPSB7XG4gICAgZ2V0IGNhcHR1cmUoKSB7XG4gICAgICBzdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gIH07XG4gIGNvbnN0IGxpc3RlbmVyID0gKCkgPT4ge307XG4gIC8vIE5PVEU6IFRoZXNlIHdpbGwgYmUgdW5wYXRjaGVkIGF0IHRoaXMgcG9pbnQuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0JywgbGlzdGVuZXIsIGV2ZW50T3B0aW9ucyk7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0ZXN0JywgbGlzdGVuZXIsIGV2ZW50T3B0aW9ucyk7XG4gIHJldHVybiBzdXBwb3J0ZWQ7XG59KSgpO1xuXG5jb25zdCBwYXJzZUV2ZW50T3B0aW9ucyA9IChvcHRpb25zT3JDYXB0dXJlKSA9PiB7XG4gIGxldCBjYXB0dXJlLCBvbmNlLCBzaGFkeVRhcmdldDtcbiAgaWYgKFxuICAgIG9wdGlvbnNPckNhcHR1cmUgIT09IG51bGwgJiZcbiAgICAodHlwZW9mIG9wdGlvbnNPckNhcHR1cmUgPT09ICdvYmplY3QnIHx8XG4gICAgICB0eXBlb2Ygb3B0aW9uc09yQ2FwdHVyZSA9PT0gJ2Z1bmN0aW9uJylcbiAgKSB7XG4gICAgY2FwdHVyZSA9IEJvb2xlYW4ob3B0aW9uc09yQ2FwdHVyZS5jYXB0dXJlKTtcbiAgICBvbmNlID0gQm9vbGVhbihvcHRpb25zT3JDYXB0dXJlLm9uY2UpO1xuICAgIHNoYWR5VGFyZ2V0ID0gb3B0aW9uc09yQ2FwdHVyZS5fX3NoYWR5VGFyZ2V0O1xuICB9IGVsc2Uge1xuICAgIGNhcHR1cmUgPSBCb29sZWFuKG9wdGlvbnNPckNhcHR1cmUpO1xuICAgIG9uY2UgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHNoYWR5VGFyZ2V0LFxuICAgIGNhcHR1cmUsXG4gICAgb25jZSxcbiAgICBuYXRpdmVFdmVudE9wdGlvbnM6IHN1cHBvcnRzRXZlbnRPcHRpb25zID8gb3B0aW9uc09yQ2FwdHVyZSA6IGNhcHR1cmUsXG4gIH07XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdzNjL3dlYmNvbXBvbmVudHMvaXNzdWVzLzUxMyNpc3N1ZWNvbW1lbnQtMjI0MTgzOTM3XG5jb25zdCBhbHdheXNDb21wb3NlZCA9IHtcbiAgJ2JsdXInOiB0cnVlLFxuICAnZm9jdXMnOiB0cnVlLFxuICAnZm9jdXNpbic6IHRydWUsXG4gICdmb2N1c291dCc6IHRydWUsXG4gICdjbGljayc6IHRydWUsXG4gICdkYmxjbGljayc6IHRydWUsXG4gICdtb3VzZWRvd24nOiB0cnVlLFxuICAnbW91c2VlbnRlcic6IHRydWUsXG4gICdtb3VzZWxlYXZlJzogdHJ1ZSxcbiAgJ21vdXNlbW92ZSc6IHRydWUsXG4gICdtb3VzZW91dCc6IHRydWUsXG4gICdtb3VzZW92ZXInOiB0cnVlLFxuICAnbW91c2V1cCc6IHRydWUsXG4gICd3aGVlbCc6IHRydWUsXG4gICdiZWZvcmVpbnB1dCc6IHRydWUsXG4gICdpbnB1dCc6IHRydWUsXG4gICdrZXlkb3duJzogdHJ1ZSxcbiAgJ2tleXVwJzogdHJ1ZSxcbiAgJ2NvbXBvc2l0aW9uc3RhcnQnOiB0cnVlLFxuICAnY29tcG9zaXRpb251cGRhdGUnOiB0cnVlLFxuICAnY29tcG9zaXRpb25lbmQnOiB0cnVlLFxuICAndG91Y2hzdGFydCc6IHRydWUsXG4gICd0b3VjaGVuZCc6IHRydWUsXG4gICd0b3VjaG1vdmUnOiB0cnVlLFxuICAndG91Y2hjYW5jZWwnOiB0cnVlLFxuICAncG9pbnRlcm92ZXInOiB0cnVlLFxuICAncG9pbnRlcmVudGVyJzogdHJ1ZSxcbiAgJ3BvaW50ZXJkb3duJzogdHJ1ZSxcbiAgJ3BvaW50ZXJtb3ZlJzogdHJ1ZSxcbiAgJ3BvaW50ZXJ1cCc6IHRydWUsXG4gICdwb2ludGVyY2FuY2VsJzogdHJ1ZSxcbiAgJ3BvaW50ZXJvdXQnOiB0cnVlLFxuICAncG9pbnRlcmxlYXZlJzogdHJ1ZSxcbiAgJ2dvdHBvaW50ZXJjYXB0dXJlJzogdHJ1ZSxcbiAgJ2xvc3Rwb2ludGVyY2FwdHVyZSc6IHRydWUsXG4gICdkcmFnc3RhcnQnOiB0cnVlLFxuICAnZHJhZyc6IHRydWUsXG4gICdkcmFnZW50ZXInOiB0cnVlLFxuICAnZHJhZ2xlYXZlJzogdHJ1ZSxcbiAgJ2RyYWdvdmVyJzogdHJ1ZSxcbiAgJ2Ryb3AnOiB0cnVlLFxuICAnZHJhZ2VuZCc6IHRydWUsXG4gICdET01BY3RpdmF0ZSc6IHRydWUsXG4gICdET01Gb2N1c0luJzogdHJ1ZSxcbiAgJ0RPTUZvY3VzT3V0JzogdHJ1ZSxcbiAgJ2tleXByZXNzJzogdHJ1ZSxcbn07XG5cbmNvbnN0IHVucGF0Y2hlZEV2ZW50cyA9IHtcbiAgJ0RPTUF0dHJNb2RpZmllZCc6IHRydWUsXG4gICdET01BdHRyaWJ1dGVOYW1lQ2hhbmdlZCc6IHRydWUsXG4gICdET01DaGFyYWN0ZXJEYXRhTW9kaWZpZWQnOiB0cnVlLFxuICAnRE9NRWxlbWVudE5hbWVDaGFuZ2VkJzogdHJ1ZSxcbiAgJ0RPTU5vZGVJbnNlcnRlZCc6IHRydWUsXG4gICdET01Ob2RlSW5zZXJ0ZWRJbnRvRG9jdW1lbnQnOiB0cnVlLFxuICAnRE9NTm9kZVJlbW92ZWQnOiB0cnVlLFxuICAnRE9NTm9kZVJlbW92ZWRGcm9tRG9jdW1lbnQnOiB0cnVlLFxuICAnRE9NU3VidHJlZU1vZGlmaWVkJzogdHJ1ZSxcbn07XG5cbi8qKlxuICogU29tZSBFdmVudFRhcmdldCBzdWJjbGFzc2VzIGFyZSBub3QgTm9kZSBzdWJjbGFzc2VzLCBhbmQgeW91IGNhbm5vdCBjYWxsXG4gKiBgZ2V0Um9vdE5vZGUoKWAgb24gdGhlbS5cbiAqXG4gKiBAcGFyYW0geyEoTm9kZXxFdmVudFRhcmdldCl9IGV2ZW50VGFyZ2V0XG4gKiBAcmV0dXJuIHshKE5vZGV8RXZlbnRUYXJnZXQpfVxuICovXG5mdW5jdGlvbiBnZXRSb290Tm9kZVdpdGhGYWxsYmFjayhldmVudFRhcmdldCkge1xuICBpZiAoZXZlbnRUYXJnZXQgaW5zdGFuY2VvZiBOb2RlKSB7XG4gICAgcmV0dXJuIGV2ZW50VGFyZ2V0W3V0aWxzLlNIQURZX1BSRUZJWCArICdnZXRSb290Tm9kZSddKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGV2ZW50VGFyZ2V0O1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhdGhDb21wb3NlcihzdGFydE5vZGUsIGNvbXBvc2VkKSB7XG4gIGxldCBjb21wb3NlZFBhdGggPSBbXTtcbiAgbGV0IGN1cnJlbnQgPSBzdGFydE5vZGU7XG4gIGxldCBzdGFydFJvb3QgPSBnZXRSb290Tm9kZVdpdGhGYWxsYmFjayhzdGFydE5vZGUpO1xuICB3aGlsZSAoY3VycmVudCkge1xuICAgIGNvbXBvc2VkUGF0aC5wdXNoKGN1cnJlbnQpO1xuICAgIGlmIChjdXJyZW50W3V0aWxzLlNIQURZX1BSRUZJWCArICdhc3NpZ25lZFNsb3QnXSkge1xuICAgICAgY3VycmVudCA9IGN1cnJlbnRbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2Fzc2lnbmVkU2xvdCddO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBjdXJyZW50Lm5vZGVUeXBlID09PSBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUgJiZcbiAgICAgIGN1cnJlbnQuaG9zdCAmJlxuICAgICAgKGNvbXBvc2VkIHx8IGN1cnJlbnQgIT09IHN0YXJ0Um9vdClcbiAgICApIHtcbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lmhvc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50W3V0aWxzLlNIQURZX1BSRUZJWCArICdwYXJlbnROb2RlJ107XG4gICAgfVxuICB9XG4gIC8vIGV2ZW50IGNvbXBvc2VkUGF0aCBpbmNsdWRlcyB3aW5kb3cgd2hlbiBzdGFydE5vZGUncyBvd25lclJvb3QgaXMgZG9jdW1lbnRcbiAgaWYgKGNvbXBvc2VkUGF0aFtjb21wb3NlZFBhdGgubGVuZ3RoIC0gMV0gPT09IGRvY3VtZW50KSB7XG4gICAgY29tcG9zZWRQYXRoLnB1c2god2luZG93KTtcbiAgfVxuICByZXR1cm4gY29tcG9zZWRQYXRoO1xufVxuXG5leHBvcnQgY29uc3QgY29tcG9zZWRQYXRoID0gKGV2ZW50KSA9PiB7XG4gIGlmICghZXZlbnQuX19jb21wb3NlZFBhdGgpIHtcbiAgICBldmVudC5fX2NvbXBvc2VkUGF0aCA9IHBhdGhDb21wb3NlcihldmVudC50YXJnZXQsIHRydWUpO1xuICB9XG4gIHJldHVybiBldmVudC5fX2NvbXBvc2VkUGF0aDtcbn07XG5cbmZ1bmN0aW9uIHJldGFyZ2V0KHJlZk5vZGUsIHBhdGgpIHtcbiAgaWYgKCF1dGlscy5pc1NoYWR5Um9vdCkge1xuICAgIHJldHVybiByZWZOb2RlO1xuICB9XG4gIC8vIElmIEFOQ0VTVE9SJ3Mgcm9vdCBpcyBub3QgYSBzaGFkb3cgcm9vdCBvciBBTkNFU1RPUidzIHJvb3QgaXMgQkFTRSdzXG4gIC8vIHNoYWRvdy1pbmNsdWRpbmcgaW5jbHVzaXZlIGFuY2VzdG9yLCByZXR1cm4gQU5DRVNUT1IuXG4gIGxldCByZWZOb2RlUGF0aCA9IHBhdGhDb21wb3NlcihyZWZOb2RlLCB0cnVlKTtcbiAgbGV0IHAkID0gcGF0aDtcbiAgZm9yIChsZXQgaSA9IDAsIGFuY2VzdG9yLCBsYXN0Um9vdCwgcm9vdCwgcm9vdElkeDsgaSA8IHAkLmxlbmd0aDsgaSsrKSB7XG4gICAgYW5jZXN0b3IgPSBwJFtpXTtcbiAgICByb290ID0gZ2V0Um9vdE5vZGVXaXRoRmFsbGJhY2soYW5jZXN0b3IpO1xuICAgIGlmIChyb290ICE9PSBsYXN0Um9vdCkge1xuICAgICAgcm9vdElkeCA9IHJlZk5vZGVQYXRoLmluZGV4T2Yocm9vdCk7XG4gICAgICBsYXN0Um9vdCA9IHJvb3Q7XG4gICAgfVxuICAgIGlmICghdXRpbHMuaXNTaGFkeVJvb3Qocm9vdCkgfHwgcm9vdElkeCA+IC0xKSB7XG4gICAgICByZXR1cm4gYW5jZXN0b3I7XG4gICAgfVxuICB9XG59XG5cbmxldCBFdmVudFBhdGNoZXMgPSB7XG4gIC8qKlxuICAgKiBAdGhpcyB7RXZlbnR9XG4gICAqL1xuICBnZXQgY29tcG9zZWQoKSB7XG4gICAgaWYgKHRoaXMuX19jb21wb3NlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBpZiB0aGVyZSdzIGFuIG9yaWdpbmFsIGBjb21wb3NlZGAgZ2V0dGVyIG9uIHRoZSBFdmVudCBwcm90b3R5cGUsIHVzZSB0aGF0XG4gICAgICBpZiAoY29tcG9zZWRHZXR0ZXIpIHtcbiAgICAgICAgLy8gVE9ETyh3ZWItcGFkYXdhbik6IHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2ViY29tcG9uZW50cy9zaGFkeWRvbS9pc3N1ZXMvMjc1XG4gICAgICAgIHRoaXMuX19jb21wb3NlZCA9XG4gICAgICAgICAgdGhpcy50eXBlID09PSAnZm9jdXNpbicgfHxcbiAgICAgICAgICB0aGlzLnR5cGUgPT09ICdmb2N1c291dCcgfHxcbiAgICAgICAgICBjb21wb3NlZEdldHRlcih0aGlzKTtcbiAgICAgICAgLy8gSWYgdGhlIGV2ZW50IGlzIHRydXN0ZWQsIG9yIGBpc1RydXN0ZWRgIGlzIG5vdCBzdXBwb3J0ZWQsIGNoZWNrIHRoZSBsaXN0IG9mIGFsd2F5cyBjb21wb3NlZCBldmVudHNcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1RydXN0ZWQgIT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuX19jb21wb3NlZCA9IGFsd2F5c0NvbXBvc2VkW3RoaXMudHlwZV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAvKiogQHR5cGUgeyFFdmVudH0gKi8gKHRoaXMpLl9fY29tcG9zZWQgfHwgZmFsc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEB0aGlzIHtFdmVudH1cbiAgICovXG4gIGNvbXBvc2VkUGF0aCgpIHtcbiAgICBpZiAoIXRoaXMuX19jb21wb3NlZFBhdGgpIHtcbiAgICAgIHRoaXMuX19jb21wb3NlZFBhdGggPSBwYXRoQ29tcG9zZXIodGhpc1snX190YXJnZXQnXSwgdGhpcy5jb21wb3NlZCk7XG4gICAgfVxuICAgIHJldHVybiAvKiogQHR5cGUgeyFFdmVudH0gKi8gKHRoaXMpLl9fY29tcG9zZWRQYXRoO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAdGhpcyB7RXZlbnR9XG4gICAqL1xuICBnZXQgdGFyZ2V0KCkge1xuICAgIHJldHVybiByZXRhcmdldChcbiAgICAgIHRoaXMuY3VycmVudFRhcmdldCB8fCB0aGlzWydfX3ByZXZpb3VzQ3VycmVudFRhcmdldCddLFxuICAgICAgdGhpcy5jb21wb3NlZFBhdGgoKVxuICAgICk7XG4gIH0sXG5cbiAgLy8gaHR0cDovL3czYy5naXRodWIuaW8vd2ViY29tcG9uZW50cy9zcGVjL3NoYWRvdy8jZXZlbnQtcmVsYXRlZHRhcmdldC1yZXRhcmdldGluZ1xuICAvKipcbiAgICogQHRoaXMge0V2ZW50fVxuICAgKi9cbiAgZ2V0IHJlbGF0ZWRUYXJnZXQoKSB7XG4gICAgaWYgKCF0aGlzLl9fcmVsYXRlZFRhcmdldCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICghdGhpcy5fX3JlbGF0ZWRUYXJnZXRDb21wb3NlZFBhdGgpIHtcbiAgICAgIHRoaXMuX19yZWxhdGVkVGFyZ2V0Q29tcG9zZWRQYXRoID0gcGF0aENvbXBvc2VyKFxuICAgICAgICB0aGlzLl9fcmVsYXRlZFRhcmdldCxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgLy8gZmluZCB0aGUgZGVlcGVzdCBub2RlIGluIHJlbGF0ZWRUYXJnZXQgY29tcG9zZWQgcGF0aCB0aGF0IGlzIGluIHRoZSBzYW1lIHJvb3Qgd2l0aCB0aGUgY3VycmVudFRhcmdldFxuICAgIHJldHVybiByZXRhcmdldChcbiAgICAgIHRoaXMuY3VycmVudFRhcmdldCB8fCB0aGlzWydfX3ByZXZpb3VzQ3VycmVudFRhcmdldCddLFxuICAgICAgLyoqIEB0eXBlIHshRXZlbnR9ICovICh0aGlzKS5fX3JlbGF0ZWRUYXJnZXRDb21wb3NlZFBhdGhcbiAgICApO1xuICB9LFxuICAvKipcbiAgICogQHRoaXMge0V2ZW50fVxuICAgKi9cbiAgc3RvcFByb3BhZ2F0aW9uKCkge1xuICAgIEV2ZW50LnByb3RvdHlwZS5zdG9wUHJvcGFnYXRpb24uY2FsbCh0aGlzKTtcbiAgICB0aGlzLl9fcHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTtcbiAgfSxcbiAgLyoqXG4gICAqIEB0aGlzIHtFdmVudH1cbiAgICovXG4gIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpIHtcbiAgICBFdmVudC5wcm90b3R5cGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uLmNhbGwodGhpcyk7XG4gICAgdGhpcy5fX2ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHRydWU7XG4gICAgdGhpcy5fX3Byb3BhZ2F0aW9uU3RvcHBlZCA9IHRydWU7XG4gIH0sXG59O1xuXG4vLyBTb21lIGJyb3dzZXJzIGhhdmUgbWlzc2luZyBvciBicm9rZW4gZGVzY3JpcHRvcnMuIElmIHRoaXMgaXMgdGhlIGNhc2Vcbi8vIGV2ZW50UGhhc2UgY2FuJ3QgYmUgcG9seWZpbGxlZC4gRm9yIGV4YW1wbGUsIENocm9tZSA0MSBkb2VzIG5vdFxuLy8gaGF2ZSBwcm90b3R5cGljYWwgZGVzY3JpcHRvcnMgb24gRE9NIG9iamVjdHMgYW5kIFNhZmFyaSA5IGhhcyBicm9rZW4gb25lc1xuLy8gdGhhdCBjYW5ub3QgYmUgdXNlZC5cbmNvbnN0IGV2ZW50UGhhc2VEZXNjcmlwdG9yID1cbiAgdXRpbHMuc2V0dGluZ3MuaGFzRGVzY3JpcHRvcnMgJiZcbiAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihFdmVudC5wcm90b3R5cGUsICdldmVudFBoYXNlJyk7XG5pZiAoZXZlbnRQaGFzZURlc2NyaXB0b3IpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFxuICAgIEV2ZW50UGF0Y2hlcyxcbiAgICAnZXZlbnRQaGFzZScsXG4gICAgLyoqIEB0eXBlIHshT2JqZWN0UHJvcGVydHlEZXNjcmlwdG9yPCFFdmVudD59ICovICh7XG4gICAgICAvKipcbiAgICAgICAqIEB0aGlzIHtFdmVudH1cbiAgICAgICAqL1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50VGFyZ2V0ID09PSB0aGlzLnRhcmdldFxuICAgICAgICAgID8gRXZlbnQuQVRfVEFSR0VUXG4gICAgICAgICAgOiB0aGlzW3V0aWxzLk5BVElWRV9QUkVGSVggKyAnZXZlbnRQaGFzZSddO1xuICAgICAgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgfSlcbiAgKTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgRXZlbnRQYXRjaGVzLFxuICAgIHV0aWxzLk5BVElWRV9QUkVGSVggKyAnZXZlbnRQaGFzZScsXG4gICAgZXZlbnRQaGFzZURlc2NyaXB0b3JcbiAgKTtcbn1cblxuZnVuY3Rpb24gbWl4aW5Db21wb3NlZEZsYWcoQmFzZSkge1xuICAvLyBOT1RFOiBhdm9pZGluZyB1c2Ugb2YgYGNsYXNzYCBoZXJlIHNvIHRoYXQgdHJhbnNwaWxlZCBvdXRwdXQgZG9lcyBub3RcbiAgLy8gdHJ5IHRvIGRvIGBCYXNlLmNhbGxgIHdpdGggYSBkb20gY29uc3RydXRvci5cbiAgbGV0IGtsYXp6ID0gZnVuY3Rpb24gKHR5cGUsIG9wdGlvbnMpIHtcbiAgICBsZXQgZXZlbnQgPSBuZXcgQmFzZSh0eXBlLCBvcHRpb25zKTtcbiAgICBldmVudC5fX2NvbXBvc2VkID0gb3B0aW9ucyAmJiBCb29sZWFuKG9wdGlvbnNbJ2NvbXBvc2VkJ10pO1xuICAgIHJldHVybiBldmVudDtcbiAgfTtcbiAgLy8gcHV0IGNvbnN0cnVjdG9yIHByb3BlcnRpZXMgb24gc3ViY2xhc3NcbiAga2xhenouX19wcm90b19fID0gQmFzZTtcbiAga2xhenoucHJvdG90eXBlID0gQmFzZS5wcm90b3R5cGU7XG4gIHJldHVybiBrbGF6ejtcbn1cblxubGV0IG5vbkJ1YmJsaW5nRXZlbnRzVG9SZXRhcmdldCA9IHtcbiAgJ2ZvY3VzJzogdHJ1ZSxcbiAgJ2JsdXInOiB0cnVlLFxufTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZXZlbnQgaGFzIGJlZW4gcmV0YXJnZXRlZCBieSBjb21wYXJpbmcgb3JpZ2luYWwgYHRhcmdldGAsIGFuZCBjYWxjdWxhdGVkIGB0YXJnZXRgXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgb3JpZ2luYWwgdGFyZ2V0IGFuZCBjYWxjdWxhdGVkIHRhcmdldCBhcmUgdGhlIHNhbWVcbiAqL1xuZnVuY3Rpb24gaGFzUmV0YXJnZXRlZChldmVudCkge1xuICByZXR1cm4gKFxuICAgIGV2ZW50WydfX3RhcmdldCddICE9PSBldmVudC50YXJnZXQgfHxcbiAgICBldmVudC5fX3JlbGF0ZWRUYXJnZXQgIT09IGV2ZW50LnJlbGF0ZWRUYXJnZXRcbiAgKTtcbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IHBoYXNlXG4gKi9cbmZ1bmN0aW9uIGZpcmVIYW5kbGVycyhldmVudCwgbm9kZSwgcGhhc2UpIHtcbiAgbGV0IGhzID1cbiAgICBub2RlLl9faGFuZGxlcnMgJiZcbiAgICBub2RlLl9faGFuZGxlcnNbZXZlbnQudHlwZV0gJiZcbiAgICBub2RlLl9faGFuZGxlcnNbZXZlbnQudHlwZV1bcGhhc2VdO1xuICBpZiAoaHMpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgZm47IChmbiA9IGhzW2ldKTsgaSsrKSB7XG4gICAgICBpZiAoaGFzUmV0YXJnZXRlZChldmVudCkgJiYgZXZlbnQudGFyZ2V0ID09PSBldmVudC5yZWxhdGVkVGFyZ2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZuLmNhbGwobm9kZSwgZXZlbnQpO1xuICAgICAgaWYgKGV2ZW50Ll9faW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gSW4gQ2hyb21lIDQxLCBgY3VycmVudFRhcmdldGAgaXMgYW4gb3duIHByb3BlcnR5IG9mIGV2ZXJ5IGBFdmVudGAgYW5kIGl0c1xuLy8gZGVzY3JpcHRvciBpcyBhIF9kYXRhXyBkZXNjcmlwdG9yIGFuZCBub3QgYW4gYWNjZXNzb3IgZGVzY3JpcHRvciAoc28gdGhlcmUgaXNcbi8vIG5vIGdldHRlciB0aGF0IGNvdWxkIGJlIHNhdmVkIGFuZCB3cmFwcGVkKSBidXQgdGhlIGJyb3dzZXIgZWZmZWN0aXZlbHkgdHJlYXRzXG4vLyB0aGlzIHByb3BlcnR5IGFzIGlmIGl0IGhhZCBhIGdldHRlciBhbmQgcmV0dXJucyBkaWZmZXJlbnQgdmFsdWVzIG9uIGdldHRpbmdcbi8vIGFzIG5lY2Vzc2FyeS4gRnVydGhlciwgc2V0dGluZyBhIG5ldyBkZXNjcmlwdG9yIGZvciBgY3VycmVudFRhcmdldGAsIGFzXG4vLyBgc2hhZHlEaXNwYXRjaEV2ZW50YCBkb2VzIGJlbG93LCBwZXJtYW5lbnRseSBicmVha3MgdGhpcyBzcGVjaWFsIGRlc2NyaXB0b3Jcbi8vIGJlaGF2aW9yLiBJbiB0aGlzIGNhc2UsIGBzaGFkeURpc3BhdGNoRXZlbnRgIGNyZWF0ZXMgYSBuZXcgb2JqZWN0IHdpdGggdGhlXG4vLyBvcmlnaW5hbCBldmVudCBhcyBpdHMgcHJvdG90eXBlICh2aWEgYE9iamVjdC5jcmVhdGVgKSBhbmQgbW9kaWZpZXMgdGhhdFxuLy8gb2JqZWN0J3MgYGN1cnJlbnRUYXJnZXRgIGluc3RlYWQsIHRvIGF2b2lkIGJyZWFraW5nIHRoZSBkZXNjcmlwdG9yIG9uIHRoZVxuLy8gb3JpZ2luYWwgZXZlbnQuXG4vL1xuLy8gSW4gQ2hyb21lIDEwNCBhbmQgU2FmYXJpIDksIHNvbWUgZ2V0dGVycyBvbiBldmVudHMgZG8gbm90IGFsbG93IGB0aGlzYCB0byBiZVxuLy8gYW55dGhpbmcgb3RoZXIgdGhhbiBleGFjdGx5IHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3QuIFRoaXMgbWVhbnMgdGhhdCB0aGVcbi8vIGFib3ZlIHByb2Nlc3Mgb2YgdXNpbmcgYSBwcm94eS1saWtlIChub3QgYSBgUHJveHlgKSBvYmplY3QgZm9yIHRoZSBldmVudFxuLy8gZmFpbHMgYmVjYXVzZSBhbnkgdXNlciB0aGF0IGF0dGVtcHRzIHRvIHVzZSBwcm9wZXJ0aWVzIG9mIHRoZSBvcmlnaW5hbCBldmVudFxuLy8gd2lsbCBiZSB1c2luZyB0aGUgcHJveHkgYXMgYHRoaXNgLlxuLy9cbi8vIEZvcnR1bmF0ZWx5LCB0aGVzZSB0d28gaXNzdWVzIHNlZW0gdG8gYmUgbXV0dWFsbHkgZXhjbHVzaXZlIGFtb25nc3QgdGhlXG4vLyBicm93c2VycyB0aGF0IHdlIHRlc3Qgb24sIHNvIHdlIGNhbiBzcGVjaWZpY2FsbHkgY2hlY2sgaWYgYGN1cnJlbnRUYXJnZXRgXG4vLyBleGlzdHMgb24gYSBuZXcgYEV2ZW50YCBhbmQgc3dpdGNoIGJhc2VkIG9mZiBvZiB0aGF0LlxuLy8gYHV0aWxzLnNldHRpbmdzLmhhc0Rlc2NyaXB0b3JzYCBpcyBub3Qgc3VmZmljaWVudCBmb3IgZGVjaWRpbmcgdGhpcyBiZWhhdmlvclxuLy8gYmVjYXVzZSwgaW4gU2FmYXJpIDksIGBjdXJyZW50VGFyZ2V0YCBpcyBub3QgYW4gb3duIHByb3BlcnR5IG9mIGV2ZW50cywgYnV0XG4vLyBgLmhhc0Rlc2NyaXB0b3JzYCBpcyBzdGlsbCBmYWxzZS5cbmNvbnN0IHNoYWR5RGlzcGF0Y2hFdmVudE5lZWRzUHJveHlFdmVudCA9IG5ldyBFdmVudCgnZScpLmhhc093blByb3BlcnR5KFxuICAnY3VycmVudFRhcmdldCdcbik7XG5cbmZ1bmN0aW9uIHNoYWR5RGlzcGF0Y2hFdmVudChvcmlnaW5hbEV2ZW50KSB7XG4gIGNvbnN0IGUgPSBzaGFkeURpc3BhdGNoRXZlbnROZWVkc1Byb3h5RXZlbnRcbiAgICA/IE9iamVjdC5jcmVhdGUob3JpZ2luYWxFdmVudClcbiAgICA6IG9yaWdpbmFsRXZlbnQ7XG4gIGNvbnN0IHBhdGggPSBlLmNvbXBvc2VkUGF0aCgpO1xuICBjb25zdCByZXRhcmdldGVkUGF0aCA9IHBhdGgubWFwKChub2RlKSA9PiByZXRhcmdldChub2RlLCBwYXRoKSk7XG4gIGNvbnN0IGJ1YmJsZXMgPSBlLmJ1YmJsZXM7XG5cbiAgbGV0IGN1cnJlbnRUYXJnZXQ7XG4gIC8vIG92ZXJyaWRlIGBjdXJyZW50VGFyZ2V0YCB0byBsZXQgcGF0Y2hlZCBgdGFyZ2V0YCBjYWxjdWxhdGUgY29ycmVjdGx5XG4gIGNvbnN0IHByZXZDdXJyZW50VGFyZ2V0RGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXG4gICAgZSxcbiAgICAnY3VycmVudFRhcmdldCdcbiAgKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsICdjdXJyZW50VGFyZ2V0Jywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGN1cnJlbnRUYXJnZXQ7XG4gICAgfSxcbiAgfSk7XG5cbiAgbGV0IGV2ZW50UGhhc2UgPSBFdmVudC5DQVBUVVJJTkdfUEhBU0U7XG4gIGNvbnN0IHByZXZFdmVudFBoYXNlRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgJ2V2ZW50UGhhc2UnKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsICdldmVudFBoYXNlJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGV2ZW50UGhhc2U7XG4gICAgfSxcbiAgfSk7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKGxldCBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY3VycmVudFRhcmdldCA9IHBhdGhbaV07XG4gICAgICBldmVudFBoYXNlID1cbiAgICAgICAgY3VycmVudFRhcmdldCA9PT0gcmV0YXJnZXRlZFBhdGhbaV1cbiAgICAgICAgICA/IEV2ZW50LkFUX1RBUkdFVFxuICAgICAgICAgIDogRXZlbnQuQ0FQVFVSSU5HX1BIQVNFO1xuICAgICAgLy8gY2FwdHVyZSBwaGFzZSBmaXJlcyBhbGwgY2FwdHVyZSBoYW5kbGVyc1xuICAgICAgZmlyZUhhbmRsZXJzKGUsIGN1cnJlbnRUYXJnZXQsICdjYXB0dXJlJyk7XG4gICAgICBpZiAoZS5fX3Byb3BhZ2F0aW9uU3RvcHBlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50VGFyZ2V0ID0gcGF0aFtpXTtcbiAgICAgIGNvbnN0IGF0VGFyZ2V0ID0gY3VycmVudFRhcmdldCA9PT0gcmV0YXJnZXRlZFBhdGhbaV07XG4gICAgICBpZiAoYXRUYXJnZXQgfHwgYnViYmxlcykge1xuICAgICAgICBldmVudFBoYXNlID0gYXRUYXJnZXQgPyBFdmVudC5BVF9UQVJHRVQgOiBFdmVudC5CVUJCTElOR19QSEFTRTtcbiAgICAgICAgZmlyZUhhbmRsZXJzKGUsIGN1cnJlbnRUYXJnZXQsICdidWJibGUnKTtcbiAgICAgICAgaWYgKGUuX19wcm9wYWdhdGlvblN0b3BwZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKCFzaGFkeURpc3BhdGNoRXZlbnROZWVkc1Byb3h5RXZlbnQpIHtcbiAgICAgIC8vIFJlc3RvcmUgcHJldmlvdXMgY3VycmVudFRhcmdldCAmIGV2ZW50UGhhc2UgZGVzY3JpcHRvcnMgd2hlblxuICAgICAgLy8gZGlzcGF0Y2hpbmcgaXMgY29tcGxldGVcbiAgICAgIGlmIChwcmV2Q3VycmVudFRhcmdldERlc2MpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsICdjdXJyZW50VGFyZ2V0JywgcHJldkN1cnJlbnRUYXJnZXREZXNjKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbGV0ZSBlWydjdXJyZW50VGFyZ2V0J107XG4gICAgICB9XG4gICAgICBpZiAocHJldkV2ZW50UGhhc2VEZXNjKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCAnZXZlbnRQaGFzZScsIHByZXZFdmVudFBoYXNlRGVzYyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGUgZVsnZXZlbnRQaGFzZSddO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBsaXN0ZW5lclNldHRpbmdzRXF1YWwoc2F2ZWRMaXN0ZW5lciwgbm9kZSwgdHlwZSwgY2FwdHVyZSkge1xuICBsZXQge25vZGU6IHNhdmVkTm9kZSwgdHlwZTogc2F2ZWRUeXBlLCBjYXB0dXJlOiBzYXZlZENhcHR1cmV9ID0gc2F2ZWRMaXN0ZW5lcjtcbiAgcmV0dXJuIG5vZGUgPT09IHNhdmVkTm9kZSAmJiB0eXBlID09PSBzYXZlZFR5cGUgJiYgY2FwdHVyZSA9PT0gc2F2ZWRDYXB0dXJlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZExpc3RlbmVyKHdyYXBwZXJzLCBub2RlLCB0eXBlLCBjYXB0dXJlKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgd3JhcHBlcnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobGlzdGVuZXJTZXR0aW5nc0VxdWFsKHdyYXBwZXJzW2ldLCBub2RlLCB0eXBlLCBjYXB0dXJlKSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBGaXJlZm94IGNhbiB0aHJvdyBvbiBhY2Nlc3NpbmcgZXZlbnRXcmFwcGVycyBpbnNpZGUgb2YgYHJlbW92ZUV2ZW50TGlzdGVuZXJgIGR1cmluZyBhIHNlbGVuaXVtIHJ1blxuICogVHJ5L0NhdGNoIGFjY2Vzc2luZyBldmVudFdyYXBwZXJzIHRvIHdvcmsgYXJvdW5kXG4gKiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzUzMDc0XG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50V3JhcHBlcnMoZXZlbnRMaWtlKSB7XG4gIGxldCB3cmFwcGVycyA9IG51bGw7XG4gIHRyeSB7XG4gICAgd3JhcHBlcnMgPSBldmVudExpa2VbZXZlbnRXcmFwcGVyc05hbWVdO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gIHJldHVybiB3cmFwcGVycztcbn1cblxuZnVuY3Rpb24gdGFyZ2V0TmVlZHNQYXRoQ2hlY2sobm9kZSkge1xuICByZXR1cm4gdXRpbHMuaXNTaGFkeVJvb3Qobm9kZSkgfHwgbm9kZS5sb2NhbE5hbWUgPT09ICdzbG90Jztcbn1cblxuLyoqIEB0aGlzIHtOb2RlfSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoZXZlbnQpIHtcbiAgZmx1c2goKTtcbiAgLy8gSWYgdGhlIHRhcmdldCBpcyBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgcmVhbCBkb2N1bWVudCwgaXQgbWlnaHQgc3RpbGwgYmVcbiAgLy8gY29ubmVjdGVkIGluIHRoZSB1c2VyLWZhY2luZyB0cmVlLiBUbyBhbGxvdyBpdHMgcGF0aCB0byBwb3RlbnRpYWxseVxuICAvLyBpbmNsdWRlIGJvdGggY29ubmVjdGVkIGFuZCBkaXNjb25uZWN0ZWQgcGFydHMsIGRpc3BhdGNoIGl0IG1hbnVhbGx5LlxuICBpZiAoXG4gICAgIXV0aWxzLnNldHRpbmdzLnByZWZlclBlcmZvcm1hbmNlICYmXG4gICAgdGhpcyBpbnN0YW5jZW9mIE5vZGUgJiZcbiAgICAhdXRpbHMuZG9jdW1lbnRDb250YWlucyhkb2N1bWVudCwgdGhpcylcbiAgKSB7XG4gICAgaWYgKCFldmVudFsnX190YXJnZXQnXSkge1xuICAgICAgcGF0Y2hFdmVudChldmVudCwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiBzaGFkeURpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aGlzW3V0aWxzLk5BVElWRV9QUkVGSVggKyAnZGlzcGF0Y2hFdmVudCddKGV2ZW50KTtcbiAgfVxufVxuXG4vKipcbiAqIEB0aGlzIHtFdmVudFRhcmdldH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZm5Pck9iaiwgb3B0aW9uc09yQ2FwdHVyZSkge1xuICBjb25zdCB7Y2FwdHVyZSwgb25jZSwgc2hhZHlUYXJnZXQsIG5hdGl2ZUV2ZW50T3B0aW9uc30gPSBwYXJzZUV2ZW50T3B0aW9ucyhcbiAgICBvcHRpb25zT3JDYXB0dXJlXG4gICk7XG4gIGlmICghZm5Pck9iaikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGhhbmRsZXJUeXBlID0gdHlwZW9mIGZuT3JPYmo7XG5cbiAgLy8gYmFpbCBpZiBgZm5Pck9iamAgaXMgbm90IGEgZnVuY3Rpb24sIG5vdCBhbiBvYmplY3RcbiAgaWYgKGhhbmRsZXJUeXBlICE9PSAnZnVuY3Rpb24nICYmIGhhbmRsZXJUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGJhaWwgaWYgYGZuT3JPYmpgIGlzIGFuIG9iamVjdCB3aXRob3V0IGEgYGhhbmRsZUV2ZW50YCBtZXRob2RcbiAgaWYgKFxuICAgIGhhbmRsZXJUeXBlID09PSAnb2JqZWN0JyAmJlxuICAgICghZm5Pck9iai5oYW5kbGVFdmVudCB8fCB0eXBlb2YgZm5Pck9iai5oYW5kbGVFdmVudCAhPT0gJ2Z1bmN0aW9uJylcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHVucGF0Y2hlZEV2ZW50c1t0eXBlXSkge1xuICAgIHJldHVybiB0aGlzW3V0aWxzLk5BVElWRV9QUkVGSVggKyAnYWRkRXZlbnRMaXN0ZW5lciddKFxuICAgICAgdHlwZSxcbiAgICAgIGZuT3JPYmosXG4gICAgICBuYXRpdmVFdmVudE9wdGlvbnNcbiAgICApO1xuICB9XG5cbiAgLy8gaGFjayB0byBsZXQgU2hhZHlSb290cyBoYXZlIGV2ZW50IGxpc3RlbmVyc1xuICAvLyBldmVudCBsaXN0ZW5lciB3aWxsIGJlIG9uIGhvc3QsIGJ1dCBgY3VycmVudFRhcmdldGBcbiAgLy8gd2lsbCBiZSBzZXQgdG8gc2hhZHlyb290IGZvciBldmVudCBsaXN0ZW5lclxuICBsZXQgdGFyZ2V0ID0gc2hhZHlUYXJnZXQgfHwgdGhpcztcblxuICBsZXQgd3JhcHBlcnMgPSBmbk9yT2JqW2V2ZW50V3JhcHBlcnNOYW1lXTtcbiAgaWYgKHdyYXBwZXJzKSB7XG4gICAgLy8gVGhlIGNhbGxiYWNrIGBmbmAgbWlnaHQgYmUgdXNlZCBmb3IgbXVsdGlwbGUgbm9kZXMvZXZlbnRzLiBTaW5jZSB3ZSBnZW5lcmF0ZVxuICAgIC8vIGEgd3JhcHBlciBmdW5jdGlvbiwgd2UgbmVlZCB0byBrZWVwIHRyYWNrIG9mIGl0IHdoZW4gd2UgcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAgICAvLyBJdCdzIG1vcmUgZWZmaWNpZW50IHRvIHN0b3JlIHRoZSBub2RlL3R5cGUvb3B0aW9ucyBpbmZvcm1hdGlvbiBhcyBBcnJheSBpblxuICAgIC8vIGBmbmAgaXRzZWxmIHJhdGhlciB0aGFuIHRoZSBub2RlICh3ZSBhc3N1bWUgdGhhdCB0aGUgc2FtZSBjYWxsYmFjayBpcyB1c2VkXG4gICAgLy8gZm9yIGZldyBub2RlcyBhdCBtb3N0LCB3aGVyZWFzIGEgbm9kZSB3aWxsIGxpa2VseSBoYXZlIG1hbnkgZXZlbnQgbGlzdGVuZXJzKS5cbiAgICAvLyBOT1RFKHZhbGRyaW4pIGludm9raW5nIGV4dGVybmFsIGZ1bmN0aW9ucyBpcyBjb3N0bHksIGlubGluZSBoYXMgYmV0dGVyIHBlcmYuXG4gICAgLy8gU3RvcCBpZiB0aGUgd3JhcHBlciBmdW5jdGlvbiBoYXMgYWxyZWFkeSBiZWVuIGNyZWF0ZWQuXG4gICAgaWYgKGZpbmRMaXN0ZW5lcih3cmFwcGVycywgdGFyZ2V0LCB0eXBlLCBjYXB0dXJlKSA+IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZuT3JPYmpbZXZlbnRXcmFwcGVyc05hbWVdID0gW107XG4gIH1cblxuICAvKipcbiAgICogQHRoaXMge0V2ZW50VGFyZ2V0fVxuICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAqL1xuICBjb25zdCB3cmFwcGVyRm4gPSAoZSkgPT4ge1xuICAgIC8vIFN1cHBvcnQgYG9uY2VgIG9wdGlvbi5cbiAgICBpZiAob25jZSkge1xuICAgICAgdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAncmVtb3ZlRXZlbnRMaXN0ZW5lciddKFxuICAgICAgICB0eXBlLFxuICAgICAgICBmbk9yT2JqLFxuICAgICAgICBvcHRpb25zT3JDYXB0dXJlXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWVbJ19fdGFyZ2V0J10pIHtcbiAgICAgIHBhdGNoRXZlbnQoZSk7XG4gICAgfVxuICAgIGxldCBsYXN0Q3VycmVudFRhcmdldERlc2M7XG4gICAgbGV0IGxhc3RFdmVudFBoYXNlRGVzYztcbiAgICBpZiAodGFyZ2V0ICE9PSB0aGlzKSB7XG4gICAgICAvLyByZXBsYWNlIGBjdXJyZW50VGFyZ2V0YCB0byBtYWtlIGB0YXJnZXRgIGFuZCBgcmVsYXRlZFRhcmdldGAgY29ycmVjdCBmb3IgaW5zaWRlIHRoZSBzaGFkb3dyb290XG4gICAgICBsYXN0Q3VycmVudFRhcmdldERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICAgICAgICBlLFxuICAgICAgICAnY3VycmVudFRhcmdldCdcbiAgICAgICk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgJ2N1cnJlbnRUYXJnZXQnLCB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgICB9LFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIGxhc3RFdmVudFBoYXNlRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgJ2V2ZW50UGhhc2UnKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCAnZXZlbnRQaGFzZScsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgLy8gU2hhZHkgRE9NIGRvZXNuJ3Qgc3VwcG9ydCBkaXNwYXRjaGluZyB0byBhIHNoYWRvdyByb290IGFzIHRoZVxuICAgICAgICAgIC8vIHRhcmdldCwgc28gd2UgZG9uJ3QgbmVlZCB0byBoYW5kbGUgRXZlbnQuQVRfVEFSR0VULlxuICAgICAgICAgIHJldHVybiBjYXB0dXJlID8gRXZlbnQuQ0FQVFVSSU5HX1BIQVNFIDogRXZlbnQuQlVCQkxJTkdfUEhBU0U7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG4gICAgZVsnX19wcmV2aW91c0N1cnJlbnRUYXJnZXQnXSA9IGVbJ2N1cnJlbnRUYXJnZXQnXTtcbiAgICAvLyBBbHdheXMgY2hlY2sgaWYgYSBzaGFkb3dSb290IG9yIHNsb3QgaXMgaW4gdGhlIGN1cnJlbnQgZXZlbnQgcGF0aC5cbiAgICAvLyBJZiBpdCBpcyBub3QsIHRoZSBldmVudCB3YXMgZ2VuZXJhdGVkIG9uIGVpdGhlciB0aGUgaG9zdCBvZiB0aGUgc2hhZG93Um9vdFxuICAgIC8vIG9yIGEgY2hpbGRyZW4gb2YgdGhlIGhvc3QuXG4gICAgaWYgKFxuICAgICAgdGFyZ2V0TmVlZHNQYXRoQ2hlY2sodGFyZ2V0KSAmJlxuICAgICAgZS5jb21wb3NlZFBhdGgoKS5pbmRleE9mKHRhcmdldCkgPT0gLTFcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gVGhlcmUgYXJlIHR3byBjcml0ZXJhIHRoYXQgc2hvdWxkIHN0b3AgZXZlbnRzIGZyb20gZmlyaW5nIG9uIHRoaXMgbm9kZVxuICAgIC8vIDEuIHRoZSBldmVudCBpcyBub3QgY29tcG9zZWQgYW5kIHRoZSBjdXJyZW50IG5vZGUgaXMgbm90IGluIHRoZSBzYW1lIHJvb3QgYXMgdGhlIHRhcmdldFxuICAgIC8vIDIuIHdoZW4gYnViYmxpbmcsIGlmIGFmdGVyIHJldGFyZ2V0aW5nLCByZWxhdGVkVGFyZ2V0IGFuZCB0YXJnZXQgcG9pbnQgdG8gdGhlIHNhbWUgbm9kZVxuICAgIGlmIChlLmNvbXBvc2VkIHx8IGUuY29tcG9zZWRQYXRoKCkuaW5kZXhPZih0YXJnZXQpID4gLTEpIHtcbiAgICAgIGlmIChoYXNSZXRhcmdldGVkKGUpICYmIGUudGFyZ2V0ID09PSBlLnJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgICAgaWYgKGUuZXZlbnRQaGFzZSA9PT0gRXZlbnQuQlVCQkxJTkdfUEhBU0UpIHtcbiAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIHByZXZlbnQgbm9uLWJ1YmJsaW5nIGV2ZW50cyBmcm9tIHRyaWdnZXJpbmcgYnViYmxpbmcgaGFuZGxlcnMgb24gc2hhZG93cm9vdCwgYnV0IG9ubHkgaWYgbm90IGluIGNhcHR1cmUgcGhhc2VcbiAgICAgIGlmIChcbiAgICAgICAgZS5ldmVudFBoYXNlICE9PSBFdmVudC5DQVBUVVJJTkdfUEhBU0UgJiZcbiAgICAgICAgIWUuYnViYmxlcyAmJlxuICAgICAgICBlLnRhcmdldCAhPT0gdGFyZ2V0ICYmXG4gICAgICAgICEodGFyZ2V0IGluc3RhbmNlb2YgV2luZG93KVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCByZXQgPVxuICAgICAgICBoYW5kbGVyVHlwZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgID8gZm5Pck9iai5jYWxsKHRhcmdldCwgZSlcbiAgICAgICAgICA6IGZuT3JPYmouaGFuZGxlRXZlbnQgJiYgZm5Pck9iai5oYW5kbGVFdmVudChlKTtcbiAgICAgIGlmICh0YXJnZXQgIT09IHRoaXMpIHtcbiAgICAgICAgLy8gUmVwbGFjZSB0aGUgb3JpZ2luYWwgZGVzY3JpcHRvcnMgZm9yIGBjdXJyZW50VGFyZ2V0YCBhbmQgYGV2ZW50UGhhc2VgLlxuICAgICAgICBpZiAobGFzdEN1cnJlbnRUYXJnZXREZXNjKSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsICdjdXJyZW50VGFyZ2V0JywgbGFzdEN1cnJlbnRUYXJnZXREZXNjKTtcbiAgICAgICAgICBsYXN0Q3VycmVudFRhcmdldERlc2MgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBlWydjdXJyZW50VGFyZ2V0J107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhc3RFdmVudFBoYXNlRGVzYykge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCAnZXZlbnRQaGFzZScsIGxhc3RFdmVudFBoYXNlRGVzYyk7XG4gICAgICAgICAgbGFzdEV2ZW50UGhhc2VEZXNjID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZVsnZXZlbnRQaGFzZSddO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgfTtcblxuICAvLyBTdG9yZSB0aGUgd3JhcHBlciBpbmZvcm1hdGlvbi5cbiAgZm5Pck9ialtldmVudFdyYXBwZXJzTmFtZV0ucHVzaCh7XG4gICAgLy8gbm90ZTogdXNlIHRhcmdldCBoZXJlIHdoaWNoIGlzIGVpdGhlciBhIHNoYWRvd1Jvb3RcbiAgICAvLyAod2hlbiB0aGUgaG9zdCBlbGVtZW50IGlzIHByb3h5J2luZyB0aGUgZXZlbnQpIG9yIHRoaXMgZWxlbWVudFxuICAgIG5vZGU6IHRhcmdldCxcbiAgICB0eXBlLFxuICAgIGNhcHR1cmUsXG4gICAgd3JhcHBlckZuLFxuICB9KTtcblxuICB0aGlzLl9faGFuZGxlcnMgPSB0aGlzLl9faGFuZGxlcnMgfHwge307XG4gIHRoaXMuX19oYW5kbGVyc1t0eXBlXSA9IHRoaXMuX19oYW5kbGVyc1t0eXBlXSB8fCB7XG4gICAgJ2NhcHR1cmUnOiBbXSxcbiAgICAnYnViYmxlJzogW10sXG4gIH07XG4gIHRoaXMuX19oYW5kbGVyc1t0eXBlXVtjYXB0dXJlID8gJ2NhcHR1cmUnIDogJ2J1YmJsZSddLnB1c2god3JhcHBlckZuKTtcblxuICBpZiAoIW5vbkJ1YmJsaW5nRXZlbnRzVG9SZXRhcmdldFt0eXBlXSkge1xuICAgIHRoaXNbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdhZGRFdmVudExpc3RlbmVyJ10oXG4gICAgICB0eXBlLFxuICAgICAgd3JhcHBlckZuLFxuICAgICAgbmF0aXZlRXZlbnRPcHRpb25zXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEB0aGlzIHtFdmVudFRhcmdldH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZm5Pck9iaiwgb3B0aW9uc09yQ2FwdHVyZSkge1xuICBpZiAoIWZuT3JPYmopIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qge2NhcHR1cmUsIHNoYWR5VGFyZ2V0LCBuYXRpdmVFdmVudE9wdGlvbnN9ID0gcGFyc2VFdmVudE9wdGlvbnMoXG4gICAgb3B0aW9uc09yQ2FwdHVyZVxuICApO1xuICBpZiAodW5wYXRjaGVkRXZlbnRzW3R5cGVdKSB7XG4gICAgcmV0dXJuIHRoaXNbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdyZW1vdmVFdmVudExpc3RlbmVyJ10oXG4gICAgICB0eXBlLFxuICAgICAgZm5Pck9iaixcbiAgICAgIG5hdGl2ZUV2ZW50T3B0aW9uc1xuICAgICk7XG4gIH1cbiAgbGV0IHRhcmdldCA9IHNoYWR5VGFyZ2V0IHx8IHRoaXM7XG4gIC8vIFNlYXJjaCB0aGUgd3JhcHBlZCBmdW5jdGlvbi5cbiAgbGV0IHdyYXBwZXJGbiA9IHVuZGVmaW5lZDtcbiAgbGV0IHdyYXBwZXJzID0gZ2V0RXZlbnRXcmFwcGVycyhmbk9yT2JqKTtcbiAgaWYgKHdyYXBwZXJzKSB7XG4gICAgbGV0IGlkeCA9IGZpbmRMaXN0ZW5lcih3cmFwcGVycywgdGFyZ2V0LCB0eXBlLCBjYXB0dXJlKTtcbiAgICBpZiAoaWR4ID4gLTEpIHtcbiAgICAgIHdyYXBwZXJGbiA9IHdyYXBwZXJzLnNwbGljZShpZHgsIDEpWzBdLndyYXBwZXJGbjtcbiAgICAgIC8vIENsZWFudXAuXG4gICAgICBpZiAoIXdyYXBwZXJzLmxlbmd0aCkge1xuICAgICAgICBmbk9yT2JqW2V2ZW50V3JhcHBlcnNOYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdGhpc1t1dGlscy5OQVRJVkVfUFJFRklYICsgJ3JlbW92ZUV2ZW50TGlzdGVuZXInXShcbiAgICB0eXBlLFxuICAgIHdyYXBwZXJGbiB8fCBmbk9yT2JqLFxuICAgIG5hdGl2ZUV2ZW50T3B0aW9uc1xuICApO1xuICBpZiAod3JhcHBlckZuICYmIHRoaXMuX19oYW5kbGVycyAmJiB0aGlzLl9faGFuZGxlcnNbdHlwZV0pIHtcbiAgICBjb25zdCBhcnIgPSB0aGlzLl9faGFuZGxlcnNbdHlwZV1bY2FwdHVyZSA/ICdjYXB0dXJlJyA6ICdidWJibGUnXTtcbiAgICBjb25zdCBpZHggPSBhcnIuaW5kZXhPZih3cmFwcGVyRm4pO1xuICAgIGlmIChpZHggPiAtMSkge1xuICAgICAgYXJyLnNwbGljZShpZHgsIDEpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhY3RpdmF0ZUZvY3VzRXZlbnRPdmVycmlkZXMoKSB7XG4gIGZvciAobGV0IGV2IGluIG5vbkJ1YmJsaW5nRXZlbnRzVG9SZXRhcmdldCkge1xuICAgIHdpbmRvd1t1dGlscy5OQVRJVkVfUFJFRklYICsgJ2FkZEV2ZW50TGlzdGVuZXInXShcbiAgICAgIGV2LFxuICAgICAgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCFlWydfX3RhcmdldCddKSB7XG4gICAgICAgICAgcGF0Y2hFdmVudChlKTtcbiAgICAgICAgICBzaGFkeURpc3BhdGNoRXZlbnQoZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0cnVlXG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBFdmVudFBhdGNoZXNEZXNjcmlwdG9ycyA9IHV0aWxzLmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoRXZlbnRQYXRjaGVzKTtcblxuY29uc3QgU0hBRFlfUFJPVE8gPSAnX19zaGFkeV9wYXRjaGVkUHJvdG8nO1xuY29uc3QgU0hBRFlfU09VUkNFX1BST1RPID0gJ19fc2hhZHlfc291cmNlUHJvdG8nO1xuXG5mdW5jdGlvbiBwYXRjaEV2ZW50KGV2ZW50LCB0YXJnZXQgPSBldmVudC50YXJnZXQpIHtcbiAgZXZlbnRbJ19fdGFyZ2V0J10gPSB0YXJnZXQ7XG4gIGV2ZW50Ll9fcmVsYXRlZFRhcmdldCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gIC8vIGF0dGVtcHQgdG8gcGF0Y2ggcHJvdG90eXBlICh2aWEgY2FjaGUpXG4gIGlmICh1dGlscy5zZXR0aW5ncy5oYXNEZXNjcmlwdG9ycykge1xuICAgIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGV2ZW50KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgaWYgKCFwcm90by5oYXNPd25Qcm9wZXJ0eShTSEFEWV9QUk9UTykpIHtcbiAgICAgIGNvbnN0IHBhdGNoZWRQcm90byA9IE9iamVjdC5jcmVhdGUocHJvdG8pO1xuICAgICAgcGF0Y2hlZFByb3RvW1NIQURZX1NPVVJDRV9QUk9UT10gPSBwcm90bztcbiAgICAgIHV0aWxzLnBhdGNoUHJvcGVydGllcyhwYXRjaGVkUHJvdG8sIEV2ZW50UGF0Y2hlc0Rlc2NyaXB0b3JzKTtcbiAgICAgIHByb3RvW1NIQURZX1BST1RPXSA9IHBhdGNoZWRQcm90bztcbiAgICB9XG4gICAgZXZlbnQuX19wcm90b19fID0gcHJvdG9bU0hBRFlfUFJPVE9dO1xuICAgIC8vIGFuZCBmYWxsYmFjayB0byBwYXRjaGluZyBpbnN0YW5jZVxuICB9IGVsc2Uge1xuICAgIHV0aWxzLnBhdGNoUHJvcGVydGllcyhldmVudCwgRXZlbnRQYXRjaGVzRGVzY3JpcHRvcnMpO1xuICB9XG59XG5cbmxldCBQYXRjaGVkRXZlbnQgPSBtaXhpbkNvbXBvc2VkRmxhZyhFdmVudCk7XG5sZXQgUGF0Y2hlZEN1c3RvbUV2ZW50ID0gbWl4aW5Db21wb3NlZEZsYWcoQ3VzdG9tRXZlbnQpO1xubGV0IFBhdGNoZWRNb3VzZUV2ZW50ID0gbWl4aW5Db21wb3NlZEZsYWcoTW91c2VFdmVudCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXRjaEV2ZW50cygpIHtcbiAgYWN0aXZhdGVGb2N1c0V2ZW50T3ZlcnJpZGVzKCk7XG4gIHdpbmRvdy5FdmVudCA9IFBhdGNoZWRFdmVudDtcbiAgd2luZG93LkN1c3RvbUV2ZW50ID0gUGF0Y2hlZEN1c3RvbUV2ZW50O1xuICB3aW5kb3cuTW91c2VFdmVudCA9IFBhdGNoZWRNb3VzZUV2ZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGF0Y2hDbGljaygpIHtcbiAgLy8gRml4IHVwIGBFbGVtZW50LnByb3RvdHlwZS5jbGljaygpYCBpZiBgaXNUcnVzdGVkYCBpcyBzdXBwb3J0ZWQsIGJ1dCBgY29tcG9zZWRgIGlzbid0XG4gIGlmIChcbiAgICAhY29tcG9zZWRHZXR0ZXIgJiZcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEV2ZW50LnByb3RvdHlwZSwgJ2lzVHJ1c3RlZCcpXG4gICkge1xuICAgIC8qKiBAdGhpcyB7RWxlbWVudH0gKi9cbiAgICBjb25zdCBjb21wb3NlZENsaWNrRm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBldiA9IG5ldyBNb3VzZUV2ZW50KCdjbGljaycsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2Rpc3BhdGNoRXZlbnQnXShldik7XG4gICAgfTtcbiAgICBpZiAoRWxlbWVudC5wcm90b3R5cGUuY2xpY2spIHtcbiAgICAgIEVsZW1lbnQucHJvdG90eXBlLmNsaWNrID0gY29tcG9zZWRDbGlja0ZuO1xuICAgIH0gZWxzZSBpZiAoSFRNTEVsZW1lbnQucHJvdG90eXBlLmNsaWNrKSB7XG4gICAgICBIVE1MRWxlbWVudC5wcm90b3R5cGUuY2xpY2sgPSBjb21wb3NlZENsaWNrRm47XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBldmVudFByb3BlcnR5TmFtZXNGb3JFbGVtZW50ID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoXG4gIEVsZW1lbnQucHJvdG90eXBlXG4pLmZpbHRlcigobmFtZSkgPT4gbmFtZS5zdWJzdHJpbmcoMCwgMikgPT09ICdvbicpO1xuXG5leHBvcnQgY29uc3QgZXZlbnRQcm9wZXJ0eU5hbWVzRm9ySFRNTEVsZW1lbnQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhcbiAgSFRNTEVsZW1lbnQucHJvdG90eXBlXG4pLmZpbHRlcigobmFtZSkgPT4gbmFtZS5zdWJzdHJpbmcoMCwgMikgPT09ICdvbicpO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eVxuICogQHJldHVybiB7IU9iamVjdFByb3BlcnR5RGVzY3JpcHRvcjxFbGVtZW50Pn1cbiAqL1xuZXhwb3J0IGNvbnN0IHdyYXBwZWREZXNjcmlwdG9yRm9yRXZlbnRQcm9wZXJ0eSA9IChwcm9wZXJ0eSkgPT4ge1xuICByZXR1cm4ge1xuICAgIC8qKiBAdGhpcyB7RWxlbWVudH0gKi9cbiAgICBzZXQ6IGZ1bmN0aW9uIChmbikge1xuICAgICAgY29uc3Qgc2hhZHlEYXRhID0gZW5zdXJlU2hhZHlEYXRhRm9yTm9kZSh0aGlzKTtcbiAgICAgIGNvbnN0IGV2ZW50TmFtZSA9IHByb3BlcnR5LnN1YnN0cmluZygyKTtcbiAgICAgIGlmICghc2hhZHlEYXRhLl9fb25DYWxsYmFja0xpc3RlbmVycykge1xuICAgICAgICBzaGFkeURhdGEuX19vbkNhbGxiYWNrTGlzdGVuZXJzID0ge307XG4gICAgICB9XG4gICAgICBzaGFkeURhdGEuX19vbkNhbGxiYWNrTGlzdGVuZXJzW3Byb3BlcnR5XSAmJlxuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgZXZlbnROYW1lLFxuICAgICAgICAgIHNoYWR5RGF0YS5fX29uQ2FsbGJhY2tMaXN0ZW5lcnNbcHJvcGVydHldXG4gICAgICAgICk7XG4gICAgICB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICdhZGRFdmVudExpc3RlbmVyJ10oZXZlbnROYW1lLCBmbik7XG4gICAgICBzaGFkeURhdGEuX19vbkNhbGxiYWNrTGlzdGVuZXJzW3Byb3BlcnR5XSA9IGZuO1xuICAgIH0sXG4gICAgLyoqIEB0aGlzIHtFbGVtZW50fSAqL1xuICAgIGdldCgpIHtcbiAgICAgIGNvbnN0IHNoYWR5RGF0YSA9IHNoYWR5RGF0YUZvck5vZGUodGhpcyk7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBzaGFkeURhdGEgJiZcbiAgICAgICAgc2hhZHlEYXRhLl9fb25DYWxsYmFja0xpc3RlbmVycyAmJlxuICAgICAgICBzaGFkeURhdGEuX19vbkNhbGxiYWNrTGlzdGVuZXJzW3Byb3BlcnR5XVxuICAgICAgKTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgfTtcbn07XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5mdW5jdGlvbiBuZXdTcGxpY2UoaW5kZXgsIHJlbW92ZWQsIGFkZGVkQ291bnQpIHtcbiAgcmV0dXJuIHtcbiAgICBpbmRleDogaW5kZXgsXG4gICAgcmVtb3ZlZDogcmVtb3ZlZCxcbiAgICBhZGRlZENvdW50OiBhZGRlZENvdW50LFxuICB9O1xufVxuXG5jb25zdCBFRElUX0xFQVZFID0gMDtcbmNvbnN0IEVESVRfVVBEQVRFID0gMTtcbmNvbnN0IEVESVRfQUREID0gMjtcbmNvbnN0IEVESVRfREVMRVRFID0gMztcblxuLy8gTm90ZTogVGhpcyBmdW5jdGlvbiBpcyAqYmFzZWQqIG9uIHRoZSBjb21wdXRhdGlvbiBvZiB0aGUgTGV2ZW5zaHRlaW5cbi8vIFwiZWRpdFwiIGRpc3RhbmNlLiBUaGUgb25lIGNoYW5nZSBpcyB0aGF0IFwidXBkYXRlc1wiIGFyZSB0cmVhdGVkIGFzIHR3b1xuLy8gZWRpdHMgLSBub3Qgb25lLiBXaXRoIEFycmF5IHNwbGljZXMsIGFuIHVwZGF0ZSBpcyByZWFsbHkgYSBkZWxldGVcbi8vIGZvbGxvd2VkIGJ5IGFuIGFkZC4gQnkgcmV0YWluaW5nIHRoaXMsIHdlIG9wdGltaXplIGZvciBcImtlZXBpbmdcIiB0aGVcbi8vIG1heGltdW0gYXJyYXkgaXRlbXMgaW4gdGhlIG9yaWdpbmFsIGFycmF5LiBGb3IgZXhhbXBsZTpcbi8vXG4vLyAgICd4eHh4MTIzJyAtPiAnMTIzeXl5eSdcbi8vXG4vLyBXaXRoIDEtZWRpdCB1cGRhdGVzLCB0aGUgc2hvcnRlc3QgcGF0aCB3b3VsZCBiZSBqdXN0IHRvIHVwZGF0ZSBhbGwgc2V2ZW5cbi8vIGNoYXJhY3RlcnMuIFdpdGggMi1lZGl0IHVwZGF0ZXMsIHdlIGRlbGV0ZSA0LCBsZWF2ZSAzLCBhbmQgYWRkIDQuIFRoaXNcbi8vIGxlYXZlcyB0aGUgc3Vic3RyaW5nICcxMjMnIGludGFjdC5cbmZ1bmN0aW9uIGNhbGNFZGl0RGlzdGFuY2VzKFxuICBjdXJyZW50LFxuICBjdXJyZW50U3RhcnQsXG4gIGN1cnJlbnRFbmQsXG4gIG9sZCxcbiAgb2xkU3RhcnQsXG4gIG9sZEVuZFxuKSB7XG4gIC8vIFwiRGVsZXRpb25cIiBjb2x1bW5zXG4gIGxldCByb3dDb3VudCA9IG9sZEVuZCAtIG9sZFN0YXJ0ICsgMTtcbiAgbGV0IGNvbHVtbkNvdW50ID0gY3VycmVudEVuZCAtIGN1cnJlbnRTdGFydCArIDE7XG4gIGxldCBkaXN0YW5jZXMgPSBuZXcgQXJyYXkocm93Q291bnQpO1xuXG4gIC8vIFwiQWRkaXRpb25cIiByb3dzLiBJbml0aWFsaXplIG51bGwgY29sdW1uLlxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd0NvdW50OyBpKyspIHtcbiAgICBkaXN0YW5jZXNbaV0gPSBuZXcgQXJyYXkoY29sdW1uQ291bnQpO1xuICAgIGRpc3RhbmNlc1tpXVswXSA9IGk7XG4gIH1cblxuICAvLyBJbml0aWFsaXplIG51bGwgcm93XG4gIGZvciAobGV0IGogPSAwOyBqIDwgY29sdW1uQ291bnQ7IGorKykge1xuICAgIGRpc3RhbmNlc1swXVtqXSA9IGo7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMTsgaSA8IHJvd0NvdW50OyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMTsgaiA8IGNvbHVtbkNvdW50OyBqKyspIHtcbiAgICAgIGlmIChlcXVhbHMoY3VycmVudFtjdXJyZW50U3RhcnQgKyBqIC0gMV0sIG9sZFtvbGRTdGFydCArIGkgLSAxXSkpIHtcbiAgICAgICAgZGlzdGFuY2VzW2ldW2pdID0gZGlzdGFuY2VzW2kgLSAxXVtqIC0gMV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgbm9ydGggPSBkaXN0YW5jZXNbaSAtIDFdW2pdICsgMTtcbiAgICAgICAgbGV0IHdlc3QgPSBkaXN0YW5jZXNbaV1baiAtIDFdICsgMTtcbiAgICAgICAgZGlzdGFuY2VzW2ldW2pdID0gbm9ydGggPCB3ZXN0ID8gbm9ydGggOiB3ZXN0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkaXN0YW5jZXM7XG59XG5cbi8vIFRoaXMgc3RhcnRzIGF0IHRoZSBmaW5hbCB3ZWlnaHQsIGFuZCB3YWxrcyBcImJhY2t3YXJkXCIgYnkgZmluZGluZ1xuLy8gdGhlIG1pbmltdW0gcHJldmlvdXMgd2VpZ2h0IHJlY3Vyc2l2ZWx5IHVudGlsIHRoZSBvcmlnaW4gb2YgdGhlIHdlaWdodFxuLy8gbWF0cml4LlxuZnVuY3Rpb24gc3BsaWNlT3BlcmF0aW9uc0Zyb21FZGl0RGlzdGFuY2VzKGRpc3RhbmNlcykge1xuICBsZXQgaSA9IGRpc3RhbmNlcy5sZW5ndGggLSAxO1xuICBsZXQgaiA9IGRpc3RhbmNlc1swXS5sZW5ndGggLSAxO1xuICBsZXQgY3VycmVudCA9IGRpc3RhbmNlc1tpXVtqXTtcbiAgbGV0IGVkaXRzID0gW107XG4gIHdoaWxlIChpID4gMCB8fCBqID4gMCkge1xuICAgIGlmIChpID09IDApIHtcbiAgICAgIGVkaXRzLnB1c2goRURJVF9BREQpO1xuICAgICAgai0tO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChqID09IDApIHtcbiAgICAgIGVkaXRzLnB1c2goRURJVF9ERUxFVEUpO1xuICAgICAgaS0tO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGxldCBub3J0aFdlc3QgPSBkaXN0YW5jZXNbaSAtIDFdW2ogLSAxXTtcbiAgICBsZXQgd2VzdCA9IGRpc3RhbmNlc1tpIC0gMV1bal07XG4gICAgbGV0IG5vcnRoID0gZGlzdGFuY2VzW2ldW2ogLSAxXTtcblxuICAgIGxldCBtaW47XG4gICAgaWYgKHdlc3QgPCBub3J0aCkge1xuICAgICAgbWluID0gd2VzdCA8IG5vcnRoV2VzdCA/IHdlc3QgOiBub3J0aFdlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1pbiA9IG5vcnRoIDwgbm9ydGhXZXN0ID8gbm9ydGggOiBub3J0aFdlc3Q7XG4gICAgfVxuXG4gICAgaWYgKG1pbiA9PSBub3J0aFdlc3QpIHtcbiAgICAgIGlmIChub3J0aFdlc3QgPT0gY3VycmVudCkge1xuICAgICAgICBlZGl0cy5wdXNoKEVESVRfTEVBVkUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWRpdHMucHVzaChFRElUX1VQREFURSk7XG4gICAgICAgIGN1cnJlbnQgPSBub3J0aFdlc3Q7XG4gICAgICB9XG4gICAgICBpLS07XG4gICAgICBqLS07XG4gICAgfSBlbHNlIGlmIChtaW4gPT0gd2VzdCkge1xuICAgICAgZWRpdHMucHVzaChFRElUX0RFTEVURSk7XG4gICAgICBpLS07XG4gICAgICBjdXJyZW50ID0gd2VzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgZWRpdHMucHVzaChFRElUX0FERCk7XG4gICAgICBqLS07XG4gICAgICBjdXJyZW50ID0gbm9ydGg7XG4gICAgfVxuICB9XG5cbiAgZWRpdHMucmV2ZXJzZSgpO1xuICByZXR1cm4gZWRpdHM7XG59XG5cbi8qKlxuICogU3BsaWNlIFByb2plY3Rpb24gZnVuY3Rpb25zOlxuICpcbiAqIEEgc3BsaWNlIG1hcCBpcyBhIHJlcHJlc2VudGF0aW9uIG9mIGhvdyBhIHByZXZpb3VzIGFycmF5IG9mIGl0ZW1zXG4gKiB3YXMgdHJhbnNmb3JtZWQgaW50byBhIG5ldyBhcnJheSBvZiBpdGVtcy4gQ29uY2VwdHVhbGx5IGl0IGlzIGEgbGlzdCBvZlxuICogdHVwbGVzIG9mXG4gKlxuICogICA8aW5kZXgsIHJlbW92ZWQsIGFkZGVkQ291bnQ+XG4gKlxuICogd2hpY2ggYXJlIGtlcHQgaW4gYXNjZW5kaW5nIGluZGV4IG9yZGVyIG9mLiBUaGUgdHVwbGUgcmVwcmVzZW50cyB0aGF0IGF0XG4gKiB0aGUgfGluZGV4fCwgfHJlbW92ZWR8IHNlcXVlbmNlIG9mIGl0ZW1zIHdlcmUgcmVtb3ZlZCwgYW5kIGNvdW50aW5nIGZvcndhcmRcbiAqIGZyb20gfGluZGV4fCwgfGFkZGVkQ291bnR8IGl0ZW1zIHdlcmUgYWRkZWQuXG4gKi9cblxuLyoqXG4gKiBMYWNraW5nIGluZGl2aWR1YWwgc3BsaWNlIG11dGF0aW9uIGluZm9ybWF0aW9uLCB0aGUgbWluaW1hbCBzZXQgb2ZcbiAqIHNwbGljZXMgY2FuIGJlIHN5bnRoZXNpemVkIGdpdmVuIHRoZSBwcmV2aW91cyBzdGF0ZSBhbmQgZmluYWwgc3RhdGUgb2YgYW5cbiAqIGFycmF5LiBUaGUgYmFzaWMgYXBwcm9hY2ggaXMgdG8gY2FsY3VsYXRlIHRoZSBlZGl0IGRpc3RhbmNlIG1hdHJpeCBhbmRcbiAqIGNob29zZSB0aGUgc2hvcnRlc3QgcGF0aCB0aHJvdWdoIGl0LlxuICpcbiAqIENvbXBsZXhpdHk6IE8obCAqIHApXG4gKiAgIGw6IFRoZSBsZW5ndGggb2YgdGhlIGN1cnJlbnQgYXJyYXlcbiAqICAgcDogVGhlIGxlbmd0aCBvZiB0aGUgb2xkIGFycmF5XG4gKi9cbmZ1bmN0aW9uIGNhbGNTcGxpY2VzKGN1cnJlbnQsIGN1cnJlbnRTdGFydCwgY3VycmVudEVuZCwgb2xkLCBvbGRTdGFydCwgb2xkRW5kKSB7XG4gIGxldCBwcmVmaXhDb3VudCA9IDA7XG4gIGxldCBzdWZmaXhDb3VudCA9IDA7XG4gIGxldCBzcGxpY2U7XG5cbiAgbGV0IG1pbkxlbmd0aCA9IE1hdGgubWluKGN1cnJlbnRFbmQgLSBjdXJyZW50U3RhcnQsIG9sZEVuZCAtIG9sZFN0YXJ0KTtcbiAgaWYgKGN1cnJlbnRTdGFydCA9PSAwICYmIG9sZFN0YXJ0ID09IDApIHtcbiAgICBwcmVmaXhDb3VudCA9IHNoYXJlZFByZWZpeChjdXJyZW50LCBvbGQsIG1pbkxlbmd0aCk7XG4gIH1cblxuICBpZiAoY3VycmVudEVuZCA9PSBjdXJyZW50Lmxlbmd0aCAmJiBvbGRFbmQgPT0gb2xkLmxlbmd0aCkge1xuICAgIHN1ZmZpeENvdW50ID0gc2hhcmVkU3VmZml4KGN1cnJlbnQsIG9sZCwgbWluTGVuZ3RoIC0gcHJlZml4Q291bnQpO1xuICB9XG5cbiAgY3VycmVudFN0YXJ0ICs9IHByZWZpeENvdW50O1xuICBvbGRTdGFydCArPSBwcmVmaXhDb3VudDtcbiAgY3VycmVudEVuZCAtPSBzdWZmaXhDb3VudDtcbiAgb2xkRW5kIC09IHN1ZmZpeENvdW50O1xuXG4gIGlmIChjdXJyZW50RW5kIC0gY3VycmVudFN0YXJ0ID09IDAgJiYgb2xkRW5kIC0gb2xkU3RhcnQgPT0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGlmIChjdXJyZW50U3RhcnQgPT0gY3VycmVudEVuZCkge1xuICAgIHNwbGljZSA9IG5ld1NwbGljZShjdXJyZW50U3RhcnQsIFtdLCAwKTtcbiAgICB3aGlsZSAob2xkU3RhcnQgPCBvbGRFbmQpIHtcbiAgICAgIHNwbGljZS5yZW1vdmVkLnB1c2gob2xkW29sZFN0YXJ0KytdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW3NwbGljZV07XG4gIH0gZWxzZSBpZiAob2xkU3RhcnQgPT0gb2xkRW5kKSB7XG4gICAgcmV0dXJuIFtuZXdTcGxpY2UoY3VycmVudFN0YXJ0LCBbXSwgY3VycmVudEVuZCAtIGN1cnJlbnRTdGFydCldO1xuICB9XG5cbiAgbGV0IG9wcyA9IHNwbGljZU9wZXJhdGlvbnNGcm9tRWRpdERpc3RhbmNlcyhcbiAgICBjYWxjRWRpdERpc3RhbmNlcyhjdXJyZW50LCBjdXJyZW50U3RhcnQsIGN1cnJlbnRFbmQsIG9sZCwgb2xkU3RhcnQsIG9sZEVuZClcbiAgKTtcblxuICBzcGxpY2UgPSB1bmRlZmluZWQ7XG4gIGxldCBzcGxpY2VzID0gW107XG4gIGxldCBpbmRleCA9IGN1cnJlbnRTdGFydDtcbiAgbGV0IG9sZEluZGV4ID0gb2xkU3RhcnQ7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgc3dpdGNoIChvcHNbaV0pIHtcbiAgICAgIGNhc2UgRURJVF9MRUFWRTpcbiAgICAgICAgaWYgKHNwbGljZSkge1xuICAgICAgICAgIHNwbGljZXMucHVzaChzcGxpY2UpO1xuICAgICAgICAgIHNwbGljZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIG9sZEluZGV4Kys7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBFRElUX1VQREFURTpcbiAgICAgICAgaWYgKCFzcGxpY2UpIHtcbiAgICAgICAgICBzcGxpY2UgPSBuZXdTcGxpY2UoaW5kZXgsIFtdLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNwbGljZS5hZGRlZENvdW50Kys7XG4gICAgICAgIGluZGV4Kys7XG5cbiAgICAgICAgc3BsaWNlLnJlbW92ZWQucHVzaChvbGRbb2xkSW5kZXhdKTtcbiAgICAgICAgb2xkSW5kZXgrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEVESVRfQUREOlxuICAgICAgICBpZiAoIXNwbGljZSkge1xuICAgICAgICAgIHNwbGljZSA9IG5ld1NwbGljZShpbmRleCwgW10sIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3BsaWNlLmFkZGVkQ291bnQrKztcbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEVESVRfREVMRVRFOlxuICAgICAgICBpZiAoIXNwbGljZSkge1xuICAgICAgICAgIHNwbGljZSA9IG5ld1NwbGljZShpbmRleCwgW10sIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3BsaWNlLnJlbW92ZWQucHVzaChvbGRbb2xkSW5kZXhdKTtcbiAgICAgICAgb2xkSW5kZXgrKztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKHNwbGljZSkge1xuICAgIHNwbGljZXMucHVzaChzcGxpY2UpO1xuICB9XG4gIHJldHVybiBzcGxpY2VzO1xufVxuXG5mdW5jdGlvbiBzaGFyZWRQcmVmaXgoY3VycmVudCwgb2xkLCBzZWFyY2hMZW5ndGgpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWFyY2hMZW5ndGg7IGkrKykge1xuICAgIGlmICghZXF1YWxzKGN1cnJlbnRbaV0sIG9sZFtpXSkpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2VhcmNoTGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBzaGFyZWRTdWZmaXgoY3VycmVudCwgb2xkLCBzZWFyY2hMZW5ndGgpIHtcbiAgbGV0IGluZGV4MSA9IGN1cnJlbnQubGVuZ3RoO1xuICBsZXQgaW5kZXgyID0gb2xkLmxlbmd0aDtcbiAgbGV0IGNvdW50ID0gMDtcbiAgd2hpbGUgKGNvdW50IDwgc2VhcmNoTGVuZ3RoICYmIGVxdWFscyhjdXJyZW50Wy0taW5kZXgxXSwgb2xkWy0taW5kZXgyXSkpIHtcbiAgICBjb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGNvdW50O1xufVxuXG5mdW5jdGlvbiBlcXVhbHMoY3VycmVudFZhbHVlLCBwcmV2aW91c1ZhbHVlKSB7XG4gIHJldHVybiBjdXJyZW50VmFsdWUgPT09IHByZXZpb3VzVmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVTcGxpY2VzKGN1cnJlbnQsIHByZXZpb3VzKSB7XG4gIHJldHVybiBjYWxjU3BsaWNlcyhjdXJyZW50LCAwLCBjdXJyZW50Lmxlbmd0aCwgcHJldmlvdXMsIDAsIHByZXZpb3VzLmxlbmd0aCk7XG59XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG4vLyBwcmV0dGllci1pZ25vcmVcbmltcG9ydCB7YWRkRXZlbnRMaXN0ZW5lciwgcmVtb3ZlRXZlbnRMaXN0ZW5lciwgZGlzcGF0Y2hFdmVudH0gZnJvbSAnLi4vcGF0Y2gtZXZlbnRzLmpzJztcblxuZXhwb3J0IGNvbnN0IEV2ZW50VGFyZ2V0UGF0Y2hlcyA9IHV0aWxzLmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoe1xuICBkaXNwYXRjaEV2ZW50LFxuXG4gIGFkZEV2ZW50TGlzdGVuZXIsXG5cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcixcbn0pO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi91dGlscy5qcyc7XG5cbmxldCBzY29waW5nU2hpbSA9IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY29waW5nU2hpbSgpIHtcbiAgaWYgKCFzY29waW5nU2hpbSkge1xuICAgIHNjb3BpbmdTaGltID0gd2luZG93WydTaGFkeUNTUyddICYmIHdpbmRvd1snU2hhZHlDU1MnXVsnU2NvcGluZ1NoaW0nXTtcbiAgfVxuICByZXR1cm4gc2NvcGluZ1NoaW0gfHwgbnVsbDtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gYXR0clxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY29wZUNsYXNzQXR0cmlidXRlKG5vZGUsIGF0dHIsIHZhbHVlKSB7XG4gIGNvbnN0IHNjb3BpbmdTaGltID0gZ2V0U2NvcGluZ1NoaW0oKTtcbiAgaWYgKHNjb3BpbmdTaGltICYmIGF0dHIgPT09ICdjbGFzcycpIHtcbiAgICBzY29waW5nU2hpbVsnc2V0RWxlbWVudENsYXNzJ10obm9kZSwgdmFsdWUpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmV3U2NvcGVOYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRTaGFkeVNjb3Bpbmcobm9kZSwgbmV3U2NvcGVOYW1lKSB7XG4gIGNvbnN0IHNjb3BpbmdTaGltID0gZ2V0U2NvcGluZ1NoaW0oKTtcbiAgaWYgKCFzY29waW5nU2hpbSkge1xuICAgIHJldHVybjtcbiAgfVxuICBzY29waW5nU2hpbVsnc2NvcGVOb2RlJ10obm9kZSwgbmV3U2NvcGVOYW1lKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gY3VycmVudFNjb3BlTmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlU2hhZHlTY29waW5nKG5vZGUsIGN1cnJlbnRTY29wZU5hbWUpIHtcbiAgY29uc3Qgc2NvcGluZ1NoaW0gPSBnZXRTY29waW5nU2hpbSgpO1xuICBpZiAoIXNjb3BpbmdTaGltKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHNjb3BpbmdTaGltWyd1bnNjb3BlTm9kZSddKG5vZGUsIGN1cnJlbnRTY29wZU5hbWUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7IU5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZXdTY29wZU5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBvbGRTY29wZU5hbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VTaGFkeVNjb3Bpbmcobm9kZSwgbmV3U2NvcGVOYW1lLCBvbGRTY29wZU5hbWUpIHtcbiAgY29uc3Qgc2NvcGluZ1NoaW0gPSBnZXRTY29waW5nU2hpbSgpO1xuICBpZiAoIXNjb3BpbmdTaGltKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChvbGRTY29wZU5hbWUpIHtcbiAgICByZW1vdmVTaGFkeVNjb3Bpbmcobm9kZSwgb2xkU2NvcGVOYW1lKTtcbiAgfVxuICBhZGRTaGFkeVNjb3Bpbmcobm9kZSwgbmV3U2NvcGVOYW1lKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmV3U2NvcGVOYW1lXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3VycmVudFNjb3BlSXNDb3JyZWN0KG5vZGUsIG5ld1Njb3BlTmFtZSkge1xuICBjb25zdCBzY29waW5nU2hpbSA9IGdldFNjb3BpbmdTaGltKCk7XG4gIGlmICghc2NvcGluZ1NoaW0pIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFKSB7XG4gICAgLy8gTk9URTogYXMgYW4gb3B0aW1pemF0aW9uLCBvbmx5IGNoZWNrIHRoYXQgYWxsIHRoZSB0b3AtbGV2ZWwgY2hpbGRyZW5cbiAgICAvLyBoYXZlIHRoZSBjb3JyZWN0IHNjb3BlLlxuICAgIGxldCBjb3JyZWN0U2NvcGUgPSB0cnVlO1xuICAgIGZvciAoXG4gICAgICBsZXQgbiA9IG5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2ZpcnN0Q2hpbGQnXTtcbiAgICAgIG47XG4gICAgICBuID0gblt1dGlscy5TSEFEWV9QUkVGSVggKyAnbmV4dFNpYmxpbmcnXVxuICAgICkge1xuICAgICAgY29ycmVjdFNjb3BlID0gY29ycmVjdFNjb3BlICYmIGN1cnJlbnRTY29wZUlzQ29ycmVjdChuLCBuZXdTY29wZU5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gY29ycmVjdFNjb3BlO1xuICB9XG4gIGlmIChub2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IGN1cnJlbnRTY29wZSA9IHNjb3BpbmdTaGltWydjdXJyZW50U2NvcGVGb3JOb2RlJ10obm9kZSk7XG4gIHJldHVybiBjdXJyZW50U2NvcGUgPT09IG5ld1Njb3BlTmFtZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjdXJyZW50U2NvcGVGb3JOb2RlKG5vZGUpIHtcbiAgaWYgKG5vZGUubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGNvbnN0IHNjb3BpbmdTaGltID0gZ2V0U2NvcGluZ1NoaW0oKTtcbiAgaWYgKCFzY29waW5nU2hpbSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICByZXR1cm4gc2NvcGluZ1NoaW1bJ2N1cnJlbnRTY29wZUZvck5vZGUnXShub2RlKTtcbn1cblxuLyoqXG4gKiBXYWxrIG92ZXIgYSBub2RlJ3MgdHJlZSBhbmQgYXBwbHkgdmlzaXRvckZuIHRvIGVhY2ggZWxlbWVudCBub2RlXG4gKlxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCFOb2RlKTp2b2lkfSB2aXNpdG9yRm5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyZWVWaXNpdG9yKG5vZGUsIHZpc2l0b3JGbikge1xuICBpZiAoIW5vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gdGhpcyBjaGVjayBpcyBuZWNlc3NhcnkgaWYgYG5vZGVgIGlzIGEgRG9jdW1lbnQgRnJhZ21lbnRcbiAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgdmlzaXRvckZuKG5vZGUpO1xuICB9XG4gIGZvciAoXG4gICAgbGV0IG4gPSBub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdmaXJzdENoaWxkJ107XG4gICAgbjtcbiAgICBuID0gblt1dGlscy5TSEFEWV9QUkVGSVggKyAnbmV4dFNpYmxpbmcnXVxuICApIHtcbiAgICBpZiAobi5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgIHRyZWVWaXNpdG9yKG4sIHZpc2l0b3JGbik7XG4gICAgfVxuICB9XG59XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG4vLyBwcmV0dGllci1pZ25vcmVcbmltcG9ydCB7Z2V0U2NvcGluZ1NoaW0sIHJlbW92ZVNoYWR5U2NvcGluZywgcmVwbGFjZVNoYWR5U2NvcGluZywgdHJlZVZpc2l0b3IsIGN1cnJlbnRTY29wZUZvck5vZGUsIGN1cnJlbnRTY29wZUlzQ29ycmVjdH0gZnJvbSAnLi4vc3R5bGUtc2NvcGluZy5qcyc7XG5pbXBvcnQge3NoYWR5RGF0YUZvck5vZGUsIGVuc3VyZVNoYWR5RGF0YUZvck5vZGV9IGZyb20gJy4uL3NoYWR5LWRhdGEuanMnO1xuaW1wb3J0IHtyZWNvcmRJbnNlcnRCZWZvcmUsIHJlY29yZFJlbW92ZUNoaWxkfSBmcm9tICcuLi9saW5rLW5vZGVzLmpzJztcbmltcG9ydCB7b3duZXJTaGFkeVJvb3RGb3JOb2RlfSBmcm9tICcuLi9hdHRhY2gtc2hhZG93LmpzJztcblxuY29uc3QgZG9jID0gd2luZG93LmRvY3VtZW50O1xuXG5jb25zdCBwcmVmZXJQZXJmb3JtYW5jZSA9IHV0aWxzLnNldHRpbmdzLnByZWZlclBlcmZvcm1hbmNlO1xuXG5jb25zdCBuYXRpdmVJc0Nvbm5lY3RlZEFjY2Vzc29ycyA9IC8qKiBAdHlwZSB7T2JqZWN0UHJvcGVydHlEZXNjcmlwdG9yfSAqLyAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihcbiAgTm9kZS5wcm90b3R5cGUsXG4gICdpc0Nvbm5lY3RlZCdcbikpO1xuXG5jb25zdCBuYXRpdmVJc0Nvbm5lY3RlZCA9XG4gIG5hdGl2ZUlzQ29ubmVjdGVkQWNjZXNzb3JzICYmIG5hdGl2ZUlzQ29ubmVjdGVkQWNjZXNzb3JzLmdldDtcblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyTm9kZShub2RlKSB7XG4gIGxldCBmaXJzdENoaWxkO1xuICB3aGlsZSAoKGZpcnN0Q2hpbGQgPSBub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdmaXJzdENoaWxkJ10pKSB7XG4gICAgbm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAncmVtb3ZlQ2hpbGQnXShmaXJzdENoaWxkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVPd25lclNoYWR5Um9vdChub2RlKSB7XG4gIC8vIG9wdGltaXphdGlvbjogb25seSByZXNldCB0aGUgdHJlZSBpZiBub2RlIGlzIGFjdHVhbGx5IGluIGEgcm9vdFxuICBpZiAoaGFzQ2FjaGVkT3duZXJSb290KG5vZGUpKSB7XG4gICAgZm9yIChcbiAgICAgIGxldCBuID0gbm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAnZmlyc3RDaGlsZCddO1xuICAgICAgbjtcbiAgICAgIG4gPSBuW3V0aWxzLlNIQURZX1BSRUZJWCArICduZXh0U2libGluZyddXG4gICAgKSB7XG4gICAgICByZW1vdmVPd25lclNoYWR5Um9vdChuKTtcbiAgICB9XG4gIH1cbiAgY29uc3Qgbm9kZURhdGEgPSBzaGFkeURhdGFGb3JOb2RlKG5vZGUpO1xuICBpZiAobm9kZURhdGEpIHtcbiAgICBub2RlRGF0YS5vd25lclNoYWR5Um9vdCA9IHVuZGVmaW5lZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNDYWNoZWRPd25lclJvb3Qobm9kZSkge1xuICBjb25zdCBub2RlRGF0YSA9IHNoYWR5RGF0YUZvck5vZGUobm9kZSk7XG4gIHJldHVybiBCb29sZWFuKG5vZGVEYXRhICYmIG5vZGVEYXRhLm93bmVyU2hhZHlSb290ICE9PSB1bmRlZmluZWQpO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBmaXJzdCBmbGF0dGVuZWQgbm9kZSB0aGF0IGlzIGNvbXBvc2VkIGluIHRoZSBub2RlJ3MgcGFyZW50LlxuICogSWYgdGhlIGdpdmVuIG5vZGUgaXMgYSBzbG90LCB0aGVuIHRoZSBmaXJzdCBmbGF0dGVuZWQgbm9kZSBpcyByZXR1cm5lZFxuICogaWYgaXQgZXhpc3RzLCBvdGhlcndpc2UgYWR2YW5jZSB0byB0aGUgbm9kZSdzIG5leHRTaWJsaW5nLlxuICogQHBhcmFtIHtOb2RlfSBub2RlIHdpdGhpbiB3aGljaCB0byBmaW5kIGZpcnN0IGNvbXBvc2VkIG5vZGVcbiAqIEByZXR1cm5zIHtOb2RlfSBmaXJzdCBjb21wb3NlZCBub2RlXG4gKi9cbmZ1bmN0aW9uIGZpcnN0Q29tcG9zZWROb2RlKG5vZGUpIHtcbiAgbGV0IGNvbXBvc2VkID0gbm9kZTtcbiAgaWYgKG5vZGUgJiYgbm9kZS5sb2NhbE5hbWUgPT09ICdzbG90Jykge1xuICAgIGNvbnN0IG5vZGVEYXRhID0gc2hhZHlEYXRhRm9yTm9kZShub2RlKTtcbiAgICBjb25zdCBmbGF0dGVuZWQgPSBub2RlRGF0YSAmJiBub2RlRGF0YS5mbGF0dGVuZWROb2RlcztcbiAgICAvLyBOb3RlLCBpZiBgZmxhdHRlbmVkYCBpcyBmYWxzZXksIGl0IG1lYW5zIHRoYXQgdGhlIGNvbnRhaW5pbmcgc2hhZG93Um9vdFxuICAgIC8vIGhhcyBub3QgcmVuZGVyZWQgYW5kIHRoZXJlZm9yZSB0aGUgYDxzbG90PmAgaXMgc3RpbGwgaW4gdGhlIGNvbXBvc2VkXG4gICAgLy8gRE9NLiBJZiB0aGF0J3MgdGhlIGNhc2UgdGhlIGA8c2xvdD5gIGlzIHRoZSBmaXJzdCBjb21wb3NlZCBub2RlLlxuICAgIGlmIChmbGF0dGVuZWQpIHtcbiAgICAgIGNvbXBvc2VkID0gZmxhdHRlbmVkLmxlbmd0aFxuICAgICAgICA/IGZsYXR0ZW5lZFswXVxuICAgICAgICA6IGZpcnN0Q29tcG9zZWROb2RlKG5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ25leHRTaWJsaW5nJ10pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY29tcG9zZWQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcGFyYW0ge05vZGU9fSBhZGRlZE5vZGVcbiAqIEBwYXJhbSB7Tm9kZT19IHJlbW92ZWROb2RlXG4gKi9cbmZ1bmN0aW9uIHNjaGVkdWxlT2JzZXJ2ZXIobm9kZSwgYWRkZWROb2RlLCByZW1vdmVkTm9kZSkge1xuICBjb25zdCBub2RlRGF0YSA9IHNoYWR5RGF0YUZvck5vZGUobm9kZSk7XG4gIGNvbnN0IG9ic2VydmVyID0gbm9kZURhdGEgJiYgbm9kZURhdGEub2JzZXJ2ZXI7XG4gIGlmIChvYnNlcnZlcikge1xuICAgIGlmIChhZGRlZE5vZGUpIHtcbiAgICAgIGlmIChhZGRlZE5vZGUubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGFkZGVkTm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIG9ic2VydmVyLmFkZGVkTm9kZXMucHVzaChhZGRlZE5vZGUuY2hpbGROb2Rlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9ic2VydmVyLmFkZGVkTm9kZXMucHVzaChhZGRlZE5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVtb3ZlZE5vZGUpIHtcbiAgICAgIG9ic2VydmVyLnJlbW92ZWROb2Rlcy5wdXNoKHJlbW92ZWROb2RlKTtcbiAgICB9XG4gICAgb2JzZXJ2ZXIuc2NoZWR1bGUoKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgTm9kZVBhdGNoZXMgPSB1dGlscy5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHtcbiAgLyoqIEB0aGlzIHtOb2RlfSAqL1xuICBnZXQgcGFyZW50Tm9kZSgpIHtcbiAgICBjb25zdCBub2RlRGF0YSA9IHNoYWR5RGF0YUZvck5vZGUodGhpcyk7XG4gICAgY29uc3QgbCA9IG5vZGVEYXRhICYmIG5vZGVEYXRhLnBhcmVudE5vZGU7XG4gICAgcmV0dXJuIGwgIT09IHVuZGVmaW5lZCA/IGwgOiB0aGlzW3V0aWxzLk5BVElWRV9QUkVGSVggKyAncGFyZW50Tm9kZSddO1xuICB9LFxuXG4gIC8qKiBAdGhpcyB7Tm9kZX0gKi9cbiAgZ2V0IGZpcnN0Q2hpbGQoKSB7XG4gICAgY29uc3Qgbm9kZURhdGEgPSBzaGFkeURhdGFGb3JOb2RlKHRoaXMpO1xuICAgIGNvbnN0IGwgPSBub2RlRGF0YSAmJiBub2RlRGF0YS5maXJzdENoaWxkO1xuICAgIHJldHVybiBsICE9PSB1bmRlZmluZWQgPyBsIDogdGhpc1t1dGlscy5OQVRJVkVfUFJFRklYICsgJ2ZpcnN0Q2hpbGQnXTtcbiAgfSxcblxuICAvKiogQHRoaXMge05vZGV9ICovXG4gIGdldCBsYXN0Q2hpbGQoKSB7XG4gICAgY29uc3Qgbm9kZURhdGEgPSBzaGFkeURhdGFGb3JOb2RlKHRoaXMpO1xuICAgIGNvbnN0IGwgPSBub2RlRGF0YSAmJiBub2RlRGF0YS5sYXN0Q2hpbGQ7XG4gICAgcmV0dXJuIGwgIT09IHVuZGVmaW5lZCA/IGwgOiB0aGlzW3V0aWxzLk5BVElWRV9QUkVGSVggKyAnbGFzdENoaWxkJ107XG4gIH0sXG5cbiAgLyoqIEB0aGlzIHtOb2RlfSAqL1xuICBnZXQgbmV4dFNpYmxpbmcoKSB7XG4gICAgY29uc3Qgbm9kZURhdGEgPSBzaGFkeURhdGFGb3JOb2RlKHRoaXMpO1xuICAgIGNvbnN0IGwgPSBub2RlRGF0YSAmJiBub2RlRGF0YS5uZXh0U2libGluZztcbiAgICByZXR1cm4gbCAhPT0gdW5kZWZpbmVkID8gbCA6IHRoaXNbdXRpbHMuTkFUSVZFX1BSRUZJWCArICduZXh0U2libGluZyddO1xuICB9LFxuXG4gIC8qKiBAdGhpcyB7Tm9kZX0gKi9cbiAgZ2V0IHByZXZpb3VzU2libGluZygpIHtcbiAgICBjb25zdCBub2RlRGF0YSA9IHNoYWR5RGF0YUZvck5vZGUodGhpcyk7XG4gICAgY29uc3QgbCA9IG5vZGVEYXRhICYmIG5vZGVEYXRhLnByZXZpb3VzU2libGluZztcbiAgICByZXR1cm4gbCAhPT0gdW5kZWZpbmVkID8gbCA6IHRoaXNbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdwcmV2aW91c1NpYmxpbmcnXTtcbiAgfSxcblxuICAvKiogQHRoaXMge05vZGV9ICovXG4gIGdldCBjaGlsZE5vZGVzKCkge1xuICAgIGxldCBjaGlsZE5vZGVzO1xuICAgIGlmICh1dGlscy5pc1RyYWNraW5nTG9naWNhbENoaWxkTm9kZXModGhpcykpIHtcbiAgICAgIGNvbnN0IG5vZGVEYXRhID0gc2hhZHlEYXRhRm9yTm9kZSh0aGlzKTtcbiAgICAgIGlmICghbm9kZURhdGEuY2hpbGROb2Rlcykge1xuICAgICAgICBub2RlRGF0YS5jaGlsZE5vZGVzID0gW107XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgbGV0IG4gPSB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICdmaXJzdENoaWxkJ107XG4gICAgICAgICAgbjtcbiAgICAgICAgICBuID0gblt1dGlscy5TSEFEWV9QUkVGSVggKyAnbmV4dFNpYmxpbmcnXVxuICAgICAgICApIHtcbiAgICAgICAgICBub2RlRGF0YS5jaGlsZE5vZGVzLnB1c2gobik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoaWxkTm9kZXMgPSBub2RlRGF0YS5jaGlsZE5vZGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGlsZE5vZGVzID0gdGhpc1t1dGlscy5OQVRJVkVfUFJFRklYICsgJ2NoaWxkTm9kZXMnXTtcbiAgICB9XG4gICAgY2hpbGROb2Rlcy5pdGVtID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gY2hpbGROb2Rlc1tpbmRleF07XG4gICAgfTtcbiAgICByZXR1cm4gY2hpbGROb2RlcztcbiAgfSxcblxuICAvKiogQHRoaXMge05vZGV9ICovXG4gIGdldCBwYXJlbnRFbGVtZW50KCkge1xuICAgIGNvbnN0IG5vZGVEYXRhID0gc2hhZHlEYXRhRm9yTm9kZSh0aGlzKTtcbiAgICBsZXQgbCA9IG5vZGVEYXRhICYmIG5vZGVEYXRhLnBhcmVudE5vZGU7XG4gICAgaWYgKGwgJiYgbC5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgIGwgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gbCAhPT0gdW5kZWZpbmVkID8gbCA6IHRoaXNbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdwYXJlbnRFbGVtZW50J107XG4gIH0sXG5cbiAgLyoqIEB0aGlzIHtOb2RlfSAqL1xuICBnZXQgaXNDb25uZWN0ZWQoKSB7XG4gICAgaWYgKG5hdGl2ZUlzQ29ubmVjdGVkICYmIG5hdGl2ZUlzQ29ubmVjdGVkLmNhbGwodGhpcykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5ub2RlVHlwZSA9PSBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gRmFzdCBwYXRoIGZvciBkaXN0cmlidXRlZCBub2Rlcy5cbiAgICBjb25zdCBvd25lckRvY3VtZW50ID0gdGhpcy5vd25lckRvY3VtZW50O1xuICAgIGlmIChvd25lckRvY3VtZW50ID09PSBudWxsIHx8IHV0aWxzLmRvY3VtZW50Q29udGFpbnMob3duZXJEb2N1bWVudCwgdGhpcykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBTbG93IHBhdGggZm9yIG5vbi1kaXN0cmlidXRlZCBub2Rlcy5cbiAgICBsZXQgbm9kZSA9IHRoaXM7XG4gICAgd2hpbGUgKG5vZGUgJiYgIShub2RlIGluc3RhbmNlb2YgRG9jdW1lbnQpKSB7XG4gICAgICBub2RlID1cbiAgICAgICAgbm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAncGFyZW50Tm9kZSddIHx8XG4gICAgICAgICh1dGlscy5pc1NoYWR5Um9vdChub2RlKVxuICAgICAgICAgID8gLyoqIEB0eXBlIHtTaGFkb3dSb290fSAqLyAobm9kZSkuaG9zdFxuICAgICAgICAgIDogdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgcmV0dXJuICEhKG5vZGUgJiYgbm9kZSBpbnN0YW5jZW9mIERvY3VtZW50KTtcbiAgfSxcblxuICAvKiogQHRoaXMge05vZGV9ICovXG4gIGdldCB0ZXh0Q29udGVudCgpIHtcbiAgICBpZiAodXRpbHMuaXNUcmFja2luZ0xvZ2ljYWxDaGlsZE5vZGVzKHRoaXMpKSB7XG4gICAgICBsZXQgdGMgPSBbXTtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBuID0gdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAnZmlyc3RDaGlsZCddO1xuICAgICAgICBuO1xuICAgICAgICBuID0gblt1dGlscy5TSEFEWV9QUkVGSVggKyAnbmV4dFNpYmxpbmcnXVxuICAgICAgKSB7XG4gICAgICAgIGlmIChuLm5vZGVUeXBlICE9PSBOb2RlLkNPTU1FTlRfTk9ERSkge1xuICAgICAgICAgIHRjLnB1c2goblt1dGlscy5TSEFEWV9QUkVGSVggKyAndGV4dENvbnRlbnQnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0Yy5qb2luKCcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXNbdXRpbHMuTkFUSVZFX1BSRUZJWCArICd0ZXh0Q29udGVudCddO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHRoaXMge05vZGV9XG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKi9cbiAgc2V0IHRleHRDb250ZW50KHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHZhbHVlID0gJyc7XG4gICAgfVxuICAgIHN3aXRjaCAodGhpcy5ub2RlVHlwZSkge1xuICAgICAgY2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpcbiAgICAgIGNhc2UgTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFOlxuICAgICAgICBpZiAoXG4gICAgICAgICAgIXV0aWxzLmlzVHJhY2tpbmdMb2dpY2FsQ2hpbGROb2Rlcyh0aGlzKSAmJlxuICAgICAgICAgIHV0aWxzLnNldHRpbmdzLmhhc0Rlc2NyaXB0b3JzXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIG1heSBiZSByZW1vdmluZyBhIG5lc3RlZCBzbG90IGJ1dCBmYXN0IHBhdGggaWYgd2Uga25vdyB3ZSBhcmUgbm90LlxuICAgICAgICAgIGNvbnN0IGZpcnN0Q2hpbGQgPSB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICdmaXJzdENoaWxkJ107XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgZmlyc3RDaGlsZCAhPSB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICdsYXN0Q2hpbGQnXSB8fFxuICAgICAgICAgICAgKGZpcnN0Q2hpbGQgJiYgZmlyc3RDaGlsZC5ub2RlVHlwZSAhPSBOb2RlLlRFWFRfTk9ERSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNsZWFyTm9kZSh0aGlzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpc1t1dGlscy5OQVRJVkVfUFJFRklYICsgJ3RleHRDb250ZW50J10gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjbGVhck5vZGUodGhpcyk7XG4gICAgICAgICAgLy8gRG9jdW1lbnQgZnJhZ21lbnRzIG11c3QgaGF2ZSBubyBjaGlsZE5vZGVzIGlmIHNldHRpbmcgYSBibGFuayBzdHJpbmdcbiAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMCB8fCB0aGlzLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAnaW5zZXJ0QmVmb3JlJ10oXG4gICAgICAgICAgICAgIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHZhbHVlKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBOb3RlLCBiZSB3YXJ5IG9mIHBhdGNoaW5nIGBub2RlVmFsdWVgLlxuICAgICAgICB0aGlzLm5vZGVWYWx1ZSA9IHZhbHVlO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0sXG5cbiAgLy8gUGF0Y2hlZCBgaW5zZXJ0QmVmb3JlYC4gTm90ZSB0aGF0IGFsbCBtdXRhdGlvbnMgdGhhdCBhZGQgbm9kZXMgYXJlIHJvdXRlZFxuICAvLyBoZXJlLiBXaGVuIGEgPHNsb3Q+IGlzIGFkZGVkIG9yIGEgbm9kZSBpcyBhZGRlZCB0byBhIGhvc3Qgd2l0aCBhIHNoYWRvd1Jvb3RcbiAgLy8gd2l0aCBhIHNsb3QsIGEgc3RhbmRhcmQgZG9tIGBpbnNlcnRgIGNhbGwgaXMgYWJvcnRlZCBhbmQgYF9hc3luY1JlbmRlcmBcbiAgLy8gaXMgY2FsbGVkIG9uIHRoZSByZWxldmFudCBzaGFkb3dSb290LiBJbiBhbGwgb3RoZXIgY2FzZXMsIGEgc3RhbmRhcmQgZG9tXG4gIC8vIGBpbnNlcnRgIGNhbiBiZSBtYWRlLCBidXQgdGhlIGxvY2F0aW9uIGFuZCByZWZfbm9kZSBtYXkgbmVlZCB0byBiZSBjaGFuZ2VkLlxuICAvKipcbiAgICogQHRoaXMge05vZGV9XG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgKiBAcGFyYW0ge05vZGU9fSByZWZfbm9kZVxuICAgKi9cbiAgaW5zZXJ0QmVmb3JlKG5vZGUsIHJlZl9ub2RlKSB7XG4gICAgLy8gb3B0aW1pemF0aW9uOiBhc3N1bWUgbmF0aXZlIGluc2VydEJlZm9yZSBpcyBvayBpZiB0aGUgbm9kZXMgYXJlIG5vdCBpbiB0aGUgZG9jdW1lbnQuXG4gICAgaWYgKHRoaXMub3duZXJEb2N1bWVudCAhPT0gZG9jICYmIG5vZGUub3duZXJEb2N1bWVudCAhPT0gZG9jKSB7XG4gICAgICB0aGlzW3V0aWxzLk5BVElWRV9QUkVGSVggKyAnaW5zZXJ0QmVmb3JlJ10obm9kZSwgcmVmX25vZGUpO1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIGlmIChub2RlID09PSB0aGlzKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgYEZhaWxlZCB0byBleGVjdXRlICdhcHBlbmRDaGlsZCcgb24gJ05vZGUnOiBUaGUgbmV3IGNoaWxkIGVsZW1lbnQgY29udGFpbnMgdGhlIHBhcmVudC5gXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAocmVmX25vZGUpIHtcbiAgICAgIGNvbnN0IHJlZkRhdGEgPSBzaGFkeURhdGFGb3JOb2RlKHJlZl9ub2RlKTtcbiAgICAgIGNvbnN0IHAgPSByZWZEYXRhICYmIHJlZkRhdGEucGFyZW50Tm9kZTtcbiAgICAgIGlmIChcbiAgICAgICAgKHAgIT09IHVuZGVmaW5lZCAmJiBwICE9PSB0aGlzKSB8fFxuICAgICAgICAocCA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgcmVmX25vZGVbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdwYXJlbnROb2RlJ10gIT09IHRoaXMpXG4gICAgICApIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgYEZhaWxlZCB0byBleGVjdXRlICdpbnNlcnRCZWZvcmUnIG9uICdOb2RlJzogVGhlIG5vZGUgYCArXG4gICAgICAgICAgICBgYmVmb3JlIHdoaWNoIHRoZSBuZXcgbm9kZSBpcyB0byBiZSBpbnNlcnRlZCBpcyBub3QgYSBjaGlsZCBvZiB0aGlzIG5vZGUuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVmX25vZGUgPT09IG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICBzY2hlZHVsZU9ic2VydmVyKHRoaXMsIG5vZGUpO1xuICAgIC8qKiBAdHlwZSB7IUFycmF5PCFIVE1MU2xvdEVsZW1lbnQ+fSAqL1xuICAgIGNvbnN0IHNsb3RzQWRkZWQgPSBbXTtcbiAgICBjb25zdCBvd25lclJvb3QgPSBvd25lclNoYWR5Um9vdEZvck5vZGUodGhpcyk7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgY29uc3QgbmV3U2NvcGVOYW1lID0gb3duZXJSb290XG4gICAgICA/IG93bmVyUm9vdC5ob3N0LmxvY2FsTmFtZVxuICAgICAgOiBjdXJyZW50U2NvcGVGb3JOb2RlKHRoaXMpO1xuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIGxldCBvbGRTY29wZU5hbWU7XG4gICAgLy8gcmVtb3ZlIGZyb20gZXhpc3RpbmcgbG9jYXRpb25cbiAgICBjb25zdCBwYXJlbnROb2RlID0gbm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAncGFyZW50Tm9kZSddO1xuICAgIGlmIChwYXJlbnROb2RlKSB7XG4gICAgICBvbGRTY29wZU5hbWUgPSBjdXJyZW50U2NvcGVGb3JOb2RlKG5vZGUpO1xuICAgICAgY29uc3Qgc2tpcFVuc2NvcGluZyA9XG4gICAgICAgIC8vIERvbid0IHJlbW92ZSBzY29waW5nIGlmIHdlJ3JlIGluc2VydGluZyBpbnRvIGFub3RoZXIgc2hhZG93Um9vdDtcbiAgICAgICAgLy8gdGhpcyB3b3VsZCBiZSB1bm5lY2Vzc2FyeSBzaW5jZSBpdCB3aWxsIGJlIHJlLXNjb3BlZCBiZWxvd1xuICAgICAgICBCb29sZWFuKG93bmVyUm9vdCkgfHxcbiAgICAgICAgLy8gRG9uJ3QgcmVtb3ZlIHNjb3BpbmcgaWYgd2UncmUgYmVpbmcgbW92ZWQgYmV0d2VlbiBub24tc2hhZG93Um9vdFxuICAgICAgICAvLyBsb2NhdGlvbnMgKHRoZSBsaWtlbHkgY2FzZSBpcyB3aGVuIG1vdmluZyBwcmUtc2NvcGVkIG5vZGVzIGluIGEgdGVtcGxhdGUpXG4gICAgICAgICFvd25lclNoYWR5Um9vdEZvck5vZGUobm9kZSkgfHxcbiAgICAgICAgLy8gVW5kZXIgcHJlZmVyUGVyZm9ybWFuY2UsIGRvbid0IHJlbW92ZSBzY29waW5nIHdoZW4gbW92aW5nIGJhY2sgaW50b1xuICAgICAgICAvLyBhIGRvY3VtZW50IGZyYWdtZW50IHRoYXQgd2FzIHByZXZpb3VzbHkgc2NvcGVkOyB0aGUgYXNzdW1wdGlvbiBpc1xuICAgICAgICAvLyB0aGF0IHRoZSB1c2VyIHNob3VsZCBvbmx5IG1vdmUgY29ycmVjdGx5LXNjb3BlZCBET00gYmFjayBpbnRvIGl0XG4gICAgICAgIChwcmVmZXJQZXJmb3JtYW5jZSAmJiB0aGlzWydfX25vSW5zZXJ0aW9uUG9pbnQnXSAhPT0gdW5kZWZpbmVkKTtcbiAgICAgIHBhcmVudE5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3JlbW92ZUNoaWxkJ10obm9kZSwgc2tpcFVuc2NvcGluZyk7XG4gICAgfVxuICAgIC8vIGFkZCB0byBuZXcgcGFyZW50XG4gICAgbGV0IGFsbG93TmF0aXZlSW5zZXJ0ID0gdHJ1ZTtcbiAgICBjb25zdCBuZWVkc1Njb3BpbmcgPVxuICAgICAgKCFwcmVmZXJQZXJmb3JtYW5jZSB8fFxuICAgICAgICAvLyBVbmRlciBwcmVmZXJQZXJmb3JtYW5jZSwgb25seSByZS1zY29wZSBpZiB3ZSdyZSBub3QgY29taW5nIGZyb20gYVxuICAgICAgICAvLyBwcmUtc2NvcGVkIGRvYyBmcmFnbWVudCBvciBiYWNrIGludG8gYSBwcmUtc2NvcGVkIGRvYyBmcmFnbWVudFxuICAgICAgICAobm9kZVsnX19ub0luc2VydGlvblBvaW50J10gPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgIHRoaXNbJ19fbm9JbnNlcnRpb25Qb2ludCddID09PSB1bmRlZmluZWQpKSAmJlxuICAgICAgIWN1cnJlbnRTY29wZUlzQ29ycmVjdChub2RlLCBuZXdTY29wZU5hbWUpO1xuICAgIGNvbnN0IG5lZWRzU2xvdEZpbmRpbmcgPVxuICAgICAgb3duZXJSb290ICYmXG4gICAgICAhbm9kZVsnX19ub0luc2VydGlvblBvaW50J10gJiZcbiAgICAgICghcHJlZmVyUGVyZm9ybWFuY2UgfHwgbm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFKTtcbiAgICBpZiAobmVlZHNTbG90RmluZGluZyB8fCBuZWVkc1Njb3BpbmcpIHtcbiAgICAgIC8vIE5PVEU6IGF2b2lkIG5vZGUucmVtb3ZlQ2hpbGQgYXMgdGhpcyAqY2FuKiB0cmlnZ2VyIGFub3RoZXIgcGF0Y2hlZFxuICAgICAgLy8gbWV0aG9kIChlLmcuIGN1c3RvbSBlbGVtZW50cykgYW5kIHdlIHdhbnQgb25seSB0aGUgc2hhZHkgbWV0aG9kIHRvIHJ1bi5cbiAgICAgIC8vIFRoZSBmb2xsb3dpbmcgdGFibGUgZGVzY3JpYmVzIHdoYXQgc3R5bGUgc2NvcGluZyBhY3Rpb25zIHNob3VsZCBoYXBwZW4gYXMgYSByZXN1bHQgb2YgdGhpcyBpbnNlcnRpb24uXG4gICAgICAvLyBkb2N1bWVudCAtPiBzaGFkb3dSb290OiByZXBsYWNlXG4gICAgICAvLyBzaGFkb3dSb290IC0+IHNoYWRvd1Jvb3Q6IHJlcGxhY2VcbiAgICAgIC8vIHNoYWRvd1Jvb3QgLT4gc2hhZG93Um9vdCBvZiBzYW1lIHR5cGU6IGRvIG5vdGhpbmdcbiAgICAgIC8vIHNoYWRvd1Jvb3QgLT4gZG9jdW1lbnQ6IGFsbG93IHVuc2NvcGluZ1xuICAgICAgLy8gZG9jdW1lbnQgLT4gZG9jdW1lbnQ6IGRvIG5vdGhpbmdcbiAgICAgIC8vIFRoZSBcInNhbWUgdHlwZSBvZiBzaGFkb3dSb290XCIgYW5kIFwiZG9jdW1lbnQgdG8gZG9jdW1lbnQgY2FzZXMgcmVseSBvbiBgY3VycmVudFNjb3BlSXNDb3JyZWN0YCByZXR1cm5pbmcgdHJ1ZVxuICAgICAgaWYgKG5lZWRzU2NvcGluZykge1xuICAgICAgICAvLyBpbiBhIGRvY3VtZW50IG9yIGRpc2Nvbm5lY3RlZCB0cmVlLCByZXBsYWNlIHNjb3BpbmcgaWYgbmVjZXNzYXJ5XG4gICAgICAgIG9sZFNjb3BlTmFtZSA9IG9sZFNjb3BlTmFtZSB8fCBjdXJyZW50U2NvcGVGb3JOb2RlKG5vZGUpO1xuICAgICAgfVxuICAgICAgdHJlZVZpc2l0b3Iobm9kZSwgKG5vZGUpID0+IHtcbiAgICAgICAgaWYgKG5lZWRzU2xvdEZpbmRpbmcgJiYgbm9kZS5sb2NhbE5hbWUgPT09ICdzbG90Jykge1xuICAgICAgICAgIHNsb3RzQWRkZWQucHVzaCgvKiogQHR5cGUgeyFIVE1MU2xvdEVsZW1lbnR9ICovIChub2RlKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5lZWRzU2NvcGluZykge1xuICAgICAgICAgIHJlcGxhY2VTaGFkeVNjb3Bpbmcobm9kZSwgbmV3U2NvcGVOYW1lLCBvbGRTY29wZU5hbWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gaWYgYSBzbG90IGlzIGFkZGVkLCBtdXN0IHJlbmRlciBjb250YWluaW5nIHJvb3QuXG4gICAgaWYgKHNsb3RzQWRkZWQubGVuZ3RoKSB7XG4gICAgICBvd25lclJvb3QuX2FkZFNsb3RzKHNsb3RzQWRkZWQpO1xuICAgICAgb3duZXJSb290Ll9hc3luY1JlbmRlcigpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNUcmFja2luZ0xvZ2ljYWxDaGlsZE5vZGVzKHRoaXMpKSB7XG4gICAgICByZWNvcmRJbnNlcnRCZWZvcmUobm9kZSwgdGhpcywgcmVmX25vZGUpO1xuICAgICAgY29uc3QgcGFyZW50RGF0YSA9IHNoYWR5RGF0YUZvck5vZGUodGhpcyk7XG4gICAgICAvLyBpZiB0aGUgbm9kZSBiZWluZyBpbnNlcnRlZCBpbnRvIGhhcyBhIHNoYWRvd1Jvb3QsIGRvIG5vdCBwZXJmb3JtXG4gICAgICAvLyBhIG5hdGl2ZSBpbnNlcnRpb25cbiAgICAgIGlmIChwYXJlbnREYXRhLnJvb3QpIHtcbiAgICAgICAgYWxsb3dOYXRpdmVJbnNlcnQgPSBmYWxzZTtcbiAgICAgICAgLy8gd2hlbiBpbnNlcnRpbmcgaW50byBhIGhvc3Qgd2l0aCBhIHNoYWRvd1Jvb3Qgd2l0aCBzbG90LCB1c2VcbiAgICAgICAgLy8gYHNoYWRvd1Jvb3QuX2FzeW5jUmVuZGVyKClgIHZpYSBgYXR0YWNoLXNoYWRvd2AgbW9kdWxlXG4gICAgICAgIC8vIHdoZW4gaW5zZXJ0aW5nIGludG8gYSBob3N0IHdpdGggc2hhZG93Um9vdCB3aXRoIE5PIHNsb3QsIGRvIG5vdGhpbmdcbiAgICAgICAgLy8gYXMgdGhlIG5vZGUgc2hvdWxkIG5vdCBiZSBhZGRlZCB0byBjb21wb3NlZCBET00gYW55d2hlcmUuXG4gICAgICAgIGlmICh1dGlscy5oYXNTaGFkb3dSb290V2l0aFNsb3QodGhpcykpIHtcbiAgICAgICAgICBwYXJlbnREYXRhLnJvb3QuX2FzeW5jUmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIHdoZW4gaW5zZXJ0aW5nIGludG8gYSBzbG90IGluc2lkZSBhIHNoYWRvd1Jvb3QsIHJlbmRlciB0aGVcbiAgICAgIC8vIGNvbnRhaW5pbmcgc2hhZG93Um9vdCB0byB1cGRhdGUgZmFsbGJhY2sgY29udGVudC5cbiAgICAgIGVsc2UgaWYgKG93bmVyUm9vdCAmJiB0aGlzLmxvY2FsTmFtZSA9PT0gJ3Nsb3QnKSB7XG4gICAgICAgIGFsbG93TmF0aXZlSW5zZXJ0ID0gZmFsc2U7XG4gICAgICAgIG93bmVyUm9vdC5fYXN5bmNSZW5kZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFsbG93TmF0aXZlSW5zZXJ0KSB7XG4gICAgICAvLyBpZiBhZGRpbmcgdG8gYSBzaGFkeVJvb3QsIGFkZCB0byBob3N0IGluc3RlYWRcbiAgICAgIGxldCBjb250YWluZXIgPSB1dGlscy5pc1NoYWR5Um9vdCh0aGlzKVxuICAgICAgICA/IC8qKiBAdHlwZSB7U2hhZG93Um9vdH0gKi8gKHRoaXMpLmhvc3RcbiAgICAgICAgOiB0aGlzO1xuICAgICAgLy8gaWYgcmVmX25vZGUsIGdldCB0aGUgcmVmX25vZGUgdGhhdCdzIGFjdHVhbGx5IGluIGNvbXBvc2VkIGRvbS5cbiAgICAgIGlmIChyZWZfbm9kZSkge1xuICAgICAgICByZWZfbm9kZSA9IGZpcnN0Q29tcG9zZWROb2RlKHJlZl9ub2RlKTtcbiAgICAgICAgY29udGFpbmVyW3V0aWxzLk5BVElWRV9QUkVGSVggKyAnaW5zZXJ0QmVmb3JlJ10obm9kZSwgcmVmX25vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGFpbmVyW3V0aWxzLk5BVElWRV9QUkVGSVggKyAnYXBwZW5kQ2hpbGQnXShub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gU2luY2Ugb3duZXJEb2N1bWVudCBpcyBub3QgcGF0Y2hlZCwgaXQgY2FuIGJlIGluY29ycmVjdCBhZnRlciB0aGlzIGNhbGxcbiAgICAvLyBpZiB0aGUgbm9kZSBpcyBwaHlzaWNhbGx5IGFwcGVuZGVkIHZpYSBkaXN0cmlidXRpb24uIFRoaXMgY2FuIHJlc3VsdFxuICAgIC8vIGluIHRoZSBjdXN0b20gZWxlbWVudHMgcG9seWZpbGwgbm90IHVwZ3JhZGluZyB0aGUgbm9kZSBpZiBpdCdzIGluIGFuIGluZXJ0IGRvYy5cbiAgICAvLyBXZSBjb3JyZWN0IHRoaXMgYnkgY2FsbGluZyBgYWRvcHROb2RlYC5cbiAgICBlbHNlIGlmIChub2RlLm93bmVyRG9jdW1lbnQgIT09IHRoaXMub3duZXJEb2N1bWVudCkge1xuICAgICAgdGhpcy5vd25lckRvY3VtZW50LmFkb3B0Tm9kZShub2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEB0aGlzIHtOb2RlfVxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICovXG4gIGFwcGVuZENoaWxkKG5vZGUpIHtcbiAgICAvLyBpZiB0aGlzIGlzIGEgc2hhZG93Um9vdCBhbmQgdGhlIHNoYWRvd1Jvb3QgaXMgcGFzc2VkIGFzIGBub2RlYFxuICAgIC8vIHRoZW4gYW4gb3B0aW1pemVkIGFwcGVuZCBoYXMgYWxyZWFkeSBiZWVuIHBlcmZvcm1lZCwgc28gZG8gbm90aGluZy5cbiAgICBpZiAoISh0aGlzID09IG5vZGUgJiYgdXRpbHMuaXNTaGFkeVJvb3Qobm9kZSkpKSB7XG4gICAgICByZXR1cm4gdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAnaW5zZXJ0QmVmb3JlJ10obm9kZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBQYXRjaGVkIGByZW1vdmVDaGlsZGAuIE5vdGUgdGhhdCBhbGwgZG9tIFwicmVtb3ZhbHNcIiBhcmUgcm91dGVkIGhlcmUuXG4gICAqIFJlbW92ZXMgdGhlIGdpdmVuIGBub2RlYCBmcm9tIHRoZSBlbGVtZW50J3MgYGNoaWxkcmVuYC5cbiAgICogVGhpcyBtZXRob2QgYWxzbyBwZXJmb3JtcyBkb20gY29tcG9zaXRpb24uXG4gICAqIEB0aGlzIHtOb2RlfVxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAgICogQHBhcmFtIHtib29sZWFuPX0gc2tpcFVuc2NvcGluZ1xuICAgKi9cbiAgcmVtb3ZlQ2hpbGQobm9kZSwgc2tpcFVuc2NvcGluZyA9IGZhbHNlKSB7XG4gICAgaWYgKHRoaXMub3duZXJEb2N1bWVudCAhPT0gZG9jKSB7XG4gICAgICByZXR1cm4gdGhpc1t1dGlscy5OQVRJVkVfUFJFRklYICsgJ3JlbW92ZUNoaWxkJ10obm9kZSk7XG4gICAgfVxuICAgIGlmIChub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdwYXJlbnROb2RlJ10gIT09IHRoaXMpIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAnVGhlIG5vZGUgdG8gYmUgcmVtb3ZlZCBpcyBub3QgYSBjaGlsZCBvZiB0aGlzIG5vZGU6ICcgKyBub2RlXG4gICAgICApO1xuICAgIH1cbiAgICBzY2hlZHVsZU9ic2VydmVyKHRoaXMsIG51bGwsIG5vZGUpO1xuICAgIGxldCBwcmV2ZW50TmF0aXZlUmVtb3ZlO1xuICAgIGxldCBvd25lclJvb3QgPSBvd25lclNoYWR5Um9vdEZvck5vZGUobm9kZSk7XG4gICAgY29uc3QgcmVtb3ZpbmdJbnNlcnRpb25Qb2ludCA9XG4gICAgICBvd25lclJvb3QgJiYgb3duZXJSb290Ll9yZW1vdmVDb250YWluZWRTbG90cyhub2RlKTtcbiAgICBjb25zdCBwYXJlbnREYXRhID0gc2hhZHlEYXRhRm9yTm9kZSh0aGlzKTtcbiAgICBpZiAodXRpbHMuaXNUcmFja2luZ0xvZ2ljYWxDaGlsZE5vZGVzKHRoaXMpKSB7XG4gICAgICByZWNvcmRSZW1vdmVDaGlsZChub2RlLCB0aGlzKTtcbiAgICAgIGlmICh1dGlscy5oYXNTaGFkb3dSb290V2l0aFNsb3QodGhpcykpIHtcbiAgICAgICAgcGFyZW50RGF0YS5yb290Ll9hc3luY1JlbmRlcigpO1xuICAgICAgICBwcmV2ZW50TmF0aXZlUmVtb3ZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdW5zY29wZSBhIG5vZGUgbGVhdmluZyBhIFNoYWRvd1Jvb3QgaWYgU2hhZHlDU1MgaXMgcHJlc2VudCwgYW5kIHRoaXMgbm9kZVxuICAgIC8vIGlzIG5vdCBnb2luZyB0byBiZSByZXNjb3BlZCBpbiBgaW5zZXJ0QmVmb3JlYFxuICAgIGlmIChcbiAgICAgIGdldFNjb3BpbmdTaGltKCkgJiZcbiAgICAgICFza2lwVW5zY29waW5nICYmXG4gICAgICBvd25lclJvb3QgJiZcbiAgICAgIG5vZGUubm9kZVR5cGUgIT09IE5vZGUuVEVYVF9OT0RFXG4gICAgKSB7XG4gICAgICBjb25zdCBvbGRTY29wZU5hbWUgPSBjdXJyZW50U2NvcGVGb3JOb2RlKG5vZGUpO1xuICAgICAgdHJlZVZpc2l0b3Iobm9kZSwgKG5vZGUpID0+IHtcbiAgICAgICAgcmVtb3ZlU2hhZHlTY29waW5nKG5vZGUsIG9sZFNjb3BlTmFtZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmVtb3ZlT3duZXJTaGFkeVJvb3Qobm9kZSk7XG4gICAgLy8gaWYgcmVtb3Zpbmcgc2xvdCwgbXVzdCByZW5kZXIgY29udGFpbmluZyByb290XG4gICAgaWYgKG93bmVyUm9vdCkge1xuICAgICAgbGV0IGNoYW5nZVNsb3RDb250ZW50ID0gdGhpcy5sb2NhbE5hbWUgPT09ICdzbG90JztcbiAgICAgIGlmIChjaGFuZ2VTbG90Q29udGVudCkge1xuICAgICAgICBwcmV2ZW50TmF0aXZlUmVtb3ZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZW1vdmluZ0luc2VydGlvblBvaW50IHx8IGNoYW5nZVNsb3RDb250ZW50KSB7XG4gICAgICAgIG93bmVyUm9vdC5fYXN5bmNSZW5kZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFwcmV2ZW50TmF0aXZlUmVtb3ZlKSB7XG4gICAgICAvLyBpZiByZW1vdmluZyBmcm9tIGEgc2hhZHlSb290LCByZW1vdmUgZnJvbSBob3N0IGluc3RlYWRcbiAgICAgIGxldCBjb250YWluZXIgPSB1dGlscy5pc1NoYWR5Um9vdCh0aGlzKVxuICAgICAgICA/IC8qKiBAdHlwZSB7U2hhZG93Um9vdH0gKi8gKHRoaXMpLmhvc3RcbiAgICAgICAgOiB0aGlzO1xuICAgICAgLy8gbm90IGd1YXJhbnRlZWQgdG8gcGh5c2ljYWxseSBiZSBpbiBjb250YWluZXI7IGUuZy5cbiAgICAgIC8vICgxKSBpZiBwYXJlbnQgaGFzIGEgc2hhZHlSb290LCBlbGVtZW50IG1heSBvciBtYXkgbm90IGF0IGRpc3RyaWJ1dGVkXG4gICAgICAvLyBsb2NhdGlvbiAoY291bGQgYmUgdW5kaXN0cmlidXRlZClcbiAgICAgIC8vICgyKSBpZiBwYXJlbnQgaXMgYSBzbG90LCBlbGVtZW50IG1heSBub3QgYmVuIGluIGNvbXBvc2VkIGRvbVxuICAgICAgaWYgKFxuICAgICAgICAhKHBhcmVudERhdGEucm9vdCB8fCBub2RlLmxvY2FsTmFtZSA9PT0gJ3Nsb3QnKSB8fFxuICAgICAgICBjb250YWluZXIgPT09IG5vZGVbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdwYXJlbnROb2RlJ11cbiAgICAgICkge1xuICAgICAgICBjb250YWluZXJbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdyZW1vdmVDaGlsZCddKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbiAgfSxcblxuICAvKipcbiAgICogQHRoaXMge05vZGV9XG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZVxuICAgKiBAcGFyYW0ge05vZGU9fSByZWZfbm9kZVxuICAgKi9cbiAgcmVwbGFjZUNoaWxkKG5vZGUsIHJlZl9ub2RlKSB7XG4gICAgdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAnaW5zZXJ0QmVmb3JlJ10obm9kZSwgcmVmX25vZGUpO1xuICAgIHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3JlbW92ZUNoaWxkJ10ocmVmX25vZGUpO1xuICAgIHJldHVybiBub2RlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAdGhpcyB7Tm9kZX1cbiAgICogQHBhcmFtIHtib29sZWFuPX0gZGVlcFxuICAgKi9cbiAgY2xvbmVOb2RlKGRlZXApIHtcbiAgICBpZiAodGhpcy5sb2NhbE5hbWUgPT0gJ3RlbXBsYXRlJykge1xuICAgICAgcmV0dXJuIHRoaXNbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdjbG9uZU5vZGUnXShkZWVwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbiA9IHRoaXNbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdjbG9uZU5vZGUnXShmYWxzZSk7XG4gICAgICAvLyBBdHRyaWJ1dGUgbm9kZXMgaGlzdG9yaWNhbGx5IGhhZCBjaGlsZE5vZGVzLCBidXQgdGhleSBoYXZlIGxhdGVyXG4gICAgICAvLyBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgc3BlYy5cbiAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBkbyBub3QgZG8gYSBkZWVwIGNsb25lIG9uIHRoZW0gZm9yIG9sZCBicm93c2VycyAoSUUxMSlcbiAgICAgIGlmIChkZWVwICYmIG4ubm9kZVR5cGUgIT09IE5vZGUuQVRUUklCVVRFX05PREUpIHtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgYyA9IHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2ZpcnN0Q2hpbGQnXSwgbmM7XG4gICAgICAgICAgYztcbiAgICAgICAgICBjID0gY1t1dGlscy5TSEFEWV9QUkVGSVggKyAnbmV4dFNpYmxpbmcnXVxuICAgICAgICApIHtcbiAgICAgICAgICBuYyA9IGNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2Nsb25lTm9kZSddKHRydWUpO1xuICAgICAgICAgIG5bdXRpbHMuU0hBRFlfUFJFRklYICsgJ2FwcGVuZENoaWxkJ10obmMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbjtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEB0aGlzIHtOb2RlfVxuICAgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnNcbiAgICovXG4gIC8vIFRPRE8oc29ydmVsbCk6IGltcGxlbWVudCBgb3B0aW9uc2AgZS5nLiBgeyBjb21wb3NlZDogYm9vbGVhbiB9YFxuICBnZXRSb290Tm9kZShvcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzIHx8ICF0aGlzLm5vZGVUeXBlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG5vZGVEYXRhID0gZW5zdXJlU2hhZHlEYXRhRm9yTm9kZSh0aGlzKTtcbiAgICBsZXQgcm9vdCA9IG5vZGVEYXRhLm93bmVyU2hhZHlSb290O1xuICAgIGlmIChyb290ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh1dGlscy5pc1NoYWR5Um9vdCh0aGlzKSkge1xuICAgICAgICByb290ID0gdGhpcztcbiAgICAgICAgbm9kZURhdGEub3duZXJTaGFkeVJvb3QgPSByb290O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHBhcmVudCA9IHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3BhcmVudE5vZGUnXTtcbiAgICAgICAgcm9vdCA9IHBhcmVudFxuICAgICAgICAgID8gcGFyZW50W3V0aWxzLlNIQURZX1BSRUZJWCArICdnZXRSb290Tm9kZSddKG9wdGlvbnMpXG4gICAgICAgICAgOiB0aGlzO1xuICAgICAgICAvLyBtZW1vLWl6ZSByZXN1bHQgZm9yIHBlcmZvcm1hbmNlIGJ1dCBvbmx5IG1lbW8taXplXG4gICAgICAgIC8vIHJlc3VsdCBpZiBub2RlIGlzIGluIHRoZSBkb2N1bWVudC4gVGhpcyBhdm9pZHMgYSBwcm9ibGVtIHdoZXJlIGEgcm9vdFxuICAgICAgICAvLyBjYW4gYmUgY2FjaGVkIHdoaWxlIGFuIGVsZW1lbnQgaXMgaW5zaWRlIGEgZnJhZ21lbnQuXG4gICAgICAgIC8vIElmIHRoaXMgaGFwcGVucyBhbmQgd2UgY2FjaGUgdGhlIHJlc3VsdCwgdGhlIHZhbHVlIGNhbiBiZWNvbWUgc3RhbGVcbiAgICAgICAgLy8gYmVjYXVzZSBmb3IgcGVyZiB3ZSBhdm9pZCBwcm9jZXNzaW5nIHRoZSBzdWJ0cmVlIG9mIGFkZGVkIGZyYWdtZW50cy5cbiAgICAgICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudFt1dGlscy5OQVRJVkVfUFJFRklYICsgJ2NvbnRhaW5zJ10odGhpcykpIHtcbiAgICAgICAgICBub2RlRGF0YS5vd25lclNoYWR5Um9vdCA9IHJvb3Q7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH0sXG5cbiAgLyoqIEB0aGlzIHtOb2RlfSAqL1xuICBjb250YWlucyhub2RlKSB7XG4gICAgcmV0dXJuIHV0aWxzLmNvbnRhaW5zKHRoaXMsIG5vZGUpO1xuICB9LFxufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQge2NhbGN1bGF0ZVNwbGljZXN9IGZyb20gJy4vYXJyYXktc3BsaWNlLmpzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHtlbnF1ZXVlfSBmcm9tICcuL2ZsdXNoLmpzJztcbmltcG9ydCB7ZW5zdXJlU2hhZHlEYXRhRm9yTm9kZSwgc2hhZHlEYXRhRm9yTm9kZX0gZnJvbSAnLi9zaGFkeS1kYXRhLmpzJztcbmltcG9ydCB7cmVjb3JkQ2hpbGROb2Rlc30gZnJvbSAnLi9saW5rLW5vZGVzLmpzJztcbmltcG9ydCB7cGF0Y2hTaGFkeVJvb3R9IGZyb20gJy4vcGF0Y2gtc2hhZHlSb290LmpzJztcblxuLy8gRG8gbm90IGV4cG9ydCB0aGlzIG9iamVjdC4gSXQgbXVzdCBiZSBwYXNzZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRoZVxuLy8gU2hhZHlSb290IGNvbnN0cnVjdG9yIGluIGBhdHRhY2hTaGFkb3dgIHRvIHByZXZlbnQgdGhlIGNvbnN0cnVjdG9yIGZyb21cbi8vIHRocm93aW5nLiBUaGlzIHByZXZlbnRzIHRoZSB1c2VyIGZyb20gYmVpbmcgYWJsZSB0byBtYW51YWxseSBjb25zdHJ1Y3QgYVxuLy8gU2hhZHlSb290IChpLmUuIGBuZXcgU2hhZG93Um9vdCgpYCkuXG5jb25zdCBTaGFkeVJvb3RDb25zdHJ1Y3Rpb25Ub2tlbiA9IHt9O1xuXG5jb25zdCBDQVRDSEFMTF9OQU1FID0gJ19fY2F0Y2hhbGwnO1xuXG5jb25zdCBNT0RFX0NMT1NFRCA9ICdjbG9zZWQnO1xuXG5sZXQgaXNSZW5kZXJpbmcgPVxuICB1dGlscy5zZXR0aW5nc1snZGVmZXJDb25uZWN0aW9uQ2FsbGJhY2tzJ10gJiZcbiAgZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnO1xubGV0IHJvb3RSZW5kZXJlZDtcblxuZnVuY3Rpb24gYW5jZXN0b3JMaXN0KG5vZGUpIHtcbiAgbGV0IGFuY2VzdG9ycyA9IFtdO1xuICBkbyB7XG4gICAgYW5jZXN0b3JzLnVuc2hpZnQobm9kZSk7XG4gIH0gd2hpbGUgKChub2RlID0gbm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAncGFyZW50Tm9kZSddKSk7XG4gIHJldHVybiBhbmNlc3RvcnM7XG59XG5cbi8qKlxuICogQGV4dGVuZHMge1NoYWRvd1Jvb3R9XG4gKi9cbmNsYXNzIFNoYWR5Um9vdCB7XG4gIGNvbnN0cnVjdG9yKHRva2VuLCBob3N0LCBvcHRpb25zKSB7XG4gICAgaWYgKHRva2VuICE9PSBTaGFkeVJvb3RDb25zdHJ1Y3Rpb25Ub2tlbikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSWxsZWdhbCBjb25zdHJ1Y3RvcicpO1xuICAgIH1cbiAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgdGhpcy5fcmVuZGVyUGVuZGluZztcbiAgICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gICAgdGhpcy5faGFzUmVuZGVyZWQ7XG4gICAgLyoqIEB0eXBlIHs/QXJyYXk8SFRNTFNsb3RFbGVtZW50Pn0gKi9cbiAgICB0aGlzLl9zbG90TGlzdCA9IG51bGw7XG4gICAgLyoqIEB0eXBlIHs/T2JqZWN0PHN0cmluZywgQXJyYXk8SFRNTFNsb3RFbGVtZW50Pj59ICovXG4gICAgdGhpcy5fc2xvdE1hcDtcbiAgICAvKiogQHR5cGUgez9BcnJheTxIVE1MU2xvdEVsZW1lbnQ+fSAqL1xuICAgIHRoaXMuX3BlbmRpbmdTbG90cztcbiAgICB0aGlzLl9pbml0KGhvc3QsIG9wdGlvbnMpO1xuICB9XG5cbiAgX2luaXQoaG9zdCwgb3B0aW9ucykge1xuICAgIC8vIHJvb3QgPD0+IGhvc3RcbiAgICB0aGlzLmhvc3QgPSBob3N0O1xuICAgIC8qKiBAdHlwZSB7IXN0cmluZ3x1bmRlZmluZWR9ICovXG4gICAgdGhpcy5tb2RlID0gb3B0aW9ucyAmJiBvcHRpb25zLm1vZGU7XG4gICAgcmVjb3JkQ2hpbGROb2Rlcyh0aGlzLmhvc3QpO1xuICAgIGNvbnN0IGhvc3REYXRhID0gZW5zdXJlU2hhZHlEYXRhRm9yTm9kZSh0aGlzLmhvc3QpO1xuICAgIC8qKiBAdHlwZSB7IVNoYWR5Um9vdH0gKi9cbiAgICBob3N0RGF0YS5yb290ID0gdGhpcztcbiAgICBob3N0RGF0YS5wdWJsaWNSb290ID0gdGhpcy5tb2RlICE9PSBNT0RFX0NMT1NFRCA/IHRoaXMgOiBudWxsO1xuICAgIC8vIHNldHVwIHJvb3RcbiAgICBjb25zdCByb290RGF0YSA9IGVuc3VyZVNoYWR5RGF0YUZvck5vZGUodGhpcyk7XG4gICAgcm9vdERhdGEuZmlyc3RDaGlsZCA9IHJvb3REYXRhLmxhc3RDaGlsZCA9IHJvb3REYXRhLnBhcmVudE5vZGUgPSByb290RGF0YS5uZXh0U2libGluZyA9IHJvb3REYXRhLnByZXZpb3VzU2libGluZyA9IG51bGw7XG4gICAgLy8gTk9URTogb3B0aW1pemF0aW9uIGZsYWcsIG9ubHkgcmVxdWlyZSBhbiBhc3luY2hyb25vdXMgcmVuZGVyXG4gICAgLy8gdG8gcmVjb3JkIHBhcnNlZCBjaGlsZHJlbiBpZiBmbGFnIGlzIG5vdCBzZXQuXG4gICAgaWYgKHV0aWxzLnNldHRpbmdzWydwcmVmZXJQZXJmb3JtYW5jZSddKSB7XG4gICAgICBsZXQgbjtcbiAgICAgIHdoaWxlICgobiA9IHRoaXMuaG9zdFt1dGlscy5OQVRJVkVfUFJFRklYICsgJ2ZpcnN0Q2hpbGQnXSkpIHtcbiAgICAgICAgdGhpcy5ob3N0W3V0aWxzLk5BVElWRV9QUkVGSVggKyAncmVtb3ZlQ2hpbGQnXShuKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYXN5bmNSZW5kZXIoKTtcbiAgICB9XG4gIH1cblxuICBfYXN5bmNSZW5kZXIoKSB7XG4gICAgaWYgKCF0aGlzLl9yZW5kZXJQZW5kaW5nKSB7XG4gICAgICB0aGlzLl9yZW5kZXJQZW5kaW5nID0gdHJ1ZTtcbiAgICAgIGVucXVldWUoKCkgPT4gdGhpcy5fcmVuZGVyKCkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHJldHVybnMgdGhlIG9sZGVzdCByZW5kZXJQZW5kaW5nIGFuY2VzdG9yIHJvb3QuXG4gIF9nZXRQZW5kaW5nRGlzdHJpYnV0aW9uUm9vdCgpIHtcbiAgICBsZXQgcmVuZGVyUm9vdDtcbiAgICBsZXQgcm9vdCA9IHRoaXM7XG4gICAgd2hpbGUgKHJvb3QpIHtcbiAgICAgIGlmIChyb290Ll9yZW5kZXJQZW5kaW5nKSB7XG4gICAgICAgIHJlbmRlclJvb3QgPSByb290O1xuICAgICAgfVxuICAgICAgcm9vdCA9IHJvb3QuX2dldERpc3RyaWJ1dGlvblBhcmVudCgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVuZGVyUm9vdDtcbiAgfVxuXG4gIC8vIFJldHVybnMgdGhlIHNoYWR5Um9vdCBgdGhpcy5ob3N0YCBpZiBgdGhpcy5ob3N0YFxuICAvLyBoYXMgY2hpbGRyZW4gdGhhdCByZXF1aXJlIGRpc3RyaWJ1dGlvbi5cbiAgX2dldERpc3RyaWJ1dGlvblBhcmVudCgpIHtcbiAgICBsZXQgcm9vdCA9IHRoaXMuaG9zdFt1dGlscy5TSEFEWV9QUkVGSVggKyAnZ2V0Um9vdE5vZGUnXSgpO1xuICAgIGlmICghdXRpbHMuaXNTaGFkeVJvb3Qocm9vdCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgbm9kZURhdGEgPSBzaGFkeURhdGFGb3JOb2RlKHRoaXMuaG9zdCk7XG4gICAgaWYgKG5vZGVEYXRhICYmIG5vZGVEYXRhLl9fY2hpbGRTbG90Q291bnQgPiAwKSB7XG4gICAgICByZXR1cm4gcm9vdDtcbiAgICB9XG4gIH1cblxuICAvLyBSZW5kZXJzIHRoZSB0b3AgbW9zdCByZW5kZXIgcGVuZGluZyBzaGFkb3dSb290IGluIHRoZSBkaXN0cmlidXRpb24gdHJlZS5cbiAgLy8gVGhpcyBpcyBzYWZlIGJlY2F1c2Ugd2hlbiBhIGRpc3RyaWJ1dGlvbiBwYXJlbnQgcmVuZGVycywgYWxsIGNoaWxkcmVuIHJlbmRlci5cbiAgX3JlbmRlcigpIHtcbiAgICAvLyBJZiB0aGlzIHJvb3QgaXMgbm90IHBlbmRpbmcsIGl0IG5lZWRzIG5vIHJlbmRlcmluZyB3b3JrLiBBbnkgcGVuZGluZ1xuICAgIC8vIHBhcmVudCB0aGF0IG5lZWRzIHRvIHJlbmRlciB3bGwgY2F1c2UgdGhpcyByb290IHRvIHJlbmRlci5cbiAgICBjb25zdCByb290ID0gdGhpcy5fcmVuZGVyUGVuZGluZyAmJiB0aGlzLl9nZXRQZW5kaW5nRGlzdHJpYnV0aW9uUm9vdCgpO1xuICAgIGlmIChyb290KSB7XG4gICAgICByb290Ll9yZW5kZXJTZWxmKCk7XG4gICAgfVxuICB9XG5cbiAgX2ZsdXNoSW5pdGlhbCgpIHtcbiAgICBpZiAoIXRoaXMuX2hhc1JlbmRlcmVkICYmIHRoaXMuX3JlbmRlclBlbmRpbmcpIHtcbiAgICAgIHRoaXMuX3JlbmRlcigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgX3JlbmRlclNlbGYoKSB7XG4gICAgLy8gdHJhY2sgcmVuZGVyaW5nIHN0YXRlLlxuICAgIGNvbnN0IHdhc1JlbmRlcmluZyA9IGlzUmVuZGVyaW5nO1xuICAgIGlzUmVuZGVyaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl9yZW5kZXJQZW5kaW5nID0gZmFsc2U7XG4gICAgaWYgKHRoaXMuX3Nsb3RMaXN0KSB7XG4gICAgICB0aGlzLl9kaXN0cmlidXRlKCk7XG4gICAgICB0aGlzLl9jb21wb3NlKCk7XG4gICAgfVxuICAgIC8vIE5PVEU6IG9wdGltaXphdGlvbiBmbGFnLCBvbmx5IHByb2Nlc3MgcGFyc2VkIGNoaWxkcmVuXG4gICAgLy8gaWYgb3B0aW1pemF0aW9uIGZsYWcgaXMgbm90IHNldC5cbiAgICAvLyBvbiBpbml0aWFsIHJlbmRlciByZW1vdmUgYW55IHVuZGlzdHJpYnV0ZWQgY2hpbGRyZW4uXG4gICAgaWYgKCF1dGlscy5zZXR0aW5nc1sncHJlZmVyUGVyZm9ybWFuY2UnXSAmJiAhdGhpcy5faGFzUmVuZGVyZWQpIHtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBuID0gdGhpcy5ob3N0W3V0aWxzLlNIQURZX1BSRUZJWCArICdmaXJzdENoaWxkJ107XG4gICAgICAgIG47XG4gICAgICAgIG4gPSBuW3V0aWxzLlNIQURZX1BSRUZJWCArICduZXh0U2libGluZyddXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHNoYWR5RGF0YUZvck5vZGUobik7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBuW3V0aWxzLk5BVElWRV9QUkVGSVggKyAncGFyZW50Tm9kZSddID09PSB0aGlzLmhvc3QgJiZcbiAgICAgICAgICAobi5sb2NhbE5hbWUgPT09ICdzbG90JyB8fCAhZGF0YS5hc3NpZ25lZFNsb3QpXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuaG9zdFt1dGlscy5OQVRJVkVfUFJFRklYICsgJ3JlbW92ZUNoaWxkJ10obik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5faGFzUmVuZGVyZWQgPSB0cnVlO1xuICAgIGlzUmVuZGVyaW5nID0gd2FzUmVuZGVyaW5nO1xuICAgIGlmIChyb290UmVuZGVyZWQpIHtcbiAgICAgIHJvb3RSZW5kZXJlZCgpO1xuICAgIH1cbiAgfVxuXG4gIF9kaXN0cmlidXRlKCkge1xuICAgIHRoaXMuX3ZhbGlkYXRlU2xvdHMoKTtcbiAgICAvLyBjYXB0dXJlICMgb2YgcHJldmlvdXNseSBhc3NpZ25lZCBub2RlcyB0byBoZWxwIGRldGVybWluZSBpZiBkaXJ0eS5cbiAgICBmb3IgKGxldCBpID0gMCwgc2xvdDsgaSA8IHRoaXMuX3Nsb3RMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBzbG90ID0gdGhpcy5fc2xvdExpc3RbaV07XG4gICAgICB0aGlzLl9jbGVhclNsb3RBc3NpZ25lZE5vZGVzKHNsb3QpO1xuICAgIH1cbiAgICAvLyBkaXN0cmlidXRlIGhvc3QgY2hpbGRyZW4uXG4gICAgZm9yIChcbiAgICAgIGxldCBuID0gdGhpcy5ob3N0W3V0aWxzLlNIQURZX1BSRUZJWCArICdmaXJzdENoaWxkJ107XG4gICAgICBuO1xuICAgICAgbiA9IG5bdXRpbHMuU0hBRFlfUFJFRklYICsgJ25leHRTaWJsaW5nJ11cbiAgICApIHtcbiAgICAgIHRoaXMuX2Rpc3RyaWJ1dGVOb2RlVG9TbG90KG4pO1xuICAgIH1cbiAgICAvLyBmYWxsYmFjayBjb250ZW50LCBzbG90Y2hhbmdlLCBhbmQgZGlydHkgcm9vdHNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3Nsb3RMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzbG90ID0gdGhpcy5fc2xvdExpc3RbaV07XG4gICAgICBjb25zdCBzbG90RGF0YSA9IHNoYWR5RGF0YUZvck5vZGUoc2xvdCk7XG4gICAgICAvLyBkaXN0cmlidXRlIGZhbGxiYWNrIGNvbnRlbnRcbiAgICAgIGlmICghc2xvdERhdGEuYXNzaWduZWROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBsZXQgbiA9IHNsb3RbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2ZpcnN0Q2hpbGQnXTtcbiAgICAgICAgICBuO1xuICAgICAgICAgIG4gPSBuW3V0aWxzLlNIQURZX1BSRUZJWCArICduZXh0U2libGluZyddXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuX2Rpc3RyaWJ1dGVOb2RlVG9TbG90KG4sIHNsb3QpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBzbG90UGFyZW50RGF0YSA9IHNoYWR5RGF0YUZvck5vZGUoXG4gICAgICAgIHNsb3RbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3BhcmVudE5vZGUnXVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHNsb3RQYXJlbnRSb290ID0gc2xvdFBhcmVudERhdGEgJiYgc2xvdFBhcmVudERhdGEucm9vdDtcbiAgICAgIGlmIChcbiAgICAgICAgc2xvdFBhcmVudFJvb3QgJiZcbiAgICAgICAgKHNsb3RQYXJlbnRSb290Ll9oYXNJbnNlcnRpb25Qb2ludCgpIHx8IHNsb3RQYXJlbnRSb290Ll9yZW5kZXJQZW5kaW5nKVxuICAgICAgKSB7XG4gICAgICAgIHNsb3RQYXJlbnRSb290Ll9yZW5kZXJTZWxmKCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9hZGRBc3NpZ25lZFRvRmxhdHRlbmVkTm9kZXMoXG4gICAgICAgIHNsb3REYXRhLmZsYXR0ZW5lZE5vZGVzLFxuICAgICAgICBzbG90RGF0YS5hc3NpZ25lZE5vZGVzXG4gICAgICApO1xuICAgICAgbGV0IHByZXZBc3NpZ25lZE5vZGVzID0gc2xvdERhdGEuX3ByZXZpb3VzbHlBc3NpZ25lZE5vZGVzO1xuICAgICAgaWYgKHByZXZBc3NpZ25lZE5vZGVzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJldkFzc2lnbmVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBzaGFkeURhdGFGb3JOb2RlKHByZXZBc3NpZ25lZE5vZGVzW2ldKS5fcHJldkFzc2lnbmVkU2xvdCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc2xvdERhdGEuX3ByZXZpb3VzbHlBc3NpZ25lZE5vZGVzID0gbnVsbDtcbiAgICAgICAgLy8gZGlydHkgaWYgcHJldmlvdXNseSBsZXNzIGFzc2lnbmVkIG5vZGVzIHRoYW4gcHJldmlvdXNseSBhc3NpZ25lZC5cbiAgICAgICAgaWYgKHByZXZBc3NpZ25lZE5vZGVzLmxlbmd0aCA+IHNsb3REYXRhLmFzc2lnbmVkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgICAgc2xvdERhdGEuZGlydHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKiBOb3RlOiBBIHNsb3QgaXMgbWFya2VkIGRpcnR5IHdoZW5ldmVyIGEgbm9kZSBpcyBuZXdseSBhc3NpZ25lZCB0byBpdFxuICAgICAgb3IgYSBub2RlIGlzIGFzc2lnbmVkIHRvIGEgZGlmZmVyZW50IHNsb3QgKGRvbmUgaW4gYF9kaXN0cmlidXRlTm9kZVRvU2xvdGApXG4gICAgICBvciBpZiB0aGUgbnVtYmVyIG9mIG5vZGVzIGFzc2lnbmVkIHRvIHRoZSBzbG90IGhhcyBkZWNyZWFzZWQgKGRvbmUgYWJvdmUpO1xuICAgICAgKi9cbiAgICAgIGlmIChzbG90RGF0YS5kaXJ0eSkge1xuICAgICAgICBzbG90RGF0YS5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9maXJlU2xvdENoYW5nZShzbG90KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGlzdHJpYnV0ZXMgZ2l2ZW4gYG5vZGVgIHRvIHRoZSBhcHByb3ByaWF0ZSBzbG90IGJhc2VkIG9uIGl0cyBgc2xvdGBcbiAgICogYXR0cmlidXRlLiBJZiBgZm9yY2VkU2xvdGAgaXMgZ2l2ZW4sIHRoZW4gdGhlIG5vZGUgaXMgZGlzdHJpYnV0ZWQgdG8gdGhlXG4gICAqIGBmb3JjZWRTbG90YC5cbiAgICogTm90ZTogc2xvdCB0byB3aGljaCB0aGUgbm9kZSBpcyBhc3NpZ25lZCB3aWxsIGJlIG1hcmtlZCBkaXJ0eSBmb3IgZmlyaW5nXG4gICAqIGBzbG90Y2hhbmdlYC5cbiAgICogQHBhcmFtIHtOb2RlfSBub2RlXG4gICAqIEBwYXJhbSB7Tm9kZT19IGZvcmNlZFNsb3RcbiAgICpcbiAgICovXG4gIF9kaXN0cmlidXRlTm9kZVRvU2xvdChub2RlLCBmb3JjZWRTbG90KSB7XG4gICAgY29uc3Qgbm9kZURhdGEgPSBlbnN1cmVTaGFkeURhdGFGb3JOb2RlKG5vZGUpO1xuICAgIGxldCBvbGRTbG90ID0gbm9kZURhdGEuX3ByZXZBc3NpZ25lZFNsb3Q7XG4gICAgbm9kZURhdGEuX3ByZXZBc3NpZ25lZFNsb3QgPSBudWxsO1xuICAgIGxldCBzbG90ID0gZm9yY2VkU2xvdDtcbiAgICBpZiAoIXNsb3QpIHtcbiAgICAgIGxldCBuYW1lID0gbm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAnc2xvdCddIHx8IENBVENIQUxMX05BTUU7XG4gICAgICBjb25zdCBsaXN0ID0gdGhpcy5fc2xvdE1hcFtuYW1lXTtcbiAgICAgIHNsb3QgPSBsaXN0ICYmIGxpc3RbMF07XG4gICAgfVxuICAgIGlmIChzbG90KSB7XG4gICAgICBjb25zdCBzbG90RGF0YSA9IGVuc3VyZVNoYWR5RGF0YUZvck5vZGUoc2xvdCk7XG4gICAgICBzbG90RGF0YS5hc3NpZ25lZE5vZGVzLnB1c2gobm9kZSk7XG4gICAgICBub2RlRGF0YS5hc3NpZ25lZFNsb3QgPSBzbG90O1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlRGF0YS5hc3NpZ25lZFNsb3QgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChvbGRTbG90ICE9PSBub2RlRGF0YS5hc3NpZ25lZFNsb3QpIHtcbiAgICAgIGlmIChub2RlRGF0YS5hc3NpZ25lZFNsb3QpIHtcbiAgICAgICAgZW5zdXJlU2hhZHlEYXRhRm9yTm9kZShub2RlRGF0YS5hc3NpZ25lZFNsb3QpLmRpcnR5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBhc3NpZ25lZE5vZGVzIHRyYWNraW5nIGRhdGEgZm9yIGEgZ2l2ZW4gYHNsb3RgLiBOb3RlLCB0aGUgY3VycmVudFxuICAgKiBhc3NpZ25lZCBub2RlIGRhdGEgaXMgdHJhY2tlZCAodmlhIF9wcmV2aW91c2x5QXNzaWduZWROb2RlcyBhbmRcbiAgICogX3ByZXZBc3NpZ25lZFNsb3QpIHRvIHNlZSBpZiBgc2xvdGNoYW5nZWAgc2hvdWxkIGZpcmUuIFRoaXMgZGF0YSBtYXkgYmUgb3V0XG4gICAqICBvZiBkYXRlIGF0IHRoaXMgdGltZSBiZWNhdXNlIHRoZSBhc3NpZ25lZCBub2RlcyBtYXkgaGF2ZSBhbHJlYWR5IGJlZW5cbiAgICogZGlzdHJpYnV0ZWQgdG8gYW5vdGhlciByb290LiBUaGlzIGlzIG9rIHNpbmNlIHRoaXMgZGF0YSBpcyBvbmx5IHVzZWQgdG9cbiAgICogdHJhY2sgY2hhbmdlcy5cbiAgICogQHBhcmFtIHtIVE1MU2xvdEVsZW1lbnR9IHNsb3RcbiAgICovXG4gIF9jbGVhclNsb3RBc3NpZ25lZE5vZGVzKHNsb3QpIHtcbiAgICBjb25zdCBzbG90RGF0YSA9IHNoYWR5RGF0YUZvck5vZGUoc2xvdCk7XG4gICAgbGV0IG4kID0gc2xvdERhdGEuYXNzaWduZWROb2RlcztcbiAgICBzbG90RGF0YS5hc3NpZ25lZE5vZGVzID0gW107XG4gICAgc2xvdERhdGEuZmxhdHRlbmVkTm9kZXMgPSBbXTtcbiAgICBzbG90RGF0YS5fcHJldmlvdXNseUFzc2lnbmVkTm9kZXMgPSBuJDtcbiAgICBpZiAobiQpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbiQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IG4gPSBzaGFkeURhdGFGb3JOb2RlKG4kW2ldKTtcbiAgICAgICAgbi5fcHJldkFzc2lnbmVkU2xvdCA9IG4uYXNzaWduZWRTbG90O1xuICAgICAgICAvLyBvbmx5IGNsZWFyIGlmIGl0IHdhcyBwcmV2aW91c2x5IHNldCB0byB0aGlzIHNsb3Q7XG4gICAgICAgIC8vIHRoaXMgaGVscHMgZW5zdXJlIHRoYXQgaWYgdGhlIG5vZGUgaGFzIG90aGVyd2lzZSBiZWVuIGRpc3RyaWJ1dGVkXG4gICAgICAgIC8vIGlnbm9yZSBpdC5cbiAgICAgICAgaWYgKG4uYXNzaWduZWRTbG90ID09PSBzbG90KSB7XG4gICAgICAgICAgbi5hc3NpZ25lZFNsb3QgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2FkZEFzc2lnbmVkVG9GbGF0dGVuZWROb2RlcyhmbGF0dGVuZWQsIGFzc2lnbmVkKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIG47IGkgPCBhc3NpZ25lZC5sZW5ndGggJiYgKG4gPSBhc3NpZ25lZFtpXSk7IGkrKykge1xuICAgICAgaWYgKG4ubG9jYWxOYW1lID09ICdzbG90Jykge1xuICAgICAgICBjb25zdCBuZXN0ZWRBc3NpZ25lZCA9IHNoYWR5RGF0YUZvck5vZGUobikuYXNzaWduZWROb2RlcztcbiAgICAgICAgaWYgKG5lc3RlZEFzc2lnbmVkICYmIG5lc3RlZEFzc2lnbmVkLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuX2FkZEFzc2lnbmVkVG9GbGF0dGVuZWROb2RlcyhmbGF0dGVuZWQsIG5lc3RlZEFzc2lnbmVkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmxhdHRlbmVkLnB1c2goYXNzaWduZWRbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9maXJlU2xvdENoYW5nZShzbG90KSB7XG4gICAgLy8gTk9URTogY2Fubm90IGJ1YmJsZSBjb3JyZWN0bHkgaGVyZSBzbyBub3Qgc2V0dGluZyBidWJibGVzOiB0cnVlXG4gICAgLy8gU2FmYXJpIHRlY2ggcHJldmlldyBkb2VzIG5vdCBidWJibGUgYnV0IGNocm9tZSBkb2VzXG4gICAgLy8gU3BlYyBzYXlzIGl0IGJ1YmJsZXMgKGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jbXV0YXRpb24tb2JzZXJ2ZXJzKVxuICAgIHNsb3RbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdkaXNwYXRjaEV2ZW50J10obmV3IEV2ZW50KCdzbG90Y2hhbmdlJykpO1xuICAgIGNvbnN0IHNsb3REYXRhID0gc2hhZHlEYXRhRm9yTm9kZShzbG90KTtcbiAgICBpZiAoc2xvdERhdGEuYXNzaWduZWRTbG90KSB7XG4gICAgICB0aGlzLl9maXJlU2xvdENoYW5nZShzbG90RGF0YS5hc3NpZ25lZFNsb3QpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlaWZ5IGRvbSBzdWNoIHRoYXQgaXQgaXMgYXQgaXRzIGNvcnJlY3QgcmVuZGVyaW5nIHBvc2l0aW9uXG4gIC8vIGJhc2VkIG9uIGxvZ2ljYWwgZGlzdHJpYnV0aW9uLlxuICAvLyBOT1RFOiBoZXJlIHdlIG9ubHkgY29tcG9zZSBwYXJlbnRzIG9mIDxzbG90PiBlbGVtZW50cyBhbmQgbm90IHRoZVxuICAvLyBzaGFkb3dSb290IGludG8gdGhlIGhvc3QuIFRoZSBsYXR0ZXIgaXMgcGVyZm9ybWVuZCB2aWEgYSBmYXN0IHBhdGhcbiAgLy8gaW4gdGhlIGBsb2dpY2FsLW11dGF0aW9uYC5pbnNlcnRCZWZvcmUuXG4gIF9jb21wb3NlKCkge1xuICAgIGNvbnN0IHNsb3RzID0gdGhpcy5fc2xvdExpc3Q7XG4gICAgbGV0IGNvbXBvc2VMaXN0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbG90cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcGFyZW50ID0gc2xvdHNbaV1bdXRpbHMuU0hBRFlfUFJFRklYICsgJ3BhcmVudE5vZGUnXTtcbiAgICAgIC8qIGNvbXBvc2Ugbm9kZSBvbmx5IGlmOlxuICAgICAgICAoMSkgcGFyZW50IGRvZXMgbm90IGhhdmUgYSBzaGFkb3dSb290IHNpbmNlIHNoYWRvd1Jvb3QgaGFzIGFscmVhZHlcbiAgICAgICAgY29tcG9zZWQgaW50byB0aGUgaG9zdFxuICAgICAgICAoMikgd2UncmUgbm90IGFscmVhZHkgY29tcG9zaW5nIGl0XG4gICAgICAgIFtjb25zaWRlciAobl4yKSBidXQgcmFyZSBiZXR0ZXIgdGhhbiBTZXRdXG4gICAgICAqL1xuICAgICAgY29uc3QgcGFyZW50RGF0YSA9IHNoYWR5RGF0YUZvck5vZGUocGFyZW50KTtcbiAgICAgIGlmICghKHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5yb290KSAmJiBjb21wb3NlTGlzdC5pbmRleE9mKHBhcmVudCkgPCAwKSB7XG4gICAgICAgIGNvbXBvc2VMaXN0LnB1c2gocGFyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb21wb3NlTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgbm9kZSA9IGNvbXBvc2VMaXN0W2ldO1xuICAgICAgY29uc3QgdGFyZ2V0Tm9kZSA9IG5vZGUgPT09IHRoaXMgPyB0aGlzLmhvc3QgOiBub2RlO1xuICAgICAgdGhpcy5fdXBkYXRlQ2hpbGROb2Rlcyh0YXJnZXROb2RlLCB0aGlzLl9jb21wb3NlTm9kZShub2RlKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJucyB0aGUgbGlzdCBvZiBub2RlcyB3aGljaCBzaG91bGQgYmUgcmVuZGVyZWQgaW5zaWRlIGBub2RlYC5cbiAgX2NvbXBvc2VOb2RlKG5vZGUpIHtcbiAgICBsZXQgY2hpbGRyZW4gPSBbXTtcbiAgICBmb3IgKFxuICAgICAgbGV0IG4gPSBub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdmaXJzdENoaWxkJ107XG4gICAgICBuO1xuICAgICAgbiA9IG5bdXRpbHMuU0hBRFlfUFJFRklYICsgJ25leHRTaWJsaW5nJ11cbiAgICApIHtcbiAgICAgIC8vIE5vdGU6IGlmIHdlIHNlZSBhIHNsb3QgaGVyZSwgdGhlIG5vZGVzIGFyZSBndWFyYW50ZWVkIHRvIG5lZWQgdG8gYmVcbiAgICAgIC8vIGNvbXBvc2VkIGhlcmUuIFRoaXMgaXMgYmVjYXVzZSBpZiB0aGVyZSBpcyByZWRpc3RyaWJ1dGlvbiwgaXQgaGFzXG4gICAgICAvLyBhbHJlYWR5IGJlZW4gaGFuZGxlZCBieSB0aGlzIHBvaW50LlxuICAgICAgaWYgKHRoaXMuX2lzSW5zZXJ0aW9uUG9pbnQobikpIHtcbiAgICAgICAgbGV0IGZsYXR0ZW5lZE5vZGVzID0gc2hhZHlEYXRhRm9yTm9kZShuKS5mbGF0dGVuZWROb2RlcztcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBmbGF0dGVuZWROb2Rlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGxldCBkaXN0cmlidXRlZE5vZGUgPSBmbGF0dGVuZWROb2Rlc1tqXTtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKGRpc3RyaWJ1dGVkTm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2gobik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuXG4gIF9pc0luc2VydGlvblBvaW50KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5sb2NhbE5hbWUgPT0gJ3Nsb3QnO1xuICB9XG5cbiAgLy8gRW5zdXJlcyB0aGF0IHRoZSByZW5kZXJlZCBub2RlIGxpc3QgaW5zaWRlIGBjb250YWluZXJgIGlzIGBjaGlsZHJlbmAuXG4gIF91cGRhdGVDaGlsZE5vZGVzKGNvbnRhaW5lciwgY2hpbGRyZW4pIHtcbiAgICBsZXQgY29tcG9zZWQgPSB1dGlscy5uYXRpdmVDaGlsZE5vZGVzQXJyYXkoY29udGFpbmVyKTtcbiAgICBsZXQgc3BsaWNlcyA9IGNhbGN1bGF0ZVNwbGljZXMoY2hpbGRyZW4sIGNvbXBvc2VkKTtcbiAgICAvLyBwcm9jZXNzIHJlbW92YWxzXG4gICAgZm9yIChsZXQgaSA9IDAsIGQgPSAwLCBzOyBpIDwgc3BsaWNlcy5sZW5ndGggJiYgKHMgPSBzcGxpY2VzW2ldKTsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMCwgbjsgaiA8IHMucmVtb3ZlZC5sZW5ndGggJiYgKG4gPSBzLnJlbW92ZWRbal0pOyBqKyspIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIG5vZGUgaXMgc3RpbGwgd2hlcmUgd2UgZXhwZWN0IGl0IGlzIGJlZm9yZSB0cnlpbmdcbiAgICAgICAgLy8gdG8gcmVtb3ZlIGl0OyB0aGlzIGNhbiBoYXBwZW4gaWYgd2UgbW92ZSBhIG5vZGUgYW5kXG4gICAgICAgIC8vIHRoZW4gc2NoZWR1bGUgaXRzIHByZXZpb3VzIGhvc3QgZm9yIGRpc3RyaWJ1dGlvbiByZXN1bHRpbmcgaW5cbiAgICAgICAgLy8gdGhlIG5vZGUgYmVpbmcgcmVtb3ZlZCBoZXJlLlxuICAgICAgICBpZiAoblt1dGlscy5OQVRJVkVfUFJFRklYICsgJ3BhcmVudE5vZGUnXSA9PT0gY29udGFpbmVyKSB7XG4gICAgICAgICAgY29udGFpbmVyW3V0aWxzLk5BVElWRV9QUkVGSVggKyAncmVtb3ZlQ2hpbGQnXShuKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPKHNvcnZlbGwpOiBhdm9pZCB0aGUgbmVlZCBmb3Igc3BsaWNpbmcgaGVyZS5cbiAgICAgICAgY29tcG9zZWQuc3BsaWNlKHMuaW5kZXggKyBkLCAxKTtcbiAgICAgIH1cbiAgICAgIGQgLT0gcy5hZGRlZENvdW50O1xuICAgIH1cbiAgICAvLyBwcm9jZXNzIGFkZHNcbiAgICBmb3IgKGxldCBpID0gMCwgcywgbmV4dDsgaSA8IHNwbGljZXMubGVuZ3RoICYmIChzID0gc3BsaWNlc1tpXSk7IGkrKykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZWRlY2xhcmVcbiAgICAgIG5leHQgPSBjb21wb3NlZFtzLmluZGV4XTtcbiAgICAgIGZvciAobGV0IGogPSBzLmluZGV4LCBuOyBqIDwgcy5pbmRleCArIHMuYWRkZWRDb3VudDsgaisrKSB7XG4gICAgICAgIG4gPSBjaGlsZHJlbltqXTtcbiAgICAgICAgY29udGFpbmVyW3V0aWxzLk5BVElWRV9QUkVGSVggKyAnaW5zZXJ0QmVmb3JlJ10obiwgbmV4dCk7XG4gICAgICAgIGNvbXBvc2VkLnNwbGljZShqLCAwLCBuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfZW5zdXJlU2xvdERhdGEoKSB7XG4gICAgdGhpcy5fcGVuZGluZ1Nsb3RzID0gdGhpcy5fcGVuZGluZ1Nsb3RzIHx8IFtdO1xuICAgIHRoaXMuX3Nsb3RMaXN0ID0gdGhpcy5fc2xvdExpc3QgfHwgW107XG4gICAgdGhpcy5fc2xvdE1hcCA9IHRoaXMuX3Nsb3RNYXAgfHwge307XG4gIH1cblxuICBfYWRkU2xvdHMoc2xvdHMpIHtcbiAgICB0aGlzLl9lbnN1cmVTbG90RGF0YSgpO1xuICAgIHRoaXMuX3BlbmRpbmdTbG90cy5wdXNoKC4uLnNsb3RzKTtcbiAgfVxuXG4gIF92YWxpZGF0ZVNsb3RzKCkge1xuICAgIGlmICh0aGlzLl9wZW5kaW5nU2xvdHMgJiYgdGhpcy5fcGVuZGluZ1Nsb3RzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fbWFwU2xvdHModGhpcy5fcGVuZGluZ1Nsb3RzKTtcbiAgICAgIHRoaXMuX3BlbmRpbmdTbG90cyA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBnaXZlbiBzbG90cy4gU2xvdHMgYXJlIG1haW50YWluZWQgaW4gYW4gZG9tLW9yZGVyZWQgbGlzdC5cbiAgICogSW4gYWRkaXRpb24gYSBtYXAgb2YgbmFtZSB0byBzbG90IGlzIHVwZGF0ZWQuXG4gICAqL1xuICBfbWFwU2xvdHMoc2xvdHMpIHtcbiAgICBsZXQgc2xvdE5hbWVzVG9Tb3J0O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xvdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHNsb3QgPSBzbG90c1tpXTtcbiAgICAgIC8vIGVuc3VyZSBpbnNlcnRpb25Qb2ludHMncyBhbmQgdGhlaXIgcGFyZW50cyBoYXZlIGxvZ2ljYWwgZG9tIGluZm8uXG4gICAgICAvLyBzYXZlIGxvZ2ljYWwgdHJlZSBpbmZvXG4gICAgICAvLyBhLiBmb3Igc2hhZHlSb290XG4gICAgICAvLyBiLiBmb3IgaW5zZXJ0aW9uIHBvaW50cyAoZmFsbGJhY2spXG4gICAgICAvLyBjLiBmb3IgcGFyZW50cyBvZiBpbnNlcnRpb24gcG9pbnRzXG4gICAgICByZWNvcmRDaGlsZE5vZGVzKHNsb3QpO1xuICAgICAgY29uc3Qgc2xvdFBhcmVudCA9IHNsb3RbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3BhcmVudE5vZGUnXTtcbiAgICAgIHJlY29yZENoaWxkTm9kZXMoc2xvdFBhcmVudCk7XG4gICAgICBjb25zdCBzbG90UGFyZW50RGF0YSA9IHNoYWR5RGF0YUZvck5vZGUoc2xvdFBhcmVudCk7XG4gICAgICBzbG90UGFyZW50RGF0YS5fX2NoaWxkU2xvdENvdW50ID1cbiAgICAgICAgKHNsb3RQYXJlbnREYXRhLl9fY2hpbGRTbG90Q291bnQgfHwgMCkgKyAxO1xuICAgICAgbGV0IG5hbWUgPSB0aGlzLl9uYW1lRm9yU2xvdChzbG90KTtcbiAgICAgIGlmICh0aGlzLl9zbG90TWFwW25hbWVdKSB7XG4gICAgICAgIHNsb3ROYW1lc1RvU29ydCA9IHNsb3ROYW1lc1RvU29ydCB8fCB7fTtcbiAgICAgICAgc2xvdE5hbWVzVG9Tb3J0W25hbWVdID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fc2xvdE1hcFtuYW1lXS5wdXNoKHNsb3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2xvdE1hcFtuYW1lXSA9IFtzbG90XTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3Nsb3RMaXN0LnB1c2goc2xvdCk7XG4gICAgfVxuICAgIGlmIChzbG90TmFtZXNUb1NvcnQpIHtcbiAgICAgIGZvciAobGV0IG4gaW4gc2xvdE5hbWVzVG9Tb3J0KSB7XG4gICAgICAgIHRoaXMuX3Nsb3RNYXBbbl0gPSB0aGlzLl9zb3J0U2xvdHModGhpcy5fc2xvdE1hcFtuXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX25hbWVGb3JTbG90KHNsb3QpIHtcbiAgICBjb25zdCBuYW1lID0gc2xvdFsnbmFtZSddIHx8IHNsb3QuZ2V0QXR0cmlidXRlKCduYW1lJykgfHwgQ0FUQ0hBTExfTkFNRTtcbiAgICBzbG90Ll9fc2xvdE5hbWUgPSBuYW1lO1xuICAgIHJldHVybiBuYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIFNsb3RzIGFyZSBrZXB0IGluIGFuIG9yZGVyZWQgbGlzdC4gU2xvdHMgd2l0aCB0aGUgc2FtZSBuYW1lXG4gICAqIGFyZSBzb3J0ZWQgaGVyZSBieSB0cmVlIG9yZGVyLlxuICAgKi9cbiAgX3NvcnRTbG90cyhzbG90cykge1xuICAgIC8vIE5PVEU6IENhbm5vdCB1c2UgYGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uYCBiZWNhdXNlIGl0J3Mgbm90IHBvbHlmaWxsZWQsXG4gICAgLy8gYnV0IHRoZSBjb2RlIGhlcmUgY291bGQgYmUgdXNlZCB0byBwb2x5ZmlsbCB0aGUgcHJlY2VlZGluZy9mb2xsb3dpbmcgaW5mb1xuICAgIC8vIGluIGBjb21wYXJlRG9jdW1lbnRQb3NpdGlvbmAuXG4gICAgcmV0dXJuIHNsb3RzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGxldCBsaXN0QSA9IGFuY2VzdG9yTGlzdChhKTtcbiAgICAgIGxldCBsaXN0QiA9IGFuY2VzdG9yTGlzdChiKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdEEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IG5BID0gbGlzdEFbaV07XG4gICAgICAgIGxldCBuQiA9IGxpc3RCW2ldO1xuICAgICAgICBpZiAobkEgIT09IG5CKSB7XG4gICAgICAgICAgbGV0IGMkID0gdXRpbHMuY2hpbGROb2Rlc0FycmF5KG5BW3V0aWxzLlNIQURZX1BSRUZJWCArICdwYXJlbnROb2RlJ10pO1xuICAgICAgICAgIHJldHVybiBjJC5pbmRleE9mKG5BKSAtIGMkLmluZGV4T2YobkIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBmcm9tIHRyYWNrZWQgc2xvdCBkYXRhIGFueSBzbG90cyBjb250YWluZWQgd2l0aGluIGBjb250YWluZXJgIGFuZFxuICAgKiB0aGVuIHVwZGF0ZXMgdGhlIHRyYWNrZWQgZGF0YSAoX3Nsb3RMaXN0IGFuZCBfc2xvdE1hcCkuXG4gICAqIEFueSByZW1vdmVkIHNsb3RzIGFsc28gaGF2ZSB0aGVpciBgYXNzaWduZWROb2Rlc2AgcmVtb3ZlZCBmcm9tIGNvbW9wc2VkIGRvbS5cbiAgICovXG4gIF9yZW1vdmVDb250YWluZWRTbG90cyhjb250YWluZXIpIHtcbiAgICBpZiAoIXRoaXMuX3Nsb3RMaXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3ZhbGlkYXRlU2xvdHMoKTtcbiAgICBsZXQgZGlkUmVtb3ZlO1xuICAgIGNvbnN0IG1hcCA9IHRoaXMuX3Nsb3RNYXA7XG4gICAgZm9yIChsZXQgbiBpbiBtYXApIHtcbiAgICAgIGNvbnN0IHNsb3RzID0gbWFwW25dO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbG90cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzbG90ID0gc2xvdHNbaV07XG4gICAgICAgIGlmICh1dGlscy5jb250YWlucyhjb250YWluZXIsIHNsb3QpKSB7XG4gICAgICAgICAgc2xvdHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGNvbnN0IHggPSB0aGlzLl9zbG90TGlzdC5pbmRleE9mKHNsb3QpO1xuICAgICAgICAgIGlmICh4ID49IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3Nsb3RMaXN0LnNwbGljZSh4LCAxKTtcbiAgICAgICAgICAgIGNvbnN0IHNsb3RQYXJlbnREYXRhID0gc2hhZHlEYXRhRm9yTm9kZShcbiAgICAgICAgICAgICAgc2xvdFt1dGlscy5TSEFEWV9QUkVGSVggKyAncGFyZW50Tm9kZSddXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKHNsb3RQYXJlbnREYXRhICYmIHNsb3RQYXJlbnREYXRhLl9fY2hpbGRTbG90Q291bnQpIHtcbiAgICAgICAgICAgICAgc2xvdFBhcmVudERhdGEuX19jaGlsZFNsb3RDb3VudC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpLS07XG4gICAgICAgICAgdGhpcy5fcmVtb3ZlRmxhdHRlbmVkTm9kZXMoc2xvdCk7XG4gICAgICAgICAgZGlkUmVtb3ZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGlkUmVtb3ZlO1xuICB9XG5cbiAgX3VwZGF0ZVNsb3ROYW1lKHNsb3QpIHtcbiAgICBpZiAoIXRoaXMuX3Nsb3RMaXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIG1ha2Ugc3VyZSBzbG90TWFwIGlzIGluaXRpYWxpemVkIHdpdGggdGhpcyBzbG90XG4gICAgdGhpcy5fdmFsaWRhdGVTbG90cygpO1xuICAgIGNvbnN0IG9sZE5hbWUgPSBzbG90Ll9fc2xvdE5hbWU7XG4gICAgY29uc3QgbmFtZSA9IHRoaXMuX25hbWVGb3JTbG90KHNsb3QpO1xuICAgIGlmIChuYW1lID09PSBvbGROYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHJlbW92ZSBmcm9tIGV4aXN0aW5nIHRyYWNraW5nXG4gICAgbGV0IHNsb3RzID0gdGhpcy5fc2xvdE1hcFtvbGROYW1lXTtcbiAgICBjb25zdCBpID0gc2xvdHMuaW5kZXhPZihzbG90KTtcbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICBzbG90cy5zcGxpY2UoaSwgMSk7XG4gICAgfVxuICAgIC8vIGFkZCB0byBuZXcgbG9jYXRpb24gYW5kIHNvcnQgaWYgbmVkZXNzYXJ5XG4gICAgbGV0IGxpc3QgPSB0aGlzLl9zbG90TWFwW25hbWVdIHx8ICh0aGlzLl9zbG90TWFwW25hbWVdID0gW10pO1xuICAgIGxpc3QucHVzaChzbG90KTtcbiAgICBpZiAobGlzdC5sZW5ndGggPiAxKSB7XG4gICAgICB0aGlzLl9zbG90TWFwW25hbWVdID0gdGhpcy5fc29ydFNsb3RzKGxpc3QpO1xuICAgIH1cbiAgfVxuXG4gIF9yZW1vdmVGbGF0dGVuZWROb2RlcyhzbG90KSB7XG4gICAgY29uc3QgZGF0YSA9IHNoYWR5RGF0YUZvck5vZGUoc2xvdCk7XG4gICAgbGV0IG4kID0gZGF0YS5mbGF0dGVuZWROb2RlcztcbiAgICBpZiAobiQpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbiQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IG5vZGUgPSBuJFtpXTtcbiAgICAgICAgbGV0IHBhcmVudCA9IG5vZGVbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdwYXJlbnROb2RlJ107XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICBwYXJlbnRbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdyZW1vdmVDaGlsZCddKG5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGRhdGEuZmxhdHRlbmVkTm9kZXMgPSBbXTtcbiAgICBkYXRhLmFzc2lnbmVkTm9kZXMgPSBbXTtcbiAgfVxuXG4gIF9oYXNJbnNlcnRpb25Qb2ludCgpIHtcbiAgICB0aGlzLl92YWxpZGF0ZVNsb3RzKCk7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy5fc2xvdExpc3QgJiYgdGhpcy5fc2xvdExpc3QubGVuZ3RoKTtcbiAgfVxufVxuXG5wYXRjaFNoYWR5Um9vdChTaGFkeVJvb3QucHJvdG90eXBlKTtcbmV4cG9ydCB7U2hhZHlSb290fTtcblxuLyoqXG4gIEltcGxlbWVudHMgYSBwYXJlZCBkb3duIHZlcnNpb24gb2YgU2hhZG93RE9NJ3Mgc2NvcGluZywgd2hpY2ggaXMgZWFzeSB0b1xuICBwb2x5ZmlsbCBhY3Jvc3MgYnJvd3NlcnMuXG4qL1xuZXhwb3J0IGNvbnN0IGF0dGFjaFNoYWRvdyA9IChob3N0LCBvcHRpb25zKSA9PiB7XG4gIGlmICghaG9zdCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIGEgaG9zdC4nKTtcbiAgfVxuICBpZiAoIW9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBlbm91Z2ggYXJndW1lbnRzLicpO1xuICB9XG4gIGxldCByb290O1xuICAvLyBPcHRpbWl6YXRpb24gZm9yIGJvb3RpbmcgdXAgYSBzaGFkb3dSb290IGZyb20gYSBmcmFnbWVudCByYXRoZXIgdGhhblxuICAvLyBjcmVhdGluZyBvbmUuXG4gIGlmIChvcHRpb25zWydzaGFkeVVwZ3JhZGVGcmFnbWVudCddICYmIHV0aWxzLmNhblVwZ3JhZGUoKSkge1xuICAgIHJvb3QgPSBvcHRpb25zWydzaGFkeVVwZ3JhZGVGcmFnbWVudCddO1xuICAgIHJvb3QuX19wcm90b19fID0gU2hhZG93Um9vdC5wcm90b3R5cGU7XG4gICAgcm9vdC5faW5pdChob3N0LCBvcHRpb25zKTtcbiAgICByZWNvcmRDaGlsZE5vZGVzKHJvb3QsIHJvb3QpO1xuICAgIC8vIE5vdGU6IHFzYSBpcyBuYXRpdmUgd2hlbiB1c2VkIHdpdGggbm9QYXRjaC5cbiAgICAvKiogQHR5cGUgez9Ob2RlTGlzdDxFbGVtZW50Pn0gKi9cbiAgICBjb25zdCBzbG90c0FkZGVkID0gcm9vdFsnX19ub0luc2VydGlvblBvaW50J11cbiAgICAgID8gbnVsbFxuICAgICAgOiByb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ3Nsb3QnKTtcbiAgICAvLyBSZXNldCBzY29waW5nIGluZm9ybWF0aW9uIHNvIG5vcm1hbCBzY29pbmcgcnVsZXMgYXBwbHkgYWZ0ZXIgdGhpcy5cbiAgICByb290WydfX25vSW5zZXJ0aW9uUG9pbnQnXSA9IHVuZGVmaW5lZDtcbiAgICAvLyBpZiBhIHNsb3QgaXMgYWRkZWQsIG11c3QgcmVuZGVyIGNvbnRhaW5pbmcgcm9vdC5cbiAgICBpZiAoc2xvdHNBZGRlZCAmJiBzbG90c0FkZGVkLmxlbmd0aCkge1xuICAgICAgcm9vdC5fYWRkU2xvdHMoc2xvdHNBZGRlZCk7XG4gICAgICByb290Ll9hc3luY1JlbmRlcigpO1xuICAgIH1cbiAgICAvKiogQHR5cGUge1NoYWRvd1Jvb3R9ICovIChyb290KS5ob3N0W3V0aWxzLk5BVElWRV9QUkVGSVggKyAnYXBwZW5kQ2hpbGQnXShcbiAgICAgIHJvb3RcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJvb3QgPSBuZXcgU2hhZHlSb290KFNoYWR5Um9vdENvbnN0cnVjdGlvblRva2VuLCBob3N0LCBvcHRpb25zKTtcbiAgfVxuICByZXR1cm4gcm9vdDtcbn07XG5cbi8vIE1pdGlnYXRlIGNvbm5lY3QvZGlzY29ubmVjdCBzcGFtIGJ5IHdyYXBwaW5nIGN1c3RvbSBlbGVtZW50IGNsYXNzZXMuIFRoaXNcbi8vIHNob3VsZCBoYXBwZW4gaWYgY3VzdG9tIGVsZW1lbnRzIGFyZSBhdmFpbGFibGUgaW4gYW55IGNhcGFjaXR5LCBwb2x5ZmlsbGVkIG9yXG4vLyBub3QuXG5pZiAoXG4gIHV0aWxzLmhhc0N1c3RvbUVsZW1lbnRzKCkgJiZcbiAgdXRpbHMuc2V0dGluZ3MuaW5Vc2UgJiZcbiAgIXV0aWxzLnNldHRpbmdzWydwcmVmZXJQZXJmb3JtYW5jZSddXG4pIHtcbiAgLy8gcHJvY2VzcyBjb25uZWN0L2Rpc2Nvbm5lY3QgYWZ0ZXIgcm9vdHMgaGF2ZSByZW5kZXJlZCB0byBhdm9pZFxuICAvLyBpc3N1ZXMgd2l0aCByZWFjdGlvbiBzdGFjay5cbiAgbGV0IGNvbm5lY3RNYXAgPSBuZXcgTWFwKCk7XG4gIHJvb3RSZW5kZXJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBhbGxvdyBlbGVtZW50cyB0byBjb25uZWN0XG4gICAgLy8gc2F2ZSBtYXAgc3RhdGUgKHdpdGhvdXQgbmVlZGluZyBwb2x5ZmlsbHMgb24gSUUxMSlcbiAgICBjb25zdCByID0gW107XG4gICAgY29ubmVjdE1hcC5mb3JFYWNoKCh2LCBrKSA9PiB7XG4gICAgICByLnB1c2goW2ssIHZdKTtcbiAgICB9KTtcbiAgICBjb25uZWN0TWFwLmNsZWFyKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBlID0gcltpXVswXSxcbiAgICAgICAgdmFsdWUgPSByW2ldWzFdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVbJ19fc2hhZHlkb21fY29ubmVjdGVkQ2FsbGJhY2snXSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZVsnX19zaGFkeWRvbV9kaXNjb25uZWN0ZWRDYWxsYmFjayddKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIERvY3VtZW50IGlzIGluIGxvYWRpbmcgc3RhdGUgYW5kIGZsYWcgaXMgc2V0IChkZWZlckNvbm5lY3Rpb25DYWxsYmFja3MpXG4gIC8vIHNvIHByb2Nlc3MgY29ubmVjdGlvbiBzdGFjayB3aGVuIGByZWFkeXN0YXRlY2hhbmdlYCBmaXJlcy5cbiAgaWYgKGlzUmVuZGVyaW5nKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdyZWFkeXN0YXRlY2hhbmdlJyxcbiAgICAgICgpID0+IHtcbiAgICAgICAgaXNSZW5kZXJpbmcgPSBmYWxzZTtcbiAgICAgICAgcm9vdFJlbmRlcmVkKCk7XG4gICAgICB9LFxuICAgICAge29uY2U6IHRydWV9XG4gICAgKTtcbiAgfVxuXG4gIC8qXG4gICAqICgxKSBlbGVtZW50cyBjYW4gb25seSBiZSBjb25uZWN0ZWQvZGlzY29ubmVjdGVkIGlmIHRoZXkgYXJlIGluIHRoZSBleHBlY3RlZFxuICAgKiBzdGF0ZS5cbiAgICogKDIpIG5ldmVyIHJ1biBjb25uZWN0L2Rpc2Nvbm5lY3QgZHVyaW5nIHJlbmRlcmluZyB0byBhdm9pZCByZWFjdGlvbiBzdGFjayBpc3N1ZXMuXG4gICAqL1xuICBjb25zdCBNYW5hZ2VDb25uZWN0ID0gKGJhc2UsIGNvbm5lY3RlZCwgZGlzY29ubmVjdGVkKSA9PiB7XG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGNvbnN0IGNvbm5lY3RGbGFnID0gYF9faXNDb25uZWN0ZWQke2NvdW50ZXIrK31gO1xuICAgIGlmIChjb25uZWN0ZWQgfHwgZGlzY29ubmVjdGVkKSB7XG4gICAgICAvKiogQHRoaXMgeyFIVE1MRWxlbWVudH0gKi9cbiAgICAgIGJhc2UucHJvdG90eXBlLmNvbm5lY3RlZENhbGxiYWNrID0gYmFzZS5wcm90b3R5cGVbXG4gICAgICAgICdfX3NoYWR5ZG9tX2Nvbm5lY3RlZENhbGxiYWNrJ1xuICAgICAgXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gaWYgcmVuZGVyaW5nIGRlZmVyIGNvbm5lY3RlZFxuICAgICAgICAvLyBvdGhlcndpc2UgY29ubmVjdCBvbmx5IGlmIHdlIGhhdmVuJ3QgYWxyZWFkeVxuICAgICAgICBpZiAoaXNSZW5kZXJpbmcpIHtcbiAgICAgICAgICBjb25uZWN0TWFwLnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpc1tjb25uZWN0RmxhZ10pIHtcbiAgICAgICAgICB0aGlzW2Nvbm5lY3RGbGFnXSA9IHRydWU7XG4gICAgICAgICAgaWYgKGNvbm5lY3RlZCkge1xuICAgICAgICAgICAgY29ubmVjdGVkLmNhbGwodGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvKiogQHRoaXMgeyFIVE1MRWxlbWVudH0gKi9cbiAgICAgIGJhc2UucHJvdG90eXBlLmRpc2Nvbm5lY3RlZENhbGxiYWNrID0gYmFzZS5wcm90b3R5cGVbXG4gICAgICAgICdfX3NoYWR5ZG9tX2Rpc2Nvbm5lY3RlZENhbGxiYWNrJ1xuICAgICAgXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gaWYgcmVuZGVyaW5nLCBjYW5jZWwgYSBwZW5kaW5nIGNvbm5lY3Rpb24gYW5kIHF1ZXVlIGRpc2Nvbm5lY3QsXG4gICAgICAgIC8vIG90aGVyd2lzZSBkaXNjb25uZWN0IG9ubHkgaWYgYSBjb25uZWN0aW9uIGhhcyBiZWVuIGFsbG93ZWRcbiAgICAgICAgaWYgKGlzUmVuZGVyaW5nKSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBuZWNlc3Nhcnkgb25seSBiZWNhdXNlIGNhbGxpbmcgcmVtb3ZlQ2hpbGRcbiAgICAgICAgICAvLyBvbiBhIG5vZGUgdGhhdCByZXF1aXJlcyBkaXN0cmlidXRpb24gbGVhdmVzIGl0IGluIHRoZSBET00gdHJlZVxuICAgICAgICAgIC8vIHVudGlsIGRpc3RyaWJ1dGlvbi5cbiAgICAgICAgICAvLyBOT1RFOiByZW1lbWJlciB0aGlzIGlzIGNoZWNraW5nIHRoZSBwYXRjaGVkIGlzQ29ubmVjdGVkIHRvIGRldGVybWluZVxuICAgICAgICAgIC8vIGlmIHRoZSBub2RlIGlzIGluIHRoZSBsb2dpY2FsIHRyZWUuXG4gICAgICAgICAgaWYgKCF0aGlzLmlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICBjb25uZWN0TWFwLnNldCh0aGlzLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXNbY29ubmVjdEZsYWddKSB7XG4gICAgICAgICAgdGhpc1tjb25uZWN0RmxhZ10gPSBmYWxzZTtcbiAgICAgICAgICBpZiAoZGlzY29ubmVjdGVkKSB7XG4gICAgICAgICAgICBkaXNjb25uZWN0ZWQuY2FsbCh0aGlzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2U7XG4gIH07XG5cbiAgY29uc3Qgb3JpZ2luYWxEZWZpbmUgPSB3aW5kb3dbJ2N1c3RvbUVsZW1lbnRzJ11bJ2RlZmluZSddO1xuICBjb25zdCBkZWZpbmUgPSBmdW5jdGlvbiAobmFtZSwgY29uc3RydWN0b3IpIHtcbiAgICBjb25zdCBjb25uZWN0ZWQgPSBjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29ubmVjdGVkQ2FsbGJhY2s7XG4gICAgY29uc3QgZGlzY29ubmVjdGVkID0gY29uc3RydWN0b3IucHJvdG90eXBlLmRpc2Nvbm5lY3RlZENhbGxiYWNrO1xuICAgIG9yaWdpbmFsRGVmaW5lLmNhbGwoXG4gICAgICB3aW5kb3dbJ2N1c3RvbUVsZW1lbnRzJ10sXG4gICAgICBuYW1lLFxuICAgICAgTWFuYWdlQ29ubmVjdChjb25zdHJ1Y3RvciwgY29ubmVjdGVkLCBkaXNjb25uZWN0ZWQpXG4gICAgKTtcbiAgICAvLyB1bnBhdGNoIGNvbm5lY3RlZC9kaXNjb25uZWN0ZWQgb24gY2xhc3M7IGN1c3RvbSBlbGVtZW50cyB0ZWFycyB0aGlzIG9mZlxuICAgIC8vIHNvIHRoZSBwYXRjaCBpcyBtYWludGFpbmVkLCBidXQgaWYgdGhlIHVzZXIgY2FsbHMgdGhlc2UgbWV0aG9kcyBmb3JcbiAgICAvLyBlLmcuIHRlc3RpbmcsIHRoZXkgd2lsbCBiZSBhcyBleHBlY3RlZC5cbiAgICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29ubmVjdGVkQ2FsbGJhY2sgPSBjb25uZWN0ZWQ7XG4gICAgY29uc3RydWN0b3IucHJvdG90eXBlLmRpc2Nvbm5lY3RlZENhbGxiYWNrID0gZGlzY29ubmVjdGVkO1xuICB9O1xuICAvLyBOb3RlLCBpdCB3b3VsZCBiZSBiZXR0ZXIgdG8gb25seSBwYXRjaCB0aGUgQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5LnByb3RvdHlwZSxcbiAgLy8gYnV0IFNoYWR5Q1NTIHBhdGNoZXMgZGVmaW5lIGRpcmVjdGx5LlxuICB3aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lID0gZGVmaW5lO1xuICAvLyBTdGlsbCBwYXRjaCB0aGUgcmVnaXN0cnkgZGlyZWN0bHkgc2luY2UgU2FmYXJpIDEwIGxvc2VzIHRoZSBwYXRjaFxuICAvLyB1bmxlc3MgdGhpcyBpcyBkb25lLlxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93WydDdXN0b21FbGVtZW50UmVnaXN0cnknXS5wcm90b3R5cGUsICdkZWZpbmUnLCB7XG4gICAgdmFsdWU6IGRlZmluZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gIH0pO1xufVxuXG4vKiogQHJldHVybiB7IVNoYWR5Um9vdHx1bmRlZmluZWR9ICovXG5leHBvcnQgY29uc3Qgb3duZXJTaGFkeVJvb3RGb3JOb2RlID0gKG5vZGUpID0+IHtcbiAgbGV0IHJvb3QgPSBub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdnZXRSb290Tm9kZSddKCk7XG4gIGlmICh1dGlscy5pc1NoYWR5Um9vdChyb290KSkge1xuICAgIHJldHVybiByb290O1xuICB9XG59O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHtzaGFkeURhdGFGb3JOb2RlfSBmcm9tICcuLi9zaGFkeS1kYXRhLmpzJztcblxuZXhwb3J0IGNvbnN0IFNsb3RhYmxlUGF0Y2hlcyA9IHV0aWxzLmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoe1xuICAvKiogQHRoaXMge05vZGV9ICovXG4gIGdldCBhc3NpZ25lZFNsb3QoKSB7XG4gICAgLy8gRm9yY2UgYW55IHBhcmVudCdzIHNoYWRvd1Jvb3QgdG8gZmx1c2ggc28gdGhhdCBkaXN0cmlidXRpb24gb2NjdXJzXG4gICAgLy8gYW5kIHRoaXMgbm9kZSBoYXMgYW4gYXNzaWduZWRTbG90LlxuICAgIGNvbnN0IHBhcmVudCA9IHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3BhcmVudE5vZGUnXTtcbiAgICBjb25zdCBvd25lclJvb3QgPSBwYXJlbnQgJiYgcGFyZW50W3V0aWxzLlNIQURZX1BSRUZJWCArICdzaGFkb3dSb290J107XG4gICAgaWYgKG93bmVyUm9vdCkge1xuICAgICAgb3duZXJSb290Ll9yZW5kZXIoKTtcbiAgICB9XG4gICAgY29uc3Qgbm9kZURhdGEgPSBzaGFkeURhdGFGb3JOb2RlKHRoaXMpO1xuICAgIHJldHVybiAobm9kZURhdGEgJiYgbm9kZURhdGEuYXNzaWduZWRTbG90KSB8fCBudWxsO1xuICB9LFxufSk7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjIgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cblxuLyoqXG4gKiBBIG1hcCBkZXNjcmliaW5nIHBhcmVudGhlc2VzLWxpa2UgZ3JvdXBpbmcgY2hhcmFjdGVycyBhbmQgdGhlaXIgYmVoYXZpb3IuIFRoZVxuICoga2V5cyBhcmUgdGhlIGdyb3VwJ3Mgc3RhcnQgY2hhcmFjdGVyIGFuZCB0aGUgdmFsdWUncyBgZW5kYCBwcm9wZXJ0eSBjb250YWluc1xuICogdGhlIGVuZCBjaGFyYWN0ZXIuIFRoZSBgbWF0Y2hOZXN0ZWRQYXJlbnNgIHByb3BlcnR5IGluZGljYXRlcyB3aGV0aGVyIG9yIG5vdFxuICogb3RoZXIgZ3JvdXBpbmcgY2hhcmFjdGVycyBuZXN0ZWQgaW4gdGhlIGdyb3VwIHJldGFpbiB0aGVpciBncm91cGluZyBiZWhhdmlvclxuICogd2l0aGluIHRoYXQgZ3JvdXAgLSBpLmUuIGlmIG5lc3RlZCBncm91cGluZyBjaGFyYWN0ZXJzIG5lZWQgdG8gYmUgbWF0Y2hlZC5cbiAqXG4gKiBAdHlwZSB7IU1hcDxzdHJpbmcsIHtlbmQ6IHN0cmluZywgbWF0Y2hOZXN0ZWRQYXJlbnM6IGJvb2xlYW59Pn1cbiAqL1xuY29uc3QgUEFSRU5TID0gbmV3IE1hcCgpO1xuLy8gSUUgMTEgZG9lc24ndCBzdXBwb3J0IGBNYXBgJ3MgY29uc3RydWN0b3IgcGFyYW1ldGVyLlxuW1xuICBbJygnLCB7ZW5kOiAnKScsIG1hdGNoTmVzdGVkUGFyZW5zOiB0cnVlfV0sXG4gIFsnWycsIHtlbmQ6ICddJywgbWF0Y2hOZXN0ZWRQYXJlbnM6IHRydWV9XSxcbiAgWydcIicsIHtlbmQ6ICdcIicsIG1hdGNoTmVzdGVkUGFyZW5zOiBmYWxzZX1dLFxuICBbXCInXCIsIHtlbmQ6IFwiJ1wiLCBtYXRjaE5lc3RlZFBhcmVuczogZmFsc2V9XSxcbl0uZm9yRWFjaCgoW2ssIHZdKSA9PiB7XG4gIFBBUkVOUy5zZXQoaywgdik7XG59KTtcblxuLyoqXG4gKiBGaW5kcyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBxdWVyeUNoYXJzYCB3aXRoaW4gYHN0cmAgZnJvbSBpbmRleCBgc3RhcnRgXG4gKiBvbndhcmRzIHRoYXQgaXMgX25vdF8gbmVzdGVkIHdpdGhpbiBhbnkgcGFyZW50aGVzZXMsIGJyYWNrZXRzLCBvclxuICogc2luZ2xlL2RvdWJsZS1xdW90ZWQgc3RyaW5ncyBvciBwYXJ0IG9mIGFuIGVzY2FwZSBzZXF1ZW5jZS5cbiAqXG4gKiBJZiB0aGUgZW5kIG9mIHRoZSBzdHJpbmcgaXMgcmVhY2hlZCB3aXRob3V0IGZpbmRpbmcgYSBjaGFyYWN0ZXIgaW5cbiAqIGBxdWVyeUNoYXJzYCwgdGhlIGxlbmd0aCBvZiB0aGUgc3RyaW5nIGlzIHJldHVybmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gcXVlcnlDaGFyc1xuICogQHBhcmFtIHtib29sZWFufSBtYXRjaE5lc3RlZFBhcmVuc1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5jb25zdCBmaW5kTmV4dCA9IChzdHIsIHN0YXJ0LCBxdWVyeUNoYXJzLCBtYXRjaE5lc3RlZFBhcmVucyA9IHRydWUpID0+IHtcbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0cltpXSA9PT0gJ1xcXFwnICYmIGkgPCBzdHIubGVuZ3RoIC0gMSAmJiBzdHJbaSArIDFdICE9PSAnXFxuJykge1xuICAgICAgLy8gU2tpcCBlc2NhcGUgc2VxdWVuY2VzLlxuICAgICAgaSsrO1xuICAgIH0gZWxzZSBpZiAocXVlcnlDaGFycy5pbmRleE9mKHN0cltpXSkgIT09IC0xKSB7XG4gICAgICAvLyBPbmUgb2YgYHF1ZXJ5Q2hhcnNgIHdhcyBmb3VuZC5cbiAgICAgIHJldHVybiBpO1xuICAgIH0gZWxzZSBpZiAobWF0Y2hOZXN0ZWRQYXJlbnMgJiYgUEFSRU5TLmhhcyhzdHJbaV0pKSB7XG4gICAgICAvLyBIYW5kbGUgYW55IGdyb3VwaW5nIGNoYXJhY3RlcnMgYnkgc2tpcHBpbmcgb3ZlciB0aGUgZ3JvdXAuXG4gICAgICBjb25zdCBwYXJlbkluZm8gPSBQQVJFTlMuZ2V0KHN0cltpXSk7XG4gICAgICBpID0gZmluZE5leHQoc3RyLCBpICsgMSwgW3BhcmVuSW5mby5lbmRdLCBwYXJlbkluZm8ubWF0Y2hOZXN0ZWRQYXJlbnMpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gRG8gbm90aGluZywgbGV0IGBpKytgIGhhcHBlbi5cbiAgfVxuXG4gIC8vIFJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nIHdpdGhvdXQgZmluZGluZyBhIGZpbmFsIGNoYXIuXG4gIHJldHVybiBzdHIubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBBcnJheXMgb2YgY29tcG91bmQgc2VsZWN0b3JzIGFuZCBjb21iaW5hdG9ycyB0aGF0IGZvcm0gYSBjb21wbGV4IHNlbGVjdG9yXG4gKiB3aGVuIGludGVybGVhdmVkLlxuICpcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIGNvbXBvdW5kU2VsZWN0b3JzOiAhQXJyYXk8c3RyaW5nPixcbiAqICAgY29tYmluYXRvcnM6ICFBcnJheTxzdHJpbmc+LFxuICogfX1cbiAqL1xuZXhwb3J0IGxldCBDb21wbGV4U2VsZWN0b3JQYXJ0cztcblxuLyoqXG4gKiBTcGxpdHMgYSBzZWxlY3RvciBsaXN0IGludG8gaW5kaXZpZHVhbCBjb21wbGV4IHNlbGVjdG9ycyBhbmQgY3JlYXRlcyBhXG4gKiBgQ29tcGxleFNlbGVjdG9yUGFydHNgIGZvciBlYWNoLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4geyFBcnJheTwhQ29tcGxleFNlbGVjdG9yUGFydHM+fVxuICovXG5leHBvcnQgY29uc3QgcGFyc2VTZWxlY3Rvckxpc3QgPSAoc3RyKSA9PiB7XG4gIC8qKlxuICAgKiBAdHlwZSB7IUFycmF5PCFDb21wbGV4U2VsZWN0b3JQYXJ0cz59XG4gICAqL1xuICBjb25zdCByZXN1bHRzID0gW107XG5cbiAgLyoqXG4gICAqIENvbXBvdW5kIHNlbGVjdG9ycyBhbmQgY29tYmluYXRvcnMgcGFyc2VkIGZyb20gdGhlIGN1cnJlbnQgY29tcGxleFxuICAgKiBzZWxlY3Rvci5cbiAgICpcbiAgICogQHR5cGUgeyFBcnJheTxzdHJpbmc+fVxuICAgKi9cbiAgY29uc3QgY2h1bmtzID0gW107XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgYENvbXBsZXhTZWxlY3RvclBhcnRzYCBmcm9tIHRoZSBjdXJyZW50IGBjaHVua3NgLCBwdXNoZXMgaXRcbiAgICogaW50byBgcmVzdWx0c2AgYW5kIHJlc2V0cyBgY2h1bmtzYC5cbiAgICovXG4gIGNvbnN0IGVuZENvbXBsZXhTZWxlY3RvciA9ICgpID0+IHtcbiAgICBpZiAoY2h1bmtzLmxlbmd0aCA+IDApIHtcbiAgICAgIHdoaWxlIChjaHVua3NbY2h1bmtzLmxlbmd0aCAtIDFdID09PSAnICcpIHtcbiAgICAgICAgY2h1bmtzLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmVzdWx0cy5wdXNoKHtcbiAgICAgICAgY29tcG91bmRTZWxlY3RvcnM6IGNodW5rcy5maWx0ZXIoKHgsIGkpID0+IGkgJSAyID09PSAwKSxcbiAgICAgICAgY29tYmluYXRvcnM6IGNodW5rcy5maWx0ZXIoKHgsIGkpID0+IGkgJSAyID09PSAxKSxcbiAgICAgIH0pO1xuICAgICAgY2h1bmtzLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9O1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKSB7XG4gICAgY29uc3QgcHJldkNodW5rID0gY2h1bmtzW2NodW5rcy5sZW5ndGggLSAxXTtcbiAgICAvLyBgbmV4dEluZGV4YCBpcyB0aGUgbmV4dCBjb21wbGV4IHNlbGVjdG9yIGJvdW5kYXJ5LCBjb21iaW5hdG9yLCBvclxuICAgIC8vIHdoaXRlc3BhY2UgdGhhdCBpc24ndCBpbnNpZGUgb3RoZXIgZ3JvdXBpbmcgY2hhcmFjdGVycy5cbiAgICBjb25zdCBuZXh0SW5kZXggPSBmaW5kTmV4dChzdHIsIGksIFsnLCcsICcgJywgJz4nLCAnKycsICd+J10pO1xuICAgIC8vIElmIGBuZXh0SW5kZXhgIGlzIGBpYCwgdGhlbiB0aGUgY2h1bmsgd2UncmUgY29uc2lkZXJpbmcgaXMgb25seSB0aGUgbmV4dFxuICAgIC8vIHNpbmdsZSBjaGFyYWN0ZXIuXG4gICAgY29uc3QgbmV4dENodW5rID0gbmV4dEluZGV4ID09PSBpID8gc3RyW2ldIDogc3RyLnN1YnN0cmluZyhpLCBuZXh0SW5kZXgpO1xuXG4gICAgaWYgKG5leHRDaHVuayA9PT0gJywnKSB7XG4gICAgICBlbmRDb21wbGV4U2VsZWN0b3IoKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgW3VuZGVmaW5lZCwgJyAnLCAnPicsICcrJywgJ34nXS5pbmRleE9mKHByZXZDaHVuaykgIT09IC0xICYmXG4gICAgICBuZXh0Q2h1bmsgPT09ICcgJ1xuICAgICkge1xuICAgICAgLy8gSWdub3JlIGxlYWRpbmcgd2hpdGVzcGFjZSBhbmQgd2hpdGVzcGFjZSBkaXJlY3RseSBhZnRlciBjb21iaW5hdG9ycy5cbiAgICB9IGVsc2UgaWYgKHByZXZDaHVuayA9PT0gJyAnICYmIFsnPicsICcrJywgJ34nXS5pbmRleE9mKG5leHRDaHVuaykgIT09IC0xKSB7XG4gICAgICAvLyBJZiB0aGUgbGFzdCBjaHVuayB3YXMgd2hpdGVzcGFjZSBhbmQgdGhpcyBjaHVuayBpcyBhIG5vbi13aGl0ZXNwYWNlXG4gICAgICAvLyBjb21iaW5hdG9yLCByZXBsYWNlIHRoZSB3aGl0ZXNwYWNlIHdpdGggdGhpcyBjb21iaW5hdG9yLlxuICAgICAgY2h1bmtzW2NodW5rcy5sZW5ndGggLSAxXSA9IG5leHRDaHVuaztcbiAgICB9IGVsc2Uge1xuICAgICAgY2h1bmtzLnB1c2gobmV4dENodW5rKTtcbiAgICB9XG5cbiAgICBpID0gbmV4dEluZGV4ICsgKG5leHRJbmRleCA9PT0gaSA/IDEgOiAwKTtcbiAgfVxuXG4gIGVuZENvbXBsZXhTZWxlY3RvcigpO1xuXG4gIHJldHVybiByZXN1bHRzO1xufTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNiBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCB7c2hhZHlEYXRhRm9yTm9kZX0gZnJvbSAnLi4vc2hhZHktZGF0YS5qcyc7XG5pbXBvcnQge0NvbXBsZXhTZWxlY3RvclBhcnRzLCBwYXJzZVNlbGVjdG9yTGlzdH0gZnJvbSAnLi4vc2VsZWN0b3ItcGFyc2VyLmpzJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcblxuLyoqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1hdGNoZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb249fSBoYWx0ZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5KG5vZGUsIG1hdGNoZXIsIGhhbHRlcikge1xuICBsZXQgbGlzdCA9IFtdO1xuICBxdWVyeUNoaWxkTm9kZXMobm9kZSwgbWF0Y2hlciwgaGFsdGVyLCBsaXN0KTtcbiAgcmV0dXJuIGxpc3Q7XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5Q2hpbGROb2RlcyhwYXJlbnQsIG1hdGNoZXIsIGhhbHRlciwgbGlzdCkge1xuICBmb3IgKFxuICAgIGxldCBuID0gcGFyZW50W3V0aWxzLlNIQURZX1BSRUZJWCArICdmaXJzdENoaWxkJ107XG4gICAgbjtcbiAgICBuID0gblt1dGlscy5TSEFEWV9QUkVGSVggKyAnbmV4dFNpYmxpbmcnXVxuICApIHtcbiAgICBpZiAoXG4gICAgICBuLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJlxuICAgICAgcXVlcnlFbGVtZW50KG4sIG1hdGNoZXIsIGhhbHRlciwgbGlzdClcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBxdWVyeUVsZW1lbnQobm9kZSwgbWF0Y2hlciwgaGFsdGVyLCBsaXN0KSB7XG4gIGxldCByZXN1bHQgPSBtYXRjaGVyKG5vZGUpO1xuICBpZiAocmVzdWx0KSB7XG4gICAgbGlzdC5wdXNoKG5vZGUpO1xuICB9XG4gIGlmIChoYWx0ZXIgJiYgaGFsdGVyKHJlc3VsdCkpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIHF1ZXJ5Q2hpbGROb2Rlcyhub2RlLCBtYXRjaGVyLCBoYWx0ZXIsIGxpc3QpO1xufVxuXG4vLyBOZWVkZWQgb24gRWxlbWVudCwgRG9jdW1lbnRGcmFnbWVudCwgRG9jdW1lbnRcbmV4cG9ydCBjb25zdCBQYXJlbnROb2RlUGF0Y2hlcyA9IHV0aWxzLmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoe1xuICAvKiogQHRoaXMge0VsZW1lbnR9ICovXG4gIGdldCBmaXJzdEVsZW1lbnRDaGlsZCgpIHtcbiAgICBjb25zdCBub2RlRGF0YSA9IHNoYWR5RGF0YUZvck5vZGUodGhpcyk7XG4gICAgaWYgKG5vZGVEYXRhICYmIG5vZGVEYXRhLmZpcnN0Q2hpbGQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IG4gPSB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICdmaXJzdENoaWxkJ107XG4gICAgICB3aGlsZSAobiAmJiBuLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICBuID0gblt1dGlscy5TSEFEWV9QUkVGSVggKyAnbmV4dFNpYmxpbmcnXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpc1t1dGlscy5OQVRJVkVfUFJFRklYICsgJ2ZpcnN0RWxlbWVudENoaWxkJ107XG4gICAgfVxuICB9LFxuXG4gIC8qKiBAdGhpcyB7RWxlbWVudH0gKi9cbiAgZ2V0IGxhc3RFbGVtZW50Q2hpbGQoKSB7XG4gICAgY29uc3Qgbm9kZURhdGEgPSBzaGFkeURhdGFGb3JOb2RlKHRoaXMpO1xuICAgIGlmIChub2RlRGF0YSAmJiBub2RlRGF0YS5sYXN0Q2hpbGQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IG4gPSB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICdsYXN0Q2hpbGQnXTtcbiAgICAgIHdoaWxlIChuICYmIG4ubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIG4gPSBuW3V0aWxzLlNIQURZX1BSRUZJWCArICdwcmV2aW91c1NpYmxpbmcnXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpc1t1dGlscy5OQVRJVkVfUFJFRklYICsgJ2xhc3RFbGVtZW50Q2hpbGQnXTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqIEB0aGlzIHtFbGVtZW50fSAqL1xuICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgaWYgKCF1dGlscy5pc1RyYWNraW5nTG9naWNhbENoaWxkTm9kZXModGhpcykpIHtcbiAgICAgIHJldHVybiB0aGlzW3V0aWxzLk5BVElWRV9QUkVGSVggKyAnY2hpbGRyZW4nXTtcbiAgICB9XG4gICAgcmV0dXJuIHV0aWxzLmNyZWF0ZVBvbHlmaWxsZWRIVE1MQ29sbGVjdGlvbihcbiAgICAgIEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbCh1dGlscy5jaGlsZE5vZGVzQXJyYXkodGhpcyksIChuKSA9PiB7XG4gICAgICAgIHJldHVybiBuLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfSxcblxuICAvKiogQHRoaXMge0VsZW1lbnR9ICovXG4gIGdldCBjaGlsZEVsZW1lbnRDb3VudCgpIHtcbiAgICBsZXQgY2hpbGRyZW4gPSB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICdjaGlsZHJlbiddO1xuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG5cbiAgLyoqIEB0aGlzIHtFbGVtZW50fSAqL1xuICBhcHBlbmQoLi4uYXJncykge1xuICAgIHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2luc2VydEJlZm9yZSddKFxuICAgICAgdXRpbHMuY29udmVydE5vZGVzSW50b0FOb2RlKC4uLmFyZ3MpLFxuICAgICAgbnVsbFxuICAgICk7XG4gIH0sXG5cbiAgLyoqIEB0aGlzIHtFbGVtZW50fSAqL1xuICBwcmVwZW5kKC4uLmFyZ3MpIHtcbiAgICB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICdpbnNlcnRCZWZvcmUnXShcbiAgICAgIHV0aWxzLmNvbnZlcnROb2Rlc0ludG9BTm9kZSguLi5hcmdzKSxcbiAgICAgIHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2ZpcnN0Q2hpbGQnXVxuICAgICk7XG4gIH0sXG5cbiAgLyoqIEB0aGlzIHtFbGVtZW50fSAqL1xuICBbJ3JlcGxhY2VDaGlsZHJlbiddKC4uLmFyZ3MpIHtcbiAgICBsZXQgY2hpbGQ7XG4gICAgd2hpbGUgKChjaGlsZCA9IHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2ZpcnN0Q2hpbGQnXSkgIT09IG51bGwpIHtcbiAgICAgIHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3JlbW92ZUNoaWxkJ10oY2hpbGQpO1xuICAgIH1cbiAgICB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICdpbnNlcnRCZWZvcmUnXShcbiAgICAgIHV0aWxzLmNvbnZlcnROb2Rlc0ludG9BTm9kZSguLi5hcmdzKSxcbiAgICAgIG51bGxcbiAgICApO1xuICB9LFxufSk7XG5cbi8qKlxuICogUGVyZm9ybXMgdGhlIGVxdWl2YWxlbnQgb2YgYHF1ZXJ5U2VsZWN0b3JBbGxgIHdpdGhpbiBTaGFkeSBET00ncyBsb2dpY2FsXG4gKiBtb2RlbCBvZiB0aGUgdHJlZSBmb3IgYSBzZWxlY3RvciBsaXN0LlxuICpcbiAqIFNlZSA8Li9sb2dpY2FsUXVlcnlTZWxlY3RvckFsbC5tZD4gZm9yIGltcGxlbWVudGF0aW9uIGRldGFpbHMuXG4gKlxuICogQHBhcmFtIHshUGFyZW50Tm9kZX0gY29udGV4dE5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3Rvckxpc3RcbiAqIEByZXR1cm4geyFBcnJheTwhRWxlbWVudD59XG4gKi9cbmNvbnN0IGxvZ2ljYWxRdWVyeVNlbGVjdG9yQWxsID0gKGNvbnRleHROb2RlLCBzZWxlY3Rvckxpc3QpID0+IHtcbiAgLyoqXG4gICAqIEB0eXBlIHshQXJyYXk8IUNvbXBsZXhTZWxlY3RvclBhcnRzPn1cbiAgICovXG4gIGNvbnN0IGNvbXBsZXhTZWxlY3RvcnMgPSBwYXJzZVNlbGVjdG9yTGlzdChzZWxlY3Rvckxpc3QpO1xuXG4gIGlmIChjb21wbGV4U2VsZWN0b3JzLmxlbmd0aCA8IDEpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiBhIHNpbmdsZSBjb21wb3VuZCBzZWxlY3RvciBtYXRjaGVzIGFuIGVsZW1lbnQuIElmIHRoZVxuICAgKiBzZWxlY3RvciBjb250YWlucyBgOnNjb3BlYCAoYXMgYSBzdWJzdHJpbmcpLCB0aGVuIHRoZSBzZWxlY3RvciBvbmx5IGlzIG9ubHlcbiAgICogY29uc2lkZXJlZCBtYXRjaGluZyBpZiBgZWxlbWVudGAgaXMgYGNvbnRleHROb2RlYC5cbiAgICpcbiAgICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29tcG91bmRTZWxlY3RvclxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgY29uc3QgbWF0Y2hlc0NvbXBvdW5kU2VsZWN0b3IgPSAoZWxlbWVudCwgY29tcG91bmRTZWxlY3RvcikgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAoZWxlbWVudCA9PT0gY29udGV4dE5vZGUgfHwgY29tcG91bmRTZWxlY3Rvci5pbmRleE9mKCc6c2NvcGUnKSA9PT0gLTEpICYmXG4gICAgICB1dGlscy5tYXRjaGVzU2VsZWN0b3IoZWxlbWVudCwgY29tcG91bmRTZWxlY3RvcilcbiAgICApO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBbiBvYmplY3QgdXNlZCB0byB0cmFjayB0aGUgY3VycmVudCBwb3NpdGlvbiBvZiBhIHBvdGVudGlhbCBzZWxlY3RvciBtYXRjaC5cbiAgICpcbiAgICogLSBgdGFyZ2V0YCBpcyB0aGUgZWxlbWVudCB0aGF0IHdvdWxkIGJlIGNvbnNpZGVyZWQgbWF0Y2hpbmcgaWYgdGhlIGN1cnNvclxuICAgKiBldmVudHVhbGx5IHJlc3VsdHMgaW4gYSBjb21wbGV0ZSBtYXRjaC5cbiAgICpcbiAgICogLSBgY29tcGxleFNlbGVjdG9yUGFydHNgIGlzIHRoZSBwYXJzZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIGNvbXBsZXhcbiAgICogc2VsZWN0b3IgdGhhdCB0aGlzIGN1cnNvciBpcyBhdHRlbXB0aW5nIHRvIG1hdGNoLlxuICAgKlxuICAgKiAtIGBpbmRleGAgaXMgdGhlIGluZGV4IGludG8gYC5jb21wbGV4U2VsZWN0b3JQYXJ0cy5jb21wb3VuZFNlbGVjdG9yc2Agb2ZcbiAgICogdGhlIGxhc3Qgc3VjY2Vzc2Z1bGx5IG1hdGNoZWQgY29tcG91bmQgc2VsZWN0b3IuXG4gICAqXG4gICAqIC0gYG1hdGNoZWRFbGVtZW50YCBpcyB0aGUgZWxlbWVudCB0aGF0IHN1Y2Nlc3NmdWxseSBtYXRjaGVkIHRoZSBjb21wb3VuZFxuICAgKiBzZWxlY3RvciBpbiBgLmNvbXBsZXhTZWxlY3RvclBhcnRzLmNvbXBvdW5kU2VsZWN0b3JzYCBhdCBgaW5kZXhgLlxuICAgKlxuICAgKiBAdHlwZWRlZiB7e1xuICAgKiAgIHRhcmdldDogIUVsZW1lbnQsXG4gICAqICAgY29tcGxleFNlbGVjdG9yUGFydHM6ICFDb21wbGV4U2VsZWN0b3JQYXJ0cyxcbiAgICogICBtYXRjaGVkRWxlbWVudDogIUVsZW1lbnQsXG4gICAqICAgaW5kZXg6IG51bWJlcixcbiAgICogfX1cbiAgICovXG4gIGxldCBTZWxlY3Rvck1hdGNoaW5nQ3Vyc29yOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuXG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiBgU2VsZWN0b3JNYXRjaGluZ0N1cnNvcmBzLCBpbml0aWFsaXplZCB3aXRoIGN1cnNvcnMgcG9pbnRpbmcgYXRcbiAgICogYWxsIGRlc2NlbmRhbnRzIG9mIGBjb250ZXh0Tm9kZWAgdGhhdCBtYXRjaCB0aGUgbGFzdCBjb21wb3VuZCBzZWxlY3RvciBpblxuICAgKiBhbnkgY29tcGxleCBzZWxlY3RvciBpbiBgc2VsZWN0b3JMaXN0YC5cbiAgICpcbiAgICogQHR5cGUgeyFBcnJheTwhU2VsZWN0b3JNYXRjaGluZ0N1cnNvcj59XG4gICAqL1xuICBsZXQgY3Vyc29ycyA9IHV0aWxzLmZsYXQoXG4gICAgcXVlcnkoY29udGV4dE5vZGUsIChfZWxlbWVudCkgPT4gdHJ1ZSkubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICByZXR1cm4gdXRpbHMuZmxhdChcbiAgICAgICAgY29tcGxleFNlbGVjdG9ycy5tYXAoKGNvbXBsZXhTZWxlY3RvclBhcnRzKSA9PiB7XG4gICAgICAgICAgY29uc3Qge2NvbXBvdW5kU2VsZWN0b3JzfSA9IGNvbXBsZXhTZWxlY3RvclBhcnRzO1xuICAgICAgICAgIC8vIFNlbGVjdG9ycyBhcmUgbWF0Y2hlZCBieSBpdGVyYXRpbmcgdGhlaXIgY29tcG91bmQgc2VsZWN0b3JzIGluXG4gICAgICAgICAgLy8gcmV2ZXJzZSBvcmRlciBmb3IgZWZmaWNpZW5jeS4gSW4gcGFydGljdWxhciwgd2hlbiBmaW5kaW5nXG4gICAgICAgICAgLy8gY2FuZGlkYXRlcyBmb3IgdGhlIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaXRlcmF0aW5nIGZvcndhcmRzIHdvdWxkXG4gICAgICAgICAgLy8gaW1wbHkgbmVlZGluZyB0byB3YWxrIGFsbCBkZXNjZW5kYW50cyBvZiB0aGUgbGFzdCBtYXRjaGVkIGVsZW1lbnRcbiAgICAgICAgICAvLyBmb3IgcG9zc2libGUgY2FuZGlkYXRlcywgYnV0IGl0ZXJhdGluZyBiYWNrd2FyZHMgb25seSByZXF1aXJlc1xuICAgICAgICAgIC8vIHdhbGtpbmcgdXAgdGhlIGFuY2VzdG9yIGNoYWluLlxuICAgICAgICAgIGNvbnN0IGluZGV4ID0gY29tcG91bmRTZWxlY3RvcnMubGVuZ3RoIC0gMTtcbiAgICAgICAgICBpZiAobWF0Y2hlc0NvbXBvdW5kU2VsZWN0b3IoZWxlbWVudCwgY29tcG91bmRTZWxlY3RvcnNbaW5kZXhdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdGFyZ2V0OiBlbGVtZW50LFxuICAgICAgICAgICAgICBjb21wbGV4U2VsZWN0b3JQYXJ0cyxcbiAgICAgICAgICAgICAgbWF0Y2hlZEVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSlcbiAgKTtcblxuICAvLyBBdCBlYWNoIHN0ZXAsIGFueSByZW1haW5pbmcgY3Vyc29ycyB0aGF0IGhhdmUgbm90IGZpbmlzaGVkIG1hdGNoaW5nIChpLmUuXG4gIC8vIHdpdGggYGN1cnNvci5pbmRleCA+IDBgKSBzaG91bGQgYmUgcmVwbGFjZWQgd2l0aCBuZXcgY3Vyc29ycyBmb3IgYW55IHZhbGlkXG4gIC8vIGNhbmRpZGF0ZXMgdGhhdCBtYXRjaCB0aGUgbmV4dCBjb21wb3VuZCBzZWxlY3Rvci5cbiAgd2hpbGUgKGN1cnNvcnMuc29tZSgoY3Vyc29yKSA9PiBjdXJzb3IuaW5kZXggPiAwKSkge1xuICAgIGN1cnNvcnMgPSB1dGlscy5mbGF0KFxuICAgICAgY3Vyc29ycy5tYXAoKGN1cnNvcikgPT4ge1xuICAgICAgICAvLyBDdXJzb3JzIHdpdGggYGluZGV4YCBvZiAwIGhhdmUgYWxyZWFkeSBtYXRjaGVkIGFuZCBzaG91bGQgbm90IGJlXG4gICAgICAgIC8vIHJlcGxhY2VkIG9yIHJlbW92ZWQuXG4gICAgICAgIGlmIChjdXJzb3IuaW5kZXggPD0gMCkge1xuICAgICAgICAgIHJldHVybiBjdXJzb3I7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgIG1hdGNoZWRFbGVtZW50LFxuICAgICAgICAgIGNvbXBsZXhTZWxlY3RvclBhcnRzLFxuICAgICAgICAgIGluZGV4OiBsYXN0SW5kZXgsXG4gICAgICAgIH0gPSBjdXJzb3I7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gbGFzdEluZGV4IC0gMTtcbiAgICAgICAgY29uc3QgY29tYmluYXRvciA9IGNvbXBsZXhTZWxlY3RvclBhcnRzLmNvbWJpbmF0b3JzW2luZGV4XTtcbiAgICAgICAgY29uc3QgY29tcG91bmRTZWxlY3RvciA9IGNvbXBsZXhTZWxlY3RvclBhcnRzLmNvbXBvdW5kU2VsZWN0b3JzW2luZGV4XTtcblxuICAgICAgICBpZiAoY29tYmluYXRvciA9PT0gJyAnKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuXG4gICAgICAgICAgLy8gRm9yIGBhIGJgLCB3aGVyZSBleGlzdGluZyBjdXJzb3JzIGhhdmUgYG1hdGNoZWRFbGVtZW50YHMgbWF0Y2hpbmdcbiAgICAgICAgICAvLyBgYmAsIHRoZSBjYW5kaWRhdGVzIHRvIHRlc3QgYWdhaW5zdCBgYWAgYXJlIGFsbCBhbmNlc3RvcnMgb2YgZWFjaFxuICAgICAgICAgIC8vIGN1cnNvcidzIGBtYXRjaGVkRWxlbWVudGAuXG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGxldCBhbmNlc3RvciA9IG1hdGNoZWRFbGVtZW50W3V0aWxzLlNIQURZX1BSRUZJWCArICdwYXJlbnRFbGVtZW50J107XG4gICAgICAgICAgICBhbmNlc3RvcjtcbiAgICAgICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3JbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3BhcmVudEVsZW1lbnQnXVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKG1hdGNoZXNDb21wb3VuZFNlbGVjdG9yKGFuY2VzdG9yLCBjb21wb3VuZFNlbGVjdG9yKSkge1xuICAgICAgICAgICAgICByZXN1bHRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgICAgICBjb21wbGV4U2VsZWN0b3JQYXJ0cyxcbiAgICAgICAgICAgICAgICBtYXRjaGVkRWxlbWVudDogYW5jZXN0b3IsXG4gICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbWJpbmF0b3IgPT09ICc+Jykge1xuICAgICAgICAgIGNvbnN0IHBhcmVudCA9IG1hdGNoZWRFbGVtZW50W3V0aWxzLlNIQURZX1BSRUZJWCArICdwYXJlbnRFbGVtZW50J107XG5cbiAgICAgICAgICAvLyBGb3IgYGEgPiBiYCwgd2hlcmUgZXhpc3RpbmcgY3Vyc29ycyBoYXZlIGBtYXRjaGVkRWxlbWVudGBzIG1hdGNoaW5nXG4gICAgICAgICAgLy8gYGJgLCB0aGUgY2FuZGlkYXRlcyB0byB0ZXN0IGFnYWluc3QgYGFgIGFyZSB0aGUgcGFyZW50cyBvZiBlYWNoXG4gICAgICAgICAgLy8gY3Vyc29yJ3MgYG1hdGNoZWRFbGVtZW50YC5cbiAgICAgICAgICBpZiAobWF0Y2hlc0NvbXBvdW5kU2VsZWN0b3IocGFyZW50LCBjb21wb3VuZFNlbGVjdG9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICBjb21wbGV4U2VsZWN0b3JQYXJ0cyxcbiAgICAgICAgICAgICAgbWF0Y2hlZEVsZW1lbnQ6IHBhcmVudCxcbiAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfSBlbHNlIGlmIChjb21iaW5hdG9yID09PSAnKycpIHtcbiAgICAgICAgICBjb25zdCBzaWJsaW5nID1cbiAgICAgICAgICAgIG1hdGNoZWRFbGVtZW50W3V0aWxzLlNIQURZX1BSRUZJWCArICdwcmV2aW91c0VsZW1lbnRTaWJsaW5nJ107XG5cbiAgICAgICAgICAvLyBGb3IgYGEgKyBiYCwgd2hlcmUgZXhpc3RpbmcgY3Vyc29ycyBoYXZlIGBtYXRjaGVkRWxlbWVudGBzIG1hdGNoaW5nXG4gICAgICAgICAgLy8gYGJgLCB0aGUgY2FuZGlkYXRlcyB0byB0ZXN0IGFnYWluc3QgYGFgIGFyZSB0aGUgaW1tZWRpYXRlbHlcbiAgICAgICAgICAvLyBwcmVjZWRpbmcgc2libGluZ3Mgb2YgZWFjaCBjdXJzb3IncyBgbWF0Y2hlZEVsZW1lbnRgLlxuICAgICAgICAgIGlmIChzaWJsaW5nICYmIG1hdGNoZXNDb21wb3VuZFNlbGVjdG9yKHNpYmxpbmcsIGNvbXBvdW5kU2VsZWN0b3IpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgIGNvbXBsZXhTZWxlY3RvclBhcnRzLFxuICAgICAgICAgICAgICBtYXRjaGVkRWxlbWVudDogc2libGluZyxcbiAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfSBlbHNlIGlmIChjb21iaW5hdG9yID09PSAnficpIHtcbiAgICAgICAgICBjb25zdCByZXN1bHRzID0gW107XG5cbiAgICAgICAgICAvLyBGb3IgYGEgfiBiYCwgd2hlcmUgZXhpc3RpbmcgY3Vyc29ycyBoYXZlIGBtYXRjaGVkRWxlbWVudGBzIG1hdGNoaW5nXG4gICAgICAgICAgLy8gYGJgLCB0aGUgY2FuZGlkYXRlcyB0byB0ZXN0IGFnYWluc3QgYGFgIGFyZSBhbGwgcHJlY2VkaW5nIHNpYmxpbmdzXG4gICAgICAgICAgLy8gb2YgZWFjaCBjdXJzb3IncyBgbWF0Y2hlZEVsZW1lbnRgLlxuICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICBsZXQgc2libGluZyA9XG4gICAgICAgICAgICAgIG1hdGNoZWRFbGVtZW50W3V0aWxzLlNIQURZX1BSRUZJWCArICdwcmV2aW91c0VsZW1lbnRTaWJsaW5nJ107XG4gICAgICAgICAgICBzaWJsaW5nO1xuICAgICAgICAgICAgc2libGluZyA9IHNpYmxpbmdbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3ByZXZpb3VzRWxlbWVudFNpYmxpbmcnXVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKG1hdGNoZXNDb21wb3VuZFNlbGVjdG9yKHNpYmxpbmcsIGNvbXBvdW5kU2VsZWN0b3IpKSB7XG4gICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICAgIGNvbXBsZXhTZWxlY3RvclBhcnRzLFxuICAgICAgICAgICAgICAgIG1hdGNoZWRFbGVtZW50OiBzaWJsaW5nLFxuICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBBcyBvZiB3cml0aW5nLCB0aGVyZSBhcmUgbm8gb3RoZXIgY29tYmluYXRvcnM6XG4gICAgICAgICAgLy8gPGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9zZWxlY3RvcnMvI2NvbWJpbmF0b3JzPlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5yZWNvZ25pemVkIGNvbWJpbmF0b3I6ICcke2NvbWJpbmF0b3J9Jy5gKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgLy8gTWFwIHJlbWFpbmluZyBjdXJzb3JzIHRvIHRoZWlyIGB0YXJnZXRgIGFuZCBkZWR1cGxpY2F0ZS5cbiAgcmV0dXJuIHV0aWxzLmRlZHVwbGljYXRlKGN1cnNvcnMubWFwKCh7dGFyZ2V0fSkgPT4gdGFyZ2V0KSk7XG59O1xuXG5jb25zdCBxdWVyeVNlbGVjdG9ySW1wbGVtZW50YXRpb24gPVxuICB1dGlscy5zZXR0aW5nc1sncXVlcnlTZWxlY3RvckltcGxlbWVudGF0aW9uJ107XG5cbmV4cG9ydCBjb25zdCBRdWVyeVBhdGNoZXMgPSB1dGlscy5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHtcbiAgLyoqXG4gICAqIEB0aGlzIHshUGFyZW50Tm9kZX1cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gICAqL1xuICBxdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgaWYgKHF1ZXJ5U2VsZWN0b3JJbXBsZW1lbnRhdGlvbiA9PT0gJ25hdGl2ZScpIHtcbiAgICAgIC8vIFBvbHlmaWxsZWQgYFNoYWRvd1Jvb3RgcyBkb24ndCBoYXZlIGEgbmF0aXZlIGBxdWVyeVNlbGVjdG9yQWxsYC5cbiAgICAgIGNvbnN0IHRhcmdldCA9XG4gICAgICAgIHRoaXMgaW5zdGFuY2VvZiBTaGFkb3dSb290XG4gICAgICAgICAgPyAvKiogQHR5cGUgeyFTaGFkb3dSb290fSAqLyAodGhpcykuaG9zdFxuICAgICAgICAgIDogdGhpcztcbiAgICAgIGNvbnN0IGNhbmRpZGF0ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChcbiAgICAgICAgdGFyZ2V0W3V0aWxzLk5BVElWRV9QUkVGSVggKyAncXVlcnlTZWxlY3RvckFsbCddKHNlbGVjdG9yKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJvb3QgPSB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICdnZXRSb290Tm9kZSddKCk7XG4gICAgICAvLyBUaGlzIGNvdWxkIHVzZSBgZmluZGAsIGJ1dCBDbG9zdXJlIGRvZXNuJ3QgcG9seWZpbGwgaXQuXG4gICAgICBmb3IgKGNvbnN0IGNhbmRpZGF0ZSBvZiBjYW5kaWRhdGVzKSB7XG4gICAgICAgIGlmIChjYW5kaWRhdGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2dldFJvb3ROb2RlJ10oKSA9PSByb290KSB7XG4gICAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIGlmIChxdWVyeVNlbGVjdG9ySW1wbGVtZW50YXRpb24gPT09ICdzZWxlY3RvckVuZ2luZScpIHtcbiAgICAgIHJldHVybiBsb2dpY2FsUXVlcnlTZWxlY3RvckFsbCh0aGlzLCBzZWxlY3RvcilbMF0gfHwgbnVsbDtcbiAgICB9IGVsc2UgaWYgKHF1ZXJ5U2VsZWN0b3JJbXBsZW1lbnRhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBtYXRjaCBzZWxlY3RvciBhbmQgaGFsdCBvbiBmaXJzdCByZXN1bHQuXG4gICAgICBsZXQgcmVzdWx0ID0gcXVlcnkoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgcmV0dXJuIHV0aWxzLm1hdGNoZXNTZWxlY3RvcihuLCBzZWxlY3Rvcik7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgcmV0dXJuIEJvb2xlYW4obik7XG4gICAgICAgIH1cbiAgICAgIClbMF07XG4gICAgICByZXR1cm4gcmVzdWx0IHx8IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1VucmVjb2duaXplZCB2YWx1ZSBvZiBTaGFkeURPTS5xdWVyeVNlbGVjdG9ySW1wbGVtZW50YXRpb246ICcgK1xuICAgICAgICAgIGAnJHtxdWVyeVNlbGVjdG9ySW1wbGVtZW50YXRpb259J2BcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAdGhpcyB7IVBhcmVudE5vZGV9XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHVzZU5hdGl2ZVxuICAgKi9cbiAgcXVlcnlTZWxlY3RvckFsbChzZWxlY3RvciwgdXNlTmF0aXZlKSB7XG4gICAgaWYgKHVzZU5hdGl2ZSB8fCBxdWVyeVNlbGVjdG9ySW1wbGVtZW50YXRpb24gPT09ICduYXRpdmUnKSB7XG4gICAgICAvLyBQb2x5ZmlsbGVkIGBTaGFkb3dSb290YHMgZG9uJ3QgaGF2ZSBhIG5hdGl2ZSBgcXVlcnlTZWxlY3RvckFsbGAuXG4gICAgICBjb25zdCB0YXJnZXQgPVxuICAgICAgICB0aGlzIGluc3RhbmNlb2YgU2hhZG93Um9vdFxuICAgICAgICAgID8gLyoqIEB0eXBlIHshU2hhZG93Um9vdH0gKi8gKHRoaXMpLmhvc3RcbiAgICAgICAgICA6IHRoaXM7XG4gICAgICBjb25zdCBjYW5kaWRhdGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXG4gICAgICAgIHRhcmdldFt1dGlscy5OQVRJVkVfUFJFRklYICsgJ3F1ZXJ5U2VsZWN0b3JBbGwnXShzZWxlY3RvcilcbiAgICAgICk7XG4gICAgICBjb25zdCByb290ID0gdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAnZ2V0Um9vdE5vZGUnXSgpO1xuICAgICAgcmV0dXJuIHV0aWxzLmNyZWF0ZVBvbHlmaWxsZWRIVE1MQ29sbGVjdGlvbihcbiAgICAgICAgY2FuZGlkYXRlcy5maWx0ZXIoXG4gICAgICAgICAgKGUpID0+IGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2dldFJvb3ROb2RlJ10oKSA9PSByb290XG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChxdWVyeVNlbGVjdG9ySW1wbGVtZW50YXRpb24gPT09ICdzZWxlY3RvckVuZ2luZScpIHtcbiAgICAgIHJldHVybiB1dGlscy5jcmVhdGVQb2x5ZmlsbGVkSFRNTENvbGxlY3Rpb24oXG4gICAgICAgIGxvZ2ljYWxRdWVyeVNlbGVjdG9yQWxsKHRoaXMsIHNlbGVjdG9yKVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHF1ZXJ5U2VsZWN0b3JJbXBsZW1lbnRhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdXRpbHMuY3JlYXRlUG9seWZpbGxlZEhUTUxDb2xsZWN0aW9uKFxuICAgICAgICBxdWVyeSh0aGlzLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgIHJldHVybiB1dGlscy5tYXRjaGVzU2VsZWN0b3Iobiwgc2VsZWN0b3IpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVW5yZWNvZ25pemVkIHZhbHVlIG9mIFNoYWR5RE9NLnF1ZXJ5U2VsZWN0b3JJbXBsZW1lbnRhdGlvbjogJyArXG4gICAgICAgICAgYCcke3F1ZXJ5U2VsZWN0b3JJbXBsZW1lbnRhdGlvbn0nYFxuICAgICAgKTtcbiAgICB9XG4gIH0sXG59KTtcblxuLy8gSW4gcHJlZmVyUGVyZm9ybWFuY2UgbW9kZSwgY3JlYXRlIGEgY3VzdG9tIGBQYXJlbnROb2RlRG9jdW1lbnRPckZyYWdtZW50YFxuLy8gdGhhdCBvcHRpb25hbGx5IGRvZXMgbm90IG1peGluIHF1ZXJ5U2VsZWN0b3IvQWxsOyB0aGlzIGlzIGEgcGVyZm9ybWFuY2Vcbi8vIG9wdGltaXphdGlvbi4gSW4gbm9QYXRjaCwgd2UgbmVlZCB0byBrZWVwIHRoZSBxdWVyeSBwYXRjaGVzIGhlcmUgaW4gb3JkZXIgdG9cbi8vIGVuc3VyZSB0aGUgcXVlcnkgQVBJIGlzIGF2YWlsYWJsZSBvbiB0aGUgd3JhcHBlclxuZXhwb3J0IGNvbnN0IFBhcmVudE5vZGVEb2N1bWVudE9yRnJhZ21lbnRQYXRjaGVzID1cbiAgdXRpbHMuc2V0dGluZ3MucHJlZmVyUGVyZm9ybWFuY2UgJiYgIXV0aWxzLnNldHRpbmdzLm5vUGF0Y2hcbiAgICA/IHV0aWxzLmFzc2lnbih7fSwgUGFyZW50Tm9kZVBhdGNoZXMpXG4gICAgOiBQYXJlbnROb2RlUGF0Y2hlcztcblxudXRpbHMuYXNzaWduKFBhcmVudE5vZGVQYXRjaGVzLCBRdWVyeVBhdGNoZXMpO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDIwIFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG5leHBvcnQgY29uc3QgQ2hpbGROb2RlUGF0Y2hlcyA9IHV0aWxzLmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoe1xuICAvKiogQHRoaXMge0VsZW1lbnR9ICovXG4gIGFmdGVyKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBwYXJlbnROb2RlID0gdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAncGFyZW50Tm9kZSddO1xuICAgIGlmIChwYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG5leHRTaWJsaW5nID0gdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAnbmV4dFNpYmxpbmcnXTtcbiAgICBwYXJlbnROb2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdpbnNlcnRCZWZvcmUnXShcbiAgICAgIHV0aWxzLmNvbnZlcnROb2Rlc0ludG9BTm9kZSguLi5hcmdzKSxcbiAgICAgIG5leHRTaWJsaW5nXG4gICAgKTtcbiAgfSxcblxuICAvKiogQHRoaXMge0VsZW1lbnR9ICovXG4gIGJlZm9yZSguLi5hcmdzKSB7XG4gICAgY29uc3QgcGFyZW50Tm9kZSA9IHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3BhcmVudE5vZGUnXTtcbiAgICBpZiAocGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwYXJlbnROb2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdpbnNlcnRCZWZvcmUnXShcbiAgICAgIHV0aWxzLmNvbnZlcnROb2Rlc0ludG9BTm9kZSguLi5hcmdzKSxcbiAgICAgIHRoaXNcbiAgICApO1xuICB9LFxuXG4gIC8qKiBAdGhpcyB7RWxlbWVudH0gKi9cbiAgcmVtb3ZlKCkge1xuICAgIGNvbnN0IHBhcmVudE5vZGUgPSB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICdwYXJlbnROb2RlJ107XG4gICAgaWYgKHBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcGFyZW50Tm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAncmVtb3ZlQ2hpbGQnXSh0aGlzKTtcbiAgfSxcblxuICAvKiogQHRoaXMge0VsZW1lbnR9ICovXG4gIHJlcGxhY2VXaXRoKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBwYXJlbnROb2RlID0gdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAncGFyZW50Tm9kZSddO1xuICAgIGlmIChwYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG5leHRTaWJsaW5nID0gdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAnbmV4dFNpYmxpbmcnXTtcbiAgICBwYXJlbnROb2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdyZW1vdmVDaGlsZCddKHRoaXMpO1xuICAgIHBhcmVudE5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2luc2VydEJlZm9yZSddKFxuICAgICAgdXRpbHMuY29udmVydE5vZGVzSW50b0FOb2RlKC4uLmFyZ3MpLFxuICAgICAgbmV4dFNpYmxpbmdcbiAgICApO1xuICB9LFxufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQge3Njb3BlQ2xhc3NBdHRyaWJ1dGV9IGZyb20gJy4uL3N0eWxlLXNjb3BpbmcuanMnO1xuaW1wb3J0IHtzaGFkeURhdGFGb3JOb2RlfSBmcm9tICcuLi9zaGFkeS1kYXRhLmpzJztcbmltcG9ydCB7YXR0YWNoU2hhZG93LCBvd25lclNoYWR5Um9vdEZvck5vZGV9IGZyb20gJy4uL2F0dGFjaC1zaGFkb3cuanMnO1xuLy8gcHJldHRpZXItaWdub3JlXG5pbXBvcnQge2V2ZW50UHJvcGVydHlOYW1lc0ZvckVsZW1lbnQsIHdyYXBwZWREZXNjcmlwdG9yRm9yRXZlbnRQcm9wZXJ0eX0gZnJvbSAnLi4vcGF0Y2gtZXZlbnRzLmpzJztcblxuY29uc3QgZG9jID0gd2luZG93LmRvY3VtZW50O1xuXG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgd2hlbmV2ZXIgYW4gYXR0cmlidXRlIGNoYW5nZXMuIElmIHRoZSBgc2xvdGAgYXR0cmlidXRlXG4gKiBjaGFuZ2VzLCBwcm92b2tlcyByZW5kZXJpbmcgaWYgbmVjZXNzYXJ5LiBJZiBhIGA8c2xvdD5gIGVsZW1lbnQncyBgbmFtZWBcbiAqIGF0dHJpYnV0ZSBjaGFuZ2VzLCB1cGRhdGVzIHRoZSByb290J3Mgc2xvdCBtYXAgYW5kIHJlbmRlcnMuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKi9cbmZ1bmN0aW9uIGRpc3RyaWJ1dGVBdHRyaWJ1dGVDaGFuZ2Uobm9kZSwgbmFtZSkge1xuICBpZiAobmFtZSA9PT0gJ3Nsb3QnKSB7XG4gICAgY29uc3QgcGFyZW50ID0gbm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAncGFyZW50Tm9kZSddO1xuICAgIGlmICh1dGlscy5oYXNTaGFkb3dSb290V2l0aFNsb3QocGFyZW50KSkge1xuICAgICAgc2hhZHlEYXRhRm9yTm9kZShwYXJlbnQpLnJvb3QuX2FzeW5jUmVuZGVyKCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKG5vZGUubG9jYWxOYW1lID09PSAnc2xvdCcgJiYgbmFtZSA9PT0gJ25hbWUnKSB7XG4gICAgbGV0IHJvb3QgPSBvd25lclNoYWR5Um9vdEZvck5vZGUobm9kZSk7XG4gICAgaWYgKHJvb3QpIHtcbiAgICAgIHJvb3QuX3VwZGF0ZVNsb3ROYW1lKG5vZGUpO1xuICAgICAgcm9vdC5fYXN5bmNSZW5kZXIoKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEVsZW1lbnRQYXRjaGVzID0gdXRpbHMuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh7XG4gIC8qKiBAdGhpcyB7RWxlbWVudH0gKi9cbiAgZ2V0IHByZXZpb3VzRWxlbWVudFNpYmxpbmcoKSB7XG4gICAgY29uc3Qgbm9kZURhdGEgPSBzaGFkeURhdGFGb3JOb2RlKHRoaXMpO1xuICAgIGlmIChub2RlRGF0YSAmJiBub2RlRGF0YS5wcmV2aW91c1NpYmxpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IG4gPSB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICdwcmV2aW91c1NpYmxpbmcnXTtcbiAgICAgIHdoaWxlIChuICYmIG4ubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIG4gPSBuW3V0aWxzLlNIQURZX1BSRUZJWCArICdwcmV2aW91c1NpYmxpbmcnXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpc1t1dGlscy5OQVRJVkVfUFJFRklYICsgJ3ByZXZpb3VzRWxlbWVudFNpYmxpbmcnXTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqIEB0aGlzIHtFbGVtZW50fSAqL1xuICBnZXQgbmV4dEVsZW1lbnRTaWJsaW5nKCkge1xuICAgIGNvbnN0IG5vZGVEYXRhID0gc2hhZHlEYXRhRm9yTm9kZSh0aGlzKTtcbiAgICBpZiAobm9kZURhdGEgJiYgbm9kZURhdGEubmV4dFNpYmxpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IG4gPSB0aGlzW3V0aWxzLlNIQURZX1BSRUZJWCArICduZXh0U2libGluZyddO1xuICAgICAgd2hpbGUgKG4gJiYgbi5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgbiA9IG5bdXRpbHMuU0hBRFlfUFJFRklYICsgJ25leHRTaWJsaW5nJ107XG4gICAgICB9XG4gICAgICByZXR1cm4gbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXNbdXRpbHMuTkFUSVZFX1BSRUZJWCArICduZXh0RWxlbWVudFNpYmxpbmcnXTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqIEB0aGlzIHtFbGVtZW50fSAqL1xuICBnZXQgc2xvdCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ3Nsb3QnKTtcbiAgfSxcblxuICAvKiogQHRoaXMge0VsZW1lbnR9ICovXG4gIHNldCBzbG90KHZhbHVlKSB7XG4gICAgdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAnc2V0QXR0cmlidXRlJ10oJ3Nsb3QnLCB2YWx1ZSk7XG4gIH0sXG5cbiAgLyoqIEB0aGlzIHtFbGVtZW50fSAqL1xuICBnZXQgY2xhc3NOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJztcbiAgfSxcblxuICAvKipcbiAgICogQHRoaXMge0VsZW1lbnR9XG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKi9cbiAgc2V0IGNsYXNzTmFtZSh2YWx1ZSkge1xuICAgIHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3NldEF0dHJpYnV0ZSddKCdjbGFzcycsIHZhbHVlKTtcbiAgfSxcblxuICAvKipcbiAgICogQHRoaXMge0VsZW1lbnR9XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKi9cbiAgc2V0QXR0cmlidXRlKGF0dHIsIHZhbHVlKSB7XG4gICAgaWYgKHRoaXMub3duZXJEb2N1bWVudCAhPT0gZG9jKSB7XG4gICAgICB0aGlzW3V0aWxzLk5BVElWRV9QUkVGSVggKyAnc2V0QXR0cmlidXRlJ10oYXR0ciwgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoIXNjb3BlQ2xhc3NBdHRyaWJ1dGUodGhpcywgYXR0ciwgdmFsdWUpKSB7XG4gICAgICB0aGlzW3V0aWxzLk5BVElWRV9QUkVGSVggKyAnc2V0QXR0cmlidXRlJ10oYXR0ciwgdmFsdWUpO1xuICAgICAgZGlzdHJpYnV0ZUF0dHJpYnV0ZUNoYW5nZSh0aGlzLCBhdHRyKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEB0aGlzIHtFbGVtZW50fVxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0clxuICAgKi9cbiAgcmVtb3ZlQXR0cmlidXRlKGF0dHIpIHtcbiAgICBpZiAodGhpcy5vd25lckRvY3VtZW50ICE9PSBkb2MpIHtcbiAgICAgIHRoaXNbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdyZW1vdmVBdHRyaWJ1dGUnXShhdHRyKTtcbiAgICB9IGVsc2UgaWYgKCFzY29wZUNsYXNzQXR0cmlidXRlKHRoaXMsIGF0dHIsICcnKSkge1xuICAgICAgdGhpc1t1dGlscy5OQVRJVkVfUFJFRklYICsgJ3JlbW92ZUF0dHJpYnV0ZSddKGF0dHIpO1xuICAgICAgZGlzdHJpYnV0ZUF0dHJpYnV0ZUNoYW5nZSh0aGlzLCBhdHRyKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0QXR0cmlidXRlKGF0dHIpID09PSAnJykge1xuICAgICAgLy8gV2hlbiBhdHRyPSdjbGFzcycsIHNjb3BlQ2xhc3NBdHRyaWJ1dGUoKSB3aWxsIGhhbmRsZSB0aGUgY2hhbmdlIGFzIGFcbiAgICAgIC8vIHNpZGUtZWZmZWN0IGFuZCByZXR1cm4gYHRydWVgLCBhbGxvd2luZyB1cyB0byBnZXQgdG8gdGhpcyBicmFuY2gsXG4gICAgICAvLyB3aGljaCBjbGVhbnMgdXAgdGhlICdjbGFzcycgYXR0cmlidXRlIGlmIGl0J3MgZW1wdHkgYW5kIHdlIHdlcmVcbiAgICAgIC8vIHN1cHBvc2VkIHRvIGhhdmUgcmVtb3ZlZCBpdC5cbiAgICAgIHRoaXNbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdyZW1vdmVBdHRyaWJ1dGUnXShhdHRyKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEB0aGlzIHtFbGVtZW50fVxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXR0clxuICAgKiBAcGFyYW0ge2Jvb2xlYW4gfCB1bmRlZmluZWR9IGZvcmNlXG4gICAqL1xuICB0b2dnbGVBdHRyaWJ1dGUoYXR0ciwgZm9yY2UpIHtcbiAgICBpZiAodGhpcy5vd25lckRvY3VtZW50ICE9PSBkb2MpIHtcbiAgICAgIHJldHVybiB0aGlzW3V0aWxzLk5BVElWRV9QUkVGSVggKyAndG9nZ2xlQXR0cmlidXRlJ10oYXR0ciwgZm9yY2UpO1xuICAgIH0gZWxzZSBpZiAoIXNjb3BlQ2xhc3NBdHRyaWJ1dGUodGhpcywgYXR0ciwgJycpKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSB0aGlzW3V0aWxzLk5BVElWRV9QUkVGSVggKyAndG9nZ2xlQXR0cmlidXRlJ10oYXR0ciwgZm9yY2UpO1xuICAgICAgZGlzdHJpYnV0ZUF0dHJpYnV0ZUNoYW5nZSh0aGlzLCBhdHRyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBlbHNlIGlmICh0aGlzLmdldEF0dHJpYnV0ZShhdHRyKSA9PT0gJycgJiYgIWZvcmNlKSB7XG4gICAgICAvLyBXaGVuIGF0dHI9J2NsYXNzJywgc2NvcGVDbGFzc0F0dHJpYnV0ZSgpIHdpbGwgaGFuZGxlIHRoZSBjaGFuZ2UgYXMgYVxuICAgICAgLy8gc2lkZS1lZmZlY3QgYW5kIHJldHVybiBgdHJ1ZWAsIGFsbG93aW5nIHVzIHRvIGdldCB0byB0aGlzIGJyYW5jaCxcbiAgICAgIC8vIHdoaWNoIGNsZWFucyB1cCB0aGUgJ2NsYXNzJyBhdHRyaWJ1dGUgaWYgaXQncyBlbXB0eSBhbmQgd2Ugd2VyZVxuICAgICAgLy8gc3VwcG9zZWQgdG8gaGF2ZSByZW1vdmVkIGl0LlxuICAgICAgLy8gV2UgY2hlY2sgZm9yIGBmb3JjZWAgYmVpbmcgZmFsc2V5IGJlY2F1c2Ugd2Ugb25seSB3YW50IHRvIGNsZWFuIHVwIG9uXG4gICAgICAvLyByZW1vdmFsIG9mIHRoZSBhdHRyaWJ1dGUuXG4gICAgICByZXR1cm4gdGhpc1t1dGlscy5OQVRJVkVfUFJFRklYICsgJ3RvZ2dsZUF0dHJpYnV0ZSddKGF0dHIsIGZvcmNlKTtcbiAgICB9XG4gIH0sXG59KTtcblxuaWYgKCF1dGlscy5zZXR0aW5ncy5wcmVmZXJQZXJmb3JtYW5jZSkge1xuICBldmVudFByb3BlcnR5TmFtZXNGb3JFbGVtZW50LmZvckVhY2goKHByb3BlcnR5KSA9PiB7XG4gICAgRWxlbWVudFBhdGNoZXNbcHJvcGVydHldID0gd3JhcHBlZERlc2NyaXB0b3JGb3JFdmVudFByb3BlcnR5KHByb3BlcnR5KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBjb25zdCBFbGVtZW50U2hhZG93UGF0Y2hlcyA9IHV0aWxzLmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoe1xuICAvKipcbiAgICogQHRoaXMge0VsZW1lbnR9XG4gICAqIEBwYXJhbSB7IXttb2RlOiBzdHJpbmd9fSBvcHRpb25zXG4gICAqL1xuICBhdHRhY2hTaGFkb3cob3B0aW9ucykge1xuICAgIGNvbnN0IHJvb3QgPSBhdHRhY2hTaGFkb3codGhpcywgb3B0aW9ucyk7XG4gICAgLy8gVE9ETyhzb3J2ZWxsKTogV29ya2Fyb3VuZCBmb3IgQ0Ugbm90IHNlZWluZyBzaGFkb3dSb290IGluIGBvbi1kZW1hbmRgXG4gICAgLy8gbm9QYXRjaCBtb2RlLiBDRSdzIGF0dGFjaFNoYWRvdyBwYXRjaCBpcyBvdmVyd3JpdHRlbiBieSB0aGlzIHBhdGNoXG4gICAgLy8gYW5kIGNhbm5vdCBzZXQgaXRzIG93biBzcGVjaWFsIHRyYWNraW5nIGZvciBzaGFkb3dSb290LiBJdCBkb2VzIHRoaXNcbiAgICAvLyB0byBiZSBhYmxlIHRvIHNlZSBjbG9zZWQgc2hhZG93Um9vdHMuXG4gICAgLy8gVGhpcyBpcyBuZWNlc3Nhcnkgc28gdGhhdCB0aGUgQ0UgcG9seWZpbGwgY2FuIHRyYXZlcnNlIGludG8gbm9kZXNcbiAgICAvLyB3aXRoIHNoYWRvd1Jvb3QgdGhhdCB3aWxsIHVuZGVyIGBvbi1kZW1hbmRgIGhhdmUgdGhlaXIgY2hpbGROb2RlcyBwYXRjaGVkLlxuICAgIHRoaXNbJ19fQ0Vfc2hhZG93Um9vdCddID0gcm9vdDtcbiAgICByZXR1cm4gcm9vdDtcbiAgfSxcblxuICAvLyBOb3RlOiBDYW4gYmUgcGF0Y2hlZCBvbiBlbGVtZW50IHByb3RvdHlwZSBvbiBhbGwgYnJvd3NlcnMuXG4gIC8vIE11c3QgYmUgcGF0Y2hlZCBvbiBpbnN0YW5jZSBvbiBicm93c2VycyB0aGF0IHN1cHBvcnQgbmF0aXZlIFNoYWRvdyBET01cbiAgLy8gYnV0IGRvIG5vdCBoYXZlIGJ1aWx0aW4gYWNjZXNzb3JzIChvbGQgQ2hyb21lKS5cbiAgLyoqIEB0aGlzIHtFbGVtZW50fSAqL1xuICBnZXQgc2hhZG93Um9vdCgpIHtcbiAgICBjb25zdCBub2RlRGF0YSA9IHNoYWR5RGF0YUZvck5vZGUodGhpcyk7XG4gICAgcmV0dXJuIChub2RlRGF0YSAmJiBub2RlRGF0YS5wdWJsaWNSb290KSB8fCBudWxsO1xuICB9LFxufSk7XG5cbnV0aWxzLmFzc2lnbihFbGVtZW50UGF0Y2hlcywgRWxlbWVudFNoYWRvd1BhdGNoZXMpO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHtnZXRJbm5lckhUTUx9IGZyb20gJy4uL2lubmVySFRNTC5qcyc7XG5pbXBvcnQge2NsZWFyTm9kZX0gZnJvbSAnLi9Ob2RlLmpzJztcblxuLyoqIEB0eXBlIHshRG9jdW1lbnR9ICovXG5jb25zdCBpbmVydERvYyA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgnaW5lcnQnKTtcblxuZXhwb3J0IGNvbnN0IEVsZW1lbnRPclNoYWRvd1Jvb3RQYXRjaGVzID0gdXRpbHMuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh7XG4gIC8qKiBAdGhpcyB7RWxlbWVudH0gKi9cbiAgZ2V0IGlubmVySFRNTCgpIHtcbiAgICBpZiAodXRpbHMuaXNUcmFja2luZ0xvZ2ljYWxDaGlsZE5vZGVzKHRoaXMpKSB7XG4gICAgICBjb25zdCBjb250ZW50ID1cbiAgICAgICAgdGhpcy5sb2NhbE5hbWUgPT09ICd0ZW1wbGF0ZSdcbiAgICAgICAgICA/IC8qKiBAdHlwZSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gKi8gKHRoaXMpLmNvbnRlbnRcbiAgICAgICAgICA6IHRoaXM7XG4gICAgICByZXR1cm4gZ2V0SW5uZXJIVE1MKGNvbnRlbnQsIHV0aWxzLmNoaWxkTm9kZXNBcnJheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzW3V0aWxzLk5BVElWRV9QUkVGSVggKyAnaW5uZXJIVE1MJ107XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAdGhpcyB7RWxlbWVudH1cbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqL1xuICBzZXQgaW5uZXJIVE1MKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMubG9jYWxOYW1lID09PSAndGVtcGxhdGUnKSB7XG4gICAgICB0aGlzW3V0aWxzLk5BVElWRV9QUkVGSVggKyAnaW5uZXJIVE1MJ10gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xlYXJOb2RlKHRoaXMpO1xuICAgICAgY29uc3QgY29udGFpbmVyTmFtZSA9IHRoaXMubG9jYWxOYW1lIHx8ICdkaXYnO1xuICAgICAgbGV0IGh0bWxDb250YWluZXI7XG4gICAgICBpZiAoIXRoaXMubmFtZXNwYWNlVVJJIHx8IHRoaXMubmFtZXNwYWNlVVJJID09PSBpbmVydERvYy5uYW1lc3BhY2VVUkkpIHtcbiAgICAgICAgaHRtbENvbnRhaW5lciA9IGluZXJ0RG9jLmNyZWF0ZUVsZW1lbnQoY29udGFpbmVyTmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBodG1sQ29udGFpbmVyID0gaW5lcnREb2MuY3JlYXRlRWxlbWVudE5TKFxuICAgICAgICAgIHRoaXMubmFtZXNwYWNlVVJJLFxuICAgICAgICAgIGNvbnRhaW5lck5hbWVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICh1dGlscy5zZXR0aW5ncy5oYXNEZXNjcmlwdG9ycykge1xuICAgICAgICBodG1sQ29udGFpbmVyW3V0aWxzLk5BVElWRV9QUkVGSVggKyAnaW5uZXJIVE1MJ10gPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGh0bWxDb250YWluZXIuaW5uZXJIVE1MID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBsZXQgZmlyc3RDaGlsZDtcbiAgICAgIHdoaWxlICgoZmlyc3RDaGlsZCA9IGh0bWxDb250YWluZXJbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2ZpcnN0Q2hpbGQnXSkpIHtcbiAgICAgICAgdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAnaW5zZXJ0QmVmb3JlJ10oZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG4vLyBwcmV0dGllci1pZ25vcmVcbmltcG9ydCB7ZXZlbnRQcm9wZXJ0eU5hbWVzRm9ySFRNTEVsZW1lbnQsIHdyYXBwZWREZXNjcmlwdG9yRm9yRXZlbnRQcm9wZXJ0eX0gZnJvbSAnLi4vcGF0Y2gtZXZlbnRzLmpzJztcbmltcG9ydCB7c2hhZHlEYXRhRm9yTm9kZX0gZnJvbSAnLi4vc2hhZHktZGF0YS5qcyc7XG5cbmV4cG9ydCBjb25zdCBIVE1MRWxlbWVudFBhdGNoZXMgPSB1dGlscy5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHtcbiAgLyoqIEB0aGlzIHtIVE1MRWxlbWVudH0gKi9cbiAgYmx1cigpIHtcbiAgICBjb25zdCBub2RlRGF0YSA9IHNoYWR5RGF0YUZvck5vZGUodGhpcyk7XG4gICAgbGV0IHJvb3QgPSBub2RlRGF0YSAmJiBub2RlRGF0YS5yb290O1xuICAgIGxldCBzaGFkb3dBY3RpdmUgPSByb290ICYmIHJvb3QuYWN0aXZlRWxlbWVudDtcbiAgICBpZiAoc2hhZG93QWN0aXZlKSB7XG4gICAgICBzaGFkb3dBY3RpdmVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2JsdXInXSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzW3V0aWxzLk5BVElWRV9QUkVGSVggKyAnYmx1ciddKCk7XG4gICAgfVxuICB9LFxufSk7XG5cbmlmICghdXRpbHMuc2V0dGluZ3MucHJlZmVyUGVyZm9ybWFuY2UpIHtcbiAgZXZlbnRQcm9wZXJ0eU5hbWVzRm9ySFRNTEVsZW1lbnQuZm9yRWFjaCgocHJvcGVydHkpID0+IHtcbiAgICBIVE1MRWxlbWVudFBhdGNoZXNbcHJvcGVydHldID0gd3JhcHBlZERlc2NyaXB0b3JGb3JFdmVudFByb3BlcnR5KHByb3BlcnR5KTtcbiAgfSk7XG59XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQge3NoYWR5RGF0YUZvck5vZGV9IGZyb20gJy4uL3NoYWR5LWRhdGEuanMnO1xuaW1wb3J0IHthZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyfSBmcm9tICcuLi9wYXRjaC1ldmVudHMuanMnO1xuXG5leHBvcnQgY29uc3QgU2xvdFBhdGNoZXMgPSB1dGlscy5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHtcbiAgLyoqXG4gICAqIEB0aGlzIHtIVE1MU2xvdEVsZW1lbnR9XG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9uc1xuICAgKi9cbiAgYXNzaWduZWROb2RlcyhvcHRpb25zKSB7XG4gICAgaWYgKHRoaXMubG9jYWxOYW1lID09PSAnc2xvdCcpIHtcbiAgICAgIC8vIEZvcmNlIGFueSBjb250YWluaW5nIHNoYWRvd1Jvb3QgdG8gZmx1c2ggc28gdGhhdCBkaXN0cmlidXRpb24gb2NjdXJzXG4gICAgICAvLyBhbmQgdGhpcyBub2RlIGhhcyBhc3NpZ25lZE5vZGVzLlxuICAgICAgY29uc3Qgcm9vdCA9IHRoaXNbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2dldFJvb3ROb2RlJ10oKTtcbiAgICAgIGlmIChyb290ICYmIHV0aWxzLmlzU2hhZHlSb290KHJvb3QpKSB7XG4gICAgICAgIHJvb3QuX3JlbmRlcigpO1xuICAgICAgfVxuICAgICAgY29uc3Qgbm9kZURhdGEgPSBzaGFkeURhdGFGb3JOb2RlKHRoaXMpO1xuICAgICAgcmV0dXJuIG5vZGVEYXRhXG4gICAgICAgID8gKG9wdGlvbnMgJiYgb3B0aW9ucy5mbGF0dGVuXG4gICAgICAgICAgICA/IG5vZGVEYXRhLmZsYXR0ZW5lZE5vZGVzXG4gICAgICAgICAgICA6IG5vZGVEYXRhLmFzc2lnbmVkTm9kZXMpIHx8IFtdXG4gICAgICAgIDogW107XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAdGhpcyB7SFRNTFNsb3RFbGVtZW50fVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAgKiBAcGFyYW0ge09iamVjdHxib29sZWFuPX0gb3B0aW9uc09yQ2FwdHVyZVxuICAgKi9cbiAgYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgb3B0aW9uc09yQ2FwdHVyZSkge1xuICAgIC8vIE5PVEUsIGNoZWNrIGlmIHRoaXMgaXMgYSBgc2xvdGAgYmVjYXVzZSB0aGVzZSBwYXRjaGVzIGFyZSBpbnN0YWxsZWQgb25cbiAgICAvLyBFbGVtZW50IHdoZXJlIGJyb3dzZXJzIGRvbid0IGhhdmUgYDxzbG90PmBcbiAgICBpZiAodGhpcy5sb2NhbE5hbWUgIT09ICdzbG90JyB8fCB0eXBlID09PSAnc2xvdGNoYW5nZScpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIuY2FsbCh0aGlzLCB0eXBlLCBmbiwgb3B0aW9uc09yQ2FwdHVyZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc09yQ2FwdHVyZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgb3B0aW9uc09yQ2FwdHVyZSA9IHtcbiAgICAgICAgICBjYXB0dXJlOiBCb29sZWFuKG9wdGlvbnNPckNhcHR1cmUpLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgY29uc3QgcGFyZW50ID0gdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAncGFyZW50Tm9kZSddO1xuICAgICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdTaGFkeURPTSBjYW5ub3QgYXR0YWNoIGV2ZW50IHRvIHNsb3QgdW5sZXNzIGl0IGhhcyBhIGBwYXJlbnROb2RlYCdcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnNPckNhcHR1cmUuX19zaGFkeVRhcmdldCA9IHRoaXM7XG4gICAgICBwYXJlbnRbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2FkZEV2ZW50TGlzdGVuZXInXShcbiAgICAgICAgdHlwZSxcbiAgICAgICAgZm4sXG4gICAgICAgIG9wdGlvbnNPckNhcHR1cmVcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAdGhpcyB7SFRNTFNsb3RFbGVtZW50fVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAgKiBAcGFyYW0ge09iamVjdHxib29sZWFuPX0gb3B0aW9uc09yQ2FwdHVyZVxuICAgKi9cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgb3B0aW9uc09yQ2FwdHVyZSkge1xuICAgIC8vIE5PVEUsIGNoZWNrIGlmIHRoaXMgaXMgYSBgc2xvdGAgYmVjYXVzZSB0aGVzZSBwYXRjaGVzIGFyZSBpbnN0YWxsZWQgb25cbiAgICAvLyBFbGVtZW50IHdoZXJlIGJyb3dzZXJzIGRvbid0IGhhdmUgYDxzbG90PmBcbiAgICBpZiAodGhpcy5sb2NhbE5hbWUgIT09ICdzbG90JyB8fCB0eXBlID09PSAnc2xvdGNoYW5nZScpIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIuY2FsbCh0aGlzLCB0eXBlLCBmbiwgb3B0aW9uc09yQ2FwdHVyZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc09yQ2FwdHVyZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgb3B0aW9uc09yQ2FwdHVyZSA9IHtcbiAgICAgICAgICBjYXB0dXJlOiBCb29sZWFuKG9wdGlvbnNPckNhcHR1cmUpLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgY29uc3QgcGFyZW50ID0gdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAncGFyZW50Tm9kZSddO1xuICAgICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdTaGFkeURPTSBjYW5ub3QgYXR0YWNoIGV2ZW50IHRvIHNsb3QgdW5sZXNzIGl0IGhhcyBhIGBwYXJlbnROb2RlYCdcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnNPckNhcHR1cmUuX19zaGFkeVRhcmdldCA9IHRoaXM7XG4gICAgICBwYXJlbnRbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3JlbW92ZUV2ZW50TGlzdGVuZXInXShcbiAgICAgICAgdHlwZSxcbiAgICAgICAgZm4sXG4gICAgICAgIG9wdGlvbnNPckNhcHR1cmVcbiAgICAgICk7XG4gICAgfVxuICB9LFxufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHtxdWVyeX0gZnJvbSAnLi9QYXJlbnROb2RlLmpzJztcblxuZXhwb3J0IGNvbnN0IERvY3VtZW50T3JGcmFnbWVudFBhdGNoZXMgPSB1dGlscy5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHtcbiAgLyoqXG4gICAqIEB0aGlzIHtFbGVtZW50fVxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAgICovXG4gIGdldEVsZW1lbnRCeUlkKGlkKSB7XG4gICAgaWYgKGlkID09PSAnJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSBxdWVyeShcbiAgICAgIHRoaXMsXG4gICAgICBmdW5jdGlvbiAobikge1xuICAgICAgICByZXR1cm4gbi5pZCA9PSBpZDtcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbiAobikge1xuICAgICAgICByZXR1cm4gQm9vbGVhbihuKTtcbiAgICAgIH1cbiAgICApWzBdO1xuICAgIHJldHVybiByZXN1bHQgfHwgbnVsbDtcbiAgfSxcbn0pO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHtvd25lclNoYWR5Um9vdEZvck5vZGV9IGZyb20gJy4uL2F0dGFjaC1zaGFkb3cuanMnO1xuXG5mdW5jdGlvbiBnZXREb2N1bWVudEFjdGl2ZUVsZW1lbnQoKSB7XG4gIGlmICh1dGlscy5zZXR0aW5ncy5oYXNEZXNjcmlwdG9ycykge1xuICAgIHJldHVybiBkb2N1bWVudFt1dGlscy5OQVRJVkVfUFJFRklYICsgJ2FjdGl2ZUVsZW1lbnQnXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgfVxufVxuXG4vLyBHZXQgdGhlIGVsZW1lbnQgd2l0aGluIHRoZSBnaXZlbiBzZXQgb2Ygcm9vdHMuXG5mdW5jdGlvbiBnZXRFbEluUm9vdChyb290cywgZWwpIHtcbiAgbGV0IGVsUm9vdDtcbiAgd2hpbGUgKFxuICAgIGVsICYmXG4gICAgIXJvb3RzLmhhcygoZWxSb290ID0gZWxbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2dldFJvb3ROb2RlJ10oKSkpXG4gICkge1xuICAgIGVsID0gZWxSb290Lmhvc3Q7XG4gIH1cbiAgcmV0dXJuIGVsO1xufVxuXG5mdW5jdGlvbiBnZXRBbmNlc3RvclJvb3RzKGRvY09yUm9vdCkge1xuICBjb25zdCByb290cyA9IG5ldyBTZXQoKTtcbiAgcm9vdHMuYWRkKGRvY09yUm9vdCk7XG4gIHdoaWxlICh1dGlscy5pc1NoYWR5Um9vdChkb2NPclJvb3QpICYmIGRvY09yUm9vdC5ob3N0KSB7XG4gICAgZG9jT3JSb290ID0gZG9jT3JSb290Lmhvc3RbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2dldFJvb3ROb2RlJ10oKTtcbiAgICByb290cy5hZGQoZG9jT3JSb290KTtcbiAgfVxuICByZXR1cm4gcm9vdHM7XG59XG5cbmNvbnN0IFVTRV9OQVRJVkVfRE9DVU1FTlRfRUZQID0gJ3VzZU5hdGl2ZURvY3VtZW50RUZQJztcblxuY29uc3QgZWxlbWVudHNGcm9tUG9pbnRQcm9wZXJ0eSA9XG4gIHV0aWxzLk5BVElWRV9QUkVGSVggK1xuICB1dGlscy5nZXRQcm9wZXJ0eU5hbWUoRG9jdW1lbnQucHJvdG90eXBlLCAnZWxlbWVudHNGcm9tUG9pbnQnKTtcblxuZXhwb3J0IGNvbnN0IERvY3VtZW50T3JTaGFkb3dSb290UGF0Y2hlcyA9IHV0aWxzLmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoe1xuICAvKiogQHRoaXMge0RvY3VtZW50fFNoYWRvd1Jvb3R9ICovXG4gIGdldCBhY3RpdmVFbGVtZW50KCkge1xuICAgIGxldCBhY3RpdmUgPSBnZXREb2N1bWVudEFjdGl2ZUVsZW1lbnQoKTtcbiAgICAvLyBJbiBJRTExLCBhY3RpdmVFbGVtZW50IG1pZ2h0IGJlIGFuIGVtcHR5IG9iamVjdCBpZiB0aGUgZG9jdW1lbnQgaXNcbiAgICAvLyBjb250YWluZWQgaW4gYW4gaWZyYW1lLlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vaXNzdWVzLzEwOTk4Nzg4L1xuICAgIGlmICghYWN0aXZlIHx8ICFhY3RpdmUubm9kZVR5cGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBsZXQgaXNTaGFkeVJvb3QgPSAhIXV0aWxzLmlzU2hhZHlSb290KHRoaXMpO1xuICAgIGlmICh0aGlzICE9PSBkb2N1bWVudCkge1xuICAgICAgLy8gSWYgdGhpcyBub2RlIGlzbid0IGEgZG9jdW1lbnQgb3Igc2hhZHkgcm9vdCwgdGhlbiBpdCBkb2Vzbid0IGhhdmVcbiAgICAgIC8vIGFuIGFjdGl2ZSBlbGVtZW50LlxuICAgICAgaWYgKCFpc1NoYWR5Um9vdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIC8vIElmIHRoaXMgc2hhZHkgcm9vdCdzIGhvc3QgaXMgdGhlIGFjdGl2ZSBlbGVtZW50IG9yIHRoZSBhY3RpdmVcbiAgICAgIC8vIGVsZW1lbnQgaXMgbm90IGEgZGVzY2VuZGFudCBvZiB0aGUgaG9zdCAoaW4gdGhlIGNvbXBvc2VkIHRyZWUpLFxuICAgICAgLy8gdGhlbiBpdCBkb2Vzbid0IGhhdmUgYW4gYWN0aXZlIGVsZW1lbnQuXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuaG9zdCA9PT0gYWN0aXZlIHx8XG4gICAgICAgICF0aGlzLmhvc3RbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdjb250YWlucyddKGFjdGl2ZSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gVGhpcyBub2RlIGlzIGVpdGhlciB0aGUgZG9jdW1lbnQgb3IgYSBzaGFkeSByb290IG9mIHdoaWNoIHRoZSBhY3RpdmVcbiAgICAvLyBlbGVtZW50IGlzIGEgKGNvbXBvc2VkKSBkZXNjZW5kYW50IG9mIGl0cyBob3N0OyBpdGVyYXRlIHVwd2FyZHMgdG9cbiAgICAvLyBmaW5kIHRoZSBhY3RpdmUgZWxlbWVudCdzIG1vc3Qgc2hhbGxvdyBob3N0IHdpdGhpbiBpdC5cbiAgICBsZXQgYWN0aXZlUm9vdCA9IG93bmVyU2hhZHlSb290Rm9yTm9kZShhY3RpdmUpO1xuICAgIHdoaWxlIChhY3RpdmVSb290ICYmIGFjdGl2ZVJvb3QgIT09IHRoaXMpIHtcbiAgICAgIGFjdGl2ZSA9IGFjdGl2ZVJvb3QuaG9zdDtcbiAgICAgIGFjdGl2ZVJvb3QgPSBvd25lclNoYWR5Um9vdEZvck5vZGUoYWN0aXZlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMgPT09IGRvY3VtZW50KSB7XG4gICAgICAvLyBUaGlzIG5vZGUgaXMgdGhlIGRvY3VtZW50LCBzbyBhY3RpdmVSb290IHNob3VsZCBiZSBudWxsLlxuICAgICAgcmV0dXJuIGFjdGl2ZVJvb3QgPyBudWxsIDogYWN0aXZlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGlzIG5vZGUgaXMgYSBub24tZG9jdW1lbnQgc2hhZHkgcm9vdCwgYW5kIGl0IHNob3VsZCBiZVxuICAgICAgLy8gYWN0aXZlUm9vdC5cbiAgICAgIHJldHVybiBhY3RpdmVSb290ID09PSB0aGlzID8gYWN0aXZlIDogbnVsbDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqIEB0aGlzIHtEb2N1bWVudHxTaGFkb3dSb290fSAqL1xuICBlbGVtZW50c0Zyb21Qb2ludCh4LCB5KSB7XG4gICAgY29uc3QgbmF0aXZlUmVzdWx0ID0gZG9jdW1lbnRbZWxlbWVudHNGcm9tUG9pbnRQcm9wZXJ0eV0oeCwgeSk7XG4gICAgLy8gc3VwcG9ydCBvcHRpb25hbGx5IG9wdC1pbmcgb3V0IGZvciBkb2N1bWVudFxuICAgIGlmICh0aGlzID09PSBkb2N1bWVudCAmJiB1dGlscy5zZXR0aW5nc1tVU0VfTkFUSVZFX0RPQ1VNRU5UX0VGUF0pIHtcbiAgICAgIHJldHVybiBuYXRpdmVSZXN1bHQ7XG4gICAgfVxuICAgIGNvbnN0IG5hdGl2ZUFycmF5ID0gdXRpbHMuYXJyYXlGcm9tKG5hdGl2ZVJlc3VsdCk7XG4gICAgLy8gRmlsdGVyIG5hdGl2ZSByZXN1bHQgdG8gcmV0dXJuIHRoZSBlbGVtZW50IGluIHRoaXMgcm9vdFxuICAgIC8vIE9SIGFuIGFib3ZlIHJvb3QuXG4gICAgLy8gU2V0IGNvbnRhaW5pbmcgdGhpcyByb290IGFuZCBpdHMgYW5jZXN0b3Igcm9vdHMuXG4gICAgY29uc3QgYW5jZXN0b3JSb290cyA9IGdldEFuY2VzdG9yUm9vdHModGhpcyk7XG4gICAgLy8gVXNlIGEgU2V0IHNpbmNlIHRoZSBlbGVtZW50cyBjYW4gcmVwZWF0LlxuICAgIGNvbnN0IHJvb3RlZFJlc3VsdCA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hdGl2ZUFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICByb290ZWRSZXN1bHQuYWRkKGdldEVsSW5Sb290KGFuY2VzdG9yUm9vdHMsIG5hdGl2ZUFycmF5W2ldKSk7XG4gICAgfVxuICAgIC8vIE5vdGUsIGZvciBJRSBjb21wYXQgYXZvaWQgQXJyYXkuZnJvbShzZXQpLlxuICAgIGNvbnN0IHIgPSBbXTtcbiAgICByb290ZWRSZXN1bHQuZm9yRWFjaCgoeCkgPT4gci5wdXNoKHgpKTtcbiAgICByZXR1cm4gcjtcbiAgfSxcblxuICAvKiogQHRoaXMge0RvY3VtZW50fFNoYWRvd1Jvb3R9ICovXG4gIGVsZW1lbnRGcm9tUG9pbnQoeCwgeSkge1xuICAgIC8vIHN1cHBvcnQgb3B0aW9uYWxseSBvcHQtaW5nIG91dCBmb3IgZG9jdW1lbnRcbiAgICByZXR1cm4gdGhpcyA9PT0gZG9jdW1lbnQgJiYgdXRpbHMuc2V0dGluZ3NbVVNFX05BVElWRV9ET0NVTUVOVF9FRlBdXG4gICAgICA/IHRoaXNbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdlbGVtZW50RnJvbVBvaW50J10oeCwgeSlcbiAgICAgIDogdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAnZWxlbWVudHNGcm9tUG9pbnQnXSh4LCB5KVswXSB8fCBudWxsO1xuICB9LFxufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbmNvbnN0IGRvYyA9IHdpbmRvdy5kb2N1bWVudDtcblxuZXhwb3J0IGNvbnN0IERvY3VtZW50UGF0Y2hlcyA9IHV0aWxzLmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoe1xuICAvLyBub3RlOiBUaG91Z2ggbm90IHRlY2huaWNhbGx5IGNvcnJlY3QsIHdlIGZhc3QgcGF0aCBgaW1wb3J0Tm9kZWBcbiAgLy8gd2hlbiBjYWxsZWQgb24gYSBub2RlIG5vdCBvd25lZCBieSB0aGUgbWFpbiBkb2N1bWVudC5cbiAgLy8gVGhpcyBhbGxvd3MsIGZvciBleGFtcGxlLCBlbGVtZW50cyB0aGF0IGNhbm5vdFxuICAvLyBjb250YWluIGN1c3RvbSBlbGVtZW50cyBhbmQgYXJlIHRoZXJlZm9yZSBub3QgbGlrZWx5IHRvIGNvbnRhaW4gc2hhZG93Um9vdHNcbiAgLy8gdG8gY2xvbmVkIG5hdGl2ZWx5LiBUaGlzIGlzIGEgZmFpcmx5IHNpZ25pZmljYW50IHBlcmZvcm1hbmNlIHdpbi5cbiAgLyoqXG4gICAqIEB0aGlzIHtEb2N1bWVudH1cbiAgICogQHBhcmFtIHtOb2RlfSBub2RlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZGVlcFxuICAgKi9cbiAgaW1wb3J0Tm9kZShub2RlLCBkZWVwKSB7XG4gICAgLy8gQSB0ZW1wbGF0ZSBlbGVtZW50IG5vcm1hbGx5IGhhcyBubyBjaGlsZHJlbiB3aXRoIHNoYWRvd1Jvb3RzLCBzbyBtYWtlXG4gICAgLy8gc3VyZSB3ZSBhbHdheXMgbWFrZSBhIGRlZXAgY29weSB0byBjb3JyZWN0bHkgY29uc3RydWN0IHRoZSB0ZW1wbGF0ZS5jb250ZW50XG4gICAgaWYgKG5vZGUub3duZXJEb2N1bWVudCAhPT0gZG9jIHx8IG5vZGUubG9jYWxOYW1lID09PSAndGVtcGxhdGUnKSB7XG4gICAgICByZXR1cm4gdGhpc1t1dGlscy5OQVRJVkVfUFJFRklYICsgJ2ltcG9ydE5vZGUnXShub2RlLCBkZWVwKTtcbiAgICB9XG4gICAgbGV0IG4gPSB0aGlzW3V0aWxzLk5BVElWRV9QUkVGSVggKyAnaW1wb3J0Tm9kZSddKG5vZGUsIGZhbHNlKTtcbiAgICBpZiAoZGVlcCkge1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGMgPSBub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdmaXJzdENoaWxkJ10sIG5jO1xuICAgICAgICBjO1xuICAgICAgICBjID0gY1t1dGlscy5TSEFEWV9QUkVGSVggKyAnbmV4dFNpYmxpbmcnXVxuICAgICAgKSB7XG4gICAgICAgIG5jID0gdGhpc1t1dGlscy5TSEFEWV9QUkVGSVggKyAnaW1wb3J0Tm9kZSddKGMsIHRydWUpO1xuICAgICAgICBuW3V0aWxzLlNIQURZX1BSRUZJWCArICdhcHBlbmRDaGlsZCddKG5jKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG47XG4gIH0sXG59KTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNiBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG4vLyBwcmV0dGllci1pZ25vcmVcbmltcG9ydCB7YWRkRXZlbnRMaXN0ZW5lciwgcmVtb3ZlRXZlbnRMaXN0ZW5lciwgZGlzcGF0Y2hFdmVudH0gZnJvbSAnLi4vcGF0Y2gtZXZlbnRzLmpzJztcblxuZXhwb3J0IGNvbnN0IFdpbmRvd1BhdGNoZXMgPSB1dGlscy5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHtcbiAgLy8gRW5zdXJlIHRoYXQgYGRpc3BhdGNoRXZlbnRgIGlzIHBhdGNoZWQgZGlyZWN0bHkgb24gV2luZG93IHNpbmNlIG9uXG4gIC8vIElFMTEsIFdpbmRvdyBkb2VzIG5vdCBkZXNjZW5kIGZyb20gRXZlbnRUYXJnZXQuXG4gIGRpc3BhdGNoRXZlbnQsXG5cbiAgLy8gTk9URTogZW5zdXJlIHRoZXNlIG1ldGhvZHMgYXJlIGJvdW5kIHRvIGB3aW5kb3dgIHNvIHRoYXQgYHRoaXNgIGlzIGNvcnJlY3RcbiAgLy8gd2hlbiBjYWxsZWQgZGlyZWN0bHkgZnJvbSBnbG9iYWwgY29udGV4dCB3aXRob3V0IGEgcmVjZWl2ZXI7IGUuZy5cbiAgLy8gYGFkZEV2ZW50TGlzdGVuZXIoLi4uKWAuXG4gIGFkZEV2ZW50TGlzdGVuZXI6IGFkZEV2ZW50TGlzdGVuZXIuYmluZCh3aW5kb3cpLFxuXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI6IHJlbW92ZUV2ZW50TGlzdGVuZXIuYmluZCh3aW5kb3cpLFxufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7RXZlbnRUYXJnZXRQYXRjaGVzfSBmcm9tICcuL3BhdGNoZXMvRXZlbnRUYXJnZXQuanMnO1xuaW1wb3J0IHtOb2RlUGF0Y2hlc30gZnJvbSAnLi9wYXRjaGVzL05vZGUuanMnO1xuaW1wb3J0IHtTbG90YWJsZVBhdGNoZXN9IGZyb20gJy4vcGF0Y2hlcy9TbG90YWJsZS5qcyc7XG4vLyBwcmV0dGllci1pZ25vcmVcbmltcG9ydCB7UGFyZW50Tm9kZVBhdGNoZXMsIFBhcmVudE5vZGVEb2N1bWVudE9yRnJhZ21lbnRQYXRjaGVzfSBmcm9tICcuL3BhdGNoZXMvUGFyZW50Tm9kZS5qcyc7XG5pbXBvcnQge0NoaWxkTm9kZVBhdGNoZXN9IGZyb20gJy4vcGF0Y2hlcy9DaGlsZE5vZGUuanMnO1xuaW1wb3J0IHtFbGVtZW50UGF0Y2hlcywgRWxlbWVudFNoYWRvd1BhdGNoZXN9IGZyb20gJy4vcGF0Y2hlcy9FbGVtZW50LmpzJztcbmltcG9ydCB7RWxlbWVudE9yU2hhZG93Um9vdFBhdGNoZXN9IGZyb20gJy4vcGF0Y2hlcy9FbGVtZW50T3JTaGFkb3dSb290LmpzJztcbmltcG9ydCB7SFRNTEVsZW1lbnRQYXRjaGVzfSBmcm9tICcuL3BhdGNoZXMvSFRNTEVsZW1lbnQuanMnO1xuaW1wb3J0IHtTbG90UGF0Y2hlc30gZnJvbSAnLi9wYXRjaGVzL1Nsb3QuanMnO1xuaW1wb3J0IHtEb2N1bWVudE9yRnJhZ21lbnRQYXRjaGVzfSBmcm9tICcuL3BhdGNoZXMvRG9jdW1lbnRPckZyYWdtZW50LmpzJztcbmltcG9ydCB7RG9jdW1lbnRPclNoYWRvd1Jvb3RQYXRjaGVzfSBmcm9tICcuL3BhdGNoZXMvRG9jdW1lbnRPclNoYWRvd1Jvb3QuanMnO1xuaW1wb3J0IHtEb2N1bWVudFBhdGNoZXN9IGZyb20gJy4vcGF0Y2hlcy9Eb2N1bWVudC5qcyc7XG5pbXBvcnQge1dpbmRvd1BhdGNoZXN9IGZyb20gJy4vcGF0Y2hlcy9XaW5kb3cuanMnO1xuXG4vLyBTb21lIGJyb3dzZXJzIChJRS9FZGdlKSBoYXZlIG5vbi1zdGFuZGFyZCBIVE1MRWxlbWVudCBhY2Nlc3NvcnMuXG5jb25zdCBOb25TdGFuZGFyZEhUTUxFbGVtZW50ID0ge307XG5cbmlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ3BhcmVudEVsZW1lbnQnKSkge1xuICBOb25TdGFuZGFyZEhUTUxFbGVtZW50LnBhcmVudEVsZW1lbnQgPSBOb2RlUGF0Y2hlcy5wYXJlbnRFbGVtZW50O1xufVxuXG5pZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihIVE1MRWxlbWVudC5wcm90b3R5cGUsICdjb250YWlucycpKSB7XG4gIE5vblN0YW5kYXJkSFRNTEVsZW1lbnQuY29udGFpbnMgPSBOb2RlUGF0Y2hlcy5jb250YWlucztcbn1cblxuaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnY2hpbGRyZW4nKSkge1xuICBOb25TdGFuZGFyZEhUTUxFbGVtZW50LmNoaWxkcmVuID0gUGFyZW50Tm9kZVBhdGNoZXMuY2hpbGRyZW47XG59XG5cbmlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEhUTUxFbGVtZW50LnByb3RvdHlwZSwgJ2lubmVySFRNTCcpKSB7XG4gIE5vblN0YW5kYXJkSFRNTEVsZW1lbnQuaW5uZXJIVE1MID0gRWxlbWVudE9yU2hhZG93Um9vdFBhdGNoZXMuaW5uZXJIVE1MO1xufVxuXG5pZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihIVE1MRWxlbWVudC5wcm90b3R5cGUsICdjbGFzc05hbWUnKSkge1xuICBOb25TdGFuZGFyZEhUTUxFbGVtZW50LmNsYXNzTmFtZSA9IEVsZW1lbnRQYXRjaGVzLmNsYXNzTmFtZTtcbn1cblxuLy8gQXZvaWQgcGF0Y2hpbmcgYGlubmVySFRNTGAgaWYgaXQgZG9lcyBub3QgZXhpc3Qgb24gRWxlbWVudCAoSUUpXG4vLyBhbmQgd2UgY2FuIHBhdGNoIGFjY2Vzc29ycyAoaGFzRGVzY3JpcHRvcnMpLlxuY29uc3QgRWxlbWVudFNob3VsZEhhdmVJbm5lckhUTUwgPVxuICAhdXRpbHMuc2V0dGluZ3MuaGFzRGVzY3JpcHRvcnMgfHwgJ2lubmVySFRNTCcgaW4gRWxlbWVudC5wcm90b3R5cGU7XG5cbi8vIHNldHVwIHBhdGNoaW5nXG5jb25zdCBwYXRjaE1hcCA9IHtcbiAgRXZlbnRUYXJnZXQ6IFtFdmVudFRhcmdldFBhdGNoZXNdLFxuICBOb2RlOiBbTm9kZVBhdGNoZXMsICF3aW5kb3cuRXZlbnRUYXJnZXQgPyBFdmVudFRhcmdldFBhdGNoZXMgOiBudWxsXSxcbiAgVGV4dDogW1Nsb3RhYmxlUGF0Y2hlc10sXG4gIENvbW1lbnQ6IFtTbG90YWJsZVBhdGNoZXNdLFxuICBDREFUQVNlY3Rpb246IFtTbG90YWJsZVBhdGNoZXNdLFxuICBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb246IFtTbG90YWJsZVBhdGNoZXNdLFxuICBFbGVtZW50OiBbXG4gICAgRWxlbWVudFBhdGNoZXMsXG4gICAgUGFyZW50Tm9kZVBhdGNoZXMsXG4gICAgQ2hpbGROb2RlUGF0Y2hlcyxcbiAgICBTbG90YWJsZVBhdGNoZXMsXG4gICAgRWxlbWVudFNob3VsZEhhdmVJbm5lckhUTUwgPyBFbGVtZW50T3JTaGFkb3dSb290UGF0Y2hlcyA6IG51bGwsXG4gICAgIXdpbmRvdy5IVE1MU2xvdEVsZW1lbnQgPyBTbG90UGF0Y2hlcyA6IG51bGwsXG4gIF0sXG4gIEhUTUxFbGVtZW50OiBbSFRNTEVsZW1lbnRQYXRjaGVzLCBOb25TdGFuZGFyZEhUTUxFbGVtZW50XSxcbiAgSFRNTFNsb3RFbGVtZW50OiBbU2xvdFBhdGNoZXNdLFxuICBEb2N1bWVudEZyYWdtZW50OiBbXG4gICAgUGFyZW50Tm9kZURvY3VtZW50T3JGcmFnbWVudFBhdGNoZXMsXG4gICAgRG9jdW1lbnRPckZyYWdtZW50UGF0Y2hlcyxcbiAgXSxcbiAgRG9jdW1lbnQ6IFtcbiAgICBEb2N1bWVudFBhdGNoZXMsXG4gICAgUGFyZW50Tm9kZURvY3VtZW50T3JGcmFnbWVudFBhdGNoZXMsXG4gICAgRG9jdW1lbnRPckZyYWdtZW50UGF0Y2hlcyxcbiAgICBEb2N1bWVudE9yU2hhZG93Um9vdFBhdGNoZXMsXG4gIF0sXG4gIFdpbmRvdzogW1dpbmRvd1BhdGNoZXNdLFxuICBDaGFyYWN0ZXJEYXRhOiBbQ2hpbGROb2RlUGF0Y2hlc10sXG4gIFhNTEh0dHBSZXF1ZXN0OiBbIXdpbmRvdy5FdmVudFRhcmdldCA/IEV2ZW50VGFyZ2V0UGF0Y2hlcyA6IG51bGxdLFxufTtcblxuY29uc3QgZ2V0UGF0Y2hQcm90b3R5cGUgPSAobmFtZSkgPT4gd2luZG93W25hbWVdICYmIHdpbmRvd1tuYW1lXS5wcm90b3R5cGU7XG5cbi8vIE5vdGUsIG11c3QgYXZvaWQgcGF0Y2hpbmcgYWNjZXNzb3JzIG9uIHByb3RvdHlwZXMgd2hlbiBkZXNjcmlwdG9ycyBhcmUgbm90IGNvcnJlY3Rcbi8vIGJlY2F1c2UgdGhlIEN1c3RvbUVsZW1lbnRzIHBvbHlmaWxsIGNoZWNrcyBpZiB0aGVzZSBleGlzdCBiZWZvcmUgcGF0Y2hpbmcgaW5zdGFuY2VzLlxuLy8gQ3VzdG9tRWxlbWVudHMgcG9seWZpbGwgKm9ubHkqIGNhcmVzIGFib3V0IHRoZXNlIGFjY2Vzc29ycy5cbmNvbnN0IGRpc2FsbG93ZWROYXRpdmVQYXRjaGVzID0gdXRpbHMuc2V0dGluZ3MuaGFzRGVzY3JpcHRvcnNcbiAgPyBudWxsXG4gIDogWydpbm5lckhUTUwnLCAndGV4dENvbnRlbnQnXTtcblxuLyoqXG4gKiBQYXRjaCBhIGdyb3VwIG9mIGFjY2Vzc29ycyBvbiBhbiBvYmplY3QuXG4gKiBAcGFyYW0geyFPYmplY3R9IHByb3RvXG4gKiBAcGFyYW0geyFBcnJheTxPYmplY3Q+fSBsaXN0XG4gKiBAcGFyYW0ge3N0cmluZz19IHByZWZpeFxuICogQHBhcmFtIHtBcnJheT19IGRpc2FsbG93ZWRcbiAqL1xuZnVuY3Rpb24gYXBwbHlQYXRjaExpc3QocHJvdG8sIGxpc3QsIHByZWZpeCwgZGlzYWxsb3dlZCkge1xuICBsaXN0LmZvckVhY2goXG4gICAgKHBhdGNoKSA9PlxuICAgICAgcHJvdG8gJiYgcGF0Y2ggJiYgdXRpbHMucGF0Y2hQcm9wZXJ0aWVzKHByb3RvLCBwYXRjaCwgcHJlZml4LCBkaXNhbGxvd2VkKVxuICApO1xufVxuXG4vKiogQHBhcmFtIHtzdHJpbmc9fSBwcmVmaXggKi9cbmV4cG9ydCBjb25zdCBhcHBseVBhdGNoZXMgPSAocHJlZml4KSA9PiB7XG4gIGNvbnN0IGRpc2FsbG93ZWQgPSBwcmVmaXggPyBudWxsIDogZGlzYWxsb3dlZE5hdGl2ZVBhdGNoZXM7XG4gIGZvciAobGV0IHAgaW4gcGF0Y2hNYXApIHtcbiAgICBjb25zdCBwcm90byA9IGdldFBhdGNoUHJvdG90eXBlKHApO1xuICAgIGFwcGx5UGF0Y2hMaXN0KHByb3RvLCBwYXRjaE1hcFtwXSwgcHJlZml4LCBkaXNhbGxvd2VkKTtcbiAgfVxufTtcblxuY29uc3QgUFJPVE9fSVNfUEFUQ0hFRCA9IHV0aWxzLlNIQURZX1BSRUZJWCArICdwcm90b0lzUGF0Y2hlZCc7XG5cbi8vIFRoaXMgcHJvcGVydHkgaXMgc3RvcmVkIGRpcmVjdGx5IG9uIHRoZXNlIG9iamVjdHMsIHJhdGhlciB0aGFuIGluIGEgbG9jYWxcbi8vIE1hcCwgYmVjYXVzZSBJRTExIGhhcyBhIGJ1ZyBhcm91bmQgYGRlZmluZVByb3BlcnR5YC9gaGFzT3duUHJvcGVydHlgIHdoaWNoXG4vLyBicmVha3MgQ2xvc3VyZSBDb21waWxlcidzIFdlYWtNYXAgcG9seWZpbGwgd2hlbiB1c2luZyBib3RoIGNlcnRhaW4gbmF0aXZlXG4vLyBwcm90b3R5cGVzIChlLmcuIG9mIENEQVRBU2VjdGlvbikgYW5kIHRoZWlyIGluc3RhbmNlcyBhcyBrZXlzIC0gZXZlbiBpZlxuLy8gdGhleSdyZSBpc29sYXRlZCB0byBkaWZmZXJlbnQgV2Vha01hcHMuIENsb3N1cmUncyBXZWFrTWFwIHBvbHlmaWxsIGlzIHVzZWRcbi8vIHRyYW5zaXRpdmVseSBieSBpdHMgb3duIE1hcCBhbmQgU2V0IHBvbHlmaWxscywgc28gdGhpcyBidWcgYXBwbGllcyB0byBhbnlcbi8vIHNpdHVhdGlvbiB3aGVyZSBlaXRoZXIgb2YgTWFwIG9yIFNldCBhcmUgcG9seWZpbGxlZCBhbHNvLlxuY29uc3QgUEFUQ0hFRF9QUk9UTyA9IHV0aWxzLlNIQURZX1BSRUZJWCArICdwYXRjaGVkUHJvdG8nO1xuXG4vLyBQYXRjaCBub24tZWxlbWVudCBwcm90b3R5cGVzIHVwIGZyb250IHNvIHRoYXQgd2UgZG9uJ3QgaGF2ZSB0byBjaGVja1xuLy8gdGhlIHR5cGUgb2YgTm9kZSB3aGVuIHBhdGNoaW5nIGFuIGNhbiBhbHdheXMgYXNzdW1lIHdlJ3JlIHBhdGNoaW5nIGFuIGVsZW1lbnQuXG5bJ1RleHQnLCAnQ29tbWVudCcsICdDREFUQVNlY3Rpb24nLCAnUHJvY2Vzc2luZ0luc3RydWN0aW9uJ10uZm9yRWFjaCgobmFtZSkgPT4ge1xuICBjb25zdCBjdG9yID0gd2luZG93W25hbWVdO1xuICBjb25zdCBwYXRjaGVkUHJvdG8gPSBPYmplY3QuY3JlYXRlKGN0b3IucHJvdG90eXBlKTtcbiAgcGF0Y2hlZFByb3RvW1BST1RPX0lTX1BBVENIRURdID0gdHJ1ZTtcbiAgYXBwbHlQYXRjaExpc3QocGF0Y2hlZFByb3RvLCBwYXRjaE1hcC5FdmVudFRhcmdldCk7XG4gIGFwcGx5UGF0Y2hMaXN0KHBhdGNoZWRQcm90bywgcGF0Y2hNYXAuTm9kZSk7XG4gIGlmIChwYXRjaE1hcFtuYW1lXSkge1xuICAgIGFwcGx5UGF0Y2hMaXN0KHBhdGNoZWRQcm90bywgcGF0Y2hNYXBbbmFtZV0pO1xuICB9XG4gIGN0b3IucHJvdG90eXBlW1BBVENIRURfUFJPVE9dID0gcGF0Y2hlZFByb3RvO1xufSk7XG5cbmV4cG9ydCBjb25zdCBwYXRjaEVsZW1lbnRQcm90byA9IChwcm90bykgPT4ge1xuICBwcm90b1tQUk9UT19JU19QQVRDSEVEXSA9IHRydWU7XG4gIGFwcGx5UGF0Y2hMaXN0KHByb3RvLCBwYXRjaE1hcC5FdmVudFRhcmdldCk7XG4gIGFwcGx5UGF0Y2hMaXN0KHByb3RvLCBwYXRjaE1hcC5Ob2RlKTtcbiAgYXBwbHlQYXRjaExpc3QocHJvdG8sIHBhdGNoTWFwLkVsZW1lbnQpO1xuICBhcHBseVBhdGNoTGlzdChwcm90bywgcGF0Y2hNYXAuSFRNTEVsZW1lbnQpO1xuICBhcHBseVBhdGNoTGlzdChwcm90bywgcGF0Y2hNYXAuSFRNTFNsb3RFbGVtZW50KTtcbiAgcmV0dXJuIHByb3RvO1xufTtcblxuZXhwb3J0IGNvbnN0IHBhdGNoTm9kZVByb3RvID0gKG5vZGUpID0+IHtcbiAgaWYgKG5vZGVbUFJPVE9fSVNfUEFUQ0hFRF0gfHwgdXRpbHMuaXNTaGFkeVJvb3Qobm9kZSkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgbmF0aXZlUHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobm9kZSk7XG4gIC8vIE5vdGUsIHRoaXMgaGFzT3duUHJvcGVydHkgY2hlY2sgaXMgY3JpdGljYWwgdG8gYXZvaWQgc2VlaW5nIGEgcGF0Y2hlZFxuICAvLyBwcm90b3R5cGUgbG93ZXIgaW4gdGhlIHByb3RvdHlwZSBjaGFpbiwgZS5nLiBpZiBhbiA8cz4gZWxlbWVudCBoYXMgYmVlblxuICAvLyBwYXRjaGVkLCB3aXRob3V0IHRoaXMgY2hlY2ssIGFuIDxpbnB1dD4gZWxlbWVudCB3b3VsZCBnZXQgdGhlIHdyb25nIHBhdGNoLlxuICBsZXQgcHJvdG8gPVxuICAgIG5hdGl2ZVByb3RvLmhhc093blByb3BlcnR5KFBBVENIRURfUFJPVE8pICYmIG5hdGl2ZVByb3RvW1BBVENIRURfUFJPVE9dO1xuICBpZiAoIXByb3RvKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuY3JlYXRlKG5hdGl2ZVByb3RvKTtcbiAgICBwYXRjaEVsZW1lbnRQcm90byhwcm90byk7XG4gICAgbmF0aXZlUHJvdG9bUEFUQ0hFRF9QUk9UT10gPSBwcm90bztcbiAgfVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2Yobm9kZSwgcHJvdG8pO1xufTtcblxuZXhwb3J0IGNvbnN0IHBhdGNoU2hhZG93T25FbGVtZW50ID0gKCkgPT4ge1xuICB1dGlscy5wYXRjaFByb3BlcnRpZXMoRWxlbWVudC5wcm90b3R5cGUsIEVsZW1lbnRTaGFkb3dQYXRjaGVzKTtcbn07XG5cbmV4cG9ydCBjb25zdCBhZGRTaGFkeVByZWZpeGVkUHJvcGVydGllcyA9ICgpID0+IHtcbiAgLy8gcGVyZm9ybSBzaGFkeSBwYXRjaGVzXG4gIGFwcGx5UGF0Y2hlcyh1dGlscy5TSEFEWV9QUkVGSVgpO1xuXG4gIC8vIGluc3RhbGwgYF9hY3RpdmVFbGVtZW50YCBiZWNhdXNlIHNvbWUgYnJvd3NlcnMgKG9sZGVyIENocm9tZS9TYWZhcmkpIGRvIG5vdCBoYXZlXG4gIC8vIGEgJ2NvbmZpZ3VyYWJsZScgYGFjdGl2ZUVsZW1lbnRgIGFjY2Vzc3Nvci5cbiAgY29uc3QgZGVzY3JpcHRvciA9IERvY3VtZW50T3JTaGFkb3dSb290UGF0Y2hlcy5hY3RpdmVFbGVtZW50O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZG9jdW1lbnQsICdfYWN0aXZlRWxlbWVudCcsIGRlc2NyaXB0b3IpO1xuXG4gIC8vIE9uIFdpbmRvdywgd2UncmUgcGF0Y2hpbmcgYGFkZEV2ZW50TGlzdGVuZXJgIHdoaWNoIGlzIGEgd2VpcmQgYXV0by1ib3VuZFxuICAvLyBwcm9wZXJ0eSB0aGF0IGlzIG5vdCBkaXJlY3RseSBvbiB0aGUgV2luZG93IHByb3RvdHlwZS5cbiAgdXRpbHMucGF0Y2hQcm9wZXJ0aWVzKFdpbmRvdy5wcm90b3R5cGUsIFdpbmRvd1BhdGNoZXMsIHV0aWxzLlNIQURZX1BSRUZJWCk7XG59O1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQge3NoYWR5RGF0YUZvck5vZGUsIGVuc3VyZVNoYWR5RGF0YUZvck5vZGV9IGZyb20gJy4vc2hhZHktZGF0YS5qcyc7XG4vLyBwcmV0dGllci1pZ25vcmVcbmltcG9ydCB7cGF0Y2hJbnNpZGVFbGVtZW50QWNjZXNzb3JzLCBwYXRjaE91dHNpZGVFbGVtZW50QWNjZXNzb3JzfSBmcm9tICcuL3BhdGNoLWluc3RhbmNlcy5qcyc7XG5pbXBvcnQge3BhdGNoTm9kZVByb3RvfSBmcm9tICcuL3BhdGNoLXByb3RvdHlwZXMuanMnO1xuXG5jb25zdCBPdXRzaWRlQWNjZXNzb3JzID0gMTtcbmNvbnN0IEluc2lkZUFjY2Nlc3NvcnMgPSAyO1xuXG5jb25zdCBwYXRjaE9uRGVtYW5kID0gdXRpbHMuc2V0dGluZ3MucGF0Y2hPbkRlbWFuZDtcbmNvbnN0IGhhc0Rlc2NyaXB0b3JzID0gdXRpbHMuc2V0dGluZ3MuaGFzRGVzY3JpcHRvcnM7XG5cbmZ1bmN0aW9uIHBhdGNoTm9kZShub2RlLCB0eXBlKSB7XG4gIGlmIChwYXRjaE9uRGVtYW5kKSB7XG4gICAgcGF0Y2hOb2RlUHJvdG8obm9kZSk7XG4gIH1cbiAgaWYgKCFoYXNEZXNjcmlwdG9ycykge1xuICAgIGlmICh0eXBlID09PSBPdXRzaWRlQWNjZXNzb3JzKSB7XG4gICAgICBwYXRjaE91dHNpZGVFbGVtZW50QWNjZXNzb3JzKG5vZGUpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gSW5zaWRlQWNjY2Vzc29ycykge1xuICAgICAgcGF0Y2hJbnNpZGVFbGVtZW50QWNjZXNzb3JzKG5vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBsaW5rTm9kZShub2RlLCBjb250YWluZXIsIGNvbnRhaW5lckRhdGEsIHJlZl9ub2RlKSB7XG4gIHBhdGNoTm9kZShub2RlLCBPdXRzaWRlQWNjZXNzb3JzKTtcbiAgcmVmX25vZGUgPSByZWZfbm9kZSB8fCBudWxsO1xuICBjb25zdCBub2RlRGF0YSA9IGVuc3VyZVNoYWR5RGF0YUZvck5vZGUobm9kZSk7XG4gIGNvbnN0IHJlZl9ub2RlRGF0YSA9IHJlZl9ub2RlID8gZW5zdXJlU2hhZHlEYXRhRm9yTm9kZShyZWZfbm9kZSkgOiBudWxsO1xuICAvLyB1cGRhdGUgcmVmX25vZGUucHJldmlvdXNTaWJsaW5nIDwtPiBub2RlXG4gIG5vZGVEYXRhLnByZXZpb3VzU2libGluZyA9IHJlZl9ub2RlXG4gICAgPyByZWZfbm9kZURhdGEucHJldmlvdXNTaWJsaW5nXG4gICAgOiBjb250YWluZXJbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2xhc3RDaGlsZCddO1xuICBsZXQgcHNkID0gc2hhZHlEYXRhRm9yTm9kZShub2RlRGF0YS5wcmV2aW91c1NpYmxpbmcpO1xuICBpZiAocHNkKSB7XG4gICAgcHNkLm5leHRTaWJsaW5nID0gbm9kZTtcbiAgfVxuICAvLyB1cGRhdGUgbm9kZSA8LT4gcmVmX25vZGVcbiAgbGV0IG5zZCA9IHNoYWR5RGF0YUZvck5vZGUoKG5vZGVEYXRhLm5leHRTaWJsaW5nID0gcmVmX25vZGUpKTtcbiAgaWYgKG5zZCkge1xuICAgIG5zZC5wcmV2aW91c1NpYmxpbmcgPSBub2RlO1xuICB9XG4gIC8vIHVwZGF0ZSBub2RlIDwtPiBjb250YWluZXJcbiAgbm9kZURhdGEucGFyZW50Tm9kZSA9IGNvbnRhaW5lcjtcbiAgaWYgKHJlZl9ub2RlKSB7XG4gICAgaWYgKHJlZl9ub2RlID09PSBjb250YWluZXJEYXRhLmZpcnN0Q2hpbGQpIHtcbiAgICAgIGNvbnRhaW5lckRhdGEuZmlyc3RDaGlsZCA9IG5vZGU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnRhaW5lckRhdGEubGFzdENoaWxkID0gbm9kZTtcbiAgICBpZiAoIWNvbnRhaW5lckRhdGEuZmlyc3RDaGlsZCkge1xuICAgICAgY29udGFpbmVyRGF0YS5maXJzdENoaWxkID0gbm9kZTtcbiAgICB9XG4gIH1cbiAgLy8gcmVtb3ZlIGNhY2hpbmcgb2YgY2hpbGROb2Rlc1xuICBjb250YWluZXJEYXRhLmNoaWxkTm9kZXMgPSBudWxsO1xufVxuXG5leHBvcnQgY29uc3QgcmVjb3JkSW5zZXJ0QmVmb3JlID0gKG5vZGUsIGNvbnRhaW5lciwgcmVmX25vZGUpID0+IHtcbiAgcGF0Y2hOb2RlKGNvbnRhaW5lciwgSW5zaWRlQWNjY2Vzc29ycyk7XG4gIGNvbnN0IGNvbnRhaW5lckRhdGEgPSBlbnN1cmVTaGFkeURhdGFGb3JOb2RlKGNvbnRhaW5lcik7XG4gIGlmIChjb250YWluZXJEYXRhLmZpcnN0Q2hpbGQgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnRhaW5lckRhdGEuY2hpbGROb2RlcyA9IG51bGw7XG4gIH1cbiAgLy8gaGFuZGxlIGRvY3VtZW50IGZyYWdtZW50c1xuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFKSB7XG4gICAgLy8gTm90ZSwgZG9jdW1lbnRGcmFnbWVudHMgc2hvdWxkIG5vdCBoYXZlIGxvZ2ljYWwgRE9NIHNvIHRoZXJlJ3NcbiAgICAvLyBubyBuZWVkIHVwZGF0ZSB0aGF0LiBJdCBpcyBwb3NzaWJsZSB0byBhcHBlbmQgYSBTaGFkb3dSb290LCBidXQgd2UncmVcbiAgICAvLyBjaG9vc2luZyBub3QgdG8gc3VwcG9ydCB0aGF0LlxuICAgIGNvbnN0IGZpcnN0ID0gbm9kZVt1dGlscy5OQVRJVkVfUFJFRklYICsgJ2ZpcnN0Q2hpbGQnXTtcbiAgICBmb3IgKGxldCBuID0gZmlyc3Q7IG47IG4gPSBuW3V0aWxzLk5BVElWRV9QUkVGSVggKyAnbmV4dFNpYmxpbmcnXSkge1xuICAgICAgbGlua05vZGUobiwgY29udGFpbmVyLCBjb250YWluZXJEYXRhLCByZWZfbm9kZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxpbmtOb2RlKG5vZGUsIGNvbnRhaW5lciwgY29udGFpbmVyRGF0YSwgcmVmX25vZGUpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcmVjb3JkUmVtb3ZlQ2hpbGQgPSAobm9kZSwgY29udGFpbmVyKSA9PiB7XG4gIGNvbnN0IG5vZGVEYXRhID0gZW5zdXJlU2hhZHlEYXRhRm9yTm9kZShub2RlKTtcbiAgY29uc3QgY29udGFpbmVyRGF0YSA9IGVuc3VyZVNoYWR5RGF0YUZvck5vZGUoY29udGFpbmVyKTtcbiAgaWYgKG5vZGUgPT09IGNvbnRhaW5lckRhdGEuZmlyc3RDaGlsZCkge1xuICAgIGNvbnRhaW5lckRhdGEuZmlyc3RDaGlsZCA9IG5vZGVEYXRhLm5leHRTaWJsaW5nO1xuICB9XG4gIGlmIChub2RlID09PSBjb250YWluZXJEYXRhLmxhc3RDaGlsZCkge1xuICAgIGNvbnRhaW5lckRhdGEubGFzdENoaWxkID0gbm9kZURhdGEucHJldmlvdXNTaWJsaW5nO1xuICB9XG4gIGxldCBwID0gbm9kZURhdGEucHJldmlvdXNTaWJsaW5nO1xuICBsZXQgbiA9IG5vZGVEYXRhLm5leHRTaWJsaW5nO1xuICBpZiAocCkge1xuICAgIGVuc3VyZVNoYWR5RGF0YUZvck5vZGUocCkubmV4dFNpYmxpbmcgPSBuO1xuICB9XG4gIGlmIChuKSB7XG4gICAgZW5zdXJlU2hhZHlEYXRhRm9yTm9kZShuKS5wcmV2aW91c1NpYmxpbmcgPSBwO1xuICB9XG4gIC8vIFdoZW4gYW4gZWxlbWVudCBpcyByZW1vdmVkLCBsb2dpY2FsIGRhdGEgaXMgbm8gbG9uZ2VyIHRyYWNrZWQuXG4gIC8vIEV4cGxpY2l0bHkgc2V0IGB1bmRlZmluZWRgIGhlcmUgdG8gaW5kaWNhdGUgdGhpcy4gVGhpcyBpcyBkaXNnaW5ndWlzaGVkXG4gIC8vIGZyb20gYG51bGxgIHdoaWNoIGlzIHNldCBpZiBpbmZvIGlzIG51bGwuXG4gIG5vZGVEYXRhLnBhcmVudE5vZGUgPSBub2RlRGF0YS5wcmV2aW91c1NpYmxpbmcgPSBub2RlRGF0YS5uZXh0U2libGluZyA9IHVuZGVmaW5lZDtcbiAgaWYgKGNvbnRhaW5lckRhdGEuY2hpbGROb2RlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gcmVtb3ZlIGNhY2hpbmcgb2YgY2hpbGROb2Rlc1xuICAgIGNvbnRhaW5lckRhdGEuY2hpbGROb2RlcyA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtICB7IU5vZGV8RG9jdW1lbnRGcmFnbWVudH0gbm9kZVxuICogQHBhcmFtICB7IU5vZGV8RG9jdW1lbnRGcmFnbWVudD19IGFkb3B0ZWRQYXJlbnRcbiAqL1xuZXhwb3J0IGNvbnN0IHJlY29yZENoaWxkTm9kZXMgPSAobm9kZSwgYWRvcHRlZFBhcmVudCkgPT4ge1xuICBjb25zdCBub2RlRGF0YSA9IGVuc3VyZVNoYWR5RGF0YUZvck5vZGUobm9kZSk7XG4gIGlmICghYWRvcHRlZFBhcmVudCAmJiBub2RlRGF0YS5maXJzdENoaWxkICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gcmVtb3ZlIGNhY2hpbmcgb2YgY2hpbGROb2Rlc1xuICBub2RlRGF0YS5jaGlsZE5vZGVzID0gbnVsbDtcbiAgY29uc3QgZmlyc3QgPSAobm9kZURhdGEuZmlyc3RDaGlsZCA9XG4gICAgbm9kZVt1dGlscy5OQVRJVkVfUFJFRklYICsgJ2ZpcnN0Q2hpbGQnXSk7XG4gIG5vZGVEYXRhLmxhc3RDaGlsZCA9IG5vZGVbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdsYXN0Q2hpbGQnXTtcbiAgcGF0Y2hOb2RlKG5vZGUsIEluc2lkZUFjY2Nlc3NvcnMpO1xuICBmb3IgKGxldCBuID0gZmlyc3QsIHByZXZpb3VzOyBuOyBuID0gblt1dGlscy5OQVRJVkVfUFJFRklYICsgJ25leHRTaWJsaW5nJ10pIHtcbiAgICBjb25zdCBzZCA9IGVuc3VyZVNoYWR5RGF0YUZvck5vZGUobik7XG4gICAgc2QucGFyZW50Tm9kZSA9IGFkb3B0ZWRQYXJlbnQgfHwgbm9kZTtcbiAgICBzZC5uZXh0U2libGluZyA9IG5bdXRpbHMuTkFUSVZFX1BSRUZJWCArICduZXh0U2libGluZyddO1xuICAgIHNkLnByZXZpb3VzU2libGluZyA9IHByZXZpb3VzIHx8IG51bGw7XG4gICAgcHJldmlvdXMgPSBuO1xuICAgIHBhdGNoTm9kZShuLCBPdXRzaWRlQWNjZXNzb3JzKTtcbiAgfVxufTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNiBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuZXhwb3J0IGNvbnN0IFNoYWRvd1Jvb3RQYXRjaGVzID0gdXRpbHMuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh7XG4gIC8qKlxuICAgKiBAdGhpcyB7U2hhZG93Um9vdH1cbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAgICogQHBhcmFtIHtPYmplY3R8Ym9vbGVhbj19IG9wdGlvbnNPckNhcHR1cmVcbiAgICovXG4gIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIG9wdGlvbnNPckNhcHR1cmUpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnNPckNhcHR1cmUgIT09ICdvYmplY3QnKSB7XG4gICAgICBvcHRpb25zT3JDYXB0dXJlID0ge1xuICAgICAgICBjYXB0dXJlOiBCb29sZWFuKG9wdGlvbnNPckNhcHR1cmUpLFxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gTm90ZSwgYF9fc2hhZHlUYXJnZXRgIG1heSBhbHJlYWR5IGJlIHNldCBpZiBhbiBldmVudCB3YXMgYWRkZWQgb24gYSA8c2xvdD4gY2hpbGRcbiAgICBvcHRpb25zT3JDYXB0dXJlLl9fc2hhZHlUYXJnZXQgPSBvcHRpb25zT3JDYXB0dXJlLl9fc2hhZHlUYXJnZXQgfHwgdGhpcztcbiAgICB0aGlzLmhvc3RbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2FkZEV2ZW50TGlzdGVuZXInXShcbiAgICAgIHR5cGUsXG4gICAgICBmbixcbiAgICAgIG9wdGlvbnNPckNhcHR1cmVcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAdGhpcyB7U2hhZG93Um9vdH1cbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAgICogQHBhcmFtIHtPYmplY3R8Ym9vbGVhbj19IG9wdGlvbnNPckNhcHR1cmVcbiAgICovXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIG9wdGlvbnNPckNhcHR1cmUpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnNPckNhcHR1cmUgIT09ICdvYmplY3QnKSB7XG4gICAgICBvcHRpb25zT3JDYXB0dXJlID0ge1xuICAgICAgICBjYXB0dXJlOiBCb29sZWFuKG9wdGlvbnNPckNhcHR1cmUpLFxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gTm90ZSwgYF9fc2hhZHlUYXJnZXRgIG1heSBhbHJlYWR5IGJlIHNldCBpZiBhbiBldmVudCB3YXMgYWRkZWQgb24gYSA8c2xvdD4gY2hpbGRcbiAgICBvcHRpb25zT3JDYXB0dXJlLl9fc2hhZHlUYXJnZXQgPSBvcHRpb25zT3JDYXB0dXJlLl9fc2hhZHlUYXJnZXQgfHwgdGhpcztcbiAgICB0aGlzLmhvc3RbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3JlbW92ZUV2ZW50TGlzdGVuZXInXShcbiAgICAgIHR5cGUsXG4gICAgICBmbixcbiAgICAgIG9wdGlvbnNPckNhcHR1cmVcbiAgICApO1xuICB9LFxufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCB7Tm9kZVBhdGNoZXN9IGZyb20gJy4vcGF0Y2hlcy9Ob2RlLmpzJztcbi8vIHByZXR0aWVyLWlnbm9yZVxuaW1wb3J0IHtPdXRzaWRlRGVzY3JpcHRvcnMsIEluc2lkZURlc2NyaXB0b3JzLCBUZXh0Q29udGVudElubmVySFRNTERlc2NyaXB0b3JzfSBmcm9tICcuL3BhdGNoLWluc3RhbmNlcy5qcyc7XG5pbXBvcnQge1BhcmVudE5vZGVQYXRjaGVzfSBmcm9tICcuL3BhdGNoZXMvUGFyZW50Tm9kZS5qcyc7XG5pbXBvcnQge0RvY3VtZW50T3JGcmFnbWVudFBhdGNoZXN9IGZyb20gJy4vcGF0Y2hlcy9Eb2N1bWVudE9yRnJhZ21lbnQuanMnO1xuaW1wb3J0IHtEb2N1bWVudE9yU2hhZG93Um9vdFBhdGNoZXN9IGZyb20gJy4vcGF0Y2hlcy9Eb2N1bWVudE9yU2hhZG93Um9vdC5qcyc7XG5pbXBvcnQge0VsZW1lbnRPclNoYWRvd1Jvb3RQYXRjaGVzfSBmcm9tICcuL3BhdGNoZXMvRWxlbWVudE9yU2hhZG93Um9vdC5qcyc7XG5pbXBvcnQge1NoYWRvd1Jvb3RQYXRjaGVzfSBmcm9tICcuL3BhdGNoZXMvU2hhZG93Um9vdC5qcyc7XG5cbi8qKlxuICogQHBhcmFtIHshT2JqZWN0fSBwcm90b1xuICogQHBhcmFtIHtzdHJpbmc9fSBwcmVmaXhcbiAqL1xuY29uc3QgcGF0Y2hTaGFkeUFjY2Vzc29ycyA9IChwcm90bywgcHJlZml4KSA9PiB7XG4gIHV0aWxzLnBhdGNoUHJvcGVydGllcyhwcm90bywgU2hhZG93Um9vdFBhdGNoZXMsIHByZWZpeCk7XG4gIHV0aWxzLnBhdGNoUHJvcGVydGllcyhwcm90bywgRG9jdW1lbnRPclNoYWRvd1Jvb3RQYXRjaGVzLCBwcmVmaXgpO1xuICB1dGlscy5wYXRjaFByb3BlcnRpZXMocHJvdG8sIEVsZW1lbnRPclNoYWRvd1Jvb3RQYXRjaGVzLCBwcmVmaXgpO1xuICAvLyBXZSBlbnN1cmUgUGFyZW50Tm9kZSBhY2Nlc3NvcnMgc2luY2UgdGhlc2UgZG8gbm90IGV4aXN0IGluIEVkZ2UvSUUgb24gRG9jdW1lbnRGcmFnbWVudHMuXG4gIHV0aWxzLnBhdGNoUHJvcGVydGllcyhwcm90bywgUGFyZW50Tm9kZVBhdGNoZXMsIHByZWZpeCk7XG4gIC8vIEVuc3VyZSBgc2hhZG93Um9vdGAgaGFzIGJhc2ljIGRlc2NyaXB0b3JzIHdoZW4gd2UgY2Fubm90IHJlbHlcbiAgLy8gb24gdGhlbSBjb21pbmcgZnJvbSBEb2N1bWVudEZyYWdtZW50LlxuICAvL1xuICAvLyBDYXNlIDEsIG5vUGF0Y2hpbmc6IEJlY2F1c2Ugd2Ugd2FudCBub1BhdGNoIFNoYWR5Um9vdHMgdG8gaGF2ZSBuYXRpdmUgcHJvcGVydHlcbiAgLy8gbmFtZXMgc28gdGhhdCB0aGV5IGRvIG5vdCBoYXZlIHRvIGJlIHdyYXBwZWQuLi5cbiAgLy8gV2hlbiB3ZSBkbyAqbm90KiBwYXRjaCBOb2RlL0RvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlXG4gIC8vIHdlIG11c3QgbWFudWFsbHkgaW5zdGFsbCB0aG9zZSBwcm9wZXJ0aWVzIG9uIFNoYWR5Um9vdCdzIHByb3RvdHlwZS5cbiAgLy8gTm90ZSwgaXQncyBpbXBvcnRhbnQgdG8gb25seSBpbnN0YWxsIHRoZXNlIGluIHRoaXMgbW9kZSBzbyBhcyBub3QgdG8gc3RvbXBcbiAgLy8gb3ZlciBDdXN0b21FbGVtZW50cyBwb2x5ZmlsbCdzIHBhdGNoZXMgb24gTm9kZS9Eb2N1bWVudEZyYWdtZW50IG1ldGhvZHMuXG4gIGlmICh1dGlscy5zZXR0aW5ncy5ub1BhdGNoICYmICFwcmVmaXgpIHtcbiAgICB1dGlscy5wYXRjaFByb3BlcnRpZXMocHJvdG8sIE5vZGVQYXRjaGVzLCBwcmVmaXgpO1xuICAgIHV0aWxzLnBhdGNoUHJvcGVydGllcyhwcm90bywgRG9jdW1lbnRPckZyYWdtZW50UGF0Y2hlcywgcHJlZml4KTtcbiAgfVxuICAvLyBDYXNlIDIsIGJhZCBkZXNjcmlwdG9yczogRW5zdXJlIGFjY2Vzc29ycyBhcmUgb24gU2hhZG93Um9vdC5cbiAgLy8gVGhlc2UgZGVzY3JpcHRvcnMgYXJlIG5vcm1hbGx5IHVzZWQgZm9yIGluc3RhbmNlIHBhdGNoaW5nIGJ1dCBiZWNhdXNlXG4gIC8vIFNoYWR5Um9vdCBjYW4gYWx3YXlzIGJlIHBhdGNoZWQsIGp1c3QgZG8gaXQgdG8gdGhlIHByb3RvdHlwZS5cbiAgZWxzZSBpZiAoIXV0aWxzLnNldHRpbmdzLmhhc0Rlc2NyaXB0b3JzKSB7XG4gICAgdXRpbHMucGF0Y2hQcm9wZXJ0aWVzKHByb3RvLCBPdXRzaWRlRGVzY3JpcHRvcnMpO1xuICAgIHV0aWxzLnBhdGNoUHJvcGVydGllcyhwcm90bywgSW5zaWRlRGVzY3JpcHRvcnMpO1xuICAgIHV0aWxzLnBhdGNoUHJvcGVydGllcyhwcm90bywgVGV4dENvbnRlbnRJbm5lckhUTUxEZXNjcmlwdG9ycyk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBwYXRjaFNoYWR5Um9vdCA9IChwcm90bykgPT4ge1xuICBwcm90by5fX3Byb3RvX18gPSBEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZTtcblxuICAvLyBwYXRjaCBib3RoIHByZWZpeGVkIGFuZCBub3QsIGV2ZW4gd2hlbiBub1BhdGNoID09IHRydWUuXG4gIHBhdGNoU2hhZHlBY2Nlc3NvcnMocHJvdG8sIHV0aWxzLlNIQURZX1BSRUZJWCk7XG4gIHBhdGNoU2hhZHlBY2Nlc3NvcnMocHJvdG8pO1xuXG4gIC8vIEVuc3VyZSBuYXRpdmUgcHJvcGVydGllcyBhcmUgYWxsIHNhZmVseSB3cmFwcGVkIHNpbmNlIFNoYWRvd1Jvb3QgaXMgbm90IGFuXG4gIC8vIGFjdHVhbCBEb2N1bWVudEZyYWdtZW50IGluc3RhbmNlLlxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhwcm90bywge1xuICAgIG5vZGVUeXBlOiB7XG4gICAgICB2YWx1ZTogTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIH0sXG4gICAgbm9kZU5hbWU6IHtcbiAgICAgIHZhbHVlOiAnI2RvY3VtZW50LWZyYWdtZW50JyxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB9LFxuICAgIG5vZGVWYWx1ZToge1xuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gbWFrZSB1bmRlZmluZWRcbiAgWydsb2NhbE5hbWUnLCAnbmFtZXNwYWNlVVJJJywgJ3ByZWZpeCddLmZvckVhY2goKHByb3ApID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sIHByb3AsIHtcbiAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIGRlZmVyIHByb3BlcnRpZXMgdG8gaG9zdFxuICBbJ293bmVyRG9jdW1lbnQnLCAnYmFzZVVSSScsICdpc0Nvbm5lY3RlZCddLmZvckVhY2goKHByb3ApID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sIHByb3AsIHtcbiAgICAgIC8qKiBAdGhpcyB7U2hhZG93Um9vdH0gKi9cbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdFtwcm9wXTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgfSk7XG4gIH0pO1xufTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNiBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xuLy8gcHJldHRpZXItaWdub3JlXG5pbXBvcnQge2V2ZW50UHJvcGVydHlOYW1lc0ZvckVsZW1lbnQsIGV2ZW50UHJvcGVydHlOYW1lc0ZvckhUTUxFbGVtZW50fSBmcm9tICcuL3BhdGNoLWV2ZW50cy5qcyc7XG5cbi8qKiBAaW1wbGVtZW50cyB7SVdyYXBwZXJ9ICovXG5jbGFzcyBXcmFwcGVyIHtcbiAgLyoqIEBwYXJhbSB7IU5vZGV9IG5vZGUgKi9cbiAgY29uc3RydWN0b3Iobm9kZSkge1xuICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gIH1cblxuICAvLyBub2RlXG4gIGFkZEV2ZW50TGlzdGVuZXIobmFtZSwgZm4sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdhZGRFdmVudExpc3RlbmVyJ10oXG4gICAgICBuYW1lLFxuICAgICAgZm4sXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgfVxuXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgZm4sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdyZW1vdmVFdmVudExpc3RlbmVyJ10oXG4gICAgICBuYW1lLFxuICAgICAgZm4sXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgfVxuXG4gIGFwcGVuZENoaWxkKG5vZGUpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdhcHBlbmRDaGlsZCddKG5vZGUpO1xuICB9XG5cbiAgaW5zZXJ0QmVmb3JlKG5vZGUsIHJlZl9ub2RlKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAnaW5zZXJ0QmVmb3JlJ10obm9kZSwgcmVmX25vZGUpO1xuICB9XG5cbiAgcmVtb3ZlQ2hpbGQobm9kZSkge1xuICAgIHJldHVybiB0aGlzLm5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3JlbW92ZUNoaWxkJ10obm9kZSk7XG4gIH1cblxuICByZXBsYWNlQ2hpbGQobm9kZSwgcmVmX25vZGUpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdyZXBsYWNlQ2hpbGQnXShub2RlLCByZWZfbm9kZSk7XG4gIH1cblxuICBjbG9uZU5vZGUoZGVlcCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2Nsb25lTm9kZSddKGRlZXApO1xuICB9XG5cbiAgZ2V0Um9vdE5vZGUob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLm5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2dldFJvb3ROb2RlJ10ob3B0aW9ucyk7XG4gIH1cblxuICBjb250YWlucyhub2RlKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAnY29udGFpbnMnXShub2RlKTtcbiAgfVxuXG4gIGRpc3BhdGNoRXZlbnQoZXZlbnQpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdkaXNwYXRjaEV2ZW50J10oZXZlbnQpO1xuICB9XG5cbiAgLy8gZWxlbWVudFxuICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLm5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3NldEF0dHJpYnV0ZSddKG5hbWUsIHZhbHVlKTtcbiAgfVxuXG4gIC8vIE5PVEU6IG5vdCBuZWVkZWQsIGp1c3QgaGVyZSBmb3IgYmFsYW5jZVxuICBnZXRBdHRyaWJ1dGUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLm5vZGVbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdnZXRBdHRyaWJ1dGUnXShuYW1lKTtcbiAgfVxuXG4gIC8vIE5PVEU6IG5vdCBuZWVkZWQsIGp1c3QgaGVyZSBmb3IgYmFsYW5jZVxuICBoYXNBdHRyaWJ1dGUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLm5vZGVbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdoYXNBdHRyaWJ1dGUnXShuYW1lKTtcbiAgfVxuXG4gIHJlbW92ZUF0dHJpYnV0ZShuYW1lKSB7XG4gICAgdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdyZW1vdmVBdHRyaWJ1dGUnXShuYW1lKTtcbiAgfVxuXG4gIHRvZ2dsZUF0dHJpYnV0ZShuYW1lLCBmb3JjZSkge1xuICAgIHJldHVybiB0aGlzLm5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3RvZ2dsZUF0dHJpYnV0ZSddKG5hbWUsIGZvcmNlKTtcbiAgfVxuXG4gIGF0dGFjaFNoYWRvdyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAnYXR0YWNoU2hhZG93J10ob3B0aW9ucyk7XG4gIH1cblxuICAvKiogQHJldHVybiB7IU5vZGV8dW5kZWZpbmVkfSAqL1xuICBnZXQgYWN0aXZlRWxlbWVudCgpIHtcbiAgICBpZiAoXG4gICAgICB1dGlscy5pc1NoYWR5Um9vdCh0aGlzLm5vZGUpIHx8XG4gICAgICB0aGlzLm5vZGUubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfTk9ERVxuICAgICkge1xuICAgICAgY29uc3QgZSA9IHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAnYWN0aXZlRWxlbWVudCddO1xuICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogSW5zdGFsbGVkIGZvciBjb21wYXRpYmlsaXR5IHdpdGggYnJvd3NlcnMgKG9sZGVyIENocm9tZS9TYWZhcmkpIHRoYXQgZG9cbiAgICogbm90IGhhdmUgYSBjb25maWd1cmFibGUgYGFjdGl2ZUVsZW1lbnRgIGFjY2Vzc29yLiBFbmFibGVzIG5vUGF0Y2ggYW5kXG4gICAqIHBhdGNoIG1vZGUgYm90aCB0byBjb25zaXN0ZW50bHkgdXNlIFNoYWR5RE9NLndyYXAoZG9jdW1lbnQpLl9hY3RpdmVFbGVtZW50LlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQHJldHVybiB7IU5vZGV8dW5kZWZpbmVkfVxuICAgKi9cbiAgZ2V0IF9hY3RpdmVFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICAvLyBOT1RFOiBub3QgbmVlZGVkLCBqdXN0IGhlcmUgZm9yIGJhbGFuY2VcbiAgLyoqIEBvdmVycmlkZSAqL1xuICBmb2N1cygpIHtcbiAgICB0aGlzLm5vZGVbdXRpbHMuTkFUSVZFX1BSRUZJWCArICdmb2N1cyddKCk7XG4gIH1cblxuICBibHVyKCkge1xuICAgIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAnYmx1ciddKCk7XG4gIH1cblxuICAvLyBkb2N1bWVudFxuICBpbXBvcnROb2RlKG5vZGUsIGRlZXApIHtcbiAgICBpZiAodGhpcy5ub2RlLm5vZGVUeXBlID09PSBOb2RlLkRPQ1VNRU5UX05PREUpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2ltcG9ydE5vZGUnXShub2RlLCBkZWVwKTtcbiAgICB9XG4gIH1cblxuICBnZXRFbGVtZW50QnlJZChpZCkge1xuICAgIGlmICh0aGlzLm5vZGUubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfTk9ERSkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAnZ2V0RWxlbWVudEJ5SWQnXShpZCk7XG4gICAgfVxuICB9XG5cbiAgZWxlbWVudHNGcm9tUG9pbnQoeCwgeSkge1xuICAgIHJldHVybiB0aGlzLm5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2VsZW1lbnRzRnJvbVBvaW50J10oeCwgeSk7XG4gIH1cblxuICBlbGVtZW50RnJvbVBvaW50KHgsIHkpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdlbGVtZW50RnJvbVBvaW50J10oeCwgeSk7XG4gIH1cblxuICAvLyBxdWVyeVxuICBxdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAncXVlcnlTZWxlY3RvciddKHNlbGVjdG9yKTtcbiAgfVxuXG4gIHF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IsIHVzZU5hdGl2ZSkge1xuICAgIHJldHVybiB0aGlzLm5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3F1ZXJ5U2VsZWN0b3JBbGwnXShcbiAgICAgIHNlbGVjdG9yLFxuICAgICAgdXNlTmF0aXZlXG4gICAgKTtcbiAgfVxuXG4gIC8vIHNsb3RcbiAgYXNzaWduZWROb2RlcyhvcHRpb25zKSB7XG4gICAgaWYgKHRoaXMubm9kZS5sb2NhbE5hbWUgPT09ICdzbG90Jykge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAnYXNzaWduZWROb2RlcyddKG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBob3N0KCkge1xuICAgIGlmICh1dGlscy5pc1NoYWR5Um9vdCh0aGlzLm5vZGUpKSB7XG4gICAgICByZXR1cm4gLyoqIEB0eXBlIHshU2hhZG93Um9vdH0gKi8gKHRoaXMubm9kZSkuaG9zdDtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGdldCBwYXJlbnROb2RlKCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3BhcmVudE5vZGUnXTtcbiAgfVxuXG4gIGdldCBmaXJzdENoaWxkKCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2ZpcnN0Q2hpbGQnXTtcbiAgfVxuXG4gIGdldCBsYXN0Q2hpbGQoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAnbGFzdENoaWxkJ107XG4gIH1cblxuICBnZXQgbmV4dFNpYmxpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAnbmV4dFNpYmxpbmcnXTtcbiAgfVxuXG4gIGdldCBwcmV2aW91c1NpYmxpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAncHJldmlvdXNTaWJsaW5nJ107XG4gIH1cblxuICBnZXQgY2hpbGROb2RlcygpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdjaGlsZE5vZGVzJ107XG4gIH1cblxuICBnZXQgcGFyZW50RWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdwYXJlbnRFbGVtZW50J107XG4gIH1cblxuICBnZXQgZmlyc3RFbGVtZW50Q2hpbGQoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAnZmlyc3RFbGVtZW50Q2hpbGQnXTtcbiAgfVxuXG4gIGdldCBsYXN0RWxlbWVudENoaWxkKCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2xhc3RFbGVtZW50Q2hpbGQnXTtcbiAgfVxuXG4gIGdldCBuZXh0RWxlbWVudFNpYmxpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAnbmV4dEVsZW1lbnRTaWJsaW5nJ107XG4gIH1cblxuICBnZXQgcHJldmlvdXNFbGVtZW50U2libGluZygpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdwcmV2aW91c0VsZW1lbnRTaWJsaW5nJ107XG4gIH1cblxuICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAnY2hpbGRyZW4nXTtcbiAgfVxuXG4gIGdldCBjaGlsZEVsZW1lbnRDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdjaGlsZEVsZW1lbnRDb3VudCddO1xuICB9XG5cbiAgZ2V0IHNoYWRvd1Jvb3QoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAnc2hhZG93Um9vdCddO1xuICB9XG5cbiAgZ2V0IGFzc2lnbmVkU2xvdCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdhc3NpZ25lZFNsb3QnXTtcbiAgfVxuXG4gIGdldCBpc0Nvbm5lY3RlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdpc0Nvbm5lY3RlZCddO1xuICB9XG5cbiAgZ2V0IGlubmVySFRNTCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdpbm5lckhUTUwnXTtcbiAgfVxuXG4gIHNldCBpbm5lckhUTUwodmFsdWUpIHtcbiAgICB0aGlzLm5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2lubmVySFRNTCddID0gdmFsdWU7XG4gIH1cblxuICBnZXQgdGV4dENvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAndGV4dENvbnRlbnQnXTtcbiAgfVxuXG4gIHNldCB0ZXh0Q29udGVudCh2YWx1ZSkge1xuICAgIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAndGV4dENvbnRlbnQnXSA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IHNsb3QoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAnc2xvdCddO1xuICB9XG5cbiAgc2V0IHNsb3QodmFsdWUpIHtcbiAgICB0aGlzLm5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3Nsb3QnXSA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IGNsYXNzTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdjbGFzc05hbWUnXTtcbiAgfVxuXG4gIHNldCBjbGFzc05hbWUodmFsdWUpIHtcbiAgICB0aGlzLm5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2NsYXNzTmFtZSddID0gdmFsdWU7XG4gIH1cblxuICBhcHBlbmQoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLm5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ2FwcGVuZCddKC4uLmFyZ3MpO1xuICB9XG5cbiAgcHJlcGVuZCguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyAncHJlcGVuZCddKC4uLmFyZ3MpO1xuICB9XG5cbiAgcmVwbGFjZUNoaWxkcmVuKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdyZXBsYWNlQ2hpbGRyZW4nXSguLi5hcmdzKTtcbiAgfVxuXG4gIGFmdGVyKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdhZnRlciddKC4uLmFyZ3MpO1xuICB9XG5cbiAgYmVmb3JlKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdiZWZvcmUnXSguLi5hcmdzKTtcbiAgfVxuXG4gIHJlbW92ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlW3V0aWxzLlNIQURZX1BSRUZJWCArICdyZW1vdmUnXSgpO1xuICB9XG5cbiAgcmVwbGFjZVdpdGgoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLm5vZGVbdXRpbHMuU0hBRFlfUFJFRklYICsgJ3JlcGxhY2VXaXRoJ10oLi4uYXJncyk7XG4gIH1cbn1cblxuY29uc3QgYWRkRXZlbnRQcm9wZXJ0eVdyYXBwZXIgPSAobmFtZSkgPT4ge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JhcHBlci5wcm90b3R5cGUsIG5hbWUsIHtcbiAgICAvKiogQHRoaXMge1dyYXBwZXJ9ICovXG4gICAgZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyBuYW1lXTtcbiAgICB9LFxuICAgIC8qKiBAdGhpcyB7V3JhcHBlcn0gKi9cbiAgICBzZXQodmFsdWUpIHtcbiAgICAgIHRoaXMubm9kZVt1dGlscy5TSEFEWV9QUkVGSVggKyBuYW1lXSA9IHZhbHVlO1xuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICB9KTtcbn07XG5cbmV2ZW50UHJvcGVydHlOYW1lc0ZvckVsZW1lbnQuZm9yRWFjaCgobmFtZSkgPT4gYWRkRXZlbnRQcm9wZXJ0eVdyYXBwZXIobmFtZSkpO1xuZXZlbnRQcm9wZXJ0eU5hbWVzRm9ySFRNTEVsZW1lbnQuZm9yRWFjaCgobmFtZSkgPT5cbiAgYWRkRXZlbnRQcm9wZXJ0eVdyYXBwZXIobmFtZSlcbik7XG5cbmV4cG9ydCB7V3JhcHBlcn07XG5cbmNvbnN0IHdyYXBwZXJNYXAgPSBuZXcgV2Vha01hcCgpO1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcChvYmopIHtcbiAgaWYgKHV0aWxzLmlzU2hhZHlSb290KG9iaikgfHwgb2JqIGluc3RhbmNlb2YgV3JhcHBlcikge1xuICAgIHJldHVybiBvYmo7XG4gIH1cbiAgbGV0IHdyYXBwZXIgPSB3cmFwcGVyTWFwLmdldChvYmopO1xuICBpZiAoIXdyYXBwZXIpIHtcbiAgICB3cmFwcGVyID0gbmV3IFdyYXBwZXIob2JqKTtcbiAgICB3cmFwcGVyTWFwLnNldChvYmosIHdyYXBwZXIpO1xuICB9XG4gIHJldHVybiB3cmFwcGVyO1xufVxuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuLyoqXG4gKiBQYXRjaGVzIGVsZW1lbnRzIHRoYXQgaW50ZXJhY3RzIHdpdGggU2hhZHlET01cbiAqIHN1Y2ggdGhhdCB0cmVlIHRyYXZlcnNhbCBhbmQgbXV0YXRpb24gYXBpcyBhY3QgbGlrZSB0aGV5IHdvdWxkIHVuZGVyXG4gKiBTaGFkb3dET00uXG4gKlxuICogVGhpcyBpbXBvcnQgZW5hYmxlcyBzZWVtbGVzcyBpbnRlcmFjdGlvbiB3aXRoIFNoYWR5RE9NIHBvd2VyZWRcbiAqIGN1c3RvbSBlbGVtZW50cywgZW5hYmxpbmcgYmV0dGVyIGludGVyb3BlcmF0aW9uIHdpdGggM3JkIHBhcnR5IGNvZGUsXG4gKiBsaWJyYXJpZXMsIGFuZCBmcmFtZXdvcmtzIHRoYXQgdXNlIERPTSB0cmVlIG1hbmlwdWxhdGlvbiBhcGlzLlxuICovXG5cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHtmbHVzaCwgZW5xdWV1ZX0gZnJvbSAnLi9mbHVzaC5qcyc7XG4vLyBwcmV0dGllci1pZ25vcmVcbmltcG9ydCB7b2JzZXJ2ZUNoaWxkcmVuLCB1bm9ic2VydmVDaGlsZHJlbiwgZmlsdGVyTXV0YXRpb25zfSBmcm9tICcuL29ic2VydmUtY2hhbmdlcy5qcyc7XG4vLyBwcmV0dGllci1pZ25vcmVcbmltcG9ydCB7YWRkTmF0aXZlUHJlZml4ZWRQcm9wZXJ0aWVzLCBuYXRpdmVNZXRob2RzLCBuYXRpdmVUcmVlfSBmcm9tICcuL3BhdGNoLW5hdGl2ZS5qcyc7XG4vLyBwcmV0dGllci1pZ25vcmVcbmltcG9ydCB7cGF0Y2hJbnNpZGVFbGVtZW50QWNjZXNzb3JzLCBwYXRjaE91dHNpZGVFbGVtZW50QWNjZXNzb3JzfSBmcm9tICcuL3BhdGNoLWluc3RhbmNlcy5qcyc7XG5pbXBvcnQge3BhdGNoRXZlbnRzLCBwYXRjaENsaWNrLCBjb21wb3NlZFBhdGh9IGZyb20gJy4vcGF0Y2gtZXZlbnRzLmpzJztcbmltcG9ydCB7U2hhZHlSb290fSBmcm9tICcuL2F0dGFjaC1zaGFkb3cuanMnO1xuaW1wb3J0IHt3cmFwLCBXcmFwcGVyfSBmcm9tICcuL3dyYXBwZXIuanMnO1xuLy8gcHJldHRpZXItaWdub3JlXG5pbXBvcnQge2FkZFNoYWR5UHJlZml4ZWRQcm9wZXJ0aWVzLCBhcHBseVBhdGNoZXMsIHBhdGNoU2hhZG93T25FbGVtZW50LCBwYXRjaEVsZW1lbnRQcm90b30gZnJvbSAnLi9wYXRjaC1wcm90b3R5cGVzLmpzJztcblxuaWYgKHV0aWxzLnNldHRpbmdzLmluVXNlKSB7XG4gIGNvbnN0IHBhdGNoID0gdXRpbHMuc2V0dGluZ3MuaGFzRGVzY3JpcHRvcnNcbiAgICA/IChuKSA9PiBuXG4gICAgOiAobm9kZSkgPT4ge1xuICAgICAgICBwYXRjaEluc2lkZUVsZW1lbnRBY2Nlc3NvcnMobm9kZSk7XG4gICAgICAgIHBhdGNoT3V0c2lkZUVsZW1lbnRBY2Nlc3NvcnMobm9kZSk7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfTtcblxuICBsZXQgU2hhZHlET00gPSB7XG4gICAgLy8gVE9ETyhzb3J2ZWxsKTogcmVtb3ZlIHdoZW4gUG9seW1lciBkb2VzIG5vdCBkZXBlbmQgb24gdGhpcy5cbiAgICAnaW5Vc2UnOiB1dGlscy5zZXR0aW5ncy5pblVzZSxcbiAgICAvLyBOT1RFOiBvbGQgYnJvd3NlcnMgd2l0aG91dCBwcm90b3R5cGUgYWNjZXNzb3JzICh2ZXJ5IG9sZCBDaHJvbWVcbiAgICAvLyBhbmQgU2FmYXJpKSBuZWVkIG1hbnVhbGx5IHBhdGNoZWQgYWNjZXNzb3JzIHRvIHByb3Blcmx5IHNldFxuICAgIC8vIGBpbm5lckhUTUxgIGFuZCBgdGV4dENvbnRlbnRgIHdoZW4gYW4gZWxlbWVudCBpczpcbiAgICAvLyAoMSkgaW5zaWRlIGEgc2hhZG93Um9vdFxuICAgIC8vICgyKSBkb2VzIG5vdCBoYXZlIHNwZWNpYWwgKHNsb3QpIGNoaWxkcmVuIGl0c2VsZlxuICAgIC8vICgzKSBhbmQgc2V0dGluZyB0aGUgcHJvcGVydHkgbmVlZHMgdG8gcHJvdm9rZSBkaXN0cmlidXRpb24gKGJlY2F1c2VcbiAgICAvLyBhIG5lc3RlZCBzbG90IGlzIGFkZGVkL3JlbW92ZWQpXG4gICAgJ3BhdGNoJzogcGF0Y2gsXG4gICAgJ2lzU2hhZHlSb290JzogdXRpbHMuaXNTaGFkeVJvb3QsXG4gICAgJ2VucXVldWUnOiBlbnF1ZXVlLFxuICAgICdmbHVzaCc6IGZsdXNoLFxuICAgICdmbHVzaEluaXRpYWwnOiAocm9vdCkgPT4ge1xuICAgICAgcm9vdC5fZmx1c2hJbml0aWFsKCk7XG4gICAgfSxcbiAgICAnc2V0dGluZ3MnOiB1dGlscy5zZXR0aW5ncyxcbiAgICAnZmlsdGVyTXV0YXRpb25zJzogZmlsdGVyTXV0YXRpb25zLFxuICAgICdvYnNlcnZlQ2hpbGRyZW4nOiBvYnNlcnZlQ2hpbGRyZW4sXG4gICAgJ3Vub2JzZXJ2ZUNoaWxkcmVuJzogdW5vYnNlcnZlQ2hpbGRyZW4sXG4gICAgLy8gU2V0IHRvIHRydWUgdG8gZGVmZXIgbmF0aXZlIGN1c3RvbSBlbGVtZW50cyBjb25uZWN0aW9uIHVudGlsIHRoZVxuICAgIC8vIGRvY3VtZW50IGhhcyBmdWxseSBwYXJzZWQuIFRoaXMgZW5hYmxlcyBjdXN0b20gZWxlbWVudHMgdGhhdCBjcmVhdGVcbiAgICAvLyBzaGFkb3dSb290cyB0byBiZSBkZWZpbmVkIHdoaWxlIHRoZSBkb2N1bWVudCBpcyBsb2FkaW5nLiBFbGVtZW50c1xuICAgIC8vIGN1c3RvbWl6ZWQgYXMgdGhleSBhcmUgY3JlYXRlZCBieSB0aGUgcGFyc2VyIHdpbGwgc3VjY2Vzc2Z1bGx5XG4gICAgLy8gcmVuZGVyIHdpdGggdGhpcyBmbGFnIG9uLlxuICAgICdkZWZlckNvbm5lY3Rpb25DYWxsYmFja3MnOiB1dGlscy5zZXR0aW5nc1snZGVmZXJDb25uZWN0aW9uQ2FsbGJhY2tzJ10sXG4gICAgLy8gU2V0IHRvIHRydWUgdG8gc3BlZWQgdXAgdGhlIHBvbHlmaWxsIHNsaWdodGx5IGF0IHRoZSBjb3N0IG9mIGNvcnJlY3RuZXNzXG4gICAgLy8gKiBkb2VzIG5vdCBwYXRjaCBxdWVyeVNlbGVjdG9yL0FsbCBvbiBEb2N1bWVudCBvciBEb2N1bWVudEZyYWdtZW50XG4gICAgLy8gKiBkb2VzIG5vdCB3cmFwIGNvbm5lY3RlZC9kaXNjb25uZWN0ZWQgY2FsbGJhY2tzIHRvIGRlLWR1cCB0aGVzZVxuICAgIC8vIHdoZW4gdXNpbmcgbmF0aXZlIGN1c3RvbUVsZW1lbnRzXG4gICAgLy8gKiBkb2VzIG5vdCB3YWl0IHRvIHByb2Nlc3MgY2hpbGRyZW4gb2YgZWxlbWVudHMgd2l0aCBzaGFkb3dSb290c1xuICAgIC8vIG1lYW5pbmcgc2hhZG93Um9vdHMgc2hvdWxkIG5vdCBiZSBjcmVhdGVkIHdoaWxlIGFuIGVsZW1lbnQgaXMgcGFyc2luZ1xuICAgIC8vIChlLmcuIGlmIGEgY3VzdG9tIGVsZW1lbnQgdGhhdCBjcmVhdGVzIGEgc2hhZG93Um9vdCBpcyBkZWZpbmVkIGJlZm9yZVxuICAgIC8vIGEgY2FuZGlkYXRlIGVsZW1lbnQgaW4gdGhlIGRvY3VtZW50IGJlbG93IGl0LlxuICAgICdwcmVmZXJQZXJmb3JtYW5jZSc6IHV0aWxzLnNldHRpbmdzWydwcmVmZXJQZXJmb3JtYW5jZSddLFxuICAgIC8vIEludGVncmF0aW9uIHBvaW50IHdpdGggU2hhZHlDU1MgdG8gZGlzYWJsZSBzdHlsaW5nIE11dGF0aW9uT2JzZXJ2ZXIsXG4gICAgLy8gYXMgU2hhZHlET00gd2lsbCBub3cgaGFuZGxlIGR5bmFtaWMgc2NvcGluZy5cbiAgICAnaGFuZGxlc0R5bmFtaWNTY29waW5nJzogdHJ1ZSxcbiAgICAvLyBFbnN1cmUgdGhlIG5vZGUgaXMgd3JhcHBlZC4gVGhpcyBzaG91bGQgYmUgdXNlZCB3aGVuIGBub1BhdGNoYCBpcyBzZXRcbiAgICAvLyB0byBlbnN1cmUgU2hhZG93IERPTSBjb21wYXRpYmxlIERPTSBvcGVyYXRpb24uXG4gICAgLy8gTm90ZSwgd3JhcCBmYWxscyBiYWNrIHRvIHBhdGNoIHNvIHRoYXQgaXQgZW5zdXJlcyBBUEkgXCJhbHdheXMganVzdCB3b3Jrc1wiXG4gICAgJ3dyYXAnOiB1dGlscy5zZXR0aW5ncy5ub1BhdGNoID8gd3JhcCA6IHBhdGNoLFxuICAgIC8vIFdoZW4gY29kZSBzaG91bGQgYmUgY29tcGF0aWJsZSB3aXRoIGBub1BhdGNoYCBgdHJ1ZWAgYW5kIGBvbi1kZW1hbmRgXG4gICAgLy8gc2V0dGluZ3MsIGB3cmFwSWZOZWVkZWRgIGNhbiBiZSB1c2VkIGZvciBvcHRpbWFsIHBlcmZvcm1hbmNlICh2LiBgd3JhcGApXG4gICAgLy8gZm9yIGFsbCBET00gb3BlcmF0aW9ucyBleGNlcHQgdGhlIGZvbGxvd2luZzogYGFwcGVuZENoaWxkYCBhbmRcbiAgICAvLyBgaW5zZXJ0QmVmb3JlYCAod2hlbiB0aGUgbm9kZSBpcyBiZWluZyBtb3ZlZCBmcm9tIGEgbG9jYXRpb24gd2hlcmUgaXRcbiAgICAvLyB3YXMgbG9naWNhbGx5IHBvc2l0aW9uZWQgaW4gdGhlIERPTSk7IHdoZW4gc2V0dGluZyBgY2xhc3NOYW1lYC9gY2xhc3NgO1xuICAgIC8vIHdoZW4gY2FsbGluZyBgcXVlcnlTZWxlY3RvcnxBbGxgOyB3aGVuIHNldHRpbmcgYHRleHRDb250ZW50YCBvclxuICAgIC8vIGBpbm5lckhUTUxgOyBgYWRkRXZlbnRMaXN0ZW5lcmAsIGByZW1vdmVFdmVudExpc3RlbmVyYCBhbmRcbiAgICAvLyBgZGlzcGF0Y2hFdmVudGA7IGFuZCBhbGwgc2NvcGUgc3BlY2lmaWMgQVBJJ3MgbGlrZSBgZ2V0Um9vdE5vZGVgLFxuICAgIC8vIGBpc0Nvbm5lY3RlZGAsIGBzbG90YCwgYGFzc2lnbmVkU2xvdGAsIGBhc3NpZ25lZE5vZGVzYC4gTm90ZSxcbiAgICAvLyBgd3JhcElmTmVlZGVkYCBmYWxscyBiYWNrIHRvIGEgcGFzcyB0aHJvdWdoIHRvIHByZXNlcnZlIG9wdGltYWxcbiAgICAvLyBwZXJmb3JtYW5jZS5cbiAgICAnd3JhcElmTmVlZGVkJzogdXRpbHMuc2V0dGluZ3Mubm9QYXRjaCA9PT0gdHJ1ZSA/IHdyYXAgOiAobikgPT4gbixcbiAgICAnV3JhcHBlcic6IFdyYXBwZXIsXG4gICAgJ2NvbXBvc2VkUGF0aCc6IGNvbXBvc2VkUGF0aCxcbiAgICAvLyBTZXQgdG8gdHJ1ZSB0byBhdm9pZCBwYXRjaGluZyByZWd1bGFyIHBsYXRmb3JtIHByb3BlcnR5IG5hbWVzLiBXaGVuIHNldCxcbiAgICAvLyBTaGFkb3cgRE9NIGNvbXBhdGlibGUgYmVoYXZpb3IgaXMgb25seSBhdmFpbGFibGUgd2hlbiBhY2Nlc3NpbmcgRE9NXG4gICAgLy8gQVBJIHVzaW5nIGBTaGFkeURPTS53cmFwYCwgZS5nLiBgU2hhZHlET00ud3JhcChlbGVtZW50KS5zaGFkb3dSb290YC5cbiAgICAvLyBUaGlzIHNldHRpbmcgcHJvdmlkZXMgYSBzbWFsbCBwZXJmb3JtYW5jZSBib29zdCwgYnV0IHJlcXVpcmVzIGFsbCBET00gQVBJXG4gICAgLy8gYWNjZXNzIHRoYXQgcmVxdWlyZXMgU2hhZG93IERPTSBiZWhhdmlvciB0byBiZSBwcm94aWVkIHZpYSBgU2hhZHlET00ud3JhcGAuXG4gICAgLy9cbiAgICAvLyBXQVJOSU5HOiBXaGVuIGBub1BhdGNoYCBpcyBzZXQgYW5kIHRoZSBDdXN0b20gRWxlbWVudHMgcG9seWZpbGwgaXNcbiAgICAvLyBuZWVkZWQsIHRoZSBDdXN0b20gRWxlbWVudHMgcG9seWZpbGwgbXVzdCBiZSBsb2FkZWQgYmVmb3JlIHRoaXNcbiAgICAvLyBwb2x5ZmlsbDsgaG93ZXZlciwgd2hlbiBgbm9QYXRjaGAgaXMgbm90IHVzZWQsIHRoaXMgcG9seWZpbGwgc2hvdWxkIGJlXG4gICAgLy8gbG9hZGVkIGJlZm9yZSB0aGUgQ3VzdG9tIEVsZW1lbnRzIHBvbHlmaWxsLiBUaGlzIGlzIGJlY2F1c2VcbiAgICAvLyBTaGFkeURPTSBjYXB0dXJlcyBET00gbXV0YXRpb24gbWV0aG9kcyBhbmQgd2hlbiBgbm9QYXRjaGAgaXMgdXNlZCxcbiAgICAvLyBTaGFkeURPTSBtdXN0IGNhbGwgdGhlIG11dGF0aW9uIG1ldGhvZHMgcGF0Y2hlZCBieSB0aGUgQ3VzdG9tIEVsZW1lbnRzXG4gICAgLy8gcG9seWZpbGwgb3IgY3VzdG9tIGVsZW1lbnRzIHdpbGwgbm90IGZ1bmN0aW9uIGFzIGV4cGVjdGVkLiBXaGVuIGBub1BhdGNoYFxuICAgIC8vIGlzIG5vdCB1c2VkLCB0aGUgQ3VzdG9tIEVsZW1lbnRzIHBvbHlmaWxsIHBhdGNoZXMgY2FsbCB0aHJvdWdoIHRvIHRoZVxuICAgIC8vIFNoYWR5RE9NIHBhdGNoZXMgc28gU2hhZHlET00gc2hvdWxkIGJlIGxvYWRlZCBmaXJzdC5cbiAgICAnbm9QYXRjaCc6IHV0aWxzLnNldHRpbmdzLm5vUGF0Y2gsXG4gICAgJ3BhdGNoT25EZW1hbmQnOiB1dGlscy5zZXR0aW5ncy5wYXRjaE9uRGVtYW5kLFxuICAgICduYXRpdmVNZXRob2RzJzogbmF0aXZlTWV0aG9kcyxcbiAgICAnbmF0aXZlVHJlZSc6IG5hdGl2ZVRyZWUsXG4gICAgJ3BhdGNoRWxlbWVudFByb3RvJzogcGF0Y2hFbGVtZW50UHJvdG8sXG4gICAgLy8gVXNlIHRoaXMgc2V0dGluZyB0byBjaG9vc2UgdGhlIGltcGxlbWVudGF0aW9uIG9mIGBxdWVyeVNlbGVjdG9yYCBhbmRcbiAgICAvLyBgcXVlcnlTZWxlY3RvckFsbGAuIFRoZSBvcHRpb25zIHByb3ZpZGUgZGlmZmVyZW50IHRyYWRlb2ZmcyBiZXR3ZWVuXG4gICAgLy8gYWNjdXJhY3kgYW5kIHBlcmZvcm1hbmNlLCBhcyBleHBsYWluZWQgYmVsb3cuIE1vcmUgc3BlY2lmaWNhbGx5LCB0aGVcbiAgICAvLyBsb2dpY2FsIHRyZWUgZXhwb3NlZCBieSBTaGFkeSBET00gdGhyb3VnaCB0aGUgRE9NIEFQSXMgaXQgd3JhcHMgZG9lc24ndFxuICAgIC8vIG1hdGNoIHRoZSBzdHJ1Y3R1cmUgb2YgdGhlIHRyZWUgc2VlbiBieSB0aGUgYnJvd3NlciAodGhlICdyZWFsIHRyZWUnKSwgc29cbiAgICAvLyB0aGUgZGVncmVlIHRvIHdoaWNoIHRoZSBicm93c2VyIGl0c2VsZiBpcyB1c2VkIHRvIG1hdGNoIHNlbGVjdG9ycyBhZmZlY3RzXG4gICAgLy8gdGhpcyB0cmFkZW9mZi5cbiAgICAvL1xuICAgIC8vIC0gYHVuZGVmaW5lZGAgKGRlZmF1bHQpOiBTaGFkeSBET00gd2lsbCB3YWxrIHRoZSBsb2dpY2FsIGRlc2NlbmRhbnRzIG9mXG4gICAgLy8gdGhlIGNvbnRleHQgZWxlbWVudCBhbmQgY2FsbCBgbWF0Y2hlc2Agd2l0aCB0aGUgZ2l2ZW4gc2VsZWN0b3IgdG8gZmluZFxuICAgIC8vIG1hdGNoaW5nIGVsZW1lbnRzLlxuICAgIC8vXG4gICAgLy8gICBUaGlzIG9wdGlvbiBpcyBhIGJhbGFuY2UgYmV0d2VlbiBhY2N1cmFjeSBhbmQgcGVyZm9ybWFuY2UuIFRoaXMgb3B0aW9uXG4gICAgLy8gICB3aWxsIGJlIGFibGUgdG8gbWF0Y2ggYWxsIGxvZ2ljYWwgZGVzY2VuZGFudHMgb2YgdGhlIGNvbnRleHQgZWxlbWVudFxuICAgIC8vICAgKGkuZS4gaW5jbHVkaW5nIGRlc2NlbmRhbnRzIG9mIHVuYXNzaWduZWQgbm9kZXMpIGJ1dCBzZWxlY3RvcnMgYXJlXG4gICAgLy8gICBtYXRjaGVkIGFnYWluc3QgdGhlIHJlYWwgdHJlZSwgc28gY29tcGxleCBzZWxlY3RvcnMgbWF5IGZhaWwgdG8gbWF0Y2hcbiAgICAvLyAgIHNpbmNlIHRoZWlyIGNvbWJpbmF0b3JzIHdpbGwgYXR0ZW1wdCB0byBtYXRjaCBhZ2FpbnN0IHRoZSBzdHJ1Y3R1cmUgb2ZcbiAgICAvLyAgIHRoZSByZWFsIHRyZWUuIEdlbmVyYWxseSwgeW91IHNob3VsZCBvbmx5IHBhc3MgY29tcG91bmQgc2VsZWN0b3JzIHdoZW5cbiAgICAvLyAgIHVzaW5nIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uLiBUaGlzIGltcGxlbWVudGF0aW9uIGFsc28gYnJlYWtzIHRoZVxuICAgIC8vICAgc2VtYW50aWNzIG9mIGA6c2NvcGVgIGJlY2F1c2UgdGhlIHdyYXBwZWQgYHF1ZXJ5U2VsZWN0b3JgIGNhbGwgaXNcbiAgICAvLyAgIHRyYW5zbGF0ZWQgaW50byBtYW55IGBtYXRjaGVzYCBjYWxscyBvbiBkaWZmZXJlbnQgZWxlbWVudHMuXG4gICAgLy9cbiAgICAvLyAtIGAnbmF0aXZlJ2A6IFNoYWR5IERPTSdzIHdyYXBwZXIgZm9yIChlLmcuKSBgcXVlcnlTZWxlY3RvcmAgd2lsbCBjYWxsXG4gICAgLy8gaW50byB0aGUgbmF0aXZlIGBxdWVyeVNlbGVjdG9yYCBmdW5jdGlvbiBhbmQgdGhlbiBmaWx0ZXIgb3V0IHJlc3VsdHMgdGhhdFxuICAgIC8vIGFyZSBub3QgaW4gdGhlIHNhbWUgc2hhZG93IHJvb3QgaW4gdGhlIGxvZ2ljYWwgdHJlZS5cbiAgICAvL1xuICAgIC8vICAgVGhpcyBpcyB0aGUgZmFzdGVzdCBvcHRpb24uIFRoaXMgb3B0aW9uIHdpbGwgbm90IG1hdGNoIGVsZW1lbnRzIHRoYXRcbiAgICAvLyAgIGFyZSBsb2dpY2FsIGRlc2NlbmRhbnRzIG9mIHVuYXNzaWduZWQgbm9kZXMgYmVjYXVzZSB0aGV5IHdpbGwgbm90IGJlIGluXG4gICAgLy8gICB0aGUgcmVhbCB0cmVlLCBhZ2FpbnN0IHdoaWNoIHRoZSBicm93c2VyIG1hdGNoZXMgdGhlIHNlbGVjdG9yLiBMaWtlIHRoZVxuICAgIC8vICAgZGVmYXVsdCBvcHRpb24sIHRoaXMgb3B0aW9uIG1heSBub3QgY29ycmVjdGx5IG1hdGNoIGNvbXBsZXggc2VsZWN0b3JzXG4gICAgLy8gICAoaS5lLiB0aG9zZSB3aXRoIGNvbWJpbmF0b3JzKSBkdWUgdG8gdGhlIHN0cnVjdHVyYWwgZGlmZmVyZW5jZXMgYmV0d2VlblxuICAgIC8vICAgdGhlIHJlYWwgdHJlZSBhbmQgdGhlIGxvZ2ljYWwgdHJlZS4gVGhpcyBvcHRpb24gcHJlc2VydmVzIHRoZSBzZW1hbnRpY3NcbiAgICAvLyAgIG9mIGA6c2NvcGVgIGJlY2F1c2UgdGhlIGNvbnRleHQgZWxlbWVudCBvZiB0aGUgY2FsbCB0byB0aGUgd3JhcHBlciBpc1xuICAgIC8vICAgYWxzbyB0aGUgY29udGV4dCBlbGVtZW50IG9mIHRoZSBjYWxsIHRvIHRoZSBuYXRpdmUgZnVuY3Rpb24uXG4gICAgLy9cbiAgICAvLyAtIGAnc2VsZWN0b3JFbmdpbmUnYDogU2hhZHkgRE9NJ3Mgd3JhcHBlciBmb3IgKGUuZy4pIGBxdWVyeVNlbGVjdG9yYCB3aWxsXG4gICAgLy8gcGFydGlhbGx5IHBhcnNlIHRoZSBnaXZlbiBzZWxlY3RvciBsaXN0IGFuZCBwZXJmb3JtIHRoZSB0cmVlLXRyYXZlcnNhbFxuICAgIC8vIHN0ZXBzIG9mIGEgc2VsZWN0b3IgZW5naW5lIGFnYWluc3QgdGhlIGxvZ2ljYWwgdHJlZS5cbiAgICAvL1xuICAgIC8vICAgVGhpcyBpcyB0aGUgc2xvd2VzdCBhbmQgbW9zdCBhY2N1cmF0ZSBvcHRpb24uIFRoaXMgb3B0aW9uIGlzIGFibGUgdG9cbiAgICAvLyAgIGZpbmQgYWxsIGxvZ2ljYWwgZGVzY2VuZGFudHMgb2YgdGhlIGNvbnRleHQgZWxlbWVudCBieSBtYW51YWxseSB3YWxraW5nXG4gICAgLy8gICB0aGUgdHJlZS4gVGhpcyBvcHRpb24gaXMgYWxzbyBhYmxlIHRvIGNvcnJlY3RseSBtYXRjaCBjb21wbGV4IHNlbGVjdG9yc1xuICAgIC8vICAgYmVjYXVzZSBpdCBkb2VzIG5vdCByZWx5IG9uIHRoZSBicm93c2VyIHRvIGhhbmRsZSBjb21iaW5hdG9ycy4gRGVzcGl0ZVxuICAgIC8vICAgdXNpbmcgYG1hdGNoZXNgIHRvIG1hdGNoIGNvbXBvdW5kIHNlbGVjdG9ycyBkdXJpbmcgc2VsZWN0b3IgZXZhbHVhdGlvbixcbiAgICAvLyAgIHRoaXMgb3B0aW9uIHByZXNlcnZlcyB0aGUgc2VtYW50aWNzIG9mIGA6c2NvcGVgIGJ5IG9ubHkgY29uc2lkZXJpbmdcbiAgICAvLyAgIGNvbXBvdW5kIHNlbGVjdG9ycyBjb250YWluaW5nIGA6c2NvcGVgIHRvIGJlIG1hdGNoaW5nIGlmIHRoZSBjb250ZXh0XG4gICAgLy8gICBlbGVtZW50IG9mIHRoZSBgbWF0Y2hlc2AgY2FsbCBpcyBhbHNvIHRoZSBjb250ZXh0IGVsZW1lbnQgb2YgdGhlXG4gICAgLy8gICB3cmFwcGVyIGNhbGwuXG4gICAgLy9cbiAgICAvLyAgIEhvd2V2ZXIsIHRoZSBwYXJzZXIgdXNlZCBmb3IgdGhpcyBvcHRpb24gaXMgbm90IHN0cmljdGx5IGNvcnJlY3QuXG4gICAgLy8gICBOb3RhYmxlIGNhdmVhdHMgaW5jbHVkZTpcbiAgICAvL1xuICAgIC8vICAgICAtIFRoZSBwYXJzZXIgYXNzdW1lcyB0aGUgc2VsZWN0b3IgbGlzdCBpdCdzIGdpdmVuIGlzIHN5bnRhY3RpY2FsbHlcbiAgICAvLyAgICAgY29ycmVjdC4gV2hlbiBnaXZlbiBhIHNlbGVjdG9yIHRoYXQgd291bGQgbm90IHBhcnNlIHVuZGVyIGEgZnVsbFxuICAgIC8vICAgICBpbXBsZW1lbnRhdGlvbiwgdGhpcyBpbXBsZW1lbnRhdGlvbiBtYXkgZmFpbCBzaWxlbnRseS5cbiAgICAvL1xuICAgIC8vICAgICAtIE5lc3RlZCBzZWxlY3RvcnMgYXJlIF9ub3RfIHRha2VuIGludG8gY29uc2lkZXJhdGlvbiB3aGlsZSB3YWxraW5nXG4gICAgLy8gICAgIHRoZSB0cmVlLiBFYWNoIG91dGVyLW1vc3QgY29tcG91bmQgc2VsZWN0b3IgaXMgdGVzdGVkIGFnYWluc3RcbiAgICAvLyAgICAgY2FuZGlkYXRlIGVsZW1lbnRzIGFzIGEgd2hvbGUsIHdpdGhvdXQgbW9kaWZpY2F0aW9uLiBUaGlzIG1lYW5zIHRoYXRcbiAgICAvLyAgICAgc2VsZWN0b3JzIG5lc3RlZCBpbiBhcmd1bWVudHMgb2YgZnVuY3Rpb25hbCBwc2V1ZG8tY2xhc3Nlcywgc3VjaCBhc1xuICAgIC8vICAgICBgYSA+IGJgIGluIGA6aXMoYSA+IGIpYCwgYXJlIHN0aWxsIG1hdGNoZWQgYnkgdGhlIGJyb3dzZXIgYWdhaW5zdCB0aGVcbiAgICAvLyAgICAgcmVhbCB0cmVlLCBub3QgU2hhZHkgRE9NJ3MgbG9naWNhbCB0cmVlLlxuICAgIC8vXG4gICAgLy8gICAgIC0gYDpzY29wZWAgaXMgb25seSBzdXBwb3J0ZWQgYXQgdGhlIHRvcC1sZXZlbC4gUGFydGljdWxhcmx5LCBpZiB0aGVcbiAgICAvLyAgICAgdGV4dCBgOnNjb3BlYCBhcHBlYXJzIGFueXdoZXJlIHdpdGhpbiBhIGNvbXBvdW5kIHNlbGVjdG9yLCB0aGVuIHRoZVxuICAgIC8vICAgICBzZWxlY3RvciBlbmdpbmUgd2lsbCBvbmx5IGFsbG93IHRoYXQgY29tcG91bmQgc2VsZWN0b3IgdG8gbWF0Y2ggdGhlXG4gICAgLy8gICAgIGNvbnRleHQgZWxlbWVudC4gSGF2aW5nIHRoZSB0ZXh0IGA6c2NvcGVgIGluc2lkZSBhIHN0cmluZ1xuICAgIC8vICAgICAoYHhbeT1cIjpzY29wZVwiXWApIG9yIGFuIGFyZ3VtZW50IHRvIGEgZnVuY3Rpb25hbCBwc2V1ZG8tc2VsZWN0b3JcbiAgICAvLyAgICAgKGA6bm90KDpzY29wZSA+IHgpYCkgd2lsbCBsaWtlbHkgYnJlYWsgeW91ciBzZWxlY3Rvci5cbiAgICAvL1xuICAgIC8vICAgICAtIFRoZSBgOmhvc3RgIGFuZCBgOmhvc3QtY29udGV4dGAgcHNldWRvLWNsYXNzZXMgYXJlIG5vdCBzdXBwb3J0ZWQuXG4gICAgLy9cbiAgICAvLyAgICAgLSBDb21tZW50cyBhcmUgbm90IHN1cHBvcnRlZC4gKGUuZy4gYGEgLyogYiAqLyBjYClcbiAgICAvL1xuICAgIC8vICAgICAtIFRoZSAoZHJhZnQpIGNvbHVtbiBjb21iaW5hdG9yIGlzIG5vdCBzdXBwb3J0ZWQuIChlLmcuIGBhIHx8IGJgKVxuICAgICdxdWVyeVNlbGVjdG9ySW1wbGVtZW50YXRpb24nOlxuICAgICAgdXRpbHMuc2V0dGluZ3NbJ3F1ZXJ5U2VsZWN0b3JJbXBsZW1lbnRhdGlvbiddLFxuICB9O1xuXG4gIHdpbmRvd1snU2hhZHlET00nXSA9IFNoYWR5RE9NO1xuXG4gIC8vIE1vZGlmaWVzIG5hdGl2ZSBwcm90b3R5cGVzIGZvciBOb2RlLCBFbGVtZW50LCBldGMuIHRvXG4gIC8vIG1ha2UgbmF0aXZlIHBsYXRmb3JtIGJlaGF2aW9yIGF2YWlsYWJsZSBhdCBwcmVmaXhlZCBuYW1lcywgZS5nLlxuICAvLyBgdXRpbHMuTkFUSVZFX1BSRUZJWCArICdmaXJzdENoaWxkJ2Agb3IgYF9fc2hhZHlfbmF0aXZlX2ZpcnN0Q2hpbGRgLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgc3RhbmRhcmQgbmFtZXMgdG8gYmUgc2FmZWx5IHBhdGNoZWQgd2hpbGUgcmV0YWluaW5nIHRoZVxuICAvLyBhYmlsaXR5IGZvciBuYXRpdmUgYmVoYXZpb3IgdG8gYmUgdXNlZC4gVGhpcyBwb2x5ZmlsbCBtYW5pcHVsYXRlcyBET01cbiAgLy8gYnkgdXNpbmcgdGhpcyBzYXZlZCBuYXRpdmUgYmVoYXZpb3IuXG4gIC8vIE5vdGUsIHNvbWUgYnJvd3NlcnMgZG8gbm90IGhhdmUgcHJvcGVyIGVsZW1lbnQgZGVzY3JpcHRvcnMgZm9yXG4gIC8vIGFjY2Vzc29yczsgaW4gdGhpcyBjYXNlLCBuYXRpdmUgYmVoYXZpb3IgZm9yIHRoZXNlIGFjY2Vzc29ycyBpcyBzaW11bGF0ZWRcbiAgLy8gdmlhIGEgVHJlZVdhbGtlci5cbiAgYWRkTmF0aXZlUHJlZml4ZWRQcm9wZXJ0aWVzKCk7XG5cbiAgLy8gTW9kaWZpZXMgbmF0aXZlIHByb3RvdHlwZXMgZm9yIE5vZGUsIEVsZW1lbnQsIGV0Yy4gdG8gbWFrZSBTaGFkb3dET01cbiAgLy8gYmVoYXZpb3IgYXZhaWxhYmxlIGF0IHByZWZpeGVkIG5hbWVzLCBlLmcuXG4gIC8vIGB1dGlscy5TSEFEWV9QUkVGSVggKyAnZmlyc3RDaGlsZGAgb3IgYF9fc2hhZHlfZmlyc3RDaGlsZGAuIFRoaXMgaXMgZG9uZVxuICAvLyBzbyB0aGlzIHBvbHlmaWxsIGNhbiBwZXJmb3JtIFNoYWRvdyBET00gc3R5bGUgRE9NIG1hbmlwdWxhdGlvbi5cbiAgLy8gQmVjYXVzZSBwYXRjaGluZyBub3JtYWwgcGxhdGZvcm0gcHJvcGVydHkgbmFtZXMgaXMgb3B0aW9uYWwsIHRoZXNlIHByZWZpeGVkXG4gIC8vIG5hbWVzIGFyZSB1c2VkIGludGVybmFsbHkuXG4gIGFkZFNoYWR5UHJlZml4ZWRQcm9wZXJ0aWVzKCk7XG5cbiAgLy8gTW9kaWZpZXMgbmF0aXZlIHByb3RvdHlwZXMgZm9yIE5vZGUsIEVsZW1lbnQsIGV0Yy4gdG8gcGF0Y2hcbiAgLy8gcmVndWxhciBwbGF0Zm9ybSBwcm9wZXJ0eSBuYW1lcyB0byBoYXZlIFNoYWRvdyBET00gY29tcGF0aWJsZSBBUEkgYmVoYXZpb3IuXG4gIC8vIFRoaXMgYXBwbGllcyB0aGUgdXRpbHMuU0hBRFlfUFJFRklYIGJlaGF2aW9yIHRvIG5vcm1hbCBuYW1lcy4gRm9yIGV4YW1wbGUsXG4gIC8vIGlmIGBub1BhdGNoYCBpcyBub3Qgc2V0LCB0aGVuIGBlbC5fX3NoYWR5X2ZpcnN0Q2hpbGRgIGlzIGVxdWl2YWxlbnQgdG9cbiAgLy8gYGVsLmZpcnN0Q2hpbGRgLlxuICAvLyBOT1RFLCBvbiBvbGRlciBicm93c2VycyAob2xkIENocm9tZS9TYWZhcmkpIG5hdGl2ZSBhY2Nlc3NvcnMgY2Fubm90IGJlXG4gIC8vIHBhdGNoZWQgb24gcHJvdG90eXBlcyAoZS5nLiBOb2RlLnByb3RvdHlwZS5maXJzdENoaWxkIGNhbm5vdCBiZSBtb2RpZmllZCkuXG4gIC8vIE9uIHRoZXNlIGJyb3dzZXJzLCBpbnN0YW5jZSBsZXZlbCBwYXRjaGluZyBpcyBwZXJmb3JtZWQgd2hlcmUgbmVlZGVkOyB0aGlzXG4gIC8vIGluc3RhbmNlIHBhdGNoaW5nIGlzIG9ubHkgZG9uZSB3aGVuIGBub1BhdGNoYCBpcyAqbm90KiBzZXQuXG4gIGlmICghdXRpbHMuc2V0dGluZ3Mubm9QYXRjaCkge1xuICAgIGFwcGx5UGF0Y2hlcygpO1xuICAgIC8vIFBhdGNoIGNsaWNrIGV2ZW50IGJlaGF2aW9yIG9ubHkgaWYgd2UncmUgcGF0Y2hpbmdcbiAgICBwYXRjaENsaWNrKCk7XG4gIH0gZWxzZSBpZiAodXRpbHMuc2V0dGluZ3MucGF0Y2hPbkRlbWFuZCkge1xuICAgIC8vIEluIGBvbi1kZW1hbmRgIHBhdGNoaW5nLCBkbyBwYXRjaCBgYXR0YWNoU2hhZG93YCBhbmQgYHNoYWRvd1Jvb3RgLlxuICAgIC8vIFRoZXNlIGFyZSB0aGUgb25seSBwYXRjaGVkIHByb3BlcnRpZXMgaW4gYG9uLWRlbWFuZGAgbW9kZSBhbmQgdGhlc2VcbiAgICAvLyBwYXRjaGVzIGtpY2sgb2ZmIHBhdGNoaW5nIFwib24tZGVtYW5kXCIgZm9yIG90aGVyIG5vZGVzLlxuICAgIHBhdGNoU2hhZG93T25FbGVtZW50KCk7XG4gIH1cblxuICAvLyBGb3Igc2ltcGxpY2l0eSwgcGF0Y2ggZXZlbnRzIHVuY29uZGl0aW9uYWxseS5cbiAgLy8gUGF0Y2hlcyB0aGUgZXZlbnQgc3lzdGVtIHRvIGhhdmUgU2hhZG93IERPTSBjb21wYXRpYmxlIGJlaGF2aW9yIChlLmcuXG4gIC8vIGV2ZW50IHJldGFyZ2V0aW5nKS4gV2hlbiBgbm9QYXRjaGAgaXMgc2V0LCByZXRhcmdldGluZyBpcyBvbmx5IGF2YWlsYWJsZVxuICAvLyB3aGVuIGFkZGluZyBldmVudCBsaXN0ZW5lcnMgYW5kIGRpc3BhdGNoaW5nIGV2ZW50cyB2aWEgYFNoYWR5RE9NLndyYXBgXG4gIC8vIChlLmcuIGBTaGFkeURPTS53cmFwKGVsZW1lbnQpLmFkZEV2ZW50TGlzdGVuZXIoLi4uKWApLlxuICBwYXRjaEV2ZW50cygpO1xuXG4gIHdpbmRvdy5TaGFkb3dSb290ID0gLyoqIEB0eXBlIHtmdW5jdGlvbihuZXc6U2hhZG93Um9vdCl9ICovIChTaGFkeVJvb3QpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmRcbiAqIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXlcbiAqIGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0IENvZGUgZGlzdHJpYnV0ZWQgYnlcbiAqIEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzbyBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVBcbiAqIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG5leHBvcnQgY29uc3QgRG9jdW1lbnRfY3JlYXRlRWxlbWVudCA9IHdpbmRvdy5Eb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRWxlbWVudDtcbmV4cG9ydCBjb25zdCBEb2N1bWVudF9jcmVhdGVFbGVtZW50TlMgPVxuICB3aW5kb3cuRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnROUztcbmV4cG9ydCBjb25zdCBEb2N1bWVudF9pbXBvcnROb2RlID0gd2luZG93LkRvY3VtZW50LnByb3RvdHlwZS5pbXBvcnROb2RlO1xuXG5leHBvcnQgY29uc3QgRG9jdW1lbnRfcHJlcGVuZCA9IHdpbmRvdy5Eb2N1bWVudC5wcm90b3R5cGVbJ3ByZXBlbmQnXTtcbmV4cG9ydCBjb25zdCBEb2N1bWVudF9hcHBlbmQgPSB3aW5kb3cuRG9jdW1lbnQucHJvdG90eXBlWydhcHBlbmQnXTtcbmV4cG9ydCBjb25zdCBEb2N1bWVudEZyYWdtZW50X3ByZXBlbmQgPVxuICB3aW5kb3cuRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGVbJ3ByZXBlbmQnXTtcbmV4cG9ydCBjb25zdCBEb2N1bWVudEZyYWdtZW50X2FwcGVuZCA9XG4gIHdpbmRvdy5Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZVsnYXBwZW5kJ107XG5leHBvcnQgY29uc3QgTm9kZV9jbG9uZU5vZGUgPSB3aW5kb3cuTm9kZS5wcm90b3R5cGUuY2xvbmVOb2RlO1xuZXhwb3J0IGNvbnN0IE5vZGVfYXBwZW5kQ2hpbGQgPSB3aW5kb3cuTm9kZS5wcm90b3R5cGUuYXBwZW5kQ2hpbGQ7XG5leHBvcnQgY29uc3QgTm9kZV9pbnNlcnRCZWZvcmUgPSB3aW5kb3cuTm9kZS5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlO1xuZXhwb3J0IGNvbnN0IE5vZGVfcmVtb3ZlQ2hpbGQgPSB3aW5kb3cuTm9kZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQ7XG5leHBvcnQgY29uc3QgTm9kZV9yZXBsYWNlQ2hpbGQgPSB3aW5kb3cuTm9kZS5wcm90b3R5cGUucmVwbGFjZUNoaWxkO1xuZXhwb3J0IGNvbnN0IE5vZGVfdGV4dENvbnRlbnQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICB3aW5kb3cuTm9kZS5wcm90b3R5cGUsXG4gICd0ZXh0Q29udGVudCdcbik7XG5leHBvcnQgY29uc3QgRWxlbWVudF9hdHRhY2hTaGFkb3cgPSB3aW5kb3cuRWxlbWVudC5wcm90b3R5cGVbJ2F0dGFjaFNoYWRvdyddO1xuZXhwb3J0IGNvbnN0IEVsZW1lbnRfaW5uZXJIVE1MID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihcbiAgd2luZG93LkVsZW1lbnQucHJvdG90eXBlLFxuICAnaW5uZXJIVE1MJ1xuKTtcbmV4cG9ydCBjb25zdCBFbGVtZW50X2dldEF0dHJpYnV0ZSA9IHdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGU7XG5leHBvcnQgY29uc3QgRWxlbWVudF9zZXRBdHRyaWJ1dGUgPSB3aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuc2V0QXR0cmlidXRlO1xuZXhwb3J0IGNvbnN0IEVsZW1lbnRfcmVtb3ZlQXR0cmlidXRlID0gd2luZG93LkVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZTtcbmV4cG9ydCBjb25zdCBFbGVtZW50X3RvZ2dsZUF0dHJpYnV0ZSA9IHdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS50b2dnbGVBdHRyaWJ1dGU7XG5leHBvcnQgY29uc3QgRWxlbWVudF9nZXRBdHRyaWJ1dGVOUyA9IHdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVOUztcbmV4cG9ydCBjb25zdCBFbGVtZW50X3NldEF0dHJpYnV0ZU5TID0gd2luZG93LkVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZU5TO1xuZXhwb3J0IGNvbnN0IEVsZW1lbnRfcmVtb3ZlQXR0cmlidXRlTlMgPVxuICB3aW5kb3cuRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlTlM7XG5leHBvcnQgY29uc3QgRWxlbWVudF9pbnNlcnRBZGphY2VudEVsZW1lbnQgPVxuICB3aW5kb3cuRWxlbWVudC5wcm90b3R5cGVbJ2luc2VydEFkamFjZW50RWxlbWVudCddO1xuZXhwb3J0IGNvbnN0IEVsZW1lbnRfaW5zZXJ0QWRqYWNlbnRIVE1MID1cbiAgd2luZG93LkVsZW1lbnQucHJvdG90eXBlWydpbnNlcnRBZGphY2VudEhUTUwnXTtcbmV4cG9ydCBjb25zdCBFbGVtZW50X3ByZXBlbmQgPSB3aW5kb3cuRWxlbWVudC5wcm90b3R5cGVbJ3ByZXBlbmQnXTtcbmV4cG9ydCBjb25zdCBFbGVtZW50X2FwcGVuZCA9IHdpbmRvdy5FbGVtZW50LnByb3RvdHlwZVsnYXBwZW5kJ107XG5leHBvcnQgY29uc3QgRWxlbWVudF9iZWZvcmUgPSB3aW5kb3cuRWxlbWVudC5wcm90b3R5cGVbJ2JlZm9yZSddO1xuZXhwb3J0IGNvbnN0IEVsZW1lbnRfYWZ0ZXIgPSB3aW5kb3cuRWxlbWVudC5wcm90b3R5cGVbJ2FmdGVyJ107XG5leHBvcnQgY29uc3QgRWxlbWVudF9yZXBsYWNlV2l0aCA9IHdpbmRvdy5FbGVtZW50LnByb3RvdHlwZVsncmVwbGFjZVdpdGgnXTtcbmV4cG9ydCBjb25zdCBFbGVtZW50X3JlbW92ZSA9IHdpbmRvdy5FbGVtZW50LnByb3RvdHlwZVsncmVtb3ZlJ107XG5leHBvcnQgY29uc3QgSFRNTEVsZW1lbnQgPSB3aW5kb3cuSFRNTEVsZW1lbnQ7XG5leHBvcnQgY29uc3QgSFRNTEVsZW1lbnRfaW5uZXJIVE1MID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihcbiAgd2luZG93LkhUTUxFbGVtZW50LnByb3RvdHlwZSxcbiAgJ2lubmVySFRNTCdcbik7XG5leHBvcnQgY29uc3QgSFRNTEVsZW1lbnRfaW5zZXJ0QWRqYWNlbnRFbGVtZW50ID1cbiAgd2luZG93LkhUTUxFbGVtZW50LnByb3RvdHlwZVsnaW5zZXJ0QWRqYWNlbnRFbGVtZW50J107XG5leHBvcnQgY29uc3QgSFRNTEVsZW1lbnRfaW5zZXJ0QWRqYWNlbnRIVE1MID1cbiAgd2luZG93LkhUTUxFbGVtZW50LnByb3RvdHlwZVsnaW5zZXJ0QWRqYWNlbnRIVE1MJ107XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZFxuICogYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heVxuICogYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHQgQ29kZSBkaXN0cmlidXRlZCBieVxuICogR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUFxuICogcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5cbmNvbnN0IHJlc2VydmVkRWxlbWVudE5hbWVTZXQgPSBuZXcgU2V0PHN0cmluZz4oKTtcbi8vIElFMTEgZG9lcyBub3Qgc3VwcG9ydCBjb25zdHJ1Y3RpbmcgYSBzZXQgdXNpbmcgYW4gaXRlcmFibGUuXG5bXG4gICdhbm5vdGF0aW9uLXhtbCcsXG4gICdjb2xvci1wcm9maWxlJyxcbiAgJ2ZvbnQtZmFjZScsXG4gICdmb250LWZhY2Utc3JjJyxcbiAgJ2ZvbnQtZmFjZS11cmknLFxuICAnZm9udC1mYWNlLWZvcm1hdCcsXG4gICdmb250LWZhY2UtbmFtZScsXG4gICdtaXNzaW5nLWdseXBoJyxcbl0uZm9yRWFjaCgoaXRlbSkgPT4gcmVzZXJ2ZWRFbGVtZW50TmFtZVNldC5hZGQoaXRlbSkpO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZEN1c3RvbUVsZW1lbnROYW1lKGxvY2FsTmFtZTogc3RyaW5nKSB7XG4gIGNvbnN0IHJlc2VydmVkID0gcmVzZXJ2ZWRFbGVtZW50TmFtZVNldC5oYXMobG9jYWxOYW1lKTtcbiAgY29uc3QgdmFsaWRGb3JtID0gL15bYS16XVsuMC05X2Etel0qLVstLjAtOV9hLXpdKiQvLnRlc3QobG9jYWxOYW1lKTtcbiAgcmV0dXJuICFyZXNlcnZlZCAmJiB2YWxpZEZvcm07XG59XG5cbi8vIE5vdGUsIElFMTEgZG9lc24ndCBoYXZlIGBkb2N1bWVudC5jb250YWluc2AuXG5jb25zdCBuYXRpdmVDb250YWlucyA9IGRvY3VtZW50LmNvbnRhaW5zXG4gID8gZG9jdW1lbnQuY29udGFpbnMuYmluZChkb2N1bWVudClcbiAgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnMuYmluZChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNDb25uZWN0ZWQobm9kZTogTm9kZSkge1xuICAvLyBVc2UgYE5vZGUjaXNDb25uZWN0ZWRgLCBpZiBkZWZpbmVkLlxuICBjb25zdCBuYXRpdmVWYWx1ZSA9IG5vZGUuaXNDb25uZWN0ZWQ7XG4gIGlmIChuYXRpdmVWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG5hdGl2ZVZhbHVlO1xuICB9XG4gIC8vIE9wdGltaXphdGlvbjogSXQncyBzaWduaWZpY2FudGx5IGZhc3RlciBoZXJlIHRvIHRyeSB0byB1c2UgYGNvbnRhaW5zYCxcbiAgLy8gZXNwZWNpYWxseSBvbiBFZGdlL0lFL1xuICBpZiAobmF0aXZlQ29udGFpbnMobm9kZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGxldCBjdXJyZW50OiBOb2RlIHwgdW5kZWZpbmVkID0gbm9kZTtcbiAgd2hpbGUgKFxuICAgIGN1cnJlbnQgJiZcbiAgICAhKGN1cnJlbnQuX19DRV9pc0ltcG9ydERvY3VtZW50IHx8IGN1cnJlbnQgaW5zdGFuY2VvZiBEb2N1bWVudClcbiAgKSB7XG4gICAgY3VycmVudCA9XG4gICAgICBjdXJyZW50LnBhcmVudE5vZGUgfHxcbiAgICAgICh3aW5kb3cuU2hhZG93Um9vdCAmJiBjdXJyZW50IGluc3RhbmNlb2YgU2hhZG93Um9vdFxuICAgICAgICA/IGN1cnJlbnQuaG9zdFxuICAgICAgICA6IHVuZGVmaW5lZCk7XG4gIH1cbiAgcmV0dXJuICEhKFxuICAgIGN1cnJlbnQgJiZcbiAgICAoY3VycmVudC5fX0NFX2lzSW1wb3J0RG9jdW1lbnQgfHwgY3VycmVudCBpbnN0YW5jZW9mIERvY3VtZW50KVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hpbGRyZW5Gcm9tRnJhZ21lbnQoXG4gIGZyYWdtZW50OiBEb2N1bWVudEZyYWdtZW50XG4pOiBBcnJheTxFbGVtZW50PiB7XG4gIC8vIE5vdGUsIElFIGRvZXNuJ3QgaGF2ZSBgY2hpbGRyZW5gIG9uIGRvY3VtZW50IGZyYWdtZW50cy5cbiAgY29uc3QgbmF0aXZlQ2hpbGRyZW4gPSBmcmFnbWVudC5jaGlsZHJlbjtcbiAgaWYgKG5hdGl2ZUNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG5hdGl2ZUNoaWxkcmVuKTtcbiAgfVxuICBjb25zdCBjaGlsZHJlbjogQXJyYXk8RWxlbWVudD4gPSBbXTtcbiAgZm9yIChsZXQgbiA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7IG47IG4gPSBuLm5leHRTaWJsaW5nKSB7XG4gICAgaWYgKG4ubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICBjaGlsZHJlbi5wdXNoKG4gYXMgRWxlbWVudCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gbmV4dFNpYmxpbmdPckFuY2VzdG9yU2libGluZyhyb290OiBOb2RlLCBzdGFydDogTm9kZSkge1xuICBsZXQgbm9kZTogTm9kZSB8IG51bGwgPSBzdGFydDtcbiAgd2hpbGUgKG5vZGUgJiYgbm9kZSAhPT0gcm9vdCAmJiAhbm9kZS5uZXh0U2libGluZykge1xuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gIH1cbiAgcmV0dXJuICFub2RlIHx8IG5vZGUgPT09IHJvb3QgPyBudWxsIDogbm9kZS5uZXh0U2libGluZztcbn1cblxuZnVuY3Rpb24gbmV4dE5vZGUocm9vdDogTm9kZSwgc3RhcnQ6IE5vZGUpIHtcbiAgcmV0dXJuIHN0YXJ0LmZpcnN0Q2hpbGRcbiAgICA/IHN0YXJ0LmZpcnN0Q2hpbGRcbiAgICA6IG5leHRTaWJsaW5nT3JBbmNlc3RvclNpYmxpbmcocm9vdCwgc3RhcnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2Fsa0RlZXBEZXNjZW5kYW50RWxlbWVudHMoXG4gIHJvb3Q6IE5vZGUsXG4gIGNhbGxiYWNrOiAoZWxlbTogRWxlbWVudCkgPT4gdm9pZCxcbiAgdmlzaXRlZEltcG9ydHM/OiBTZXQ8Tm9kZT5cbikge1xuICBsZXQgbm9kZTogTm9kZSB8IG51bGwgPSByb290O1xuICB3aGlsZSAobm9kZSkge1xuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgY29uc3QgZWxlbWVudCA9IG5vZGUgYXMgRWxlbWVudDtcblxuICAgICAgY2FsbGJhY2soZWxlbWVudCk7XG5cbiAgICAgIGNvbnN0IGxvY2FsTmFtZSA9IGVsZW1lbnQubG9jYWxOYW1lO1xuICAgICAgaWYgKGxvY2FsTmFtZSA9PT0gJ2xpbmsnICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyZWwnKSA9PT0gJ2ltcG9ydCcpIHtcbiAgICAgICAgLy8gSWYgdGhpcyBpbXBvcnQgKHBvbHlmaWxsZWQgb3Igbm90KSBoYXMgaXRzIHJvb3Qgbm9kZSBhdmFpbGFibGUsXG4gICAgICAgIC8vIHdhbGsgaXQuXG4gICAgICAgIGNvbnN0IGltcG9ydE5vZGUgPSAoZWxlbWVudCBhcyBIVE1MTGlua0VsZW1lbnQpLmltcG9ydDtcbiAgICAgICAgaWYgKHZpc2l0ZWRJbXBvcnRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2aXNpdGVkSW1wb3J0cyA9IG5ldyBTZXQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW1wb3J0Tm9kZSBpbnN0YW5jZW9mIE5vZGUgJiYgIXZpc2l0ZWRJbXBvcnRzLmhhcyhpbXBvcnROb2RlKSkge1xuICAgICAgICAgIC8vIFByZXZlbnQgbXVsdGlwbGUgd2Fsa3Mgb2YgdGhlIHNhbWUgaW1wb3J0IHJvb3QuXG4gICAgICAgICAgdmlzaXRlZEltcG9ydHMuYWRkKGltcG9ydE5vZGUpO1xuXG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGxldCBjaGlsZCA9IGltcG9ydE5vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGNoaWxkO1xuICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgd2Fsa0RlZXBEZXNjZW5kYW50RWxlbWVudHMoY2hpbGQsIGNhbGxiYWNrLCB2aXNpdGVkSW1wb3J0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWdub3JlIGRlc2NlbmRhbnRzIG9mIGltcG9ydCBsaW5rcyB0byBwcmV2ZW50IGF0dGVtcHRpbmcgdG8gd2FsayB0aGVcbiAgICAgICAgLy8gZWxlbWVudHMgY3JlYXRlZCBieSB0aGUgSFRNTCBJbXBvcnRzIHBvbHlmaWxsIHRoYXQgd2UganVzdCB3YWxrZWRcbiAgICAgICAgLy8gYWJvdmUuXG4gICAgICAgIG5vZGUgPSBuZXh0U2libGluZ09yQW5jZXN0b3JTaWJsaW5nKHJvb3QsIGVsZW1lbnQpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSBpZiAobG9jYWxOYW1lID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIC8vIElnbm9yZSBkZXNjZW5kYW50cyBvZiB0ZW1wbGF0ZXMuIFRoZXJlIHNob3VsZG4ndCBiZSBhbnkgZGVzY2VuZGFudHNcbiAgICAgICAgLy8gYmVjYXVzZSB0aGV5IHdpbGwgYmUgbW92ZWQgaW50byBgLmNvbnRlbnRgIGR1cmluZyBjb25zdHJ1Y3Rpb24gaW5cbiAgICAgICAgLy8gYnJvd3NlcnMgdGhhdCBzdXBwb3J0IHRlbXBsYXRlIGJ1dCwgaW4gY2FzZSB0aGV5IGV4aXN0IGFuZCBhcmUgc3RpbGxcbiAgICAgICAgLy8gd2FpdGluZyB0byBiZSBtb3ZlZCBieSBhIHBvbHlmaWxsLCB0aGV5IHdpbGwgYmUgaWdub3JlZC5cbiAgICAgICAgbm9kZSA9IG5leHRTaWJsaW5nT3JBbmNlc3RvclNpYmxpbmcocm9vdCwgZWxlbWVudCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBXYWxrIHNoYWRvdyByb290cy5cbiAgICAgIGNvbnN0IHNoYWRvd1Jvb3QgPSBlbGVtZW50Ll9fQ0Vfc2hhZG93Um9vdDtcbiAgICAgIGlmIChzaGFkb3dSb290KSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgbGV0IGNoaWxkID0gc2hhZG93Um9vdC5maXJzdENoaWxkO1xuICAgICAgICAgIGNoaWxkO1xuICAgICAgICAgIGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmdcbiAgICAgICAgKSB7XG4gICAgICAgICAgd2Fsa0RlZXBEZXNjZW5kYW50RWxlbWVudHMoY2hpbGQsIGNhbGxiYWNrLCB2aXNpdGVkSW1wb3J0cyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBub2RlID0gbmV4dE5vZGUocm9vdCwgbm9kZSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kXG4gKiBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5XG4gKiBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5XG4gKiBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQXG4gKiByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuaW1wb3J0IEN1c3RvbUVsZW1lbnRSZWdpc3RyeSBmcm9tICcuL0N1c3RvbUVsZW1lbnRSZWdpc3RyeS5qcyc7XG5pbXBvcnQge0N1c3RvbUVsZW1lbnRTdGF0ZSBhcyBDRVN0YXRlfSBmcm9tICcuL0N1c3RvbUVsZW1lbnRTdGF0ZS5qcyc7XG5pbXBvcnQgKiBhcyBOYXRpdmUgZnJvbSAnLi9QYXRjaC9OYXRpdmUuanMnO1xuaW1wb3J0ICogYXMgVXRpbGl0aWVzIGZyb20gJy4vVXRpbGl0aWVzLmpzJztcblxuY29uc3QgTlNfSFRNTCA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3VzdG9tRWxlbWVudEludGVybmFscyB7XG4gIHByaXZhdGUgcmVhZG9ubHkgX3BhdGNoZXNOb2RlOiBBcnJheTwobm9kZTogTm9kZSkgPT4gdm9pZD4gPSBbXTtcbiAgcHJpdmF0ZSByZWFkb25seSBfcGF0Y2hlc0VsZW1lbnQ6IEFycmF5PChlbGVtOiBFbGVtZW50KSA9PiB2b2lkPiA9IFtdO1xuICBwcml2YXRlIF9oYXNQYXRjaGVzID0gZmFsc2U7XG4gIHB1YmxpYyByZWFkb25seSBzaGFkeURvbUZhc3RXYWxrOiBib29sZWFuO1xuICBwdWJsaWMgcmVhZG9ubHkgdXNlRG9jdW1lbnRDb25zdHJ1Y3Rpb25PYnNlcnZlcjogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiB7XG4gICAgc2hhZHlEb21GYXN0V2FsazogYm9vbGVhbjtcbiAgICBub0RvY3VtZW50Q29uc3RydWN0aW9uT2JzZXJ2ZXI6IGJvb2xlYW47XG4gIH0pIHtcbiAgICB0aGlzLnNoYWR5RG9tRmFzdFdhbGsgPSBvcHRpb25zLnNoYWR5RG9tRmFzdFdhbGs7XG4gICAgdGhpcy51c2VEb2N1bWVudENvbnN0cnVjdGlvbk9ic2VydmVyID0gIW9wdGlvbnMubm9Eb2N1bWVudENvbnN0cnVjdGlvbk9ic2VydmVyO1xuICB9XG5cbiAgZm9yRWFjaEVsZW1lbnQoXG4gICAgbm9kZTogTm9kZSxcbiAgICBjYWxsYmFjazogKGVsZW06IEVsZW1lbnQpID0+IHZvaWQsXG4gICAgdmlzaXRlZEltcG9ydHM/OiBTZXQ8Tm9kZT5cbiAgKSB7XG4gICAgY29uc3Qgc2QgPSB3aW5kb3dbJ1NoYWR5RE9NJ107XG4gICAgaWYgKHRoaXMuc2hhZHlEb21GYXN0V2FsayAmJiBzZCAmJiBzZFsnaW5Vc2UnXSkge1xuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBub2RlIGFzIEVsZW1lbnQ7XG4gICAgICAgIGNhbGxiYWNrKGVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgLy8gbW9zdCBlYXNpbHkgZ2V0cyB0byBkb2N1bWVudCwgZWxlbWVudCwgZG9jdW1lbnRGcmFnbWVudFxuICAgICAgaWYgKChub2RlIGFzIEVsZW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwhKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gc2RbJ25hdGl2ZU1ldGhvZHMnXS5xdWVyeVNlbGVjdG9yQWxsLmNhbGwobm9kZSwgJyonKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNhbGxiYWNrKGVsZW1lbnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBVdGlsaXRpZXMud2Fsa0RlZXBEZXNjZW5kYW50RWxlbWVudHMobm9kZSwgY2FsbGJhY2ssIHZpc2l0ZWRJbXBvcnRzKTtcbiAgICB9XG4gIH1cblxuICBhZGROb2RlUGF0Y2gocGF0Y2g6IChub2RlOiBOb2RlKSA9PiB2b2lkKSB7XG4gICAgdGhpcy5faGFzUGF0Y2hlcyA9IHRydWU7XG4gICAgdGhpcy5fcGF0Y2hlc05vZGUucHVzaChwYXRjaCk7XG4gIH1cblxuICBhZGRFbGVtZW50UGF0Y2gocGF0Y2g6IChlbGVtZW50OiBFbGVtZW50KSA9PiB2b2lkKSB7XG4gICAgdGhpcy5faGFzUGF0Y2hlcyA9IHRydWU7XG4gICAgdGhpcy5fcGF0Y2hlc0VsZW1lbnQucHVzaChwYXRjaCk7XG4gIH1cblxuICBwYXRjaFRyZWUobm9kZTogTm9kZSkge1xuICAgIGlmICghdGhpcy5faGFzUGF0Y2hlcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZm9yRWFjaEVsZW1lbnQobm9kZSwgKGVsZW1lbnQpID0+IHRoaXMucGF0Y2hFbGVtZW50KGVsZW1lbnQpKTtcbiAgfVxuXG4gIHBhdGNoTm9kZShub2RlOiBOb2RlKSB7XG4gICAgaWYgKCF0aGlzLl9oYXNQYXRjaGVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG5vZGUuX19DRV9wYXRjaGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG5vZGUuX19DRV9wYXRjaGVkID0gdHJ1ZTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcGF0Y2hlc05vZGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuX3BhdGNoZXNOb2RlW2ldKG5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIHBhdGNoRWxlbWVudChlbGVtZW50OiBFbGVtZW50KSB7XG4gICAgaWYgKCF0aGlzLl9oYXNQYXRjaGVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQuX19DRV9wYXRjaGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsZW1lbnQuX19DRV9wYXRjaGVkID0gdHJ1ZTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcGF0Y2hlc05vZGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuX3BhdGNoZXNOb2RlW2ldKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcGF0Y2hlc0VsZW1lbnQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuX3BhdGNoZXNFbGVtZW50W2ldKGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIGNvbm5lY3RUcmVlKHJvb3Q6IE5vZGUpIHtcbiAgICBjb25zdCBlbGVtZW50czogQXJyYXk8RWxlbWVudD4gPSBbXTtcblxuICAgIHRoaXMuZm9yRWFjaEVsZW1lbnQocm9vdCwgKGVsZW1lbnQpID0+IGVsZW1lbnRzLnB1c2goZWxlbWVudCkpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuICAgICAgaWYgKGVsZW1lbnQuX19DRV9zdGF0ZSA9PT0gQ0VTdGF0ZS5jdXN0b20pIHtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWRDYWxsYmFjayhlbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudXBncmFkZVJlYWN0aW9uKGVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRpc2Nvbm5lY3RUcmVlKHJvb3Q6IE5vZGUpIHtcbiAgICBjb25zdCBlbGVtZW50czogQXJyYXk8RWxlbWVudD4gPSBbXTtcblxuICAgIHRoaXMuZm9yRWFjaEVsZW1lbnQocm9vdCwgKGVsZW1lbnQpID0+IGVsZW1lbnRzLnB1c2goZWxlbWVudCkpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuICAgICAgaWYgKGVsZW1lbnQuX19DRV9zdGF0ZSA9PT0gQ0VTdGF0ZS5jdXN0b20pIHtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0ZWRDYWxsYmFjayhlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBncmFkZXMgYWxsIHVuY3VzdG9taXplZCBjdXN0b20gZWxlbWVudHMgYXQgYW5kIGJlbG93IGEgcm9vdCBub2RlIGZvclxuICAgKiB3aGljaCB0aGVyZSBpcyBhIGRlZmluaXRpb24uIFdoZW4gY3VzdG9tIGVsZW1lbnQgcmVhY3Rpb24gY2FsbGJhY2tzIGFyZVxuICAgKiBhc3N1bWVkIHRvIGJlIGNhbGxlZCBzeW5jaHJvbm91c2x5ICh3aGljaCwgYnkgdGhlIGN1cnJlbnQgRE9NIC8gSFRNTCBzcGVjXG4gICAqIGRlZmluaXRpb25zLCB0aGV5IGFyZSAqbm90KiksIGNhbGxiYWNrcyBmb3IgYm90aCBlbGVtZW50cyBjdXN0b21pemVkXG4gICAqIHN5bmNocm9ub3VzbHkgYnkgdGhlIHBhcnNlciBhbmQgZWxlbWVudHMgYmVpbmcgdXBncmFkZWQgb2NjdXIgaW4gdGhlIHNhbWVcbiAgICogcmVsYXRpdmUgb3JkZXIuXG4gICAqXG4gICAqIE5PVEU6IFRoaXMgZnVuY3Rpb24sIHdoZW4gdXNlZCB0byBzaW11bGF0ZSB0aGUgY29uc3RydWN0aW9uIG9mIGEgdHJlZVxuICAgKiB0aGF0IGlzIGFscmVhZHkgY3JlYXRlZCBidXQgbm90IGN1c3RvbWl6ZWQgKGkuZS4gYnkgdGhlIHBhcnNlciksIGRvZXNcbiAgICogKm5vdCogcHJldmVudCB0aGUgZWxlbWVudCBmcm9tIHJlYWRpbmcgdGhlICdmaW5hbCcgKHRydWUpIHN0YXRlIG9mIHRoZVxuICAgKiB0cmVlLiBGb3IgZXhhbXBsZSwgdGhlIGVsZW1lbnQsIGR1cmluZyB0cnVseSBzeW5jaHJvbm91cyBwYXJzaW5nIC9cbiAgICogY29uc3RydWN0aW9uIHdvdWxkIHNlZSB0aGF0IGl0IGNvbnRhaW5zIG5vIGNoaWxkcmVuIGFzIHRoZXkgaGF2ZSBub3QgeWV0XG4gICAqIGJlZW4gaW5zZXJ0ZWQuIEhvd2V2ZXIsIHRoaXMgZnVuY3Rpb24gZG9lcyBub3QgbW9kaWZ5IHRoZSB0cmVlLCB0aGVcbiAgICogZWxlbWVudCB3aWxsIChpbmNvcnJlY3RseSkgaGF2ZSBjaGlsZHJlbi4gQWRkaXRpb25hbGx5LCBzZWxmLW1vZGlmaWNhdGlvblxuICAgKiByZXN0cmljdGlvbnMgZm9yIGN1c3RvbSBlbGVtZW50IGNvbnN0cnVjdG9ycyBpbXBvc2VkIGJ5IHRoZSBET00gc3BlYyBhcmVcbiAgICogKm5vdCogZW5mb3JjZWQuXG4gICAqXG4gICAqXG4gICAqIFRoZSBmb2xsb3dpbmcgbmVzdGVkIGxpc3Qgc2hvd3MgdGhlIHN0ZXBzIGV4dGVuZGluZyBkb3duIGZyb20gdGhlIEhUTUxcbiAgICogc3BlYydzIHBhcnNpbmcgc2VjdGlvbiB0aGF0IGNhdXNlIGVsZW1lbnRzIHRvIGJlIHN5bmNocm9ub3VzbHkgY3JlYXRlZFxuICAgKiBhbmQgdXBncmFkZWQ6XG4gICAqXG4gICAqIFRoZSBcImluIGJvZHlcIiBpbnNlcnRpb24gbW9kZTpcbiAgICogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluYm9keVxuICAgKiAtIFN3aXRjaCBvbiB0b2tlbjpcbiAgICogICAuLiBvdGhlciBjYXNlcyAuLlxuICAgKiAgIC0+IEFueSBvdGhlciBzdGFydCB0YWdcbiAgICogICAgICAtIFtJbnNlcnQgYW4gSFRNTCBlbGVtZW50XShiZWxvdykgZm9yIHRoZSB0b2tlbi5cbiAgICpcbiAgICogSW5zZXJ0IGFuIEhUTUwgZWxlbWVudDpcbiAgICogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjaW5zZXJ0LWFuLWh0bWwtZWxlbWVudFxuICAgKiAtIEluc2VydCBhIGZvcmVpZ24gZWxlbWVudCBmb3IgdGhlIHRva2VuIGluIHRoZSBIVE1MIG5hbWVzcGFjZTpcbiAgICogICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNpbnNlcnQtYS1mb3JlaWduLWVsZW1lbnRcbiAgICogICAtIENyZWF0ZSBhbiBlbGVtZW50IGZvciBhIHRva2VuOlxuICAgKiAgICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjY3JlYXRlLWFuLWVsZW1lbnQtZm9yLXRoZS10b2tlblxuICAgKiAgICAgLSBXaWxsIGV4ZWN1dGUgc2NyaXB0IGZsYWcgaXMgdHJ1ZT9cbiAgICogICAgICAgLSAoRWxlbWVudCBxdWV1ZSBwdXNoZWQgdG8gdGhlIGN1c3RvbSBlbGVtZW50IHJlYWN0aW9ucyBzdGFjay4pXG4gICAqICAgICAtIENyZWF0ZSBhbiBlbGVtZW50OlxuICAgKiAgICAgICBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtY3JlYXRlLWVsZW1lbnRcbiAgICogICAgICAgLSBTeW5jIENFIGZsYWcgaXMgdHJ1ZT9cbiAgICogICAgICAgICAtIENvbnN0cnVjdG9yIGNhbGxlZC5cbiAgICogICAgICAgICAtIFNlbGYtbW9kaWZpY2F0aW9uIHJlc3RyaWN0aW9ucyBlbmZvcmNlZC5cbiAgICogICAgICAgLSBTeW5jIENFIGZsYWcgaXMgZmFsc2U/XG4gICAqICAgICAgICAgLSAoVXBncmFkZSByZWFjdGlvbiBlbnF1ZXVlZC4pXG4gICAqICAgICAtIEF0dHJpYnV0ZXMgYXBwZW5kZWQgdG8gZWxlbWVudC5cbiAgICogICAgICAgKGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgIHJlYWN0aW9ucyBlbnF1ZXVlZC4pXG4gICAqICAgICAtIFdpbGwgZXhlY3V0ZSBzY3JpcHQgZmxhZyBpcyB0cnVlP1xuICAgKiAgICAgICAtIChFbGVtZW50IHF1ZXVlIHBvcHBlZCBmcm9tIHRoZSBjdXN0b20gZWxlbWVudCByZWFjdGlvbnMgc3RhY2suXG4gICAqICAgICAgICAgUmVhY3Rpb25zIGluIHRoZSBwb3BwZWQgc3RhY2sgYXJlIGludm9rZWQuKVxuICAgKiAgIC0gKEVsZW1lbnQgcXVldWUgcHVzaGVkIHRvIHRoZSBjdXN0b20gZWxlbWVudCByZWFjdGlvbnMgc3RhY2suKVxuICAgKiAgIC0gSW5zZXJ0IHRoZSBlbGVtZW50OlxuICAgKiAgICAgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LW5vZGUtaW5zZXJ0XG4gICAqICAgICAtIFNoYWRvdy1pbmNsdWRpbmcgZGVzY2VuZGFudHMgYXJlIGNvbm5lY3RlZC4gRHVyaW5nIHBhcnNpbmdcbiAgICogICAgICAgY29uc3RydWN0aW9uLCB0aGVyZSBhcmUgbm8gc2hhZG93LSpleGNsdWRpbmcqIGRlc2NlbmRhbnRzLlxuICAgKiAgICAgICBIb3dldmVyLCB0aGUgY29uc3RydWN0b3IgbWF5IGhhdmUgdmFsaWRseSBhdHRhY2hlZCBhIHNoYWRvd1xuICAgKiAgICAgICB0cmVlIHRvIGl0c2VsZiBhbmQgYWRkZWQgZGVzY2VuZGFudHMgdG8gdGhhdCBzaGFkb3cgdHJlZS5cbiAgICogICAgICAgKGBjb25uZWN0ZWRDYWxsYmFja2AgcmVhY3Rpb25zIGVucXVldWVkLilcbiAgICogICAtIChFbGVtZW50IHF1ZXVlIHBvcHBlZCBmcm9tIHRoZSBjdXN0b20gZWxlbWVudCByZWFjdGlvbnMgc3RhY2suXG4gICAqICAgICBSZWFjdGlvbnMgaW4gdGhlIHBvcHBlZCBzdGFjayBhcmUgaW52b2tlZC4pXG4gICAqL1xuICBwYXRjaEFuZFVwZ3JhZGVUcmVlKFxuICAgIHJvb3Q6IE5vZGUsXG4gICAgb3B0aW9uczoge1xuICAgICAgdmlzaXRlZEltcG9ydHM/OiBTZXQ8Tm9kZT47XG4gICAgICB1cGdyYWRlPzogKGVsZW06IEhUTUxFbGVtZW50KSA9PiB2b2lkO1xuICAgIH0gPSB7fVxuICApIHtcbiAgICBjb25zdCB2aXNpdGVkSW1wb3J0cyA9IG9wdGlvbnMudmlzaXRlZEltcG9ydHM7XG4gICAgY29uc3QgdXBncmFkZSA9XG4gICAgICBvcHRpb25zLnVwZ3JhZGUgfHwgKChlbGVtZW50KSA9PiB0aGlzLnVwZ3JhZGVSZWFjdGlvbihlbGVtZW50KSk7XG5cbiAgICBjb25zdCBlbGVtZW50czogQXJyYXk8RWxlbWVudD4gPSBbXTtcblxuICAgIGNvbnN0IGdhdGhlckVsZW1lbnRzID0gKGVsZW1lbnQ6IEVsZW1lbnQpID0+IHtcbiAgICAgIGlmICh0aGlzLl9oYXNQYXRjaGVzKSB7XG4gICAgICAgIHRoaXMucGF0Y2hFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICBlbGVtZW50LmxvY2FsTmFtZSA9PT0gJ2xpbmsnICYmXG4gICAgICAgIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyZWwnKSA9PT0gJ2ltcG9ydCdcbiAgICAgICkge1xuICAgICAgICBjb25zdCBpbXBvcnRFbGVtID0gZWxlbWVudCBhcyBIVE1MTGlua0VsZW1lbnQ7XG4gICAgICAgIC8vIFRoZSBIVE1MIEltcG9ydHMgcG9seWZpbGwgc2V0cyBhIGRlc2NlbmRhbnQgZWxlbWVudCBvZiB0aGUgbGluayB0b1xuICAgICAgICAvLyB0aGUgYGltcG9ydGAgcHJvcGVydHksIHNwZWNpZmljYWxseSB0aGlzIGlzICpub3QqIGEgRG9jdW1lbnQuXG4gICAgICAgIGNvbnN0IGltcG9ydE5vZGUgPSBpbXBvcnRFbGVtLmltcG9ydDtcblxuICAgICAgICBpZiAoaW1wb3J0Tm9kZSBpbnN0YW5jZW9mIE5vZGUpIHtcbiAgICAgICAgICBpbXBvcnROb2RlLl9fQ0VfaXNJbXBvcnREb2N1bWVudCA9IHRydWU7XG4gICAgICAgICAgLy8gQ29ubmVjdGVkIGxpbmtzIGFyZSBhc3NvY2lhdGVkIHdpdGggdGhlIGdsb2JhbCByZWdpc3RyeS5cbiAgICAgICAgICBpbXBvcnROb2RlLl9fQ0VfcmVnaXN0cnkgPSBkb2N1bWVudC5fX0NFX3JlZ2lzdHJ5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGltcG9ydE5vZGUgJiYgaW1wb3J0Tm9kZS5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgaW1wb3J0Tm9kZS5fX0NFX2RvY3VtZW50TG9hZEhhbmRsZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIHRoaXMgbGluaydzIGltcG9ydCByb290IGlzIG5vdCBhdmFpbGFibGUsIGl0cyBjb250ZW50cyBjYW4ndFxuICAgICAgICAgIC8vIGJlIHdhbGtlZC4gV2FpdCBmb3IgJ2xvYWQnIGFuZCB3YWxrIGl0IHdoZW4gaXQncyByZWFkeS5cbiAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbXBvcnROb2RlID0gaW1wb3J0RWxlbS5pbXBvcnQhO1xuXG4gICAgICAgICAgICBpZiAoaW1wb3J0Tm9kZS5fX0NFX2RvY3VtZW50TG9hZEhhbmRsZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW1wb3J0Tm9kZS5fX0NFX2RvY3VtZW50TG9hZEhhbmRsZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyBDbG9uZSB0aGUgYHZpc2l0ZWRJbXBvcnRzYCBzZXQgdGhhdCB3YXMgcG9wdWxhdGVkIHN5bmMgZHVyaW5nXG4gICAgICAgICAgICAvLyB0aGUgYHBhdGNoQW5kVXBncmFkZVRyZWVgIGNhbGwgdGhhdCBjYXVzZWQgdGhpcyAnbG9hZCcgaGFuZGxlclxuICAgICAgICAgICAgLy8gdG8gYmUgYWRkZWQuIFRoZW4sIHJlbW92ZSAqdGhpcyogbGluaydzIGltcG9ydCBub2RlIHNvIHRoYXQgd2VcbiAgICAgICAgICAgIC8vIGNhbiB3YWxrIHRoYXQgaW1wb3J0IGFnYWluLCBldmVuIGlmIGl0IHdhcyBwYXJ0aWFsbHkgd2Fsa2VkXG4gICAgICAgICAgICAvLyBsYXRlciBkdXJpbmcgdGhlIHNhbWUgYHBhdGNoQW5kVXBncmFkZVRyZWVgIGNhbGwuXG4gICAgICAgICAgICBjb25zdCBjbG9uZWRWaXNpdGVkSW1wb3J0cyA9IG5ldyBTZXQ8Tm9kZT4oKTtcbiAgICAgICAgICAgIGlmICh2aXNpdGVkSW1wb3J0cykge1xuICAgICAgICAgICAgICAvLyBJRTExIGRvZXMgbm90IHN1cHBvcnQgY29uc3RydWN0aW5nIGEgc2V0IHVzaW5nIGFuIGl0ZXJhYmxlLlxuICAgICAgICAgICAgICB2aXNpdGVkSW1wb3J0cy5mb3JFYWNoKChpdGVtKSA9PiBjbG9uZWRWaXNpdGVkSW1wb3J0cy5hZGQoaXRlbSkpO1xuICAgICAgICAgICAgICBjbG9uZWRWaXNpdGVkSW1wb3J0cy5kZWxldGUoaW1wb3J0Tm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnBhdGNoQW5kVXBncmFkZVRyZWUoaW1wb3J0Tm9kZSwge1xuICAgICAgICAgICAgICB2aXNpdGVkSW1wb3J0czogY2xvbmVkVmlzaXRlZEltcG9ydHMsXG4gICAgICAgICAgICAgIHVwZ3JhZGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gYGZvckVhY2hFbGVtZW50YCBwb3B1bGF0ZXMgKGFuZCBpbnRlcm5hbGx5IGNoZWNrcyBhZ2FpbnN0KVxuICAgIC8vIGB2aXNpdGVkSW1wb3J0c2Agd2hlbiB0cmF2ZXJzaW5nIGEgbG9hZGVkIGltcG9ydC5cbiAgICB0aGlzLmZvckVhY2hFbGVtZW50KHJvb3QsIGdhdGhlckVsZW1lbnRzLCB2aXNpdGVkSW1wb3J0cyk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB1cGdyYWRlKGVsZW1lbnRzW2ldIGFzIEhUTUxFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICB1cGdyYWRlUmVhY3Rpb24oZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IHRoaXMuX2xvb2t1cEFDdXN0b21FbGVtZW50RGVmaW5pdGlvbihcbiAgICAgICAgZWxlbWVudC5vd25lckRvY3VtZW50ISxcbiAgICAgICAgZWxlbWVudC5sb2NhbE5hbWVcbiAgICAgICk7XG4gICAgICBpZiAoZGVmaW5pdGlvbikge1xuICAgICAgICB0aGlzLl91cGdyYWRlQW5FbGVtZW50KGVsZW1lbnQsIGRlZmluaXRpb24pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGU6IHVua25vd24pIHtcbiAgICAgIHRoaXMucmVwb3J0VGhlRXhjZXB0aW9uKGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAc2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2N1c3RvbS1lbGVtZW50cy5odG1sI2NvbmNlcHQtdXBncmFkZS1hbi1lbGVtZW50XG4gICAqL1xuICBwcml2YXRlIF91cGdyYWRlQW5FbGVtZW50KFxuICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgIGRlZmluaXRpb246IEN1c3RvbUVsZW1lbnREZWZpbml0aW9uXG4gICkge1xuICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IGVsZW1lbnQuX19DRV9zdGF0ZTtcbiAgICBpZiAoY3VycmVudFN0YXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkZWZpbml0aW9uLmNvbnN0cnVjdGlvblN0YWNrLnB1c2goZWxlbWVudCk7XG5cbiAgICB0cnkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IGRlZmluaXRpb24uY29uc3RydWN0b3JGdW5jdGlvbigpO1xuICAgICAgICBpZiAocmVzdWx0ICE9PSBlbGVtZW50KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ1RoZSBjdXN0b20gZWxlbWVudCBjb25zdHJ1Y3RvciBkaWQgbm90IHByb2R1Y2UgdGhlIGVsZW1lbnQgYmVpbmcgdXBncmFkZWQuJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGRlZmluaXRpb24uY29uc3RydWN0aW9uU3RhY2sucG9wKCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZWxlbWVudC5fX0NFX3N0YXRlID0gQ0VTdGF0ZS5mYWlsZWQ7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cblxuICAgIGVsZW1lbnQuX19DRV9zdGF0ZSA9IENFU3RhdGUuY3VzdG9tO1xuICAgIGVsZW1lbnQuX19DRV9kZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcblxuICAgIC8vIENoZWNrIGBoYXNBdHRyaWJ1dGVzYCBoZXJlIHRvIGF2b2lkIGl0ZXJhdGluZyB3aGVuIGl0J3Mgbm90IG5lY2Vzc2FyeS5cbiAgICBpZiAoZGVmaW5pdGlvbi5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sgJiYgZWxlbWVudC5oYXNBdHRyaWJ1dGVzKCkpIHtcbiAgICAgIGNvbnN0IG9ic2VydmVkQXR0cmlidXRlcyA9IGRlZmluaXRpb24ub2JzZXJ2ZWRBdHRyaWJ1dGVzO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYnNlcnZlZEF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IG9ic2VydmVkQXR0cmlidXRlc1tpXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soZWxlbWVudCwgbmFtZSwgbnVsbCwgdmFsdWUsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKFV0aWxpdGllcy5pc0Nvbm5lY3RlZChlbGVtZW50KSkge1xuICAgICAgdGhpcy5jb25uZWN0ZWRDYWxsYmFjayhlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjayhlbGVtZW50OiBFbGVtZW50KSB7XG4gICAgY29uc3QgZGVmaW5pdGlvbiA9IGVsZW1lbnQuX19DRV9kZWZpbml0aW9uITtcbiAgICBpZiAoZGVmaW5pdGlvbi5jb25uZWN0ZWRDYWxsYmFjaykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGVmaW5pdGlvbi5jb25uZWN0ZWRDYWxsYmFjay5jYWxsKGVsZW1lbnQpO1xuICAgICAgfSBjYXRjaCAoZTogdW5rbm93bikge1xuICAgICAgICB0aGlzLnJlcG9ydFRoZUV4Y2VwdGlvbihlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBkaXNjb25uZWN0ZWRDYWxsYmFjayhlbGVtZW50OiBFbGVtZW50KSB7XG4gICAgY29uc3QgZGVmaW5pdGlvbiA9IGVsZW1lbnQuX19DRV9kZWZpbml0aW9uITtcbiAgICBpZiAoZGVmaW5pdGlvbi5kaXNjb25uZWN0ZWRDYWxsYmFjaykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGVmaW5pdGlvbi5kaXNjb25uZWN0ZWRDYWxsYmFjay5jYWxsKGVsZW1lbnQpO1xuICAgICAgfSBjYXRjaCAoZTogdW5rbm93bikge1xuICAgICAgICB0aGlzLnJlcG9ydFRoZUV4Y2VwdGlvbihlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soXG4gICAgZWxlbWVudDogRWxlbWVudCxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgb2xkVmFsdWU/OiBzdHJpbmcgfCBudWxsLFxuICAgIG5ld1ZhbHVlPzogc3RyaW5nIHwgbnVsbCxcbiAgICBuYW1lc3BhY2U/OiBzdHJpbmcgfCBudWxsXG4gICkge1xuICAgIGNvbnN0IGRlZmluaXRpb24gPSBlbGVtZW50Ll9fQ0VfZGVmaW5pdGlvbiE7XG4gICAgaWYgKFxuICAgICAgZGVmaW5pdGlvbi5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sgJiZcbiAgICAgIGRlZmluaXRpb24ub2JzZXJ2ZWRBdHRyaWJ1dGVzLmluZGV4T2YobmFtZSkgPiAtMVxuICAgICkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGVmaW5pdGlvbi5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2suY2FsbChcbiAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgb2xkVmFsdWUsXG4gICAgICAgICAgbmV3VmFsdWUsXG4gICAgICAgICAgbmFtZXNwYWNlXG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlOiB1bmtub3duKSB7XG4gICAgICAgIHRoaXMucmVwb3J0VGhlRXhjZXB0aW9uKGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSdW5zIEhUTUwncyAnbG9vayB1cCBhIGN1c3RvbSBlbGVtZW50IGRlZmluaXRpb24nLCBleGNsdWRpbmcgdGhlIG5hbWVzcGFjZVxuICAgKiBjaGVjay5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9jdXN0b20tZWxlbWVudHMuaHRtbCNsb29rLXVwLWEtY3VzdG9tLWVsZW1lbnQtZGVmaW5pdGlvblxuICAgKi9cbiAgcHJpdmF0ZSBfbG9va3VwQUN1c3RvbUVsZW1lbnREZWZpbml0aW9uKFxuICAgIGRvYzogRG9jdW1lbnQsXG4gICAgbG9jYWxOYW1lOiBzdHJpbmdcbiAgKTogQ3VzdG9tRWxlbWVudERlZmluaXRpb24gfCB1bmRlZmluZWQge1xuICAgIC8vIFRoZSBkb2N1bWVudCBtdXN0IGJlIGFzc29jaWF0ZWQgd2l0aCBhIHJlZ2lzdHJ5LlxuICAgIGNvbnN0IHJlZ2lzdHJ5ID0gZG9jLl9fQ0VfcmVnaXN0cnk7XG4gICAgaWYgKCFyZWdpc3RyeSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFByZXZlbnQgZWxlbWVudHMgY3JlYXRlZCBpbiBkb2N1bWVudHMgd2l0aG91dCBhIGJyb3dzaW5nIGNvbnRleHQgZnJvbVxuICAgIC8vIHVwZ3JhZGluZy5cbiAgICAvL1xuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2N1c3RvbS1lbGVtZW50cy5odG1sI2xvb2stdXAtYS1jdXN0b20tZWxlbWVudC1kZWZpbml0aW9uXG4gICAgLy8gICBcIklmIGRvY3VtZW50IGRvZXMgbm90IGhhdmUgYSBicm93c2luZyBjb250ZXh0LCByZXR1cm4gbnVsbC5cIlxuICAgIC8vXG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd2luZG93LW9iamVjdC5odG1sI2RvbS1kb2N1bWVudC1kZWZhdWx0dmlld1xuICAgIC8vICAgXCJUaGUgZGVmYXVsdFZpZXcgSURMIGF0dHJpYnV0ZSBvZiB0aGUgRG9jdW1lbnQgaW50ZXJmYWNlLCBvbiBnZXR0aW5nLFxuICAgIC8vICAgbXVzdCByZXR1cm4gdGhpcyBEb2N1bWVudCdzIGJyb3dzaW5nIGNvbnRleHQncyBXaW5kb3dQcm94eSBvYmplY3QsIGlmXG4gICAgLy8gICB0aGlzIERvY3VtZW50IGhhcyBhbiBhc3NvY2lhdGVkIGJyb3dzaW5nIGNvbnRleHQsIG9yIG51bGwgb3RoZXJ3aXNlLlwiXG4gICAgaWYgKCFkb2MuZGVmYXVsdFZpZXcgJiYgIWRvYy5fX0NFX2lzSW1wb3J0RG9jdW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVnaXN0cnkuaW50ZXJuYWxfbG9jYWxOYW1lVG9EZWZpbml0aW9uKGxvY2FsTmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogUnVucyB0aGUgRE9NJ3MgJ2NyZWF0ZSBhbiBlbGVtZW50Jy4gSWYgbmFtZXNwYWNlIGlzIG5vdCBudWxsLCB0aGVuIHRoZVxuICAgKiBuYXRpdmUgYGNyZWF0ZUVsZW1lbnROU2AgaXMgdXNlZC4gT3RoZXJ3aXNlLCBgY3JlYXRlRWxlbWVudGAgaXMgdXNlZC5cbiAgICpcbiAgICogTm90ZSwgdGhlIHRlbXBsYXRlIHBvbHlmaWxsIG9ubHkgd3JhcHMgYGNyZWF0ZUVsZW1lbnRgLCBwcmV2ZW50aW5nIHRoaXNcbiAgICogZnVuY3Rpb24gZnJvbSB1c2luZyBgY3JlYXRlRWxlbWVudE5TYCBpbiBhbGwgY2FzZXMuXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LWNyZWF0ZS1lbGVtZW50XG4gICAqL1xuICBjcmVhdGVBbkVsZW1lbnQoXG4gICAgZG9jOiBEb2N1bWVudCxcbiAgICBsb2NhbE5hbWU6IHN0cmluZyxcbiAgICBuYW1lc3BhY2U6IHN0cmluZyB8IG51bGxcbiAgKTogRWxlbWVudCB7XG4gICAgY29uc3QgcmVnaXN0cnkgPSBkb2MuX19DRV9yZWdpc3RyeTtcbiAgICAvLyBPbmx5IGNyZWF0ZSBjdXN0b20gZWxlbWVudHMgaWYgdGhlIGRvY3VtZW50IGlzIGFzc29jaWF0ZWQgd2l0aCBhXG4gICAgLy8gcmVnaXN0cnkuXG4gICAgaWYgKHJlZ2lzdHJ5ICYmIChuYW1lc3BhY2UgPT09IG51bGwgfHwgbmFtZXNwYWNlID09PSBOU19IVE1MKSkge1xuICAgICAgY29uc3QgZGVmaW5pdGlvbiA9ICgocmVnaXN0cnkgYXMgdW5rbm93bikgYXMgQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5KS5pbnRlcm5hbF9sb2NhbE5hbWVUb0RlZmluaXRpb24oXG4gICAgICAgIGxvY2FsTmFtZVxuICAgICAgKTtcbiAgICAgIGlmIChkZWZpbml0aW9uKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IGRlZmluaXRpb24uY29uc3RydWN0b3JGdW5jdGlvbigpO1xuXG4gICAgICAgICAgLy8gVGhlc2UgY29uZm9ybWFuY2UgY2hlY2tzIGNhbid0IGJlIHBlcmZvcm1lZCB3aGVuIHRoZSB1c2VyIGNhbGxzXG4gICAgICAgICAgLy8gdGhlIGVsZW1lbnQncyBjb25zdHJ1Y3RvciB0aGVtc2VsdmVzLiBIb3dldmVyLCB0aGlzIGFsc28gdHJ1ZSBpblxuICAgICAgICAgIC8vIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMuXG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICByZXN1bHQuX19DRV9zdGF0ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICByZXN1bHQuX19DRV9kZWZpbml0aW9uID09PSB1bmRlZmluZWRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYEZhaWxlZCB0byBjb25zdHJ1Y3QgJyR7bG9jYWxOYW1lfSc6IGAgK1xuICAgICAgICAgICAgICAgICdUaGUgcmV0dXJuZWQgdmFsdWUgd2FzIG5vdCBjb25zdHJ1Y3RlZCB3aXRoIHRoZSBIVE1MRWxlbWVudCAnICtcbiAgICAgICAgICAgICAgICAnY29uc3RydWN0b3IuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmVzdWx0Lm5hbWVzcGFjZVVSSSAhPT0gTlNfSFRNTCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgRmFpbGVkIHRvIGNvbnN0cnVjdCAnJHtsb2NhbE5hbWV9JzogYCArXG4gICAgICAgICAgICAgICAgXCJUaGUgY29uc3RydWN0ZWQgZWxlbWVudCdzIG5hbWVzcGFjZSBtdXN0IGJlIHRoZSBIVE1MIFwiICtcbiAgICAgICAgICAgICAgICAnbmFtZXNwYWNlLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBFcnJvcnMgc2hvdWxkIGJlIERPTUV4Y2VwdGlvbnMgYnV0IERPTUV4Y2VwdGlvblxuICAgICAgICAgIC8vIGlzbid0IGNvbnN0cnVjdGlibGUgaW4gYWxsIGJyb3dzZXJzLlxuXG4gICAgICAgICAgaWYgKHJlc3VsdC5oYXNBdHRyaWJ1dGVzKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYEZhaWxlZCB0byBjb25zdHJ1Y3QgJyR7bG9jYWxOYW1lfSc6IGAgK1xuICAgICAgICAgICAgICAgICdUaGUgY29uc3RydWN0ZWQgZWxlbWVudCBtdXN0IG5vdCBoYXZlIGFueSBhdHRyaWJ1dGVzLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU2hhZHlET00gZG9lc24ndCB3cmFwIGAjaGFzQ2hpbGROb2Rlc2AsIHNvIHdlIGNoZWNrIGAjZmlyc3RDaGlsZGBcbiAgICAgICAgICAvLyBpbnN0ZWFkLlxuICAgICAgICAgIGlmIChyZXN1bHQuZmlyc3RDaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgRmFpbGVkIHRvIGNvbnN0cnVjdCAnJHtsb2NhbE5hbWV9JzogYCArXG4gICAgICAgICAgICAgICAgJ1RoZSBjb25zdHJ1Y3RlZCBlbGVtZW50IG11c3Qgbm90IGhhdmUgYW55IGNoaWxkcmVuLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlc3VsdC5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGBGYWlsZWQgdG8gY29uc3RydWN0ICcke2xvY2FsTmFtZX0nOiBgICtcbiAgICAgICAgICAgICAgICAnVGhlIGNvbnN0cnVjdGVkIGVsZW1lbnQgbXVzdCBub3QgaGF2ZSBhIHBhcmVudCBub2RlLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlc3VsdC5vd25lckRvY3VtZW50ICE9PSBkb2MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYEZhaWxlZCB0byBjb25zdHJ1Y3QgJyR7bG9jYWxOYW1lfSc6IGAgK1xuICAgICAgICAgICAgICAgIFwiVGhlIGNvbnN0cnVjdGVkIGVsZW1lbnQncyBvd25lciBkb2N1bWVudCBpcyBpbmNvcnJlY3QuXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlc3VsdC5sb2NhbE5hbWUgIT09IGxvY2FsTmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgRmFpbGVkIHRvIGNvbnN0cnVjdCAnJHtsb2NhbE5hbWV9JzogYCArXG4gICAgICAgICAgICAgICAgXCJUaGUgY29uc3RydWN0ZWQgZWxlbWVudCdzIGxvY2FsIG5hbWUgaXMgaW5jb3JyZWN0LlwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0gY2F0Y2ggKGU6IHVua25vd24pIHtcbiAgICAgICAgICB0aGlzLnJlcG9ydFRoZUV4Y2VwdGlvbihlKTtcblxuICAgICAgICAgIC8vIFdoZW4gY29uc3RydWN0aW9uIGZhaWxzLCBhIG5ldyBIVE1MVW5rbm93bkVsZW1lbnQgaXMgcHJvZHVjZWQuXG4gICAgICAgICAgLy8gSG93ZXZlciwgdGhlcmUncyBubyBkaXJlY3Qgd2F5IHRvIGNyZWF0ZSBvbmUsIHNvIHdlIGNyZWF0ZSBhXG4gICAgICAgICAgLy8gcmVndWxhciBIVE1MRWxlbWVudCBhbmQgcmVwbGFjZSBpdHMgcHJvdG90eXBlLlxuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9XG4gICAgICAgICAgICBuYW1lc3BhY2UgPT09IG51bGxcbiAgICAgICAgICAgICAgPyBOYXRpdmUuRG9jdW1lbnRfY3JlYXRlRWxlbWVudC5jYWxsKGRvYywgbG9jYWxOYW1lKVxuICAgICAgICAgICAgICA6IE5hdGl2ZS5Eb2N1bWVudF9jcmVhdGVFbGVtZW50TlMuY2FsbChkb2MsIG5hbWVzcGFjZSwgbG9jYWxOYW1lKTtcbiAgICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YocmVzdWx0LCBIVE1MVW5rbm93bkVsZW1lbnQucHJvdG90eXBlKTtcbiAgICAgICAgICByZXN1bHQuX19DRV9zdGF0ZSA9IENFU3RhdGUuZmFpbGVkO1xuICAgICAgICAgIHJlc3VsdC5fX0NFX2RlZmluaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgdGhpcy5wYXRjaEVsZW1lbnQocmVzdWx0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID1cbiAgICAgIG5hbWVzcGFjZSA9PT0gbnVsbFxuICAgICAgICA/IE5hdGl2ZS5Eb2N1bWVudF9jcmVhdGVFbGVtZW50LmNhbGwoZG9jLCBsb2NhbE5hbWUpXG4gICAgICAgIDogTmF0aXZlLkRvY3VtZW50X2NyZWF0ZUVsZW1lbnROUy5jYWxsKGRvYywgbmFtZXNwYWNlLCBsb2NhbE5hbWUpO1xuICAgIHRoaXMucGF0Y2hFbGVtZW50KHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSdW5zIHRoZSBET00ncyAncmVwb3J0IHRoZSBleGNlcHRpb24nIGFsZ29yaXRobS5cbiAgICpcbiAgICogQHNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS93ZWJhcHBhcGlzLmh0bWwjcmVwb3J0LXRoZS1leGNlcHRpb25cbiAgICovXG4gIHJlcG9ydFRoZUV4Y2VwdGlvbihhcmc6IHVua25vd24pIHtcbiAgICBpbnRlcmZhY2UgRXh0ZW5kZWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICAgIC8vIE5vbi1zdGFuZGFyZCBTYWZhcmkgcHJvcGVydGllcy5cbiAgICAgIHNvdXJjZVVSTD86IHN0cmluZztcbiAgICAgIGxpbmU/OiBudW1iZXI7XG4gICAgICBjb2x1bW4/OiBudW1iZXI7XG5cbiAgICAgIC8vIE5vbi1zdGFuZGFyZCBGaXJlZm94IHByb3BlcnRpZXMuXG4gICAgICBmaWxlTmFtZT86IHN0cmluZztcbiAgICAgIGxpbmVOdW1iZXI/OiBudW1iZXI7XG4gICAgICBjb2x1bW5OdW1iZXI/OiBudW1iZXI7XG4gICAgfVxuXG4gICAgbGV0IG1lc3NhZ2UgPSAnJztcbiAgICBsZXQgZmlsZW5hbWUgPSAnJztcbiAgICBsZXQgbGluZW5vID0gMDtcbiAgICBsZXQgY29sbm8gPSAwO1xuXG4gICAgaWYgKGFyZyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICBjb25zdCBlcnJvciA9IGFyZyBhcyBFeHRlbmRlZEVycm9yO1xuICAgICAgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG4gICAgICBmaWxlbmFtZSA9IGVycm9yLnNvdXJjZVVSTCB8fCBlcnJvci5maWxlTmFtZSB8fCAnJztcbiAgICAgIGxpbmVubyA9IGVycm9yLmxpbmUgfHwgZXJyb3IubGluZU51bWJlciB8fCAwO1xuICAgICAgY29sbm8gPSBlcnJvci5jb2x1bW4gfHwgZXJyb3IuY29sdW1uTnVtYmVyIHx8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lc3NhZ2UgPSBgVW5jYXVnaHQgJHtTdHJpbmcoYXJnKX1gO1xuICAgIH1cblxuICAgIGxldCBldmVudDogRXJyb3JFdmVudCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoRXJyb3JFdmVudC5wcm90b3R5cGUuaW5pdEVycm9yRXZlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXZlbnQgPSBuZXcgRXJyb3JFdmVudCgnZXJyb3InLCB7XG4gICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIGZpbGVuYW1lLFxuICAgICAgICBsaW5lbm8sXG4gICAgICAgIGNvbG5vLFxuICAgICAgICBlcnJvcjogYXJnLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0Vycm9yRXZlbnQnKSBhcyBFcnJvckV2ZW50O1xuICAgICAgLy8gaW5pdEVycm9yRXZlbnQodHlwZSwgYnViYmxlcywgY2FuY2VsYWJsZSwgbWVzc2FnZSwgZmlsZW5hbWUsIGxpbmUpXG4gICAgICBldmVudC5pbml0RXJyb3JFdmVudCEoJ2Vycm9yJywgZmFsc2UsIHRydWUsIG1lc3NhZ2UsIGZpbGVuYW1lLCBsaW5lbm8pO1xuICAgICAgLy8gSGFjayBmb3IgSUUsIHdoZXJlIEVycm9yRXZlbnQjcHJldmVudERlZmF1bHQgZG9lcyBub3Qgc2V0XG4gICAgICAvLyAjZGVmYXVsdFByZXZlbnRlZCB0byB0cnVlLlxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbiAodGhpczogRXJyb3JFdmVudCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2RlZmF1bHRQcmV2ZW50ZWQnLCB7XG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24gKHRoaXM6IEVycm9yRXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQuZXJyb3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV2ZW50LCAnZXJyb3InLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZztcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIC8vIEluICdyZXBvcnQgdGhlIGV4Y2VwdGlvbicsIFVBcyBtYXkgb3B0aW9uYWxseSB3cml0ZSBlcnJvcnMgdG8gdGhlXG4gICAgICAvLyBjb25zb2xlIGlmIHRoZWlyIGFzc29jaWF0ZWQgRXJyb3JFdmVudCBpc24ndCBoYW5kbGVkIGR1cmluZyBkaXNwYXRjaFxuICAgICAgLy8gKGluZGljYXRlZCBieSBjYWxsaW5nIGBwcmV2ZW50RGVmYXVsdGApLiBJbiBwcmFjdGljZSwgdGhlc2UgZXJyb3JzIGFyZVxuICAgICAgLy8gYWx3YXlzIGRpc3BsYXllZC5cbiAgICAgIGNvbnNvbGUuZXJyb3IoYXJnKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kXG4gKiBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5XG4gKiBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5XG4gKiBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQXG4gKiByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuaW1wb3J0IEN1c3RvbUVsZW1lbnRJbnRlcm5hbHMgZnJvbSAnLi9DdXN0b21FbGVtZW50SW50ZXJuYWxzLmpzJztcbmltcG9ydCBDdXN0b21FbGVtZW50UmVnaXN0cnkgZnJvbSAnLi9DdXN0b21FbGVtZW50UmVnaXN0cnkuanMnO1xuaW1wb3J0IFBhdGNoRG9jdW1lbnQgZnJvbSAnLi9QYXRjaC9Eb2N1bWVudC5qcyc7XG5pbXBvcnQgUGF0Y2hEb2N1bWVudEZyYWdtZW50IGZyb20gJy4vUGF0Y2gvRG9jdW1lbnRGcmFnbWVudC5qcyc7XG5pbXBvcnQgUGF0Y2hFbGVtZW50IGZyb20gJy4vUGF0Y2gvRWxlbWVudC5qcyc7XG5pbXBvcnQgUGF0Y2hIVE1MRWxlbWVudCBmcm9tICcuL1BhdGNoL0hUTUxFbGVtZW50LmpzJztcbmltcG9ydCBQYXRjaE5vZGUgZnJvbSAnLi9QYXRjaC9Ob2RlLmpzJztcblxuY29uc3QgcHJpb3JDdXN0b21FbGVtZW50cyA9IHdpbmRvd1snY3VzdG9tRWxlbWVudHMnXTtcblxuZnVuY3Rpb24gaW5zdGFsbFBvbHlmaWxsKCkge1xuICBjb25zdCBub0RvY3VtZW50Q29uc3RydWN0aW9uT2JzZXJ2ZXIgPSAhIXByaW9yQ3VzdG9tRWxlbWVudHM/LltcbiAgICAnbm9Eb2N1bWVudENvbnN0cnVjdGlvbk9ic2VydmVyJ1xuICBdO1xuICBjb25zdCBzaGFkeURvbUZhc3RXYWxrID0gISFwcmlvckN1c3RvbUVsZW1lbnRzPy5bJ3NoYWR5RG9tRmFzdFdhbGsnXTtcblxuICBjb25zdCBpbnRlcm5hbHMgPSBuZXcgQ3VzdG9tRWxlbWVudEludGVybmFscyh7XG4gICAgbm9Eb2N1bWVudENvbnN0cnVjdGlvbk9ic2VydmVyLFxuICAgIHNoYWR5RG9tRmFzdFdhbGssXG4gIH0pO1xuXG4gIFBhdGNoSFRNTEVsZW1lbnQoaW50ZXJuYWxzKTtcbiAgUGF0Y2hEb2N1bWVudChpbnRlcm5hbHMpO1xuICBQYXRjaERvY3VtZW50RnJhZ21lbnQoaW50ZXJuYWxzKTtcbiAgUGF0Y2hOb2RlKGludGVybmFscyk7XG4gIFBhdGNoRWxlbWVudChpbnRlcm5hbHMpO1xuXG4gIHdpbmRvd1tcbiAgICAnQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5J1xuICBdID0gKEN1c3RvbUVsZW1lbnRSZWdpc3RyeSBhcyB1bmtub3duKSBhcyB0eXBlb2Ygd2luZG93WydDdXN0b21FbGVtZW50UmVnaXN0cnknXTtcblxuICBjb25zdCBjdXN0b21FbGVtZW50cyA9IG5ldyBDdXN0b21FbGVtZW50UmVnaXN0cnkoaW50ZXJuYWxzKTtcblxuICAvLyBUaGUgbWFpbiBkb2N1bWVudCBpcyBhc3NvY2lhdGVkIHdpdGggdGhlIGdsb2JhbCByZWdpc3RyeS5cbiAgZG9jdW1lbnQuX19DRV9yZWdpc3RyeSA9IGN1c3RvbUVsZW1lbnRzO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdjdXN0b21FbGVtZW50cycsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogY3VzdG9tRWxlbWVudHMsXG4gIH0pO1xufVxuXG5pZiAoXG4gICFwcmlvckN1c3RvbUVsZW1lbnRzIHx8XG4gIHByaW9yQ3VzdG9tRWxlbWVudHNbJ2ZvcmNlUG9seWZpbGwnXSB8fFxuICB0eXBlb2YgcHJpb3JDdXN0b21FbGVtZW50c1snZGVmaW5lJ10gIT0gJ2Z1bmN0aW9uJyB8fFxuICB0eXBlb2YgcHJpb3JDdXN0b21FbGVtZW50c1snZ2V0J10gIT0gJ2Z1bmN0aW9uJ1xuKSB7XG4gIGluc3RhbGxQb2x5ZmlsbCgpO1xufVxuXG4vLyBUaGlzIGlzIE5PVCBwdWJsaWMgQVBJIGFuZCBpcyBvbmx5IG1lYW50IHRvIHdvcmsgYXJvdW5kIGEgR0MgYnVnIGluIG9sZGVyXG4vLyB2ZXJzaW9ucyBvZiBTYWZhcmkgdGhhdCByYW5kb21seSByZW1vdmVzIHRoZSBwb2x5ZmlsbCBkdXJpbmcgdGVzdHMuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuKHdpbmRvdyBhcyBhbnkpWydfX0NFX2luc3RhbGxQb2x5ZmlsbCddID0gaW5zdGFsbFBvbHlmaWxsO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmRcbiAqIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXlcbiAqIGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0IENvZGUgZGlzdHJpYnV0ZWQgYnlcbiAqIEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzbyBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVBcbiAqIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG5leHBvcnQgY29uc3QgQ3VzdG9tRWxlbWVudFN0YXRlID0ge1xuICBjdXN0b206IDEsXG4gIGZhaWxlZDogMixcbn0gYXMgY29uc3Q7XG5leHBvcnQgdHlwZSBDdXN0b21FbGVtZW50U3RhdGUgPVxuICB8IHR5cGVvZiBDdXN0b21FbGVtZW50U3RhdGUuY3VzdG9tXG4gIHwgdHlwZW9mIEN1c3RvbUVsZW1lbnRTdGF0ZS5mYWlsZWQ7XG5cbmV4cG9ydCBkZWZhdWx0IEN1c3RvbUVsZW1lbnRTdGF0ZTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kXG4gKiBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5XG4gKiBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5XG4gKiBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQXG4gKiByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVmZXJyZWQ8VD4ge1xuICBwcml2YXRlIF92YWx1ZTogVCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICBwcml2YXRlIF9yZXNvbHZlITogKHZhbDogVCkgPT4gdm9pZDtcblxuICBwcml2YXRlIHJlYWRvbmx5IF9wcm9taXNlOiBQcm9taXNlPFQ+O1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIHRoaXMuX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pO1xuICB9XG5cbiAgcmVzb2x2ZSh2YWx1ZTogVCkge1xuICAgIGlmICh0aGlzLl92YWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBbHJlYWR5IHJlc29sdmVkLicpO1xuICAgIH1cblxuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5fcmVzb2x2ZSh2YWx1ZSk7XG4gIH1cblxuICB0b1Byb21pc2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb21pc2U7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kXG4gKiBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5XG4gKiBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5XG4gKiBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQXG4gKiByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuaW1wb3J0IEN1c3RvbUVsZW1lbnRJbnRlcm5hbHMgZnJvbSAnLi9DdXN0b21FbGVtZW50SW50ZXJuYWxzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG9jdW1lbnRDb25zdHJ1Y3Rpb25PYnNlcnZlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgX2ludGVybmFsczogQ3VzdG9tRWxlbWVudEludGVybmFscztcbiAgcHJpdmF0ZSByZWFkb25seSBfZG9jdW1lbnQ6IERvY3VtZW50O1xuICBwcml2YXRlIF9vYnNlcnZlcjogTXV0YXRpb25PYnNlcnZlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgY29uc3RydWN0b3IoaW50ZXJuYWxzOiBDdXN0b21FbGVtZW50SW50ZXJuYWxzLCBkb2M6IERvY3VtZW50KSB7XG4gICAgdGhpcy5faW50ZXJuYWxzID0gaW50ZXJuYWxzO1xuICAgIHRoaXMuX2RvY3VtZW50ID0gZG9jO1xuXG4gICAgLy8gU2ltdWxhdGUgdHJlZSBjb25zdHJ1Y3Rpb24gZm9yIGFsbCBjdXJyZW50bHkgYWNjZXNzaWJsZSBub2RlcyBpbiB0aGVcbiAgICAvLyBkb2N1bWVudC5cbiAgICB0aGlzLl9pbnRlcm5hbHMucGF0Y2hBbmRVcGdyYWRlVHJlZSh0aGlzLl9kb2N1bWVudCk7XG5cbiAgICBpZiAodGhpcy5fZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICB0aGlzLl9vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMuX2hhbmRsZU11dGF0aW9ucy5iaW5kKHRoaXMpKTtcblxuICAgICAgLy8gTm9kZXMgY3JlYXRlZCBieSB0aGUgcGFyc2VyIGFyZSBnaXZlbiB0byB0aGUgb2JzZXJ2ZXIgKmJlZm9yZSogdGhlIG5leHRcbiAgICAgIC8vIHRhc2sgcnVucy4gSW5saW5lIHNjcmlwdHMgYXJlIHJ1biBpbiBhIG5ldyB0YXNrLiBUaGlzIG1lYW5zIHRoYXQgdGhlXG4gICAgICAvLyBvYnNlcnZlciB3aWxsIGJlIGFibGUgdG8gaGFuZGxlIHRoZSBuZXdseSBwYXJzZWQgbm9kZXMgYmVmb3JlIHRoZVxuICAgICAgLy8gaW5saW5lIHNjcmlwdCBpcyBydW4uXG4gICAgICB0aGlzLl9vYnNlcnZlci5vYnNlcnZlKHRoaXMuX2RvY3VtZW50LCB7XG4gICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgc3VidHJlZTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGRpc2Nvbm5lY3QoKSB7XG4gICAgaWYgKHRoaXMuX29ic2VydmVyKSB7XG4gICAgICB0aGlzLl9vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfaGFuZGxlTXV0YXRpb25zKG11dGF0aW9uczogUmVhZG9ubHlBcnJheTxNdXRhdGlvblJlY29yZD4pIHtcbiAgICAvLyBPbmNlIHRoZSBkb2N1bWVudCdzIGByZWFkeVN0YXRlYCBpcyAnaW50ZXJhY3RpdmUnIG9yICdjb21wbGV0ZScsIGFsbCBuZXdcbiAgICAvLyBub2RlcyBjcmVhdGVkIHdpdGhpbiB0aGF0IGRvY3VtZW50IHdpbGwgYmUgdGhlIHJlc3VsdCBvZiBzY3JpcHQgYW5kXG4gICAgLy8gc2hvdWxkIGJlIGhhbmRsZWQgYnkgcGF0Y2hpbmcuXG4gICAgY29uc3QgcmVhZHlTdGF0ZSA9IHRoaXMuX2RvY3VtZW50LnJlYWR5U3RhdGU7XG4gICAgaWYgKHJlYWR5U3RhdGUgPT09ICdpbnRlcmFjdGl2ZScgfHwgcmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtdXRhdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGFkZGVkTm9kZXMgPSBtdXRhdGlvbnNbaV0uYWRkZWROb2RlcztcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYWRkZWROb2Rlcy5sZW5ndGg7IGorKykge1xuICAgICAgICBjb25zdCBub2RlID0gYWRkZWROb2Rlc1tqXTtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxzLnBhdGNoQW5kVXBncmFkZVRyZWUobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZFxuICogYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heVxuICogYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHQgQ29kZSBkaXN0cmlidXRlZCBieVxuICogR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUFxuICogcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5cbmltcG9ydCB7QWxyZWFkeUNvbnN0cnVjdGVkTWFya2VyVHlwZX0gZnJvbSAnLi9BbHJlYWR5Q29uc3RydWN0ZWRNYXJrZXIuanMnO1xuaW1wb3J0IEN1c3RvbUVsZW1lbnRJbnRlcm5hbHMgZnJvbSAnLi9DdXN0b21FbGVtZW50SW50ZXJuYWxzLmpzJztcbmltcG9ydCBEZWZlcnJlZCBmcm9tICcuL0RlZmVycmVkLmpzJztcbmltcG9ydCBEb2N1bWVudENvbnN0cnVjdGlvbk9ic2VydmVyIGZyb20gJy4vRG9jdW1lbnRDb25zdHJ1Y3Rpb25PYnNlcnZlci5qcyc7XG5pbXBvcnQgKiBhcyBVdGlsaXRpZXMgZnJvbSAnLi9VdGlsaXRpZXMuanMnO1xuXG5pbnRlcmZhY2UgRWxlbWVudENvbnN0cnVjdG9yIHtcbiAgbmV3ICgpOiBIVE1MRWxlbWVudDtcbiAgb2JzZXJ2ZWRBdHRyaWJ1dGVzPzogQXJyYXk8c3RyaW5nPjtcbn1cbnR5cGUgQ29uc3RydWN0b3JHZXR0ZXIgPSAoKSA9PiBFbGVtZW50Q29uc3RydWN0b3I7XG5cbi8qKlxuICogQHVucmVzdHJpY3RlZFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDdXN0b21FbGVtZW50UmVnaXN0cnkge1xuICBwcml2YXRlIHJlYWRvbmx5IF9sb2NhbE5hbWVUb0NvbnN0cnVjdG9yR2V0dGVyID0gbmV3IE1hcDxcbiAgICBzdHJpbmcsXG4gICAgQ29uc3RydWN0b3JHZXR0ZXJcbiAgPigpO1xuICBwcml2YXRlIHJlYWRvbmx5IF9sb2NhbE5hbWVUb0RlZmluaXRpb24gPSBuZXcgTWFwPFxuICAgIHN0cmluZyxcbiAgICBDdXN0b21FbGVtZW50RGVmaW5pdGlvblxuICA+KCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgX2NvbnN0cnVjdG9yVG9EZWZpbml0aW9uID0gbmV3IE1hcDxcbiAgICBFbGVtZW50Q29uc3RydWN0b3IsXG4gICAgQ3VzdG9tRWxlbWVudERlZmluaXRpb25cbiAgPigpO1xuICBwcml2YXRlIF9lbGVtZW50RGVmaW5pdGlvbklzUnVubmluZyA9IGZhbHNlO1xuICBwcml2YXRlIHJlYWRvbmx5IF9pbnRlcm5hbHM6IEN1c3RvbUVsZW1lbnRJbnRlcm5hbHM7XG4gIHByaXZhdGUgcmVhZG9ubHkgX3doZW5EZWZpbmVkRGVmZXJyZWQgPSBuZXcgTWFwPFxuICAgIHN0cmluZyxcbiAgICBEZWZlcnJlZDx1bmRlZmluZWQ+XG4gID4oKTtcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgZmx1c2ggY2FsbGJhY2sgdHJpZ2dlcnMgdGhlIGRvY3VtZW50IHdhbGsgc3luY2hyb25vdXNseS5cbiAgICovXG4gIHByaXZhdGUgX2ZsdXNoQ2FsbGJhY2s6IChmbjogKCkgPT4gdm9pZCkgPT4gdm9pZCA9IChmbikgPT4gZm4oKTtcbiAgcHJpdmF0ZSBfZmx1c2hQZW5kaW5nID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEEgbWFwIGZyb20gYGxvY2FsTmFtZWBzIG9mIGRlZmluaXRpb25zIHRoYXQgd2VyZSBkZWZpbmVkICphZnRlciogdGhlXG4gICAqIGxhc3QgZmx1c2ggdG8gdW51cGdyYWRlZCBlbGVtZW50cyBtYXRjaGluZyB0aGF0IGRlZmluaXRpb24sIGluIGRvY3VtZW50XG4gICAqIG9yZGVyLiBFbnRyaWVzIGFyZSBhZGRlZCB0byB0aGlzIG1hcCB3aGVuIGEgZGVmaW5pdGlvbiBpcyByZWdpc3RlcmVkLFxuICAgKiBidXQgdGhlIGxpc3Qgb2YgZWxlbWVudHMgaXMgb25seSBwb3B1bGF0ZWQgZHVyaW5nIGEgZmx1c2ggYWZ0ZXIgd2hpY2hcbiAgICogYWxsIG9mIHRoZSBlbnRyaWVzIGFyZSByZW1vdmVkLiBETyBOT1QgZWRpdCBvdXRzaWRlIG9mIGAjX2ZsdXNoYC5cbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgX3VuZmx1c2hlZExvY2FsTmFtZXM6IEFycmF5PHN0cmluZz4gPSBbXTtcblxuICBwcml2YXRlIHJlYWRvbmx5IF9kb2N1bWVudENvbnN0cnVjdGlvbk9ic2VydmVyOlxuICAgIHwgRG9jdW1lbnRDb25zdHJ1Y3Rpb25PYnNlcnZlclxuICAgIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKGludGVybmFsczogQ3VzdG9tRWxlbWVudEludGVybmFscykge1xuICAgIHRoaXMuX2ludGVybmFscyA9IGludGVybmFscztcbiAgICB0aGlzLl9kb2N1bWVudENvbnN0cnVjdGlvbk9ic2VydmVyID0gaW50ZXJuYWxzLnVzZURvY3VtZW50Q29uc3RydWN0aW9uT2JzZXJ2ZXJcbiAgICAgID8gbmV3IERvY3VtZW50Q29uc3RydWN0aW9uT2JzZXJ2ZXIoaW50ZXJuYWxzLCBkb2N1bWVudClcbiAgICAgIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcG9seWZpbGxEZWZpbmVMYXp5KGxvY2FsTmFtZTogc3RyaW5nLCBjb25zdHJ1Y3RvckdldHRlcjogQ29uc3RydWN0b3JHZXR0ZXIpIHtcbiAgICBpZiAoIShjb25zdHJ1Y3RvckdldHRlciBpbnN0YW5jZW9mIEZ1bmN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ0N1c3RvbSBlbGVtZW50IGNvbnN0cnVjdG9yIGdldHRlcnMgbXVzdCBiZSBmdW5jdGlvbnMuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5pbnRlcm5hbF9hc3NlcnRDYW5EZWZpbmVMb2NhbE5hbWUobG9jYWxOYW1lKTtcbiAgICB0aGlzLl9sb2NhbE5hbWVUb0NvbnN0cnVjdG9yR2V0dGVyLnNldChsb2NhbE5hbWUsIGNvbnN0cnVjdG9yR2V0dGVyKTtcbiAgICB0aGlzLl91bmZsdXNoZWRMb2NhbE5hbWVzLnB1c2gobG9jYWxOYW1lKTtcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGNhbGxlZCB0aGUgZmx1c2ggY2FsbGJhY2sgYW5kIGl0IGhhc24ndCBjYWxsZWQgYmFja1xuICAgIC8vIHlldCwgZG9uJ3QgY2FsbCBpdCBhZ2Fpbi5cbiAgICBpZiAoIXRoaXMuX2ZsdXNoUGVuZGluZykge1xuICAgICAgdGhpcy5fZmx1c2hQZW5kaW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2ZsdXNoQ2FsbGJhY2soKCkgPT4gdGhpcy5fZmx1c2goKSk7XG4gICAgfVxuICB9XG5cbiAgZGVmaW5lKGxvY2FsTmFtZTogc3RyaW5nLCBjb25zdHJ1Y3RvcjogRnVuY3Rpb24pIHtcbiAgICBpZiAoIShjb25zdHJ1Y3RvciBpbnN0YW5jZW9mIEZ1bmN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ3VzdG9tIGVsZW1lbnQgY29uc3RydWN0b3JzIG11c3QgYmUgZnVuY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRoaXMuaW50ZXJuYWxfYXNzZXJ0Q2FuRGVmaW5lTG9jYWxOYW1lKGxvY2FsTmFtZSk7XG5cbiAgICB0aGlzLmludGVybmFsX3JlaWZ5RGVmaW5pdGlvbihsb2NhbE5hbWUsIGNvbnN0cnVjdG9yIGFzIEVsZW1lbnRDb25zdHJ1Y3Rvcik7XG4gICAgdGhpcy5fdW5mbHVzaGVkTG9jYWxOYW1lcy5wdXNoKGxvY2FsTmFtZSk7XG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSBjYWxsZWQgdGhlIGZsdXNoIGNhbGxiYWNrIGFuZCBpdCBoYXNuJ3QgY2FsbGVkIGJhY2tcbiAgICAvLyB5ZXQsIGRvbid0IGNhbGwgaXQgYWdhaW4uXG4gICAgaWYgKCF0aGlzLl9mbHVzaFBlbmRpbmcpIHtcbiAgICAgIHRoaXMuX2ZsdXNoUGVuZGluZyA9IHRydWU7XG4gICAgICB0aGlzLl9mbHVzaENhbGxiYWNrKCgpID0+IHRoaXMuX2ZsdXNoKCkpO1xuICAgIH1cbiAgfVxuXG4gIGludGVybmFsX2Fzc2VydENhbkRlZmluZUxvY2FsTmFtZShsb2NhbE5hbWU6IHN0cmluZykge1xuICAgIGlmICghVXRpbGl0aWVzLmlzVmFsaWRDdXN0b21FbGVtZW50TmFtZShsb2NhbE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYFRoZSBlbGVtZW50IG5hbWUgJyR7bG9jYWxOYW1lfScgaXMgbm90IHZhbGlkLmApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmludGVybmFsX2xvY2FsTmFtZVRvRGVmaW5pdGlvbihsb2NhbE5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBBIGN1c3RvbSBlbGVtZW50IHdpdGggbmFtZSBgICtcbiAgICAgICAgICBgJyR7bG9jYWxOYW1lfScgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkLmBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2VsZW1lbnREZWZpbml0aW9uSXNSdW5uaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgY3VzdG9tIGVsZW1lbnQgaXMgYWxyZWFkeSBiZWluZyBkZWZpbmVkLicpO1xuICAgIH1cbiAgfVxuXG4gIGludGVybmFsX3JlaWZ5RGVmaW5pdGlvbihsb2NhbE5hbWU6IHN0cmluZywgY29uc3RydWN0b3I6IEVsZW1lbnRDb25zdHJ1Y3Rvcikge1xuICAgIHRoaXMuX2VsZW1lbnREZWZpbml0aW9uSXNSdW5uaW5nID0gdHJ1ZTtcblxuICAgIGxldCBjb25uZWN0ZWRDYWxsYmFjazogQ3VzdG9tRWxlbWVudERlZmluaXRpb25bJ2Nvbm5lY3RlZENhbGxiYWNrJ107XG4gICAgbGV0IGRpc2Nvbm5lY3RlZENhbGxiYWNrOiBDdXN0b21FbGVtZW50RGVmaW5pdGlvblsnZGlzY29ubmVjdGVkQ2FsbGJhY2snXTtcbiAgICBsZXQgYWRvcHRlZENhbGxiYWNrOiBDdXN0b21FbGVtZW50RGVmaW5pdGlvblsnYWRvcHRlZENhbGxiYWNrJ107XG4gICAgbGV0IGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjazogQ3VzdG9tRWxlbWVudERlZmluaXRpb25bJ2F0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayddO1xuICAgIGxldCBvYnNlcnZlZEF0dHJpYnV0ZXM6IEN1c3RvbUVsZW1lbnREZWZpbml0aW9uWydvYnNlcnZlZEF0dHJpYnV0ZXMnXTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcHJvdG90eXBlID0gY29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgICAgaWYgKCEocHJvdG90eXBlIGluc3RhbmNlb2YgT2JqZWN0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGN1c3RvbSBlbGVtZW50IGNvbnN0cnVjdG9yJ3MgcHJvdG90eXBlIGlzIG5vdCBhbiBvYmplY3QuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdHlwZSBDRVJlYWN0aW9uQ2FsbGJhY2sgPVxuICAgICAgICB8ICdjb25uZWN0ZWRDYWxsYmFjaydcbiAgICAgICAgfCAnZGlzY29ubmVjdGVkQ2FsbGJhY2snXG4gICAgICAgIHwgJ2Fkb3B0ZWRDYWxsYmFjaydcbiAgICAgICAgfCAnYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrJztcbiAgICAgIGNvbnN0IGdldENhbGxiYWNrID0gZnVuY3Rpb24gZ2V0Q2FsbGJhY2sobmFtZTogQ0VSZWFjdGlvbkNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrVmFsdWUgPSBwcm90b3R5cGVbbmFtZV07XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjYWxsYmFja1ZhbHVlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAhKGNhbGxiYWNrVmFsdWUgaW5zdGFuY2VvZiBGdW5jdGlvbilcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgJyR7bmFtZX0nIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbi5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FsbGJhY2tWYWx1ZTtcbiAgICAgIH07XG5cbiAgICAgIGNvbm5lY3RlZENhbGxiYWNrID0gZ2V0Q2FsbGJhY2soJ2Nvbm5lY3RlZENhbGxiYWNrJyk7XG4gICAgICBkaXNjb25uZWN0ZWRDYWxsYmFjayA9IGdldENhbGxiYWNrKCdkaXNjb25uZWN0ZWRDYWxsYmFjaycpO1xuICAgICAgYWRvcHRlZENhbGxiYWNrID0gZ2V0Q2FsbGJhY2soJ2Fkb3B0ZWRDYWxsYmFjaycpO1xuICAgICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrID0gZ2V0Q2FsbGJhY2soJ2F0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjaycpO1xuICAgICAgLy8gYG9ic2VydmVkQXR0cmlidXRlc2Agc2hvdWxkIG5vdCBiZSByZWFkIHVubGVzcyBhblxuICAgICAgLy8gYGF0dHJpYnV0ZXNDaGFuZ2VkQ2FsbGJhY2tgIGV4aXN0c1xuICAgICAgb2JzZXJ2ZWRBdHRyaWJ1dGVzID1cbiAgICAgICAgKGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayAmJiBjb25zdHJ1Y3Rvclsnb2JzZXJ2ZWRBdHRyaWJ1dGVzJ10pIHx8IFtdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2F0Y2hcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLl9lbGVtZW50RGVmaW5pdGlvbklzUnVubmluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGRlZmluaXRpb24gPSB7XG4gICAgICBsb2NhbE5hbWUsXG4gICAgICBjb25zdHJ1Y3RvckZ1bmN0aW9uOiBjb25zdHJ1Y3RvcixcbiAgICAgIGNvbm5lY3RlZENhbGxiYWNrLFxuICAgICAgZGlzY29ubmVjdGVkQ2FsbGJhY2ssXG4gICAgICBhZG9wdGVkQ2FsbGJhY2ssXG4gICAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2ssXG4gICAgICBvYnNlcnZlZEF0dHJpYnV0ZXMsXG4gICAgICBjb25zdHJ1Y3Rpb25TdGFjazogW10gYXMgQXJyYXk8XG4gICAgICAgIEhUTUxFbGVtZW50IHwgQWxyZWFkeUNvbnN0cnVjdGVkTWFya2VyVHlwZVxuICAgICAgPixcbiAgICB9O1xuXG4gICAgdGhpcy5fbG9jYWxOYW1lVG9EZWZpbml0aW9uLnNldChsb2NhbE5hbWUsIGRlZmluaXRpb24pO1xuICAgIHRoaXMuX2NvbnN0cnVjdG9yVG9EZWZpbml0aW9uLnNldChcbiAgICAgIGRlZmluaXRpb24uY29uc3RydWN0b3JGdW5jdGlvbixcbiAgICAgIGRlZmluaXRpb25cbiAgICApO1xuXG4gICAgcmV0dXJuIGRlZmluaXRpb247XG4gIH1cblxuICB1cGdyYWRlKG5vZGU6IE5vZGUpOiB2b2lkIHtcbiAgICB0aGlzLl9pbnRlcm5hbHMucGF0Y2hBbmRVcGdyYWRlVHJlZShub2RlKTtcbiAgfVxuXG4gIHByaXZhdGUgX2ZsdXNoKCkge1xuICAgIC8vIElmIG5vIG5ldyBkZWZpbml0aW9ucyB3ZXJlIGRlZmluZWQsIGRvbid0IGF0dGVtcHQgdG8gZmx1c2guIFRoaXMgY291bGRcbiAgICAvLyBoYXBwZW4gaWYgYSBmbHVzaCBjYWxsYmFjayBrZWVwcyB0aGUgZnVuY3Rpb24gaXQgaXMgZ2l2ZW4gYW5kIGNhbGxzIGl0XG4gICAgLy8gbXVsdGlwbGUgdGltZXMuXG4gICAgaWYgKHRoaXMuX2ZsdXNoUGVuZGluZyA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fZmx1c2hQZW5kaW5nID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBVbnVwZ3JhZGVkIGVsZW1lbnRzIHdpdGggZGVmaW5pdGlvbnMgdGhhdCB3ZXJlIGRlZmluZWQgKmJlZm9yZSogdGhlIGxhc3RcbiAgICAgKiBmbHVzaCwgaW4gZG9jdW1lbnQgb3JkZXIuXG4gICAgICovXG4gICAgY29uc3QgZWxlbWVudHNXaXRoU3RhYmxlRGVmaW5pdGlvbnM6IEFycmF5PEhUTUxFbGVtZW50PiA9IFtdO1xuXG4gICAgY29uc3QgdW5mbHVzaGVkTG9jYWxOYW1lcyA9IHRoaXMuX3VuZmx1c2hlZExvY2FsTmFtZXM7XG4gICAgY29uc3QgZWxlbWVudHNXaXRoUGVuZGluZ0RlZmluaXRpb25zID0gbmV3IE1hcDxcbiAgICAgIHN0cmluZyxcbiAgICAgIEFycmF5PEhUTUxFbGVtZW50PlxuICAgID4oKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVuZmx1c2hlZExvY2FsTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGVsZW1lbnRzV2l0aFBlbmRpbmdEZWZpbml0aW9ucy5zZXQodW5mbHVzaGVkTG9jYWxOYW1lc1tpXSwgW10pO1xuICAgIH1cblxuICAgIHRoaXMuX2ludGVybmFscy5wYXRjaEFuZFVwZ3JhZGVUcmVlKGRvY3VtZW50LCB7XG4gICAgICB1cGdyYWRlOiAoZWxlbWVudCkgPT4ge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGVsZW1lbnQgaWYgaXQgaGFzIGFscmVhZHkgdXBncmFkZWQgb3IgZmFpbGVkIHRvIHVwZ3JhZGUuXG4gICAgICAgIGlmIChlbGVtZW50Ll9fQ0Vfc3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxvY2FsTmFtZSA9IGVsZW1lbnQubG9jYWxOYW1lO1xuXG4gICAgICAgIC8vIElmIHRoZXJlIGlzIGFuIGFwcGxpY2FibGUgcGVuZGluZyBkZWZpbml0aW9uIGZvciB0aGUgZWxlbWVudCwgYWRkIHRoZVxuICAgICAgICAvLyBlbGVtZW50IHRvIHRoZSBsaXN0IG9mIGVsZW1lbnRzIHRvIGJlIHVwZ3JhZGVkIHdpdGggdGhhdCBkZWZpbml0aW9uLlxuICAgICAgICBjb25zdCBwZW5kaW5nRWxlbWVudHMgPSBlbGVtZW50c1dpdGhQZW5kaW5nRGVmaW5pdGlvbnMuZ2V0KGxvY2FsTmFtZSk7XG4gICAgICAgIGlmIChwZW5kaW5nRWxlbWVudHMpIHtcbiAgICAgICAgICBwZW5kaW5nRWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAvLyBJZiB0aGVyZSBpcyAqYW55IG90aGVyKiBhcHBsaWNhYmxlIGRlZmluaXRpb24gZm9yIHRoZSBlbGVtZW50LCBhZGRcbiAgICAgICAgICAvLyBpdCB0byB0aGUgbGlzdCBvZiBlbGVtZW50cyB3aXRoIHN0YWJsZSBkZWZpbml0aW9ucyB0aGF0IG5lZWQgdG8gYmVcbiAgICAgICAgICAvLyB1cGdyYWRlZC5cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9sb2NhbE5hbWVUb0RlZmluaXRpb24uaGFzKGxvY2FsTmFtZSkpIHtcbiAgICAgICAgICBlbGVtZW50c1dpdGhTdGFibGVEZWZpbml0aW9ucy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gVXBncmFkZSBlbGVtZW50cyB3aXRoICdzdGFibGUnIGRlZmluaXRpb25zIGZpcnN0LlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHNXaXRoU3RhYmxlRGVmaW5pdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuX2ludGVybmFscy51cGdyYWRlUmVhY3Rpb24oZWxlbWVudHNXaXRoU3RhYmxlRGVmaW5pdGlvbnNbaV0pO1xuICAgIH1cblxuICAgIC8vIFVwZ3JhZGUgZWxlbWVudHMgd2l0aCAncGVuZGluZycgZGVmaW5pdGlvbnMgaW4gdGhlIG9yZGVyIHRoZXkgd2VyZVxuICAgIC8vIGRlZmluZWQuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1bmZsdXNoZWRMb2NhbE5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBsb2NhbE5hbWUgPSB1bmZsdXNoZWRMb2NhbE5hbWVzW2ldO1xuICAgICAgY29uc3QgcGVuZGluZ1VwZ3JhZGFibGVFbGVtZW50cyA9IGVsZW1lbnRzV2l0aFBlbmRpbmdEZWZpbml0aW9ucy5nZXQoXG4gICAgICAgIGxvY2FsTmFtZVxuICAgICAgKSE7XG5cbiAgICAgIC8vIEF0dGVtcHQgdG8gdXBncmFkZSBhbGwgYXBwbGljYWJsZSBlbGVtZW50cy5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGVuZGluZ1VwZ3JhZGFibGVFbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLl9pbnRlcm5hbHMudXBncmFkZVJlYWN0aW9uKHBlbmRpbmdVcGdyYWRhYmxlRWxlbWVudHNbaV0pO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXNvbHZlIGFueSBwcm9taXNlcyBjcmVhdGVkIGJ5IGB3aGVuRGVmaW5lZGAgZm9yIHRoZSBkZWZpbml0aW9uLlxuICAgICAgY29uc3QgZGVmZXJyZWQgPSB0aGlzLl93aGVuRGVmaW5lZERlZmVycmVkLmdldChsb2NhbE5hbWUpO1xuICAgICAgaWYgKGRlZmVycmVkKSB7XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1bmZsdXNoZWRMb2NhbE5hbWVzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBnZXQobG9jYWxOYW1lOiBzdHJpbmcpOiB1bmRlZmluZWQgfCB7bmV3ICgpOiBIVE1MRWxlbWVudH0ge1xuICAgIGNvbnN0IGRlZmluaXRpb24gPSB0aGlzLmludGVybmFsX2xvY2FsTmFtZVRvRGVmaW5pdGlvbihsb2NhbE5hbWUpO1xuICAgIGlmIChkZWZpbml0aW9uKSB7XG4gICAgICByZXR1cm4gZGVmaW5pdGlvbi5jb25zdHJ1Y3RvckZ1bmN0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICB3aGVuRGVmaW5lZChsb2NhbE5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghVXRpbGl0aWVzLmlzVmFsaWRDdXN0b21FbGVtZW50TmFtZShsb2NhbE5hbWUpKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgIG5ldyBTeW50YXhFcnJvcihgJyR7bG9jYWxOYW1lfScgaXMgbm90IGEgdmFsaWQgY3VzdG9tIGVsZW1lbnQgbmFtZS5gKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBwcmlvciA9IHRoaXMuX3doZW5EZWZpbmVkRGVmZXJyZWQuZ2V0KGxvY2FsTmFtZSk7XG4gICAgaWYgKHByaW9yKSB7XG4gICAgICByZXR1cm4gcHJpb3IudG9Qcm9taXNlKCk7XG4gICAgfVxuXG4gICAgY29uc3QgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQ8dW5kZWZpbmVkPigpO1xuICAgIHRoaXMuX3doZW5EZWZpbmVkRGVmZXJyZWQuc2V0KGxvY2FsTmFtZSwgZGVmZXJyZWQpO1xuXG4gICAgLy8gUmVzb2x2ZSBpbW1lZGlhdGVseSBpZiB0aGUgZ2l2ZW4gbG9jYWwgbmFtZSBoYXMgYSByZWd1bGFyIG9yIGxhenlcbiAgICAvLyBkZWZpbml0aW9uICphbmQqIHRoZSBmdWxsIGRvY3VtZW50IHdhbGsgdG8gdXBncmFkZSBlbGVtZW50cyB3aXRoIHRoYXRcbiAgICAvLyBsb2NhbCBuYW1lIGhhcyBhbHJlYWR5IGhhcHBlbmVkLlxuICAgIC8vXG4gICAgLy8gVGhlIGJlaGF2aW9yIG9mIHRoZSByZXR1cm5lZCBwcm9taXNlIGRpZmZlcnMgYmV0d2VlbiB0aGUgbGF6eSBhbmQgdGhlXG4gICAgLy8gbm9uLWxhenkgY2FzZXMgaWYgdGhlIGRlZmluaXRpb24gZmFpbHMuIE5vcm1hbGx5LCB0aGUgZGVmaW5pdGlvbiB3b3VsZFxuICAgIC8vIGZhaWwgc3luY2hyb25vdXNseSBhbmQgbm8gcGVuZGluZyBwcm9taXNlcyB3b3VsZCByZXNvbHZlLiBIb3dldmVyLCBpZlxuICAgIC8vIHRoZSBkZWZpbml0aW9uIGlzIGxhenkgYnV0IGhhcyBub3QgeWV0IGJlZW4gcmVpZmllZCwgdGhlIHByb21pc2UgaXNcbiAgICAvLyByZXNvbHZlZCBlYXJseSBoZXJlIGV2ZW4gdGhvdWdoIGl0IG1pZ2h0IGZhaWwgbGF0ZXIgd2hlbiByZWlmaWVkLlxuICAgIGNvbnN0IGFueURlZmluaXRpb25FeGlzdHMgPVxuICAgICAgdGhpcy5fbG9jYWxOYW1lVG9EZWZpbml0aW9uLmhhcyhsb2NhbE5hbWUpIHx8XG4gICAgICB0aGlzLl9sb2NhbE5hbWVUb0NvbnN0cnVjdG9yR2V0dGVyLmhhcyhsb2NhbE5hbWUpO1xuICAgIGNvbnN0IGRlZmluaXRpb25IYXNGbHVzaGVkID1cbiAgICAgIHRoaXMuX3VuZmx1c2hlZExvY2FsTmFtZXMuaW5kZXhPZihsb2NhbE5hbWUpID09PSAtMTtcbiAgICBpZiAoYW55RGVmaW5pdGlvbkV4aXN0cyAmJiBkZWZpbml0aW9uSGFzRmx1c2hlZCkge1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZlcnJlZC50b1Byb21pc2UoKTtcbiAgfVxuXG4gIHBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2sob3V0ZXI6IChmbjogKCkgPT4gdm9pZCkgPT4gdm9pZCkge1xuICAgIGlmICh0aGlzLl9kb2N1bWVudENvbnN0cnVjdGlvbk9ic2VydmVyKSB7XG4gICAgICB0aGlzLl9kb2N1bWVudENvbnN0cnVjdGlvbk9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9XG4gICAgY29uc3QgaW5uZXIgPSB0aGlzLl9mbHVzaENhbGxiYWNrO1xuICAgIHRoaXMuX2ZsdXNoQ2FsbGJhY2sgPSAoZmx1c2gpID0+IG91dGVyKCgpID0+IGlubmVyKGZsdXNoKSk7XG4gIH1cblxuICBpbnRlcm5hbF9sb2NhbE5hbWVUb0RlZmluaXRpb24oXG4gICAgbG9jYWxOYW1lOiBzdHJpbmdcbiAgKTogQ3VzdG9tRWxlbWVudERlZmluaXRpb24gfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IGV4aXN0aW5nRGVmaW5pdGlvbiA9IHRoaXMuX2xvY2FsTmFtZVRvRGVmaW5pdGlvbi5nZXQobG9jYWxOYW1lKTtcbiAgICBpZiAoZXhpc3RpbmdEZWZpbml0aW9uKSB7XG4gICAgICByZXR1cm4gZXhpc3RpbmdEZWZpbml0aW9uO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbnN0cnVjdG9yR2V0dGVyID0gdGhpcy5fbG9jYWxOYW1lVG9Db25zdHJ1Y3RvckdldHRlci5nZXQobG9jYWxOYW1lKTtcbiAgICBpZiAoY29uc3RydWN0b3JHZXR0ZXIpIHtcbiAgICAgIHRoaXMuX2xvY2FsTmFtZVRvQ29uc3RydWN0b3JHZXR0ZXIuZGVsZXRlKGxvY2FsTmFtZSk7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbF9yZWlmeURlZmluaXRpb24obG9jYWxOYW1lLCBjb25zdHJ1Y3RvckdldHRlcigpKTtcbiAgICAgIH0gY2F0Y2ggKGU6IHVua25vd24pIHtcbiAgICAgICAgdGhpcy5faW50ZXJuYWxzLnJlcG9ydFRoZUV4Y2VwdGlvbihlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgaW50ZXJuYWxfY29uc3RydWN0b3JUb0RlZmluaXRpb24oXG4gICAgY29uc3RydWN0b3I6IEVsZW1lbnRDb25zdHJ1Y3RvclxuICApOiBDdXN0b21FbGVtZW50RGVmaW5pdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnN0cnVjdG9yVG9EZWZpbml0aW9uLmdldChjb25zdHJ1Y3Rvcik7XG4gIH1cbn1cblxuLy8gQ2xvc3VyZSBjb21waWxlciBleHBvcnRzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1hc3NpZ24gKi9cbkN1c3RvbUVsZW1lbnRSZWdpc3RyeS5wcm90b3R5cGVbJ2RlZmluZSddID1cbiAgQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5LnByb3RvdHlwZS5kZWZpbmU7XG5DdXN0b21FbGVtZW50UmVnaXN0cnkucHJvdG90eXBlWyd1cGdyYWRlJ10gPVxuICBDdXN0b21FbGVtZW50UmVnaXN0cnkucHJvdG90eXBlLnVwZ3JhZGU7XG5DdXN0b21FbGVtZW50UmVnaXN0cnkucHJvdG90eXBlWydnZXQnXSA9IEN1c3RvbUVsZW1lbnRSZWdpc3RyeS5wcm90b3R5cGUuZ2V0O1xuQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5LnByb3RvdHlwZVsnd2hlbkRlZmluZWQnXSA9XG4gIEN1c3RvbUVsZW1lbnRSZWdpc3RyeS5wcm90b3R5cGUud2hlbkRlZmluZWQ7XG5DdXN0b21FbGVtZW50UmVnaXN0cnkucHJvdG90eXBlWydwb2x5ZmlsbERlZmluZUxhenknXSA9XG4gIEN1c3RvbUVsZW1lbnRSZWdpc3RyeS5wcm90b3R5cGUucG9seWZpbGxEZWZpbmVMYXp5O1xuQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5LnByb3RvdHlwZVsncG9seWZpbGxXcmFwRmx1c2hDYWxsYmFjayddID1cbiAgQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5LnByb3RvdHlwZS5wb2x5ZmlsbFdyYXBGbHVzaENhbGxiYWNrO1xuLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWFzc2lnbiAqL1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmRcbiAqIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXlcbiAqIGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0IENvZGUgZGlzdHJpYnV0ZWQgYnlcbiAqIEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzbyBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVBcbiAqIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG5pbXBvcnQgQ3VzdG9tRWxlbWVudEludGVybmFscyBmcm9tICcuLi8uLi9DdXN0b21FbGVtZW50SW50ZXJuYWxzLmpzJztcbmltcG9ydCAqIGFzIFV0aWxpdGllcyBmcm9tICcuLi8uLi9VdGlsaXRpZXMuanMnO1xuXG50eXBlIE5hdGl2ZU1ldGhvZCA9ICh0aGlzOiBOb2RlLCAuLi5hcmdzOiBBcnJheTxOb2RlIHwgc3RyaW5nPikgPT4gdm9pZDtcblxuaW50ZXJmYWNlIFBhcmVudE5vZGVOYXRpdmVNZXRob2RzIHtcbiAgcHJlcGVuZDogTmF0aXZlTWV0aG9kO1xuICBhcHBlbmQ6IE5hdGl2ZU1ldGhvZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKFxuICBpbnRlcm5hbHM6IEN1c3RvbUVsZW1lbnRJbnRlcm5hbHMsXG4gIGRlc3RpbmF0aW9uOiBQYXJlbnROb2RlLFxuICBidWlsdEluOiBQYXJlbnROb2RlTmF0aXZlTWV0aG9kc1xuKSB7XG4gIGZ1bmN0aW9uIGFwcGVuZFByZXBlbmRQYXRjaChidWlsdEluTWV0aG9kOiBOYXRpdmVNZXRob2QpOiBOYXRpdmVNZXRob2Qge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGhpczogTm9kZSwgLi4ubm9kZXMpIHtcbiAgICAgIC8qKlxuICAgICAgICogQSBjb3B5IG9mIGBub2Rlc2AsIHdpdGggYW55IERvY3VtZW50RnJhZ21lbnQgcmVwbGFjZWQgYnkgaXRzIGNoaWxkcmVuLlxuICAgICAgICovXG4gICAgICBjb25zdCBmbGF0dGVuZWROb2RlczogQXJyYXk8Tm9kZSB8IHN0cmluZz4gPSBbXTtcblxuICAgICAgLyoqXG4gICAgICAgKiBFbGVtZW50cyBpbiBgbm9kZXNgIHRoYXQgd2VyZSBjb25uZWN0ZWQgYmVmb3JlIHRoaXMgY2FsbC5cbiAgICAgICAqL1xuICAgICAgY29uc3QgY29ubmVjdGVkRWxlbWVudHM6IEFycmF5PE5vZGU+ID0gW107XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuXG4gICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgRWxlbWVudCAmJiBVdGlsaXRpZXMuaXNDb25uZWN0ZWQobm9kZSkpIHtcbiAgICAgICAgICBjb25uZWN0ZWRFbGVtZW50cy5wdXNoKG5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KSB7XG4gICAgICAgICAgZm9yIChsZXQgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7IGNoaWxkOyBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICBmbGF0dGVuZWROb2Rlcy5wdXNoKGNoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmxhdHRlbmVkTm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBidWlsdEluTWV0aG9kLmFwcGx5KHRoaXMsIG5vZGVzKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb25uZWN0ZWRFbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnRlcm5hbHMuZGlzY29ubmVjdFRyZWUoY29ubmVjdGVkRWxlbWVudHNbaV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoVXRpbGl0aWVzLmlzQ29ubmVjdGVkKHRoaXMpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmxhdHRlbmVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBub2RlID0gZmxhdHRlbmVkTm9kZXNbaV07XG4gICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICAgICAgICBpbnRlcm5hbHMuY29ubmVjdFRyZWUobm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGlmIChidWlsdEluLnByZXBlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgIGRlc3RpbmF0aW9uLnByZXBlbmQgPSBhcHBlbmRQcmVwZW5kUGF0Y2goYnVpbHRJbi5wcmVwZW5kKTtcbiAgfVxuXG4gIGlmIChidWlsdEluLmFwcGVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVzdGluYXRpb24uYXBwZW5kID0gYXBwZW5kUHJlcGVuZFBhdGNoKGJ1aWx0SW4uYXBwZW5kKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmRcbiAqIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXlcbiAqIGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0IENvZGUgZGlzdHJpYnV0ZWQgYnlcbiAqIEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzbyBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVBcbiAqIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG5pbXBvcnQgQ3VzdG9tRWxlbWVudEludGVybmFscyBmcm9tICcuLi9DdXN0b21FbGVtZW50SW50ZXJuYWxzLmpzJztcblxuaW1wb3J0IFBhdGNoUGFyZW50Tm9kZSBmcm9tICcuL0ludGVyZmFjZS9QYXJlbnROb2RlLmpzJztcbmltcG9ydCAqIGFzIE5hdGl2ZSBmcm9tICcuL05hdGl2ZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChpbnRlcm5hbHM6IEN1c3RvbUVsZW1lbnRJbnRlcm5hbHMpIHtcbiAgRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoXG4gICAgdGhpczogRG9jdW1lbnQsXG4gICAgbG9jYWxOYW1lOiBzdHJpbmdcbiAgKSB7XG4gICAgcmV0dXJuIGludGVybmFscy5jcmVhdGVBbkVsZW1lbnQodGhpcywgbG9jYWxOYW1lLCBudWxsKTtcbiAgfSBhcyB0eXBlb2YgRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnQ7XG5cbiAgRG9jdW1lbnQucHJvdG90eXBlLmltcG9ydE5vZGUgPSBmdW5jdGlvbiA8VCBleHRlbmRzIE5vZGU+KFxuICAgIHRoaXM6IERvY3VtZW50LFxuICAgIG5vZGU6IFQsXG4gICAgZGVlcD86IGJvb2xlYW5cbiAgKTogVCB7XG4gICAgY29uc3QgY2xvbmUgPSBOYXRpdmUuRG9jdW1lbnRfaW1wb3J0Tm9kZS5jYWxsKHRoaXMsIG5vZGUsICEhZGVlcCkgYXMgVDtcbiAgICAvLyBPbmx5IGNyZWF0ZSBjdXN0b20gZWxlbWVudHMgaWYgdGhpcyBkb2N1bWVudCBpcyBhc3NvY2lhdGVkIHdpdGggdGhlXG4gICAgLy8gcmVnaXN0cnkuXG4gICAgaWYgKCF0aGlzLl9fQ0VfcmVnaXN0cnkpIHtcbiAgICAgIGludGVybmFscy5wYXRjaFRyZWUoY2xvbmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnRlcm5hbHMucGF0Y2hBbmRVcGdyYWRlVHJlZShjbG9uZSk7XG4gICAgfVxuICAgIHJldHVybiBjbG9uZTtcbiAgfTtcblxuICBEb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRWxlbWVudE5TID0gZnVuY3Rpb24gKFxuICAgIHRoaXM6IERvY3VtZW50LFxuICAgIG5hbWVzcGFjZTogc3RyaW5nIHwgbnVsbCxcbiAgICBsb2NhbE5hbWU6IHN0cmluZ1xuICApIHtcbiAgICByZXR1cm4gaW50ZXJuYWxzLmNyZWF0ZUFuRWxlbWVudCh0aGlzLCBsb2NhbE5hbWUsIG5hbWVzcGFjZSk7XG4gIH0gYXMgdHlwZW9mIERvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50TlM7XG5cbiAgUGF0Y2hQYXJlbnROb2RlKGludGVybmFscywgRG9jdW1lbnQucHJvdG90eXBlLCB7XG4gICAgcHJlcGVuZDogTmF0aXZlLkRvY3VtZW50X3ByZXBlbmQsXG4gICAgYXBwZW5kOiBOYXRpdmUuRG9jdW1lbnRfYXBwZW5kLFxuICB9KTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kXG4gKiBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5XG4gKiBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5XG4gKiBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQXG4gKiByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuaW1wb3J0IEN1c3RvbUVsZW1lbnRJbnRlcm5hbHMgZnJvbSAnLi4vLi4vQ3VzdG9tRWxlbWVudEludGVybmFscy5qcyc7XG5pbXBvcnQgKiBhcyBVdGlsaXRpZXMgZnJvbSAnLi4vLi4vVXRpbGl0aWVzLmpzJztcblxudHlwZSBOYXRpdmVNZXRob2QgPSAodGhpczogQ2hpbGROb2RlLCAuLi5hcmdzOiBBcnJheTxOb2RlIHwgc3RyaW5nPikgPT4gdm9pZDtcblxuaW50ZXJmYWNlIENoaWxkTm9kZU5hdGl2ZU1ldGhvZHMge1xuICBiZWZvcmU6IE5hdGl2ZU1ldGhvZDtcbiAgYWZ0ZXI6IE5hdGl2ZU1ldGhvZDtcbiAgcmVwbGFjZVdpdGg6IE5hdGl2ZU1ldGhvZDtcbiAgcmVtb3ZlOiAodGhpczogQ2hpbGROb2RlKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoXG4gIGludGVybmFsczogQ3VzdG9tRWxlbWVudEludGVybmFscyxcbiAgZGVzdGluYXRpb246IENoaWxkTm9kZSxcbiAgYnVpbHRJbjogQ2hpbGROb2RlTmF0aXZlTWV0aG9kc1xuKSB7XG4gIGZ1bmN0aW9uIGJlZm9yZUFmdGVyUGF0Y2goYnVpbHRJbk1ldGhvZDogTmF0aXZlTWV0aG9kKTogTmF0aXZlTWV0aG9kIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRoaXM6IENoaWxkTm9kZSwgLi4ubm9kZXMpIHtcbiAgICAgIGNvbnN0IGZsYXR0ZW5lZE5vZGVzOiBBcnJheTxzdHJpbmcgfCBOb2RlPiA9IFtdO1xuICAgICAgY29uc3QgY29ubmVjdGVkRWxlbWVudHM6IEFycmF5PE5vZGU+ID0gW107XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuXG4gICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgRWxlbWVudCAmJiBVdGlsaXRpZXMuaXNDb25uZWN0ZWQobm9kZSkpIHtcbiAgICAgICAgICBjb25uZWN0ZWRFbGVtZW50cy5wdXNoKG5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KSB7XG4gICAgICAgICAgZm9yIChsZXQgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7IGNoaWxkOyBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICBmbGF0dGVuZWROb2Rlcy5wdXNoKGNoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmxhdHRlbmVkTm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBidWlsdEluTWV0aG9kLmFwcGx5KHRoaXMsIG5vZGVzKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb25uZWN0ZWRFbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnRlcm5hbHMuZGlzY29ubmVjdFRyZWUoY29ubmVjdGVkRWxlbWVudHNbaV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoVXRpbGl0aWVzLmlzQ29ubmVjdGVkKHRoaXMpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmxhdHRlbmVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBub2RlID0gZmxhdHRlbmVkTm9kZXNbaV07XG4gICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICAgICAgICBpbnRlcm5hbHMuY29ubmVjdFRyZWUobm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGlmIChidWlsdEluLmJlZm9yZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVzdGluYXRpb24uYmVmb3JlID0gYmVmb3JlQWZ0ZXJQYXRjaChidWlsdEluLmJlZm9yZSk7XG4gIH1cblxuICBpZiAoYnVpbHRJbi5hZnRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVzdGluYXRpb24uYWZ0ZXIgPSBiZWZvcmVBZnRlclBhdGNoKGJ1aWx0SW4uYWZ0ZXIpO1xuICB9XG5cbiAgaWYgKGJ1aWx0SW4ucmVwbGFjZVdpdGggIT09IHVuZGVmaW5lZCkge1xuICAgIGRlc3RpbmF0aW9uLnJlcGxhY2VXaXRoID0gZnVuY3Rpb24gKFxuICAgICAgdGhpczogQ2hpbGROb2RlLFxuICAgICAgLi4ubm9kZXM6IEFycmF5PE5vZGUgfCBzdHJpbmc+XG4gICAgKSB7XG4gICAgICAvKipcbiAgICAgICAqIEEgY29weSBvZiBgbm9kZXNgLCB3aXRoIGFueSBEb2N1bWVudEZyYWdtZW50IHJlcGxhY2VkIGJ5IGl0cyBjaGlsZHJlbi5cbiAgICAgICAqL1xuICAgICAgY29uc3QgZmxhdHRlbmVkTm9kZXM6IEFycmF5PE5vZGUgfCBzdHJpbmc+ID0gW107XG5cbiAgICAgIC8qKlxuICAgICAgICogRWxlbWVudHMgaW4gYG5vZGVzYCB0aGF0IHdlcmUgY29ubmVjdGVkIGJlZm9yZSB0aGlzIGNhbGwuXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGNvbm5lY3RlZEVsZW1lbnRzOiBBcnJheTxOb2RlPiA9IFtdO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcblxuICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgVXRpbGl0aWVzLmlzQ29ubmVjdGVkKG5vZGUpKSB7XG4gICAgICAgICAgY29ubmVjdGVkRWxlbWVudHMucHVzaChub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCkge1xuICAgICAgICAgIGZvciAobGV0IGNoaWxkID0gbm9kZS5maXJzdENoaWxkOyBjaGlsZDsgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZykge1xuICAgICAgICAgICAgZmxhdHRlbmVkTm9kZXMucHVzaChjaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZsYXR0ZW5lZE5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3Qgd2FzQ29ubmVjdGVkID0gVXRpbGl0aWVzLmlzQ29ubmVjdGVkKHRoaXMpO1xuXG4gICAgICBidWlsdEluLnJlcGxhY2VXaXRoLmFwcGx5KHRoaXMsIG5vZGVzKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb25uZWN0ZWRFbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnRlcm5hbHMuZGlzY29ubmVjdFRyZWUoY29ubmVjdGVkRWxlbWVudHNbaV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAod2FzQ29ubmVjdGVkKSB7XG4gICAgICAgIGludGVybmFscy5kaXNjb25uZWN0VHJlZSh0aGlzKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbGF0dGVuZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IG5vZGUgPSBmbGF0dGVuZWROb2Rlc1tpXTtcbiAgICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGludGVybmFscy5jb25uZWN0VHJlZShub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgaWYgKGJ1aWx0SW4ucmVtb3ZlICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZXN0aW5hdGlvbi5yZW1vdmUgPSBmdW5jdGlvbiAodGhpczogQ2hpbGROb2RlKSB7XG4gICAgICBjb25zdCB3YXNDb25uZWN0ZWQgPSBVdGlsaXRpZXMuaXNDb25uZWN0ZWQodGhpcyk7XG5cbiAgICAgIGJ1aWx0SW4ucmVtb3ZlLmNhbGwodGhpcyk7XG5cbiAgICAgIGlmICh3YXNDb25uZWN0ZWQpIHtcbiAgICAgICAgaW50ZXJuYWxzLmRpc2Nvbm5lY3RUcmVlKHRoaXMpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kXG4gKiBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5XG4gKiBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5XG4gKiBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQXG4gKiByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuaW1wb3J0IEN1c3RvbUVsZW1lbnRJbnRlcm5hbHMgZnJvbSAnLi4vQ3VzdG9tRWxlbWVudEludGVybmFscy5qcyc7XG5pbXBvcnQgQ0VTdGF0ZSBmcm9tICcuLi9DdXN0b21FbGVtZW50U3RhdGUuanMnO1xuaW1wb3J0ICogYXMgVXRpbGl0aWVzIGZyb20gJy4uL1V0aWxpdGllcy5qcyc7XG5cbmltcG9ydCBQYXRjaENoaWxkTm9kZSBmcm9tICcuL0ludGVyZmFjZS9DaGlsZE5vZGUuanMnO1xuaW1wb3J0IFBhdGNoUGFyZW50Tm9kZSBmcm9tICcuL0ludGVyZmFjZS9QYXJlbnROb2RlLmpzJztcbmltcG9ydCAqIGFzIE5hdGl2ZSBmcm9tICcuL05hdGl2ZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChpbnRlcm5hbHM6IEN1c3RvbUVsZW1lbnRJbnRlcm5hbHMpIHtcbiAgaWYgKE5hdGl2ZS5FbGVtZW50X2F0dGFjaFNoYWRvdykge1xuICAgIEVsZW1lbnQucHJvdG90eXBlLmF0dGFjaFNoYWRvdyA9IGZ1bmN0aW9uIChcbiAgICAgIHRoaXM6IEVsZW1lbnQsXG4gICAgICBpbml0OiBTaGFkb3dSb290SW5pdFxuICAgICkge1xuICAgICAgY29uc3Qgc2hhZG93Um9vdCA9IE5hdGl2ZS5FbGVtZW50X2F0dGFjaFNoYWRvdy5jYWxsKHRoaXMsIGluaXQpO1xuICAgICAgaW50ZXJuYWxzLnBhdGNoTm9kZShzaGFkb3dSb290KTtcbiAgICAgIHRoaXMuX19DRV9zaGFkb3dSb290ID0gc2hhZG93Um9vdDtcbiAgICAgIHJldHVybiBzaGFkb3dSb290O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaF9pbm5lckhUTUwoXG4gICAgZGVzdGluYXRpb246IEVsZW1lbnQsXG4gICAgYmFzZURlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvclxuICApIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGVzdGluYXRpb24sICdpbm5lckhUTUwnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBiYXNlRGVzY3JpcHRvci5lbnVtZXJhYmxlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBiYXNlRGVzY3JpcHRvci5nZXQsXG4gICAgICBzZXQ6IGZ1bmN0aW9uICh0aGlzOiBFbGVtZW50LCBodG1sU3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGlzQ29ubmVjdGVkID0gVXRpbGl0aWVzLmlzQ29ubmVjdGVkKHRoaXMpO1xuXG4gICAgICAgIC8vIE5PVEU6IEluIElFMTEsIHdoZW4gdXNpbmcgdGhlIG5hdGl2ZSBgaW5uZXJIVE1MYCBzZXR0ZXIsIGFsbCBub2Rlc1xuICAgICAgICAvLyB0aGF0IHdlcmUgcHJldmlvdXNseSBkZXNjZW5kYW50cyBvZiB0aGUgY29udGV4dCBlbGVtZW50IGhhdmUgYWxsIG9mXG4gICAgICAgIC8vIHRoZWlyIGNoaWxkcmVuIHJlbW92ZWQgYXMgcGFydCBvZiB0aGUgc2V0IC0gdGhlIGVudGlyZSBzdWJ0cmVlIGlzXG4gICAgICAgIC8vICdkaXNhc3NlbWJsZWQnLiBUaGlzIHdvcmsgYXJvdW5kIHdhbGtzIHRoZSBzdWJ0cmVlICpiZWZvcmUqIHVzaW5nIHRoZVxuICAgICAgICAvLyBuYXRpdmUgc2V0dGVyLlxuICAgICAgICBsZXQgcmVtb3ZlZEVsZW1lbnRzOiB1bmRlZmluZWQgfCBBcnJheTxFbGVtZW50PiA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgcmVtb3ZlZEVsZW1lbnRzID0gW107XG4gICAgICAgICAgaW50ZXJuYWxzLmZvckVhY2hFbGVtZW50KHRoaXMsIChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICByZW1vdmVkRWxlbWVudHMhLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBiYXNlRGVzY3JpcHRvci5zZXQhLmNhbGwodGhpcywgaHRtbFN0cmluZyk7XG5cbiAgICAgICAgaWYgKHJlbW92ZWRFbGVtZW50cykge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVtb3ZlZEVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gcmVtb3ZlZEVsZW1lbnRzW2ldO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQuX19DRV9zdGF0ZSA9PT0gQ0VTdGF0ZS5jdXN0b20pIHtcbiAgICAgICAgICAgICAgaW50ZXJuYWxzLmRpc2Nvbm5lY3RlZENhbGxiYWNrKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9ubHkgY3JlYXRlIGN1c3RvbSBlbGVtZW50cyBpZiB0aGlzIGVsZW1lbnQncyBvd25lciBkb2N1bWVudCBpc1xuICAgICAgICAvLyBhc3NvY2lhdGVkIHdpdGggdGhlIHJlZ2lzdHJ5LlxuICAgICAgICBpZiAoIXRoaXMub3duZXJEb2N1bWVudCEuX19DRV9yZWdpc3RyeSkge1xuICAgICAgICAgIGludGVybmFscy5wYXRjaFRyZWUodGhpcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW50ZXJuYWxzLnBhdGNoQW5kVXBncmFkZVRyZWUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGh0bWxTdHJpbmc7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKE5hdGl2ZS5FbGVtZW50X2lubmVySFRNTCAmJiBOYXRpdmUuRWxlbWVudF9pbm5lckhUTUwuZ2V0KSB7XG4gICAgcGF0Y2hfaW5uZXJIVE1MKEVsZW1lbnQucHJvdG90eXBlLCBOYXRpdmUuRWxlbWVudF9pbm5lckhUTUwpO1xuICB9IGVsc2UgaWYgKE5hdGl2ZS5IVE1MRWxlbWVudF9pbm5lckhUTUwgJiYgTmF0aXZlLkhUTUxFbGVtZW50X2lubmVySFRNTC5nZXQpIHtcbiAgICBwYXRjaF9pbm5lckhUTUwoSFRNTEVsZW1lbnQucHJvdG90eXBlLCBOYXRpdmUuSFRNTEVsZW1lbnRfaW5uZXJIVE1MKTtcbiAgfSBlbHNlIHtcbiAgICBpbnRlcm5hbHMuYWRkRWxlbWVudFBhdGNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBwYXRjaF9pbm5lckhUTUwoZWxlbWVudCwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIC8vIEltcGxlbWVudHMgZ2V0dGluZyBgaW5uZXJIVE1MYCBieSBwZXJmb3JtaW5nIGFuIHVucGF0Y2hlZCBgY2xvbmVOb2RlYFxuICAgICAgICAvLyBvZiB0aGUgZWxlbWVudCBhbmQgcmV0dXJuaW5nIHRoZSByZXN1bHRpbmcgZWxlbWVudCdzIGBpbm5lckhUTUxgLlxuICAgICAgICAvLyBUT0RPOiBJcyB0aGlzIHRvbyBleHBlbnNpdmU/XG4gICAgICAgIGdldDogZnVuY3Rpb24gKHRoaXM6IEVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gKE5hdGl2ZS5Ob2RlX2Nsb25lTm9kZS5jYWxsKHRoaXMsIHRydWUpIGFzIEVsZW1lbnQpLmlubmVySFRNTDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gSW1wbGVtZW50cyBzZXR0aW5nIGBpbm5lckhUTUxgIGJ5IGNyZWF0aW5nIGFuIHVucGF0Y2hlZCBlbGVtZW50LFxuICAgICAgICAvLyBzZXR0aW5nIGBpbm5lckhUTUxgIG9mIHRoYXQgZWxlbWVudCBhbmQgcmVwbGFjaW5nIHRoZSB0YXJnZXRcbiAgICAgICAgLy8gZWxlbWVudCdzIGNoaWxkcmVuIHdpdGggdGhvc2Ugb2YgdGhlIHVucGF0Y2hlZCBlbGVtZW50LlxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0aGlzOiBFbGVtZW50LCBhc3NpZ25lZFZhbHVlKSB7XG4gICAgICAgICAgLy8gTk9URTogcmUtcm91dGUgdG8gYGNvbnRlbnRgIGZvciBgdGVtcGxhdGVgIGVsZW1lbnRzLlxuICAgICAgICAgIC8vIFdlIG5lZWQgdG8gZG8gdGhpcyBiZWNhdXNlIGB0ZW1wbGF0ZS5hcHBlbmRDaGlsZGAgZG9lcyBub3RcbiAgICAgICAgICAvLyByb3V0ZSBpbnRvIGB0ZW1wbGF0ZS5jb250ZW50YC5cbiAgICAgICAgICBjb25zdCBpc1RlbXBsYXRlID0gdGhpcy5sb2NhbE5hbWUgPT09ICd0ZW1wbGF0ZSc7XG4gICAgICAgICAgY29uc3QgY29udGVudCA9IGlzVGVtcGxhdGVcbiAgICAgICAgICAgID8gKHRoaXMgYXMgSFRNTFRlbXBsYXRlRWxlbWVudCkuY29udGVudFxuICAgICAgICAgICAgOiB0aGlzO1xuICAgICAgICAgIGNvbnN0IHJhd0VsZW1lbnQgPSBOYXRpdmUuRG9jdW1lbnRfY3JlYXRlRWxlbWVudE5TLmNhbGwoXG4gICAgICAgICAgICBkb2N1bWVudCxcbiAgICAgICAgICAgIHRoaXMubmFtZXNwYWNlVVJJLFxuICAgICAgICAgICAgdGhpcy5sb2NhbE5hbWVcbiAgICAgICAgICApO1xuICAgICAgICAgIHJhd0VsZW1lbnQuaW5uZXJIVE1MID0gYXNzaWduZWRWYWx1ZTtcblxuICAgICAgICAgIHdoaWxlIChjb250ZW50LmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgTmF0aXZlLk5vZGVfcmVtb3ZlQ2hpbGQuY2FsbChjb250ZW50LCBjb250ZW50LmNoaWxkTm9kZXNbMF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBpc1RlbXBsYXRlXG4gICAgICAgICAgICA/IChyYXdFbGVtZW50IGFzIEhUTUxUZW1wbGF0ZUVsZW1lbnQpLmNvbnRlbnRcbiAgICAgICAgICAgIDogcmF3RWxlbWVudDtcbiAgICAgICAgICB3aGlsZSAoY29udGFpbmVyLmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgTmF0aXZlLk5vZGVfYXBwZW5kQ2hpbGQuY2FsbChjb250ZW50LCBjb250YWluZXIuY2hpbGROb2Rlc1swXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBFbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbiAodGhpczogRWxlbWVudCwgbmFtZSwgbmV3VmFsdWUpIHtcbiAgICAvLyBGYXN0IHBhdGggZm9yIG5vbi1jdXN0b20gZWxlbWVudHMuXG4gICAgaWYgKHRoaXMuX19DRV9zdGF0ZSAhPT0gQ0VTdGF0ZS5jdXN0b20pIHtcbiAgICAgIHJldHVybiBOYXRpdmUuRWxlbWVudF9zZXRBdHRyaWJ1dGUuY2FsbCh0aGlzLCBuYW1lLCBuZXdWYWx1ZSk7XG4gICAgfVxuXG4gICAgY29uc3Qgb2xkVmFsdWUgPSBOYXRpdmUuRWxlbWVudF9nZXRBdHRyaWJ1dGUuY2FsbCh0aGlzLCBuYW1lKTtcbiAgICBOYXRpdmUuRWxlbWVudF9zZXRBdHRyaWJ1dGUuY2FsbCh0aGlzLCBuYW1lLCBuZXdWYWx1ZSk7XG4gICAgbmV3VmFsdWUgPSBOYXRpdmUuRWxlbWVudF9nZXRBdHRyaWJ1dGUuY2FsbCh0aGlzLCBuYW1lKSE7XG4gICAgaW50ZXJuYWxzLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayh0aGlzLCBuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUsIG51bGwpO1xuICB9O1xuXG4gIEVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZU5TID0gZnVuY3Rpb24gKFxuICAgIHRoaXM6IEVsZW1lbnQsXG4gICAgbmFtZXNwYWNlLFxuICAgIG5hbWUsXG4gICAgbmV3VmFsdWVcbiAgKSB7XG4gICAgLy8gRmFzdCBwYXRoIGZvciBub24tY3VzdG9tIGVsZW1lbnRzLlxuICAgIGlmICh0aGlzLl9fQ0Vfc3RhdGUgIT09IENFU3RhdGUuY3VzdG9tKSB7XG4gICAgICByZXR1cm4gTmF0aXZlLkVsZW1lbnRfc2V0QXR0cmlidXRlTlMuY2FsbChcbiAgICAgICAgdGhpcyxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBuYW1lLFxuICAgICAgICBuZXdWYWx1ZVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBvbGRWYWx1ZSA9IE5hdGl2ZS5FbGVtZW50X2dldEF0dHJpYnV0ZU5TLmNhbGwodGhpcywgbmFtZXNwYWNlLCBuYW1lKTtcbiAgICBOYXRpdmUuRWxlbWVudF9zZXRBdHRyaWJ1dGVOUy5jYWxsKHRoaXMsIG5hbWVzcGFjZSwgbmFtZSwgbmV3VmFsdWUpO1xuICAgIG5ld1ZhbHVlID0gTmF0aXZlLkVsZW1lbnRfZ2V0QXR0cmlidXRlTlMuY2FsbCh0aGlzLCBuYW1lc3BhY2UsIG5hbWUpITtcbiAgICBpbnRlcm5hbHMuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKFxuICAgICAgdGhpcyxcbiAgICAgIG5hbWUsXG4gICAgICBvbGRWYWx1ZSxcbiAgICAgIG5ld1ZhbHVlLFxuICAgICAgbmFtZXNwYWNlXG4gICAgKTtcbiAgfTtcblxuICBFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGUgPSBmdW5jdGlvbiAodGhpczogRWxlbWVudCwgbmFtZSkge1xuICAgIC8vIEZhc3QgcGF0aCBmb3Igbm9uLWN1c3RvbSBlbGVtZW50cy5cbiAgICBpZiAodGhpcy5fX0NFX3N0YXRlICE9PSBDRVN0YXRlLmN1c3RvbSkge1xuICAgICAgcmV0dXJuIE5hdGl2ZS5FbGVtZW50X3JlbW92ZUF0dHJpYnV0ZS5jYWxsKHRoaXMsIG5hbWUpO1xuICAgIH1cblxuICAgIGNvbnN0IG9sZFZhbHVlID0gTmF0aXZlLkVsZW1lbnRfZ2V0QXR0cmlidXRlLmNhbGwodGhpcywgbmFtZSk7XG4gICAgTmF0aXZlLkVsZW1lbnRfcmVtb3ZlQXR0cmlidXRlLmNhbGwodGhpcywgbmFtZSk7XG4gICAgaWYgKG9sZFZhbHVlICE9PSBudWxsKSB7XG4gICAgICBpbnRlcm5hbHMuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHRoaXMsIG5hbWUsIG9sZFZhbHVlLCBudWxsLCBudWxsKTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKE5hdGl2ZS5FbGVtZW50X3RvZ2dsZUF0dHJpYnV0ZSkge1xuICAgIEVsZW1lbnQucHJvdG90eXBlLnRvZ2dsZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChcbiAgICAgIHRoaXM6IEVsZW1lbnQsXG4gICAgICBuYW1lLFxuICAgICAgZm9yY2U/OiBib29sZWFuIHwgdW5kZWZpbmVkXG4gICAgKSB7XG4gICAgICAvLyBGYXN0IHBhdGggZm9yIG5vbi1jdXN0b20gZWxlbWVudHMuXG4gICAgICBpZiAodGhpcy5fX0NFX3N0YXRlICE9PSBDRVN0YXRlLmN1c3RvbSkge1xuICAgICAgICByZXR1cm4gTmF0aXZlLkVsZW1lbnRfdG9nZ2xlQXR0cmlidXRlLmNhbGwodGhpcywgbmFtZSwgZm9yY2UpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBvbGRWYWx1ZSA9IE5hdGl2ZS5FbGVtZW50X2dldEF0dHJpYnV0ZS5jYWxsKHRoaXMsIG5hbWUpO1xuICAgICAgY29uc3QgaGFkQXR0cmlidXRlID0gb2xkVmFsdWUgIT09IG51bGw7XG4gICAgICBjb25zdCBoYXNBdHRyaWJ1dGUgPSBOYXRpdmUuRWxlbWVudF90b2dnbGVBdHRyaWJ1dGUuY2FsbChcbiAgICAgICAgdGhpcyxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgZm9yY2VcbiAgICAgICk7XG4gICAgICBpZiAoaGFkQXR0cmlidXRlICE9PSBoYXNBdHRyaWJ1dGUpIHtcbiAgICAgICAgaW50ZXJuYWxzLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgb2xkVmFsdWUsXG4gICAgICAgICAgaGFzQXR0cmlidXRlID8gJycgOiBudWxsLFxuICAgICAgICAgIG51bGxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNBdHRyaWJ1dGU7XG4gICAgfTtcbiAgfVxuXG4gIEVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZU5TID0gZnVuY3Rpb24gKFxuICAgIHRoaXM6IEVsZW1lbnQsXG4gICAgbmFtZXNwYWNlLFxuICAgIG5hbWVcbiAgKSB7XG4gICAgLy8gRmFzdCBwYXRoIGZvciBub24tY3VzdG9tIGVsZW1lbnRzLlxuICAgIGlmICh0aGlzLl9fQ0Vfc3RhdGUgIT09IENFU3RhdGUuY3VzdG9tKSB7XG4gICAgICByZXR1cm4gTmF0aXZlLkVsZW1lbnRfcmVtb3ZlQXR0cmlidXRlTlMuY2FsbCh0aGlzLCBuYW1lc3BhY2UsIG5hbWUpO1xuICAgIH1cblxuICAgIGNvbnN0IG9sZFZhbHVlID0gTmF0aXZlLkVsZW1lbnRfZ2V0QXR0cmlidXRlTlMuY2FsbCh0aGlzLCBuYW1lc3BhY2UsIG5hbWUpO1xuICAgIE5hdGl2ZS5FbGVtZW50X3JlbW92ZUF0dHJpYnV0ZU5TLmNhbGwodGhpcywgbmFtZXNwYWNlLCBuYW1lKTtcbiAgICAvLyBJbiBvbGRlciBicm93c2VycywgYEVsZW1lbnQjZ2V0QXR0cmlidXRlTlNgIG1heSByZXR1cm4gdGhlIGVtcHR5IHN0cmluZ1xuICAgIC8vIGluc3RlYWQgb2YgbnVsbCBpZiB0aGUgYXR0cmlidXRlIGRvZXMgbm90IGV4aXN0LiBGb3IgZGV0YWlscywgc2VlO1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50L2dldEF0dHJpYnV0ZU5TI05vdGVzXG4gICAgY29uc3QgbmV3VmFsdWUgPSBOYXRpdmUuRWxlbWVudF9nZXRBdHRyaWJ1dGVOUy5jYWxsKHRoaXMsIG5hbWVzcGFjZSwgbmFtZSk7XG4gICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgaW50ZXJuYWxzLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhcbiAgICAgICAgdGhpcyxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgb2xkVmFsdWUsXG4gICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICBuYW1lc3BhY2VcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHBhdGNoX2luc2VydEFkamFjZW50RWxlbWVudChcbiAgICBkZXN0aW5hdGlvbjogRWxlbWVudCxcbiAgICBiYXNlTWV0aG9kOiBFbGVtZW50WydpbnNlcnRBZGphY2VudEVsZW1lbnQnXVxuICApIHtcbiAgICBkZXN0aW5hdGlvbi5pbnNlcnRBZGphY2VudEVsZW1lbnQgPSBmdW5jdGlvbiAoXG4gICAgICB0aGlzOiBFbGVtZW50LFxuICAgICAgcG9zaXRpb24sXG4gICAgICBlbGVtZW50XG4gICAgKSB7XG4gICAgICBjb25zdCB3YXNDb25uZWN0ZWQgPSBVdGlsaXRpZXMuaXNDb25uZWN0ZWQoZWxlbWVudCk7XG4gICAgICBjb25zdCBpbnNlcnRlZEVsZW1lbnQgPSBiYXNlTWV0aG9kLmNhbGwodGhpcywgcG9zaXRpb24sIGVsZW1lbnQpITtcblxuICAgICAgaWYgKHdhc0Nvbm5lY3RlZCkge1xuICAgICAgICBpbnRlcm5hbHMuZGlzY29ubmVjdFRyZWUoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChVdGlsaXRpZXMuaXNDb25uZWN0ZWQoaW5zZXJ0ZWRFbGVtZW50KSkge1xuICAgICAgICBpbnRlcm5hbHMuY29ubmVjdFRyZWUoZWxlbWVudCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaW5zZXJ0ZWRFbGVtZW50O1xuICAgIH07XG4gIH1cblxuICBpZiAoTmF0aXZlLkhUTUxFbGVtZW50X2luc2VydEFkamFjZW50RWxlbWVudCkge1xuICAgIHBhdGNoX2luc2VydEFkamFjZW50RWxlbWVudChcbiAgICAgIEhUTUxFbGVtZW50LnByb3RvdHlwZSxcbiAgICAgIE5hdGl2ZS5IVE1MRWxlbWVudF9pbnNlcnRBZGphY2VudEVsZW1lbnRcbiAgICApO1xuICB9IGVsc2UgaWYgKE5hdGl2ZS5FbGVtZW50X2luc2VydEFkamFjZW50RWxlbWVudCkge1xuICAgIHBhdGNoX2luc2VydEFkamFjZW50RWxlbWVudChcbiAgICAgIEVsZW1lbnQucHJvdG90eXBlLFxuICAgICAgTmF0aXZlLkVsZW1lbnRfaW5zZXJ0QWRqYWNlbnRFbGVtZW50XG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdGNoX2luc2VydEFkamFjZW50SFRNTChcbiAgICBkZXN0aW5hdGlvbjogRWxlbWVudCxcbiAgICBiYXNlTWV0aG9kOiBFbGVtZW50WydpbnNlcnRBZGphY2VudEhUTUwnXVxuICApIHtcbiAgICAvKipcbiAgICAgKiBQYXRjaGVzIGFuZCB1cGdyYWRlcyBhbGwgbm9kZXMgd2hpY2ggYXJlIHNpYmxpbmdzIGJldHdlZW4gYHN0YXJ0YFxuICAgICAqIChpbmNsdXNpdmUpIGFuZCBgZW5kYCAoZXhjbHVzaXZlKS4gSWYgYGVuZGAgaXMgYG51bGxgLCB0aGVuIGFsbCBzaWJsaW5nc1xuICAgICAqIGZvbGxvd2luZyBgc3RhcnRgIHdpbGwgYmUgcGF0Y2hlZCBhbmQgdXBncmFkZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBncmFkZU5vZGVzSW5SYW5nZShzdGFydDogTm9kZSwgZW5kOiBOb2RlIHwgbnVsbCkge1xuICAgICAgY29uc3Qgbm9kZXMgPSBbXTtcbiAgICAgIGZvciAobGV0IG5vZGU6IE5vZGUgPSBzdGFydDsgbm9kZSAhPT0gZW5kOyBub2RlID0gbm9kZS5uZXh0U2libGluZyEpIHtcbiAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW50ZXJuYWxzLnBhdGNoQW5kVXBncmFkZVRyZWUobm9kZXNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGRlc3RpbmF0aW9uLmluc2VydEFkamFjZW50SFRNTCA9IGZ1bmN0aW9uICh0aGlzOiBFbGVtZW50LCBwb3NpdGlvbiwgdGV4dCkge1xuICAgICAgY29uc3Qgc3RyUG9zaXRpb24gPSBwb3NpdGlvbi50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBpZiAoc3RyUG9zaXRpb24gPT09ICdiZWZvcmViZWdpbicpIHtcbiAgICAgICAgY29uc3QgbWFya2VyID0gdGhpcy5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgIGJhc2VNZXRob2QuY2FsbCh0aGlzLCBzdHJQb3NpdGlvbiwgdGV4dCk7XG4gICAgICAgIHVwZ3JhZGVOb2Rlc0luUmFuZ2UobWFya2VyIHx8IHRoaXMucGFyZW50Tm9kZSEuZmlyc3RDaGlsZCEsIHRoaXMpO1xuICAgICAgfSBlbHNlIGlmIChzdHJQb3NpdGlvbiA9PT0gJ2FmdGVyYmVnaW4nKSB7XG4gICAgICAgIGNvbnN0IG1hcmtlciA9IHRoaXMuZmlyc3RDaGlsZDtcbiAgICAgICAgYmFzZU1ldGhvZC5jYWxsKHRoaXMsIHN0clBvc2l0aW9uLCB0ZXh0KTtcbiAgICAgICAgdXBncmFkZU5vZGVzSW5SYW5nZSh0aGlzLmZpcnN0Q2hpbGQhLCBtYXJrZXIpO1xuICAgICAgfSBlbHNlIGlmIChzdHJQb3NpdGlvbiA9PT0gJ2JlZm9yZWVuZCcpIHtcbiAgICAgICAgY29uc3QgbWFya2VyID0gdGhpcy5sYXN0Q2hpbGQ7XG4gICAgICAgIGJhc2VNZXRob2QuY2FsbCh0aGlzLCBzdHJQb3NpdGlvbiwgdGV4dCk7XG4gICAgICAgIHVwZ3JhZGVOb2Rlc0luUmFuZ2UobWFya2VyIHx8IHRoaXMuZmlyc3RDaGlsZCEsIG51bGwpO1xuICAgICAgfSBlbHNlIGlmIChzdHJQb3NpdGlvbiA9PT0gJ2FmdGVyZW5kJykge1xuICAgICAgICBjb25zdCBtYXJrZXIgPSB0aGlzLm5leHRTaWJsaW5nO1xuICAgICAgICBiYXNlTWV0aG9kLmNhbGwodGhpcywgc3RyUG9zaXRpb24sIHRleHQpO1xuICAgICAgICB1cGdyYWRlTm9kZXNJblJhbmdlKHRoaXMubmV4dFNpYmxpbmchLCBtYXJrZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFxuICAgICAgICAgIGBUaGUgdmFsdWUgcHJvdmlkZWQgKCR7U3RyaW5nKHN0clBvc2l0aW9uKX0pIGlzIGAgK1xuICAgICAgICAgICAgXCJub3Qgb25lIG9mICdiZWZvcmViZWdpbicsICdhZnRlcmJlZ2luJywgJ2JlZm9yZWVuZCcsIG9yICdhZnRlcmVuZCcuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgaWYgKE5hdGl2ZS5IVE1MRWxlbWVudF9pbnNlcnRBZGphY2VudEhUTUwpIHtcbiAgICBwYXRjaF9pbnNlcnRBZGphY2VudEhUTUwoXG4gICAgICBIVE1MRWxlbWVudC5wcm90b3R5cGUsXG4gICAgICBOYXRpdmUuSFRNTEVsZW1lbnRfaW5zZXJ0QWRqYWNlbnRIVE1MXG4gICAgKTtcbiAgfSBlbHNlIGlmIChOYXRpdmUuRWxlbWVudF9pbnNlcnRBZGphY2VudEhUTUwpIHtcbiAgICBwYXRjaF9pbnNlcnRBZGphY2VudEhUTUwoXG4gICAgICBFbGVtZW50LnByb3RvdHlwZSxcbiAgICAgIE5hdGl2ZS5FbGVtZW50X2luc2VydEFkamFjZW50SFRNTFxuICAgICk7XG4gIH1cblxuICBQYXRjaFBhcmVudE5vZGUoaW50ZXJuYWxzLCBFbGVtZW50LnByb3RvdHlwZSwge1xuICAgIHByZXBlbmQ6IE5hdGl2ZS5FbGVtZW50X3ByZXBlbmQsXG4gICAgYXBwZW5kOiBOYXRpdmUuRWxlbWVudF9hcHBlbmQsXG4gIH0pO1xuXG4gIFBhdGNoQ2hpbGROb2RlKGludGVybmFscywgRWxlbWVudC5wcm90b3R5cGUsIHtcbiAgICBiZWZvcmU6IE5hdGl2ZS5FbGVtZW50X2JlZm9yZSxcbiAgICBhZnRlcjogTmF0aXZlLkVsZW1lbnRfYWZ0ZXIsXG4gICAgcmVwbGFjZVdpdGg6IE5hdGl2ZS5FbGVtZW50X3JlcGxhY2VXaXRoLFxuICAgIHJlbW92ZTogTmF0aXZlLkVsZW1lbnRfcmVtb3ZlLFxuICB9KTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kXG4gKiBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5XG4gKiBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5XG4gKiBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQXG4gKiByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSAnYWxyZWFkeSBjb25zdHJ1Y3RlZCBtYXJrZXInIHVzZWQgaW4gY3VzdG9tXG4gKiBlbGVtZW50IGNvbnN0cnVjdGlvbiBzdGFja3MuXG4gKlxuICogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1hbHJlYWR5LWNvbnN0cnVjdGVkLW1hcmtlclxuICovXG5jb25zdCBhbHJlYWR5Q29uc3RydWN0ZWRNYXJrZXIgPSB7fSBhcyB7X2FscmVhZHlDb25zdHJ1Y3RlZE1hcmtlcjogbmV2ZXJ9O1xuXG5leHBvcnQgZGVmYXVsdCBhbHJlYWR5Q29uc3RydWN0ZWRNYXJrZXI7XG5leHBvcnQgdHlwZSBBbHJlYWR5Q29uc3RydWN0ZWRNYXJrZXJUeXBlID0gdHlwZW9mIGFscmVhZHlDb25zdHJ1Y3RlZE1hcmtlcjtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kXG4gKiBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5XG4gKiBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5XG4gKiBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQXG4gKiByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuaW1wb3J0IEFscmVhZHlDb25zdHJ1Y3RlZE1hcmtlciBmcm9tICcuLi9BbHJlYWR5Q29uc3RydWN0ZWRNYXJrZXIuanMnO1xuaW1wb3J0IEN1c3RvbUVsZW1lbnRJbnRlcm5hbHMgZnJvbSAnLi4vQ3VzdG9tRWxlbWVudEludGVybmFscy5qcyc7XG5pbXBvcnQgQ0VTdGF0ZSBmcm9tICcuLi9DdXN0b21FbGVtZW50U3RhdGUuanMnO1xuaW1wb3J0ICogYXMgTmF0aXZlIGZyb20gJy4vTmF0aXZlLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGludGVybmFsczogQ3VzdG9tRWxlbWVudEludGVybmFscykge1xuICBjb25zdCBQYXRjaGVkSFRNTEVsZW1lbnQgPSBmdW5jdGlvbiBIVE1MRWxlbWVudCh0aGlzOiBIVE1MRWxlbWVudCkge1xuICAgIC8vIFRoaXMgc2hvdWxkIHJlYWxseSBiZSBgbmV3LnRhcmdldGAgYnV0IGBuZXcudGFyZ2V0YCBjYW4ndCBiZVxuICAgIC8vIGVtdWxhdGVkIGluIEVTNS4gQXNzdW1pbmcgdGhlIHVzZXIga2VlcHMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlXG4gICAgLy8gY29uc3RydWN0b3IncyBwcm90b3R5cGUncyBgY29uc3RydWN0b3JgIHByb3BlcnR5LCB0aGlzIGlzXG4gICAgLy8gZXF1aXZhbGVudC5cbiAgICBjb25zdCBjb25zdHJ1Y3RvciA9IHRoaXMuY29uc3RydWN0b3IgYXMge25ldyAoKTogSFRNTEVsZW1lbnR9O1xuXG4gICAgLy8gQWx3YXlzIGxvb2sgdXAgdGhlIGRlZmluaXRpb24gZnJvbSB0aGUgZ2xvYmFsIHJlZ2lzdHJ5LlxuICAgIGNvbnN0IHJlZ2lzdHJ5ID0gZG9jdW1lbnQuX19DRV9yZWdpc3RyeSE7XG4gICAgY29uc3QgZGVmaW5pdGlvbiA9IHJlZ2lzdHJ5LmludGVybmFsX2NvbnN0cnVjdG9yVG9EZWZpbml0aW9uKGNvbnN0cnVjdG9yKTtcbiAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0ZhaWxlZCB0byBjb25zdHJ1Y3QgYSBjdXN0b20gZWxlbWVudDogJyArXG4gICAgICAgICAgJ1RoZSBjb25zdHJ1Y3RvciB3YXMgbm90IHJlZ2lzdGVyZWQgd2l0aCBgY3VzdG9tRWxlbWVudHNgLidcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgY29uc3RydWN0aW9uU3RhY2sgPSBkZWZpbml0aW9uLmNvbnN0cnVjdGlvblN0YWNrO1xuXG4gICAgaWYgKGNvbnN0cnVjdGlvblN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc3QgZWxlbWVudCA9IE5hdGl2ZS5Eb2N1bWVudF9jcmVhdGVFbGVtZW50LmNhbGwoXG4gICAgICAgIGRvY3VtZW50LFxuICAgICAgICBkZWZpbml0aW9uLmxvY2FsTmFtZVxuICAgICAgKSBhcyBIVE1MRWxlbWVudDtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihlbGVtZW50LCBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgYXMgdHlwZW9mIGVsZW1lbnQpO1xuICAgICAgZWxlbWVudC5fX0NFX3N0YXRlID0gQ0VTdGF0ZS5jdXN0b207XG4gICAgICBlbGVtZW50Ll9fQ0VfZGVmaW5pdGlvbiA9IGRlZmluaXRpb247XG4gICAgICBpbnRlcm5hbHMucGF0Y2hFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgY29uc3QgbGFzdEluZGV4ID0gY29uc3RydWN0aW9uU3RhY2subGVuZ3RoIC0gMTtcbiAgICBjb25zdCBlbGVtZW50ID0gY29uc3RydWN0aW9uU3RhY2tbbGFzdEluZGV4XTtcbiAgICBpZiAoZWxlbWVudCA9PT0gQWxyZWFkeUNvbnN0cnVjdGVkTWFya2VyKSB7XG4gICAgICBjb25zdCBsb2NhbE5hbWUgPSBkZWZpbml0aW9uLmxvY2FsTmFtZTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEZhaWxlZCB0byBjb25zdHJ1Y3QgJyR7bG9jYWxOYW1lfSc6IGAgK1xuICAgICAgICAgICdUaGlzIGVsZW1lbnQgd2FzIGFscmVhZHkgY29uc3RydWN0ZWQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgdG9Db25zdHJ1Y3RFbGVtZW50ID0gZWxlbWVudCBhcyBIVE1MRWxlbWVudDtcbiAgICBjb25zdHJ1Y3Rpb25TdGFja1tsYXN0SW5kZXhdID0gQWxyZWFkeUNvbnN0cnVjdGVkTWFya2VyO1xuXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKFxuICAgICAgdG9Db25zdHJ1Y3RFbGVtZW50LFxuICAgICAgY29uc3RydWN0b3IucHJvdG90eXBlIGFzIHR5cGVvZiB0b0NvbnN0cnVjdEVsZW1lbnRcbiAgICApO1xuICAgIGludGVybmFscy5wYXRjaEVsZW1lbnQodG9Db25zdHJ1Y3RFbGVtZW50KTtcblxuICAgIHJldHVybiB0b0NvbnN0cnVjdEVsZW1lbnQ7XG4gIH07XG5cbiAgUGF0Y2hlZEhUTUxFbGVtZW50LnByb3RvdHlwZSA9IE5hdGl2ZS5IVE1MRWxlbWVudC5wcm90b3R5cGU7XG4gIC8vIFNhZmFyaSA5IGhhcyBgd3JpdGFibGU6IGZhbHNlYCBvbiB0aGUgcHJvcGVydHlEZXNjcmlwdG9yXG4gIC8vIE1ha2UgaXQgd3JpdGFibGUgc28gdGhhdCBUeXBlU2NyaXB0IGNhbiBwYXRjaCB1cCB0aGVcbiAgLy8gY29uc3RydWN0b3IgaW4gdGhlIEVTNSBjb21waWxlZCBjb2RlLlxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSFRNTEVsZW1lbnQucHJvdG90eXBlLCAnY29uc3RydWN0b3InLCB7XG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBQYXRjaGVkSFRNTEVsZW1lbnQsXG4gIH0pO1xuXG4gIHdpbmRvd1snSFRNTEVsZW1lbnQnXSA9IChQYXRjaGVkSFRNTEVsZW1lbnQgYXMgdW5rbm93bikgYXMgdHlwZW9mIEhUTUxFbGVtZW50O1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmRcbiAqIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXlcbiAqIGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0IENvZGUgZGlzdHJpYnV0ZWQgYnlcbiAqIEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzbyBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVBcbiAqIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG5pbXBvcnQgQ3VzdG9tRWxlbWVudEludGVybmFscyBmcm9tICcuLi9DdXN0b21FbGVtZW50SW50ZXJuYWxzLmpzJztcbmltcG9ydCAqIGFzIFV0aWxpdGllcyBmcm9tICcuLi9VdGlsaXRpZXMuanMnO1xuXG5pbXBvcnQgKiBhcyBOYXRpdmUgZnJvbSAnLi9OYXRpdmUuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoaW50ZXJuYWxzOiBDdXN0b21FbGVtZW50SW50ZXJuYWxzKSB7XG4gIC8vIGBOb2RlI25vZGVWYWx1ZWAgaXMgaW1wbGVtZW50ZWQgb24gYEF0dHJgLlxuICAvLyBgTm9kZSN0ZXh0Q29udGVudGAgaXMgaW1wbGVtZW50ZWQgb24gYEF0dHJgLCBgRWxlbWVudGAuXG5cbiAgTm9kZS5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlID0gZnVuY3Rpb24gPFQgZXh0ZW5kcyBOb2RlPihcbiAgICB0aGlzOiBOb2RlLFxuICAgIG5vZGU6IFQsXG4gICAgcmVmTm9kZTogTm9kZSB8IG51bGxcbiAgKSB7XG4gICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KSB7XG4gICAgICBjb25zdCBpbnNlcnRlZE5vZGVzID0gVXRpbGl0aWVzLmNoaWxkcmVuRnJvbUZyYWdtZW50KG5vZGUpO1xuICAgICAgY29uc3QgbmF0aXZlUmVzdWx0ID0gTmF0aXZlLk5vZGVfaW5zZXJ0QmVmb3JlLmNhbGwodGhpcywgbm9kZSwgcmVmTm9kZSk7XG5cbiAgICAgIC8vIERvY3VtZW50RnJhZ21lbnRzIGNhbid0IGJlIGNvbm5lY3RlZCwgc28gYGRpc2Nvbm5lY3RUcmVlYCB3aWxsIG5ldmVyXG4gICAgICAvLyBuZWVkIHRvIGJlIGNhbGxlZCBvbiBhIERvY3VtZW50RnJhZ21lbnQncyBjaGlsZHJlbiBhZnRlciBpbnNlcnRpbmcgaXQuXG5cbiAgICAgIGlmIChVdGlsaXRpZXMuaXNDb25uZWN0ZWQodGhpcykpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnNlcnRlZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaW50ZXJuYWxzLmNvbm5lY3RUcmVlKGluc2VydGVkTm9kZXNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuYXRpdmVSZXN1bHQgYXMgVDtcbiAgICB9XG5cbiAgICBjb25zdCBub2RlV2FzQ29ubmVjdGVkRWxlbWVudCA9XG4gICAgICBub2RlIGluc3RhbmNlb2YgRWxlbWVudCAmJiBVdGlsaXRpZXMuaXNDb25uZWN0ZWQobm9kZSk7XG4gICAgY29uc3QgbmF0aXZlUmVzdWx0ID0gTmF0aXZlLk5vZGVfaW5zZXJ0QmVmb3JlLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgbm9kZSxcbiAgICAgIHJlZk5vZGVcbiAgICApIGFzIFQ7XG5cbiAgICBpZiAobm9kZVdhc0Nvbm5lY3RlZEVsZW1lbnQpIHtcbiAgICAgIGludGVybmFscy5kaXNjb25uZWN0VHJlZShub2RlKTtcbiAgICB9XG5cbiAgICBpZiAoVXRpbGl0aWVzLmlzQ29ubmVjdGVkKHRoaXMpKSB7XG4gICAgICBpbnRlcm5hbHMuY29ubmVjdFRyZWUobm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hdGl2ZVJlc3VsdDtcbiAgfTtcblxuICBOb2RlLnByb3RvdHlwZS5hcHBlbmRDaGlsZCA9IGZ1bmN0aW9uIDxUIGV4dGVuZHMgTm9kZT4odGhpczogTm9kZSwgbm9kZTogVCkge1xuICAgIGlmIChub2RlIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCkge1xuICAgICAgY29uc3QgaW5zZXJ0ZWROb2RlcyA9IFV0aWxpdGllcy5jaGlsZHJlbkZyb21GcmFnbWVudChub2RlKTtcbiAgICAgIGNvbnN0IG5hdGl2ZVJlc3VsdCA9IE5hdGl2ZS5Ob2RlX2FwcGVuZENoaWxkLmNhbGwodGhpcywgbm9kZSkgYXMgVDtcblxuICAgICAgLy8gRG9jdW1lbnRGcmFnbWVudHMgY2FuJ3QgYmUgY29ubmVjdGVkLCBzbyBgZGlzY29ubmVjdFRyZWVgIHdpbGwgbmV2ZXJcbiAgICAgIC8vIG5lZWQgdG8gYmUgY2FsbGVkIG9uIGEgRG9jdW1lbnRGcmFnbWVudCdzIGNoaWxkcmVuIGFmdGVyIGluc2VydGluZyBpdC5cblxuICAgICAgaWYgKFV0aWxpdGllcy5pc0Nvbm5lY3RlZCh0aGlzKSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluc2VydGVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpbnRlcm5hbHMuY29ubmVjdFRyZWUoaW5zZXJ0ZWROb2Rlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5hdGl2ZVJlc3VsdDtcbiAgICB9XG5cbiAgICBjb25zdCBub2RlV2FzQ29ubmVjdGVkRWxlbWVudCA9XG4gICAgICBub2RlIGluc3RhbmNlb2YgRWxlbWVudCAmJiBVdGlsaXRpZXMuaXNDb25uZWN0ZWQobm9kZSk7XG4gICAgY29uc3QgbmF0aXZlUmVzdWx0ID0gTmF0aXZlLk5vZGVfYXBwZW5kQ2hpbGQuY2FsbCh0aGlzLCBub2RlKSBhcyBUO1xuXG4gICAgaWYgKG5vZGVXYXNDb25uZWN0ZWRFbGVtZW50KSB7XG4gICAgICBpbnRlcm5hbHMuZGlzY29ubmVjdFRyZWUobm9kZSk7XG4gICAgfVxuXG4gICAgaWYgKFV0aWxpdGllcy5pc0Nvbm5lY3RlZCh0aGlzKSkge1xuICAgICAgaW50ZXJuYWxzLmNvbm5lY3RUcmVlKG5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBuYXRpdmVSZXN1bHQ7XG4gIH07XG5cbiAgTm9kZS5wcm90b3R5cGUuY2xvbmVOb2RlID0gZnVuY3Rpb24gKHRoaXM6IE5vZGUsIGRlZXApIHtcbiAgICBjb25zdCBjbG9uZSA9IE5hdGl2ZS5Ob2RlX2Nsb25lTm9kZS5jYWxsKHRoaXMsICEhZGVlcCk7XG4gICAgLy8gT25seSBjcmVhdGUgY3VzdG9tIGVsZW1lbnRzIGlmIHRoaXMgZWxlbWVudCdzIG93bmVyIGRvY3VtZW50IGlzXG4gICAgLy8gYXNzb2NpYXRlZCB3aXRoIHRoZSByZWdpc3RyeS5cbiAgICBpZiAoIXRoaXMub3duZXJEb2N1bWVudCEuX19DRV9yZWdpc3RyeSkge1xuICAgICAgaW50ZXJuYWxzLnBhdGNoVHJlZShjbG9uZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGludGVybmFscy5wYXRjaEFuZFVwZ3JhZGVUcmVlKGNsb25lKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsb25lO1xuICB9O1xuXG4gIE5vZGUucHJvdG90eXBlLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gPFQgZXh0ZW5kcyBOb2RlPih0aGlzOiBOb2RlLCBub2RlOiBUKSB7XG4gICAgY29uc3Qgbm9kZVdhc0Nvbm5lY3RlZEVsZW1lbnQgPVxuICAgICAgbm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgVXRpbGl0aWVzLmlzQ29ubmVjdGVkKG5vZGUpO1xuICAgIGNvbnN0IG5hdGl2ZVJlc3VsdCA9IE5hdGl2ZS5Ob2RlX3JlbW92ZUNoaWxkLmNhbGwodGhpcywgbm9kZSkgYXMgVDtcblxuICAgIGlmIChub2RlV2FzQ29ubmVjdGVkRWxlbWVudCkge1xuICAgICAgaW50ZXJuYWxzLmRpc2Nvbm5lY3RUcmVlKG5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBuYXRpdmVSZXN1bHQ7XG4gIH07XG5cbiAgTm9kZS5wcm90b3R5cGUucmVwbGFjZUNoaWxkID0gZnVuY3Rpb24gPFQgZXh0ZW5kcyBOb2RlPihcbiAgICB0aGlzOiBOb2RlLFxuICAgIG5vZGVUb0luc2VydDogTm9kZSxcbiAgICBub2RlVG9SZW1vdmU6IFRcbiAgKSB7XG4gICAgaWYgKG5vZGVUb0luc2VydCBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpIHtcbiAgICAgIGNvbnN0IGluc2VydGVkTm9kZXMgPSBVdGlsaXRpZXMuY2hpbGRyZW5Gcm9tRnJhZ21lbnQobm9kZVRvSW5zZXJ0KTtcbiAgICAgIGNvbnN0IG5hdGl2ZVJlc3VsdCA9IE5hdGl2ZS5Ob2RlX3JlcGxhY2VDaGlsZC5jYWxsKFxuICAgICAgICB0aGlzLFxuICAgICAgICBub2RlVG9JbnNlcnQsXG4gICAgICAgIG5vZGVUb1JlbW92ZVxuICAgICAgKSBhcyBUO1xuXG4gICAgICAvLyBEb2N1bWVudEZyYWdtZW50cyBjYW4ndCBiZSBjb25uZWN0ZWQsIHNvIGBkaXNjb25uZWN0VHJlZWAgd2lsbCBuZXZlclxuICAgICAgLy8gbmVlZCB0byBiZSBjYWxsZWQgb24gYSBEb2N1bWVudEZyYWdtZW50J3MgY2hpbGRyZW4gYWZ0ZXIgaW5zZXJ0aW5nIGl0LlxuXG4gICAgICBpZiAoVXRpbGl0aWVzLmlzQ29ubmVjdGVkKHRoaXMpKSB7XG4gICAgICAgIGludGVybmFscy5kaXNjb25uZWN0VHJlZShub2RlVG9SZW1vdmUpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluc2VydGVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpbnRlcm5hbHMuY29ubmVjdFRyZWUoaW5zZXJ0ZWROb2Rlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5hdGl2ZVJlc3VsdDtcbiAgICB9XG5cbiAgICBjb25zdCBub2RlVG9JbnNlcnRXYXNDb25uZWN0ZWRFbGVtZW50ID1cbiAgICAgIG5vZGVUb0luc2VydCBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgVXRpbGl0aWVzLmlzQ29ubmVjdGVkKG5vZGVUb0luc2VydCk7XG4gICAgY29uc3QgbmF0aXZlUmVzdWx0ID0gTmF0aXZlLk5vZGVfcmVwbGFjZUNoaWxkLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgbm9kZVRvSW5zZXJ0LFxuICAgICAgbm9kZVRvUmVtb3ZlXG4gICAgKSBhcyBUO1xuICAgIGNvbnN0IHRoaXNJc0Nvbm5lY3RlZCA9IFV0aWxpdGllcy5pc0Nvbm5lY3RlZCh0aGlzKTtcblxuICAgIGlmICh0aGlzSXNDb25uZWN0ZWQpIHtcbiAgICAgIGludGVybmFscy5kaXNjb25uZWN0VHJlZShub2RlVG9SZW1vdmUpO1xuICAgIH1cblxuICAgIGlmIChub2RlVG9JbnNlcnRXYXNDb25uZWN0ZWRFbGVtZW50KSB7XG4gICAgICBpbnRlcm5hbHMuZGlzY29ubmVjdFRyZWUobm9kZVRvSW5zZXJ0KTtcbiAgICB9XG5cbiAgICBpZiAodGhpc0lzQ29ubmVjdGVkKSB7XG4gICAgICBpbnRlcm5hbHMuY29ubmVjdFRyZWUobm9kZVRvSW5zZXJ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmF0aXZlUmVzdWx0O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhdGNoX3RleHRDb250ZW50KFxuICAgIGRlc3RpbmF0aW9uOiBOb2RlLFxuICAgIGJhc2VEZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3JcbiAgKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRlc3RpbmF0aW9uLCAndGV4dENvbnRlbnQnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBiYXNlRGVzY3JpcHRvci5lbnVtZXJhYmxlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBiYXNlRGVzY3JpcHRvci5nZXQsXG4gICAgICBzZXQ6IGZ1bmN0aW9uICh0aGlzOiBOb2RlLCBhc3NpZ25lZFZhbHVlKSB7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSB0ZXh0IG5vZGUgdGhlbiB0aGVyZSBhcmUgbm8gbm9kZXMgdG8gZGlzY29ubmVjdC5cbiAgICAgICAgaWYgKHRoaXMubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICAgICAgYmFzZURlc2NyaXB0b3Iuc2V0IS5jYWxsKHRoaXMsIGFzc2lnbmVkVmFsdWUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZW1vdmVkTm9kZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8vIENoZWNraW5nIGZvciBgZmlyc3RDaGlsZGAgaXMgZmFzdGVyIHRoYW4gcmVhZGluZyBgY2hpbGROb2Rlcy5sZW5ndGhgXG4gICAgICAgIC8vIHRvIGNvbXBhcmUgd2l0aCAwLlxuICAgICAgICBpZiAodGhpcy5maXJzdENoaWxkKSB7XG4gICAgICAgICAgLy8gVXNpbmcgYGNoaWxkTm9kZXNgIGlzIGZhc3RlciB0aGFuIGBjaGlsZHJlbmAsIGV2ZW4gdGhvdWdoIHdlIG9ubHlcbiAgICAgICAgICAvLyBjYXJlIGFib3V0IGVsZW1lbnRzLlxuICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZXMgPSB0aGlzLmNoaWxkTm9kZXM7XG4gICAgICAgICAgY29uc3QgY2hpbGROb2Rlc0xlbmd0aCA9IGNoaWxkTm9kZXMubGVuZ3RoO1xuICAgICAgICAgIGlmIChjaGlsZE5vZGVzTGVuZ3RoID4gMCAmJiBVdGlsaXRpZXMuaXNDb25uZWN0ZWQodGhpcykpIHtcbiAgICAgICAgICAgIC8vIENvcHlpbmcgYW4gYXJyYXkgYnkgaXRlcmF0aW5nIGlzIGZhc3RlciB0aGFuIHVzaW5nIHNsaWNlLlxuICAgICAgICAgICAgcmVtb3ZlZE5vZGVzID0gbmV3IEFycmF5KGNoaWxkTm9kZXNMZW5ndGgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZE5vZGVzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgcmVtb3ZlZE5vZGVzW2ldID0gY2hpbGROb2Rlc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBiYXNlRGVzY3JpcHRvci5zZXQhLmNhbGwodGhpcywgYXNzaWduZWRWYWx1ZSk7XG5cbiAgICAgICAgaWYgKHJlbW92ZWROb2Rlcykge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVtb3ZlZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpbnRlcm5hbHMuZGlzY29ubmVjdFRyZWUocmVtb3ZlZE5vZGVzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBpZiAoTmF0aXZlLk5vZGVfdGV4dENvbnRlbnQgJiYgTmF0aXZlLk5vZGVfdGV4dENvbnRlbnQuZ2V0KSB7XG4gICAgcGF0Y2hfdGV4dENvbnRlbnQoTm9kZS5wcm90b3R5cGUsIE5hdGl2ZS5Ob2RlX3RleHRDb250ZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpbnRlcm5hbHMuYWRkTm9kZVBhdGNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBwYXRjaF90ZXh0Q29udGVudChlbGVtZW50LCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgLy8gTk9URTogVGhpcyBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgYHRleHRDb250ZW50YCBnZXR0ZXIgYXNzdW1lcyB0aGF0XG4gICAgICAgIC8vIHRleHQgbm9kZXMnIGB0ZXh0Q29udGVudGAgZ2V0dGVyIHdpbGwgbm90IGJlIHBhdGNoZWQuXG4gICAgICAgIGdldDogZnVuY3Rpb24gKHRoaXM6IE5vZGUpIHtcbiAgICAgICAgICBjb25zdCBwYXJ0czogQXJyYXk8c3RyaW5nIHwgbnVsbD4gPSBbXTtcblxuICAgICAgICAgIGZvciAobGV0IG4gPSB0aGlzLmZpcnN0Q2hpbGQ7IG47IG4gPSBuLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICBpZiAobi5ub2RlVHlwZSA9PT0gTm9kZS5DT01NRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKG4udGV4dENvbnRlbnQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcnKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodGhpczogTm9kZSwgYXNzaWduZWRWYWx1ZSkge1xuICAgICAgICAgIHdoaWxlICh0aGlzLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIE5hdGl2ZS5Ob2RlX3JlbW92ZUNoaWxkLmNhbGwodGhpcywgdGhpcy5maXJzdENoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gYHRleHRDb250ZW50ID0gbnVsbCB8IHVuZGVmaW5lZCB8ICcnYCBkb2VzIG5vdCByZXN1bHQgaW5cbiAgICAgICAgICAvLyBhIFRleHROb2RlIGNoaWxkTm9kZVxuICAgICAgICAgIGlmIChhc3NpZ25lZFZhbHVlICE9IG51bGwgJiYgYXNzaWduZWRWYWx1ZSAhPT0gJycpIHtcbiAgICAgICAgICAgIE5hdGl2ZS5Ob2RlX2FwcGVuZENoaWxkLmNhbGwoXG4gICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGFzc2lnbmVkVmFsdWUpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZFxuICogYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0IFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heVxuICogYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHQgQ29kZSBkaXN0cmlidXRlZCBieVxuICogR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUFxuICogcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5cbmltcG9ydCBDdXN0b21FbGVtZW50SW50ZXJuYWxzIGZyb20gJy4uL0N1c3RvbUVsZW1lbnRJbnRlcm5hbHMuanMnO1xuXG5pbXBvcnQgUGF0Y2hQYXJlbnROb2RlIGZyb20gJy4vSW50ZXJmYWNlL1BhcmVudE5vZGUuanMnO1xuaW1wb3J0ICogYXMgTmF0aXZlIGZyb20gJy4vTmF0aXZlLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGludGVybmFsczogQ3VzdG9tRWxlbWVudEludGVybmFscykge1xuICBQYXRjaFBhcmVudE5vZGUoaW50ZXJuYWxzLCBEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZSwge1xuICAgIHByZXBlbmQ6IE5hdGl2ZS5Eb2N1bWVudEZyYWdtZW50X3ByZXBlbmQsXG4gICAgYXBwZW5kOiBOYXRpdmUuRG9jdW1lbnRGcmFnbWVudF9hcHBlbmQsXG4gIH0pO1xufVxuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuLypcbkV4dHJlbWVseSBzaW1wbGUgY3NzIHBhcnNlci4gSW50ZW5kZWQgdG8gYmUgbm90IG1vcmUgdGhhbiB3aGF0IHdlIG5lZWRcbmFuZCBkZWZpbml0ZWx5IG5vdCBuZWNlc3NhcmlseSBjb3JyZWN0ID0pLlxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHVucmVzdHJpY3RlZCAqL1xuY2xhc3MgU3R5bGVOb2RlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpc1snc3RhcnQnXSA9IDA7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpc1snZW5kJ10gPSAwO1xuICAgIC8qKiBAdHlwZSB7U3R5bGVOb2RlfSAqL1xuICAgIHRoaXNbJ3ByZXZpb3VzJ10gPSBudWxsO1xuICAgIC8qKiBAdHlwZSB7U3R5bGVOb2RlfSAqL1xuICAgIHRoaXNbJ3BhcmVudCddID0gbnVsbDtcbiAgICAvKiogQHR5cGUge0FycmF5PFN0eWxlTm9kZT59ICovXG4gICAgdGhpc1sncnVsZXMnXSA9IG51bGw7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpc1sncGFyc2VkQ3NzVGV4dCddID0gJyc7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpc1snY3NzVGV4dCddID0gJyc7XG4gICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgIHRoaXNbJ2F0UnVsZSddID0gZmFsc2U7XG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdGhpc1sndHlwZSddID0gMDtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzWydrZXlmcmFtZXNOYW1lJ10gPSAnJztcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzWydzZWxlY3RvciddID0gJyc7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpc1sncGFyc2VkU2VsZWN0b3InXSA9ICcnO1xuICB9XG59XG5cbmV4cG9ydCB7U3R5bGVOb2RlfTtcblxuLy8gZ2l2ZW4gYSBzdHJpbmcgb2YgY3NzLCByZXR1cm4gYSBzaW1wbGUgcnVsZSB0cmVlXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAcmV0dXJuIHtTdHlsZU5vZGV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZSh0ZXh0KSB7XG4gIHRleHQgPSBjbGVhbih0ZXh0KTtcbiAgcmV0dXJuIHBhcnNlQ3NzKGxleCh0ZXh0KSwgdGV4dCk7XG59XG5cbi8vIHJlbW92ZSBzdHVmZiB3ZSBkb24ndCBjYXJlIGFib3V0IHRoYXQgbWF5IGhpbmRlciBwYXJzaW5nXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjc3NUZXh0XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGNsZWFuKGNzc1RleHQpIHtcbiAgcmV0dXJuIGNzc1RleHQucmVwbGFjZShSWC5jb21tZW50cywgJycpLnJlcGxhY2UoUlgucG9ydCwgJycpO1xufVxuXG4vLyBzdXBlciBzaW1wbGUgey4uLn0gbGV4ZXIgdGhhdCByZXR1cm5zIGEgbm9kZSB0cmVlXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAcmV0dXJuIHshU3R5bGVOb2RlfVxuICovXG5mdW5jdGlvbiBsZXgodGV4dCkge1xuICBsZXQgcm9vdCA9IG5ldyBTdHlsZU5vZGUoKTtcbiAgcm9vdFsnc3RhcnQnXSA9IDA7XG4gIHJvb3RbJ2VuZCddID0gdGV4dC5sZW5ndGg7XG4gIGxldCBuID0gcm9vdDtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSB0ZXh0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh0ZXh0W2ldID09PSBPUEVOX0JSQUNFKSB7XG4gICAgICBpZiAoIW5bJ3J1bGVzJ10pIHtcbiAgICAgICAgblsncnVsZXMnXSA9IFtdO1xuICAgICAgfVxuICAgICAgbGV0IHAgPSBuO1xuICAgICAgbGV0IHByZXZpb3VzID0gcFsncnVsZXMnXVtwWydydWxlcyddLmxlbmd0aCAtIDFdIHx8IG51bGw7XG4gICAgICBuID0gbmV3IFN0eWxlTm9kZSgpO1xuICAgICAgblsnc3RhcnQnXSA9IGkgKyAxO1xuICAgICAgblsncGFyZW50J10gPSBwO1xuICAgICAgblsncHJldmlvdXMnXSA9IHByZXZpb3VzO1xuICAgICAgcFsncnVsZXMnXS5wdXNoKG4pO1xuICAgIH0gZWxzZSBpZiAodGV4dFtpXSA9PT0gQ0xPU0VfQlJBQ0UpIHtcbiAgICAgIG5bJ2VuZCddID0gaSArIDE7XG4gICAgICBuID0gblsncGFyZW50J10gfHwgcm9vdDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJvb3Q7XG59XG5cbi8vIGFkZCBzZWxlY3RvcnMvY3NzVGV4dCB0byBub2RlIHRyZWVcbi8qKlxuICogQHBhcmFtIHtTdHlsZU5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAcmV0dXJuIHshU3R5bGVOb2RlfVxuICovXG5mdW5jdGlvbiBwYXJzZUNzcyhub2RlLCB0ZXh0KSB7XG4gIGxldCB0ID0gdGV4dC5zdWJzdHJpbmcobm9kZVsnc3RhcnQnXSwgbm9kZVsnZW5kJ10gLSAxKTtcbiAgbm9kZVsncGFyc2VkQ3NzVGV4dCddID0gbm9kZVsnY3NzVGV4dCddID0gdC50cmltKCk7XG4gIGlmIChub2RlWydwYXJlbnQnXSkge1xuICAgIGxldCBzcyA9IG5vZGVbJ3ByZXZpb3VzJ11cbiAgICAgID8gbm9kZVsncHJldmlvdXMnXVsnZW5kJ11cbiAgICAgIDogbm9kZVsncGFyZW50J11bJ3N0YXJ0J107XG4gICAgdCA9IHRleHQuc3Vic3RyaW5nKHNzLCBub2RlWydzdGFydCddIC0gMSk7XG4gICAgdCA9IF9leHBhbmRVbmljb2RlRXNjYXBlcyh0KTtcbiAgICB0ID0gdC5yZXBsYWNlKFJYLm11bHRpcGxlU3BhY2VzLCAnICcpO1xuICAgIC8vIFRPRE8oc29ydmVsbCk6IGFkIGhvYzsgbWFrZSBzZWxlY3RvciBpbmNsdWRlIG9ubHkgYWZ0ZXIgbGFzdCA7XG4gICAgLy8gaGVscHMgd2l0aCBtaXhpbiBzeW50YXhcbiAgICB0ID0gdC5zdWJzdHJpbmcodC5sYXN0SW5kZXhPZignOycpICsgMSk7XG4gICAgbGV0IHMgPSAobm9kZVsncGFyc2VkU2VsZWN0b3InXSA9IG5vZGVbJ3NlbGVjdG9yJ10gPSB0LnRyaW0oKSk7XG4gICAgbm9kZVsnYXRSdWxlJ10gPSBzLmluZGV4T2YoQVRfU1RBUlQpID09PSAwO1xuICAgIC8vIG5vdGUsIHN1cHBvcnQgYSBzdWJzZXQgb2YgcnVsZSB0eXBlcy4uLlxuICAgIGlmIChub2RlWydhdFJ1bGUnXSkge1xuICAgICAgaWYgKHMuaW5kZXhPZihNRURJQV9TVEFSVCkgPT09IDApIHtcbiAgICAgICAgbm9kZVsndHlwZSddID0gdHlwZXMuTUVESUFfUlVMRTtcbiAgICAgIH0gZWxzZSBpZiAocy5tYXRjaChSWC5rZXlmcmFtZXNSdWxlKSkge1xuICAgICAgICBub2RlWyd0eXBlJ10gPSB0eXBlcy5LRVlGUkFNRVNfUlVMRTtcbiAgICAgICAgbm9kZVsna2V5ZnJhbWVzTmFtZSddID0gbm9kZVsnc2VsZWN0b3InXS5zcGxpdChSWC5tdWx0aXBsZVNwYWNlcykucG9wKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzLmluZGV4T2YoVkFSX1NUQVJUKSA9PT0gMCkge1xuICAgICAgICBub2RlWyd0eXBlJ10gPSB0eXBlcy5NSVhJTl9SVUxFO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZVsndHlwZSddID0gdHlwZXMuU1RZTEVfUlVMRTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbGV0IHIkID0gbm9kZVsncnVsZXMnXTtcbiAgaWYgKHIkKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSByJC5sZW5ndGgsIHI7IGkgPCBsICYmIChyID0gciRbaV0pOyBpKyspIHtcbiAgICAgIHBhcnNlQ3NzKHIsIHRleHQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBjb252ZXJzaW9uIG9mIHNvcnQgdW5pY29kZSBlc2NhcGVzIHdpdGggc3BhY2VzIGxpa2UgYFxcMzMgYCAoYW5kIGxvbmdlcikgaW50b1xuICogZXhwYW5kZWQgZm9ybSB0aGF0IGRvZXNuJ3QgcmVxdWlyZSB0cmFpbGluZyBzcGFjZSBgXFwwMDAwMzNgXG4gKiBAcGFyYW0ge3N0cmluZ30gc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBfZXhwYW5kVW5pY29kZUVzY2FwZXMocykge1xuICByZXR1cm4gcy5yZXBsYWNlKC9cXFxcKFswLTlhLWZdezEsNn0pXFxzL2dpLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGNvZGUgPSBhcmd1bWVudHNbMV0sXG4gICAgICByZXBlYXQgPSA2IC0gY29kZS5sZW5ndGg7XG4gICAgd2hpbGUgKHJlcGVhdC0tKSB7XG4gICAgICBjb2RlID0gJzAnICsgY29kZTtcbiAgICB9XG4gICAgcmV0dXJuICdcXFxcJyArIGNvZGU7XG4gIH0pO1xufVxuXG4vKipcbiAqIHN0cmluZ2lmeSBwYXJzZWQgY3NzLlxuICogQHBhcmFtIHtTdHlsZU5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHByZXNlcnZlUHJvcGVydGllc1xuICogQHBhcmFtIHtzdHJpbmc9fSB0ZXh0XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkobm9kZSwgcHJlc2VydmVQcm9wZXJ0aWVzLCB0ZXh0ID0gJycpIHtcbiAgLy8gY2FsYyBydWxlIGNzc1RleHRcbiAgbGV0IGNzc1RleHQgPSAnJztcbiAgaWYgKG5vZGVbJ2Nzc1RleHQnXSB8fCBub2RlWydydWxlcyddKSB7XG4gICAgbGV0IHIkID0gbm9kZVsncnVsZXMnXTtcbiAgICBpZiAociQgJiYgIV9oYXNNaXhpblJ1bGVzKHIkKSkge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSByJC5sZW5ndGgsIHI7IGkgPCBsICYmIChyID0gciRbaV0pOyBpKyspIHtcbiAgICAgICAgY3NzVGV4dCA9IHN0cmluZ2lmeShyLCBwcmVzZXJ2ZVByb3BlcnRpZXMsIGNzc1RleHQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjc3NUZXh0ID0gcHJlc2VydmVQcm9wZXJ0aWVzXG4gICAgICAgID8gbm9kZVsnY3NzVGV4dCddXG4gICAgICAgIDogcmVtb3ZlQ3VzdG9tUHJvcHMobm9kZVsnY3NzVGV4dCddKTtcbiAgICAgIGNzc1RleHQgPSBjc3NUZXh0LnRyaW0oKTtcbiAgICAgIGlmIChjc3NUZXh0KSB7XG4gICAgICAgIGNzc1RleHQgPSAnICAnICsgY3NzVGV4dCArICdcXG4nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBlbWl0IHJ1bGUgaWYgdGhlcmUgaXMgY3NzVGV4dFxuICBpZiAoY3NzVGV4dCkge1xuICAgIGlmIChub2RlWydzZWxlY3RvciddKSB7XG4gICAgICB0ZXh0ICs9IG5vZGVbJ3NlbGVjdG9yJ10gKyAnICcgKyBPUEVOX0JSQUNFICsgJ1xcbic7XG4gICAgfVxuICAgIHRleHQgKz0gY3NzVGV4dDtcbiAgICBpZiAobm9kZVsnc2VsZWN0b3InXSkge1xuICAgICAgdGV4dCArPSBDTE9TRV9CUkFDRSArICdcXG5cXG4nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGV4dDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PFN0eWxlTm9kZT59IHJ1bGVzXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBfaGFzTWl4aW5SdWxlcyhydWxlcykge1xuICBsZXQgciA9IHJ1bGVzWzBdO1xuICByZXR1cm4gKFxuICAgIEJvb2xlYW4ocikgJiZcbiAgICBCb29sZWFuKHJbJ3NlbGVjdG9yJ10pICYmXG4gICAgclsnc2VsZWN0b3InXS5pbmRleE9mKFZBUl9TVEFSVCkgPT09IDBcbiAgKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY3NzVGV4dFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiByZW1vdmVDdXN0b21Qcm9wcyhjc3NUZXh0KSB7XG4gIGNzc1RleHQgPSByZW1vdmVDdXN0b21Qcm9wQXNzaWdubWVudChjc3NUZXh0KTtcbiAgcmV0dXJuIHJlbW92ZUN1c3RvbVByb3BBcHBseShjc3NUZXh0KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY3NzVGV4dFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQ3VzdG9tUHJvcEFzc2lnbm1lbnQoY3NzVGV4dCkge1xuICByZXR1cm4gY3NzVGV4dC5yZXBsYWNlKFJYLmN1c3RvbVByb3AsICcnKS5yZXBsYWNlKFJYLm1peGluUHJvcCwgJycpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjc3NUZXh0XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUN1c3RvbVByb3BBcHBseShjc3NUZXh0KSB7XG4gIHJldHVybiBjc3NUZXh0LnJlcGxhY2UoUlgubWl4aW5BcHBseSwgJycpLnJlcGxhY2UoUlgudmFyQXBwbHksICcnKTtcbn1cblxuLyoqIEBlbnVtIHtudW1iZXJ9ICovXG5leHBvcnQgY29uc3QgdHlwZXMgPSB7XG4gIFNUWUxFX1JVTEU6IDEsXG4gIEtFWUZSQU1FU19SVUxFOiA3LFxuICBNRURJQV9SVUxFOiA0LFxuICBNSVhJTl9SVUxFOiAxMDAwLFxufTtcblxuY29uc3QgT1BFTl9CUkFDRSA9ICd7JztcbmNvbnN0IENMT1NFX0JSQUNFID0gJ30nO1xuXG4vLyBoZWxwZXIgcmVnZXhwJ3NcbmNvbnN0IFJYID0ge1xuICBjb21tZW50czogL1xcL1xcKlteKl0qXFwqKyhbXi8qXVteKl0qXFwqKykqXFwvL2dpbSxcbiAgcG9ydDogL0BpbXBvcnRbXjtdKjsvZ2ltLFxuICBjdXN0b21Qcm9wOiAvKD86XlteO1xcLVxcc31dKyk/LS1bXjt7fV0qPzpbXnt9O10qPyg/Ols7XFxuXXwkKS9naW0sXG4gIG1peGluUHJvcDogLyg/Ol5bXjtcXC1cXHN9XSspPy0tW147e31dKj86W157fTtdKj97W159XSo/fSg/Ols7XFxuXXwkKT8vZ2ltLFxuICBtaXhpbkFwcGx5OiAvQGFwcGx5XFxzKlxcKD9bXik7XSpcXCk/XFxzKig/Ols7XFxuXXwkKT8vZ2ltLFxuICB2YXJBcHBseTogL1teOzpdKj86W147XSo/dmFyXFwoW147XSpcXCkoPzpbO1xcbl18JCk/L2dpbSxcbiAga2V5ZnJhbWVzUnVsZTogL15AW15cXHNdKmtleWZyYW1lcy8sXG4gIG11bHRpcGxlU3BhY2VzOiAvXFxzKy9nLFxufTtcblxuY29uc3QgVkFSX1NUQVJUID0gJy0tJztcbmNvbnN0IE1FRElBX1NUQVJUID0gJ0BtZWRpYSc7XG5jb25zdCBBVF9TVEFSVCA9ICdAJztcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGNvbnN0IG5hdGl2ZVNoYWRvdyA9ICEoXG4gIHdpbmRvd1snU2hhZHlET00nXSAmJiB3aW5kb3dbJ1NoYWR5RE9NJ11bJ2luVXNlJ11cbik7XG4vKiogQHR5cGUge2Jvb2xlYW59ICovXG5sZXQgbmF0aXZlQ3NzVmFyaWFibGVzXztcblxuLyoqXG4gKiBAcGFyYW0geyhTaGFkeUNTU09wdGlvbnMgfCBTaGFkeUNTU0ludGVyZmFjZSk9fSBzZXR0aW5nc1xuICovXG5mdW5jdGlvbiBjYWxjQ3NzVmFyaWFibGVzKHNldHRpbmdzKSB7XG4gIGlmIChzZXR0aW5ncyAmJiBzZXR0aW5ncy5zaGltY3NzcHJvcGVydGllcykge1xuICAgIG5hdGl2ZUNzc1ZhcmlhYmxlc18gPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBjaHJvbWUgNDkgaGFzIHNlbWktd29ya2luZyBjc3MgdmFycywgY2hlY2sgaWYgYm94LXNoYWRvdyB3b3Jrc1xuICAgIC8vIHNhZmFyaSA5LjEgaGFzIGEgcmVjYWxjIGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NTc4MlxuICAgIC8vIEhvd2V2ZXIsIHNoaW0gY3NzIGN1c3RvbSBwcm9wZXJ0aWVzIGFyZSBvbmx5IHN1cHBvcnRlZCB3aXRoIFNoYWR5RE9NIGVuYWJsZWQsXG4gICAgLy8gc28gZmFsbCBiYWNrIG9uIG5hdGl2ZSBpZiB3ZSBkbyBub3QgZGV0ZWN0IFNoYWR5RE9NXG4gICAgLy8gRWRnZSAxNTogY3VzdG9tIHByb3BlcnRpZXMgdXNlZCBpbiA6OmJlZm9yZSBhbmQgOjphZnRlciB3aWxsIGFsc28gYmUgdXNlZCBpbiB0aGUgcGFyZW50IGVsZW1lbnRcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL2VuLXVzL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL2lzc3Vlcy8xMjQxNDI1Ny9cbiAgICBuYXRpdmVDc3NWYXJpYWJsZXNfID1cbiAgICAgIG5hdGl2ZVNoYWRvdyB8fFxuICAgICAgQm9vbGVhbihcbiAgICAgICAgIW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FwcGxlV2ViS2l0XFwvNjAxfEVkZ2VcXC8xNS8pICYmXG4gICAgICAgICAgd2luZG93LkNTUyAmJlxuICAgICAgICAgIENTUy5zdXBwb3J0cyAmJlxuICAgICAgICAgIENTUy5zdXBwb3J0cygnYm94LXNoYWRvdycsICcwIDAgMCB2YXIoLS1mb28pJylcbiAgICAgICk7XG4gIH1cbn1cblxuLyoqIEB0eXBlIHtzdHJpbmcgfCB1bmRlZmluZWR9ICovXG5leHBvcnQgbGV0IGNzc0J1aWxkO1xuaWYgKHdpbmRvdy5TaGFkeUNTUyAmJiB3aW5kb3cuU2hhZHlDU1MuY3NzQnVpbGQgIT09IHVuZGVmaW5lZCkge1xuICBjc3NCdWlsZCA9IHdpbmRvdy5TaGFkeUNTUy5jc3NCdWlsZDtcbn1cblxuLyoqIEB0eXBlIHtib29sZWFufSAqL1xuZXhwb3J0IGNvbnN0IGRpc2FibGVSdW50aW1lID0gQm9vbGVhbihcbiAgd2luZG93LlNoYWR5Q1NTICYmIHdpbmRvdy5TaGFkeUNTUy5kaXNhYmxlUnVudGltZVxuKTtcblxuaWYgKHdpbmRvdy5TaGFkeUNTUyAmJiB3aW5kb3cuU2hhZHlDU1MubmF0aXZlQ3NzICE9PSB1bmRlZmluZWQpIHtcbiAgbmF0aXZlQ3NzVmFyaWFibGVzXyA9IHdpbmRvdy5TaGFkeUNTUy5uYXRpdmVDc3M7XG59IGVsc2UgaWYgKHdpbmRvdy5TaGFkeUNTUykge1xuICBjYWxjQ3NzVmFyaWFibGVzKHdpbmRvdy5TaGFkeUNTUyk7XG4gIC8vIHJlc2V0IHdpbmRvdyB2YXJpYWJsZSB0byBsZXQgU2hhZHlDU1MgQVBJIHRha2UgaXRzIHBsYWNlXG4gIHdpbmRvdy5TaGFkeUNTUyA9IHVuZGVmaW5lZDtcbn0gZWxzZSB7XG4gIGNhbGNDc3NWYXJpYWJsZXMod2luZG93WydXZWJDb21wb25lbnRzJ10gJiYgd2luZG93WydXZWJDb21wb25lbnRzJ11bJ2ZsYWdzJ10pO1xufVxuXG4vLyBIYWNrIGZvciB0eXBlIGVycm9yIHVuZGVyIG5ldyB0eXBlIGluZmVyZW5jZSB3aGljaCBkb2Vzbid0IGxpa2UgdGhhdFxuLy8gbmF0aXZlQ3NzVmFyaWFibGVzIGlzIHVwZGF0ZWQgaW4gYSBmdW5jdGlvbiBhbmQgYXNzaWducyB0aGUgdHlwZVxuLy8gYGZ1bmN0aW9uKCk6ID9gIGluc3RlYWQgb2YgYGJvb2xlYW5gLlxuZXhwb3J0IGNvbnN0IG5hdGl2ZUNzc1ZhcmlhYmxlcyA9IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gKG5hdGl2ZUNzc1ZhcmlhYmxlc18pO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuZXhwb3J0IGNvbnN0IFZBUl9BU1NJR04gPSAvKD86XnxbO1xcc3tdXFxzKikoLS1bXFx3LV0qPylcXHMqOlxccyooPzooKD86Jyg/OlxcXFwnfC4pKj8nfFwiKD86XFxcXFwifC4pKj9cInxcXChbXildKj9cXCl8W159O3tdKSspfFxceyhbXn1dKilcXH0oPzooPz1bO1xcc31dKXwkKSkvZ2k7XG5leHBvcnQgY29uc3QgTUlYSU5fTUFUQ0ggPSAvKD86XnxcXFcrKUBhcHBseVxccypcXCg/KFteKTtcXG5dKilcXCk/L2dpO1xuZXhwb3J0IGNvbnN0IFZBUl9DT05TVU1FRCA9IC8oLS1bXFx3LV0rKVxccyooWzosOyldfCQpL2dpO1xuZXhwb3J0IGNvbnN0IEFOSU1BVElPTl9NQVRDSCA9IC8oYW5pbWF0aW9uXFxzKjopfChhbmltYXRpb24tbmFtZVxccyo6KS87XG5leHBvcnQgY29uc3QgTUVESUFfTUFUQ0ggPSAvQG1lZGlhXFxzKC4qKS87XG5leHBvcnQgY29uc3QgSVNfVkFSID0gL14tLS87XG5leHBvcnQgY29uc3QgQlJBQ0tFVEVEID0gL1xce1tefV0qXFx9L2c7XG5leHBvcnQgY29uc3QgSE9TVF9QUkVGSVggPSAnKD86XnxbXi4jWzpdKSc7XG5leHBvcnQgY29uc3QgSE9TVF9TVUZGSVggPSAnKCR8Wy46W1xcXFxzPit+XSknO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUgeyFTZXQ8c3RyaW5nPn0gKi9cbmNvbnN0IHN0eWxlVGV4dFNldCA9IG5ldyBTZXQoKTtcblxuZXhwb3J0IGNvbnN0IHNjb3BpbmdBdHRyaWJ1dGUgPSAnc2hhZHktdW5zY29wZWQnO1xuXG4vKipcbiAqIEFkZCBhIHNwZWNpZmljYWxseS1tYXJrZWQgc3R5bGUgdG8gdGhlIGRvY3VtZW50IGRpcmVjdGx5LCBhbmQgb25seSBvbmUgY29weSBvZiB0aGF0IHN0eWxlLlxuICpcbiAqIEBwYXJhbSB7IUhUTUxTdHlsZUVsZW1lbnR9IHN0eWxlXG4gKiBAcmV0dXJuIHt1bmRlZmluZWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzVW5zY29wZWRTdHlsZShzdHlsZSkge1xuICBjb25zdCB0ZXh0ID0gc3R5bGUudGV4dENvbnRlbnQ7XG4gIGlmICghc3R5bGVUZXh0U2V0Lmhhcyh0ZXh0KSkge1xuICAgIHN0eWxlVGV4dFNldC5hZGQodGV4dCk7XG4gICAgY29uc3QgbmV3U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIG5ld1N0eWxlLnNldEF0dHJpYnV0ZSgnc2hhZHktdW5zY29wZWQnLCAnJyk7XG4gICAgbmV3U3R5bGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobmV3U3R5bGUpO1xuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHlsZSBpcyBzdXBwb3NlZCB0byBiZSB1bnNjb3BlZFxuICogQHBhcmFtIHshSFRNTFN0eWxlRWxlbWVudH0gc3R5bGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIHN0eWxlIGhhcyB0aGUgdW5zY29waW5nIGF0dHJpYnV0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNVbnNjb3BlZFN0eWxlKHN0eWxlKSB7XG4gIHJldHVybiBzdHlsZS5oYXNBdHRyaWJ1dGUoc2NvcGluZ0F0dHJpYnV0ZSk7XG59XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7bmF0aXZlU2hhZG93LCBuYXRpdmVDc3NWYXJpYWJsZXMsIGNzc0J1aWxkfSBmcm9tICcuL3N0eWxlLXNldHRpbmdzLmpzJztcbmltcG9ydCB7cGFyc2UsIHN0cmluZ2lmeSwgdHlwZXMsIFN0eWxlTm9kZX0gZnJvbSAnLi9jc3MtcGFyc2UuanMnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuaW1wb3J0IHtNRURJQV9NQVRDSH0gZnJvbSAnLi9jb21tb24tcmVnZXguanMnO1xuLy8gcHJldHRpZXItaWdub3JlXG5pbXBvcnQge3Byb2Nlc3NVbnNjb3BlZFN0eWxlLCBpc1Vuc2NvcGVkU3R5bGV9IGZyb20gJy4vdW5zY29wZWQtc3R5bGUtaGFuZGxlci5qcyc7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8U3R5bGVOb2RlfSBydWxlc1xuICogQHBhcmFtIHtmdW5jdGlvbihTdHlsZU5vZGUpPX0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvQ3NzVGV4dChydWxlcywgY2FsbGJhY2spIHtcbiAgaWYgKCFydWxlcykge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBpZiAodHlwZW9mIHJ1bGVzID09PSAnc3RyaW5nJykge1xuICAgIHJ1bGVzID0gcGFyc2UocnVsZXMpO1xuICB9XG4gIGlmIChjYWxsYmFjaykge1xuICAgIGZvckVhY2hSdWxlKHJ1bGVzLCBjYWxsYmFjayk7XG4gIH1cbiAgcmV0dXJuIHN0cmluZ2lmeShydWxlcywgbmF0aXZlQ3NzVmFyaWFibGVzKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxTdHlsZUVsZW1lbnR9IHN0eWxlXG4gKiBAcmV0dXJuIHtTdHlsZU5vZGV9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc0ZvclN0eWxlKHN0eWxlKSB7XG4gIGlmICghc3R5bGVbJ19fY3NzUnVsZXMnXSAmJiBzdHlsZS50ZXh0Q29udGVudCkge1xuICAgIHN0eWxlWydfX2Nzc1J1bGVzJ10gPSBwYXJzZShzdHlsZS50ZXh0Q29udGVudCk7XG4gIH1cbiAgcmV0dXJuIHN0eWxlWydfX2Nzc1J1bGVzJ10gfHwgbnVsbDtcbn1cblxuLy8gVGVzdHMgaWYgYSBydWxlIGlzIGEga2V5ZnJhbWVzIHNlbGVjdG9yLCB3aGljaCBsb29rcyBhbG1vc3QgZXhhY3RseVxuLy8gbGlrZSBhIG5vcm1hbCBzZWxlY3RvciBidXQgaXMgbm90IChpdCBoYXMgbm90aGluZyB0byBkbyB3aXRoIHNjb3Bpbmdcbi8vIGZvciBleGFtcGxlKS5cbi8qKlxuICogQHBhcmFtIHtTdHlsZU5vZGV9IHJ1bGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0tleWZyYW1lc1NlbGVjdG9yKHJ1bGUpIHtcbiAgcmV0dXJuIChcbiAgICBCb29sZWFuKHJ1bGVbJ3BhcmVudCddKSAmJiBydWxlWydwYXJlbnQnXVsndHlwZSddID09PSB0eXBlcy5LRVlGUkFNRVNfUlVMRVxuICApO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7U3R5bGVOb2RlfSBub2RlXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gc3R5bGVSdWxlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7RnVuY3Rpb249fSBrZXlmcmFtZXNSdWxlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9ubHlBY3RpdmVSdWxlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZm9yRWFjaFJ1bGUoXG4gIG5vZGUsXG4gIHN0eWxlUnVsZUNhbGxiYWNrLFxuICBrZXlmcmFtZXNSdWxlQ2FsbGJhY2ssXG4gIG9ubHlBY3RpdmVSdWxlc1xuKSB7XG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgc2tpcFJ1bGVzID0gZmFsc2U7XG4gIGxldCB0eXBlID0gbm9kZVsndHlwZSddO1xuICBpZiAob25seUFjdGl2ZVJ1bGVzKSB7XG4gICAgaWYgKHR5cGUgPT09IHR5cGVzLk1FRElBX1JVTEUpIHtcbiAgICAgIGxldCBtYXRjaE1lZGlhID0gbm9kZVsnc2VsZWN0b3InXS5tYXRjaChNRURJQV9NQVRDSCk7XG4gICAgICBpZiAobWF0Y2hNZWRpYSkge1xuICAgICAgICAvLyBpZiBydWxlIGlzIGEgbm9uIG1hdGNoaW5nIEBtZWRpYSBydWxlLCBza2lwIHN1YnJ1bGVzXG4gICAgICAgIGlmICghd2luZG93Lm1hdGNoTWVkaWEobWF0Y2hNZWRpYVsxXSkubWF0Y2hlcykge1xuICAgICAgICAgIHNraXBSdWxlcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHR5cGUgPT09IHR5cGVzLlNUWUxFX1JVTEUpIHtcbiAgICBzdHlsZVJ1bGVDYWxsYmFjayhub2RlKTtcbiAgfSBlbHNlIGlmIChrZXlmcmFtZXNSdWxlQ2FsbGJhY2sgJiYgdHlwZSA9PT0gdHlwZXMuS0VZRlJBTUVTX1JVTEUpIHtcbiAgICBrZXlmcmFtZXNSdWxlQ2FsbGJhY2sobm9kZSk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gdHlwZXMuTUlYSU5fUlVMRSkge1xuICAgIHNraXBSdWxlcyA9IHRydWU7XG4gIH1cbiAgbGV0IHIkID0gbm9kZVsncnVsZXMnXTtcbiAgaWYgKHIkICYmICFza2lwUnVsZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHIkLmxlbmd0aCwgcjsgaSA8IGwgJiYgKHIgPSByJFtpXSk7IGkrKykge1xuICAgICAgZm9yRWFjaFJ1bGUociwgc3R5bGVSdWxlQ2FsbGJhY2ssIGtleWZyYW1lc1J1bGVDYWxsYmFjaywgb25seUFjdGl2ZVJ1bGVzKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gYWRkIGEgc3RyaW5nIG9mIGNzc1RleHQgdG8gdGhlIGRvY3VtZW50LlxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY3NzVGV4dFxuICogQHBhcmFtIHtzdHJpbmd9IG1vbmlrZXJcbiAqIEBwYXJhbSB7Tm9kZX0gdGFyZ2V0XG4gKiBAcGFyYW0ge05vZGV9IGNvbnRleHROb2RlXG4gKiBAcmV0dXJuIHtIVE1MU3R5bGVFbGVtZW50fVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlDc3MoY3NzVGV4dCwgbW9uaWtlciwgdGFyZ2V0LCBjb250ZXh0Tm9kZSkge1xuICBsZXQgc3R5bGUgPSBjcmVhdGVTY29wZVN0eWxlKGNzc1RleHQsIG1vbmlrZXIpO1xuICBhcHBseVN0eWxlKHN0eWxlLCB0YXJnZXQsIGNvbnRleHROb2RlKTtcbiAgcmV0dXJuIHN0eWxlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjc3NUZXh0XG4gKiBAcGFyYW0ge3N0cmluZ30gbW9uaWtlclxuICogQHJldHVybiB7IUhUTUxTdHlsZUVsZW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTY29wZVN0eWxlKGNzc1RleHQsIG1vbmlrZXIpIHtcbiAgbGV0IHN0eWxlID0gLyoqIEB0eXBlIHtIVE1MU3R5bGVFbGVtZW50fSAqLyAoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKSk7XG4gIGlmIChtb25pa2VyKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdzY29wZScsIG1vbmlrZXIpO1xuICB9XG4gIHN0eWxlLnRleHRDb250ZW50ID0gY3NzVGV4dDtcbiAgcmV0dXJuIHN0eWxlO1xufVxuXG4vKipcbiAqIFRyYWNrIHRoZSBwb3NpdGlvbiBvZiB0aGUgbGFzdCBhZGRlZCBzdHlsZSBmb3IgcGxhY2luZyBwbGFjZWhvbGRlcnNcbiAqIEB0eXBlIHtOb2RlfVxuICovXG5sZXQgbGFzdEhlYWRBcHBseU5vZGUgPSBudWxsO1xuXG4vLyBpbnNlcnQgYSBjb21tZW50IG5vZGUgYXMgYSBzdHlsaW5nIHBvc2l0aW9uIHBsYWNlaG9sZGVyLlxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gbW9uaWtlclxuICogQHJldHVybiB7IUNvbW1lbnR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVN0eWxlUGxhY2VIb2xkZXIobW9uaWtlcikge1xuICBsZXQgcGxhY2VIb2xkZXIgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KFxuICAgICcgU2hhZHkgRE9NIHN0eWxlcyBmb3IgJyArIG1vbmlrZXIgKyAnICdcbiAgKTtcbiAgbGV0IGFmdGVyID0gbGFzdEhlYWRBcHBseU5vZGUgPyBsYXN0SGVhZEFwcGx5Tm9kZVsnbmV4dFNpYmxpbmcnXSA6IG51bGw7XG4gIGxldCBzY29wZSA9IGRvY3VtZW50LmhlYWQ7XG4gIHNjb3BlLmluc2VydEJlZm9yZShwbGFjZUhvbGRlciwgYWZ0ZXIgfHwgc2NvcGUuZmlyc3RDaGlsZCk7XG4gIGxhc3RIZWFkQXBwbHlOb2RlID0gcGxhY2VIb2xkZXI7XG4gIHJldHVybiBwbGFjZUhvbGRlcjtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxTdHlsZUVsZW1lbnR9IHN0eWxlXG4gKiBAcGFyYW0gez9Ob2RlfSB0YXJnZXRcbiAqIEBwYXJhbSB7P05vZGV9IGNvbnRleHROb2RlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVN0eWxlKHN0eWxlLCB0YXJnZXQsIGNvbnRleHROb2RlKSB7XG4gIHRhcmdldCA9IHRhcmdldCB8fCBkb2N1bWVudC5oZWFkO1xuICBsZXQgYWZ0ZXIgPSAoY29udGV4dE5vZGUgJiYgY29udGV4dE5vZGUubmV4dFNpYmxpbmcpIHx8IHRhcmdldC5maXJzdENoaWxkO1xuICB0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBhZnRlcik7XG4gIGlmICghbGFzdEhlYWRBcHBseU5vZGUpIHtcbiAgICBsYXN0SGVhZEFwcGx5Tm9kZSA9IHN0eWxlO1xuICB9IGVsc2Uge1xuICAgIC8vIG9ubHkgdXBkYXRlIGxhc3RIZWFkQXBwbHlOb2RlIGlmIHRoZSBuZXcgc3R5bGUgaXMgaW5zZXJ0ZWQgYWZ0ZXIgdGhlIG9sZCBsYXN0SGVhZEFwcGx5Tm9kZVxuICAgIGxldCBwb3NpdGlvbiA9IHN0eWxlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGxhc3RIZWFkQXBwbHlOb2RlKTtcbiAgICBpZiAocG9zaXRpb24gPT09IE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fUFJFQ0VESU5HKSB7XG4gICAgICBsYXN0SGVhZEFwcGx5Tm9kZSA9IHN0eWxlO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBidWlsZFR5cGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1RhcmdldGVkQnVpbGQoYnVpbGRUeXBlKSB7XG4gIHJldHVybiBuYXRpdmVTaGFkb3cgPyBidWlsZFR5cGUgPT09ICdzaGFkb3cnIDogYnVpbGRUeXBlID09PSAnc2hhZHknO1xufVxuXG4vKipcbiAqIFdhbGsgZnJvbSB0ZXh0W3N0YXJ0XSBtYXRjaGluZyBwYXJlbnMgYW5kXG4gKiByZXR1cm5zIHBvc2l0aW9uIG9mIHRoZSBvdXRlciBlbmQgcGFyZW5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRNYXRjaGluZ1BhcmVuKHRleHQsIHN0YXJ0KSB7XG4gIGxldCBsZXZlbCA9IDA7XG4gIGZvciAobGV0IGkgPSBzdGFydCwgbCA9IHRleHQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHRleHRbaV0gPT09ICcoJykge1xuICAgICAgbGV2ZWwrKztcbiAgICB9IGVsc2UgaWYgKHRleHRbaV0gPT09ICcpJykge1xuICAgICAgaWYgKC0tbGV2ZWwgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZywgc3RyaW5nLCBzdHJpbmcsIHN0cmluZyl9IGNhbGxiYWNrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzVmFyaWFibGVBbmRGYWxsYmFjayhzdHIsIGNhbGxiYWNrKSB7XG4gIC8vIGZpbmQgJ3ZhcignXG4gIGxldCBzdGFydCA9IHN0ci5pbmRleE9mKCd2YXIoJyk7XG4gIGlmIChzdGFydCA9PT0gLTEpIHtcbiAgICAvLyBubyB2YXI/LCBldmVyeXRoaW5nIGlzIHByZWZpeFxuICAgIHJldHVybiBjYWxsYmFjayhzdHIsICcnLCAnJywgJycpO1xuICB9XG4gIC8vJHtwcmVmaXh9dmFyKCR7aW5uZXJ9KSR7c3VmZml4fVxuICBsZXQgZW5kID0gZmluZE1hdGNoaW5nUGFyZW4oc3RyLCBzdGFydCArIDMpO1xuICBsZXQgaW5uZXIgPSBzdHIuc3Vic3RyaW5nKHN0YXJ0ICsgNCwgZW5kKTtcbiAgbGV0IHByZWZpeCA9IHN0ci5zdWJzdHJpbmcoMCwgc3RhcnQpO1xuICAvLyBzdWZmaXggbWF5IGhhdmUgb3RoZXIgdmFyaWFibGVzXG4gIGxldCBzdWZmaXggPSBwcm9jZXNzVmFyaWFibGVBbmRGYWxsYmFjayhzdHIuc3Vic3RyaW5nKGVuZCArIDEpLCBjYWxsYmFjayk7XG4gIGxldCBjb21tYSA9IGlubmVyLmluZGV4T2YoJywnKTtcbiAgLy8gdmFsdWUgYW5kIGZhbGxiYWNrIGFyZ3Mgc2hvdWxkIGJlIHRyaW1tZWQgdG8gbWF0Y2ggaW4gcHJvcGVydHkgbG9va3VwXG4gIGlmIChjb21tYSA9PT0gLTEpIHtcbiAgICAvLyB2YXJpYWJsZSwgbm8gZmFsbGJhY2tcbiAgICByZXR1cm4gY2FsbGJhY2socHJlZml4LCBpbm5lci50cmltKCksICcnLCBzdWZmaXgpO1xuICB9XG4gIC8vIHZhcigke3ZhbHVlfSwke2ZhbGxiYWNrfSlcbiAgbGV0IHZhbHVlID0gaW5uZXIuc3Vic3RyaW5nKDAsIGNvbW1hKS50cmltKCk7XG4gIGxldCBmYWxsYmFjayA9IGlubmVyLnN1YnN0cmluZyhjb21tYSArIDEpLnRyaW0oKTtcbiAgcmV0dXJuIGNhbGxiYWNrKHByZWZpeCwgdmFsdWUsIGZhbGxiYWNrLCBzdWZmaXgpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRFbGVtZW50Q2xhc3NSYXcoZWxlbWVudCwgdmFsdWUpIHtcbiAgLy8gdXNlIG5hdGl2ZSBzZXRBdHRyaWJ1dGUgcHJvdmlkZWQgYnkgU2hhZHlET00gd2hlbiBzZXRBdHRyaWJ1dGUgaXMgcGF0Y2hlZFxuICBpZiAobmF0aXZlU2hhZG93KSB7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvd1snU2hhZHlET00nXVsnbmF0aXZlTWV0aG9kcyddWydzZXRBdHRyaWJ1dGUnXS5jYWxsKFxuICAgICAgZWxlbWVudCxcbiAgICAgICdjbGFzcycsXG4gICAgICB2YWx1ZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBAdHlwZSB7ZnVuY3Rpb24oKik6Kn1cbiAqL1xuZXhwb3J0IGNvbnN0IHdyYXAgPVxuICAod2luZG93WydTaGFkeURPTSddICYmIHdpbmRvd1snU2hhZHlET00nXVsnd3JhcCddKSB8fCAoKG5vZGUpID0+IG5vZGUpO1xuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudCB8IHtpczogc3RyaW5nLCBleHRlbmRzOiBzdHJpbmd9fSBlbGVtZW50XG4gKiBAcmV0dXJuIHt7aXM6IHN0cmluZywgdHlwZUV4dGVuc2lvbjogc3RyaW5nfX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldElzRXh0ZW5kcyhlbGVtZW50KSB7XG4gIGxldCBsb2NhbE5hbWUgPSBlbGVtZW50Wydsb2NhbE5hbWUnXTtcbiAgbGV0IGlzID0gJycsXG4gICAgdHlwZUV4dGVuc2lvbiA9ICcnO1xuICAvKlxuICBOT1RFOiB0ZWNobmljYWxseSwgdGhpcyBjYW4gYmUgd3JvbmcgZm9yIGNlcnRhaW4gc3ZnIGVsZW1lbnRzXG4gIHdpdGggYC1gIGluIHRoZSBuYW1lIGxpa2UgYDxmb250LWZhY2U+YFxuICAqL1xuICBpZiAobG9jYWxOYW1lKSB7XG4gICAgaWYgKGxvY2FsTmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgICAgaXMgPSBsb2NhbE5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGVFeHRlbnNpb24gPSBsb2NhbE5hbWU7XG4gICAgICBpcyA9IChlbGVtZW50LmdldEF0dHJpYnV0ZSAmJiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaXMnKSkgfHwgJyc7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlzID0gLyoqIEB0eXBlIHs/fSAqLyAoZWxlbWVudCkuaXM7XG4gICAgdHlwZUV4dGVuc2lvbiA9IC8qKiBAdHlwZSB7P30gKi8gKGVsZW1lbnQpLmV4dGVuZHM7XG4gIH1cbiAgcmV0dXJuIHtpcywgdHlwZUV4dGVuc2lvbn07XG59XG5cbi8qKlxuICogQHBhcmFtIHtFbGVtZW50fERvY3VtZW50RnJhZ21lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdhdGhlclN0eWxlVGV4dChlbGVtZW50KSB7XG4gIC8qKiBAdHlwZSB7IUFycmF5PHN0cmluZz59ICovXG4gIGNvbnN0IHN0eWxlVGV4dFBhcnRzID0gW107XG4gIGNvbnN0IHN0eWxlcyA9IC8qKiBAdHlwZSB7IU5vZGVMaXN0PCFIVE1MU3R5bGVFbGVtZW50Pn0gKi8gKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAnc3R5bGUnXG4gICkpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHN0eWxlID0gc3R5bGVzW2ldO1xuICAgIGlmIChpc1Vuc2NvcGVkU3R5bGUoc3R5bGUpKSB7XG4gICAgICBpZiAoIW5hdGl2ZVNoYWRvdykge1xuICAgICAgICBwcm9jZXNzVW5zY29wZWRTdHlsZShzdHlsZSk7XG4gICAgICAgIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZVRleHRQYXJ0cy5wdXNoKHN0eWxlLnRleHRDb250ZW50KTtcbiAgICAgIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3R5bGVUZXh0UGFydHMuam9pbignJykudHJpbSgpO1xufVxuXG4vKipcbiAqIFNwbGl0IGEgc2VsZWN0b3Igc2VwYXJhdGVkIGJ5IGNvbW1hcyBpbnRvIGFuIGFycmF5IGluIGEgc21hcnQgd2F5XG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JcbiAqIEByZXR1cm4geyFBcnJheTxzdHJpbmc+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRTZWxlY3Rvckxpc3Qoc2VsZWN0b3IpIHtcbiAgY29uc3QgcGFydHMgPSBbXTtcbiAgbGV0IHBhcnQgPSAnJztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPj0gMCAmJiBpIDwgc2VsZWN0b3IubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBBIHNlbGVjdG9yIHdpdGggcGFyZW50aGVzZXMgd2lsbCBiZSBvbmUgY29tcGxldGUgcGFydFxuICAgIGlmIChzZWxlY3RvcltpXSA9PT0gJygnKSB7XG4gICAgICAvLyBmaW5kIHRoZSBtYXRjaGluZyBwYXJlblxuICAgICAgY29uc3QgZW5kID0gZmluZE1hdGNoaW5nUGFyZW4oc2VsZWN0b3IsIGkpO1xuICAgICAgLy8gcHVzaCB0aGUgcGFyZW4gYmxvY2sgaW50byB0aGUgcGFydFxuICAgICAgcGFydCArPSBzZWxlY3Rvci5zbGljZShpLCBlbmQgKyAxKTtcbiAgICAgIC8vIG1vdmUgdGhlIGluZGV4IHRvIGFmdGVyIHRoZSBwYXJlbiBibG9ja1xuICAgICAgaSA9IGVuZDtcbiAgICB9IGVsc2UgaWYgKHNlbGVjdG9yW2ldID09PSAnLCcpIHtcbiAgICAgIHBhcnRzLnB1c2gocGFydCk7XG4gICAgICBwYXJ0ID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnQgKz0gc2VsZWN0b3JbaV07XG4gICAgfVxuICB9XG4gIC8vIGNhdGNoIGFueSBwaWVjZXMgYWZ0ZXIgdGhlIGxhc3QgY29tbWFcbiAgaWYgKHBhcnQpIHtcbiAgICBwYXJ0cy5wdXNoKHBhcnQpO1xuICB9XG4gIHJldHVybiBwYXJ0cztcbn1cblxuY29uc3QgQ1NTX0JVSUxEX0FUVFIgPSAnY3NzLWJ1aWxkJztcblxuLyoqXG4gKiBSZXR1cm4gdGhlIHBvbHltZXItY3NzLWJ1aWxkIFwiYnVpbGQgdHlwZVwiIGFwcGxpZWQgdG8gdGhpcyBlbGVtZW50XG4gKlxuICogQHBhcmFtIHshSFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ30gQ2FuIGJlIFwiXCIsIFwic2hhZHlcIiwgb3IgXCJzaGFkb3dcIlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3NzQnVpbGQoZWxlbWVudCkge1xuICBpZiAoY3NzQnVpbGQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAvKiogQHR5cGUge3N0cmluZ30gKi8gKGNzc0J1aWxkKTtcbiAgfVxuICBpZiAoZWxlbWVudC5fX2Nzc0J1aWxkID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyB0cnkgYXR0cmlidXRlIGZpcnN0LCBhcyBpdCBpcyB0aGUgY29tbW9uIGNhc2VcbiAgICBjb25zdCBhdHRyVmFsdWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShDU1NfQlVJTERfQVRUUik7XG4gICAgaWYgKGF0dHJWYWx1ZSkge1xuICAgICAgZWxlbWVudC5fX2Nzc0J1aWxkID0gYXR0clZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBidWlsZENvbW1lbnQgPSBnZXRCdWlsZENvbW1lbnQoZWxlbWVudCk7XG4gICAgICBpZiAoYnVpbGRDb21tZW50ICE9PSAnJykge1xuICAgICAgICAvLyByZW1vdmUgYnVpbGQgY29tbWVudCBzbyBpdCBpcyBub3QgbmVlZGxlc3NseSBjb3BpZWQgaW50byBldmVyeSBlbGVtZW50IGluc3RhbmNlXG4gICAgICAgIHJlbW92ZUJ1aWxkQ29tbWVudChlbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIGVsZW1lbnQuX19jc3NCdWlsZCA9IGJ1aWxkQ29tbWVudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQuX19jc3NCdWlsZCB8fCAnJztcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZWxlbWVudCwgZWl0aGVyIGEgPHRlbXBsYXRlPiBvciA8c3R5bGU+LCBoYXMgYmVlbiBwcm9jZXNzZWRcbiAqIGJ5IHBvbHltZXItY3NzLWJ1aWxkLlxuICpcbiAqIElmIHNvLCB0aGVuIHdlIGNhbiBtYWtlIGEgbnVtYmVyIG9mIG9wdGltaXphdGlvbnM6XG4gKiAtIHBvbHltZXItY3NzLWJ1aWxkIHdpbGwgZGVjb21wb3NlIG1peGlucyBpbnRvIGluZGl2aWR1YWwgQ1NTIEN1c3RvbSBQcm9wZXJ0aWVzLFxuICogc28gdGhlIEFwcGx5U2hpbSBjYW4gYmUgc2tpcHBlZCBlbnRpcmVseS5cbiAqIC0gVW5kZXIgbmF0aXZlIFNoYWRvd0RPTSwgdGhlIHN0eWxlIHRleHQgY2FuIGp1c3QgYmUgY29waWVkIGludG8gZWFjaCBpbnN0YW5jZVxuICogd2l0aG91dCBtb2RpZmljYXRpb25cbiAqIC0gSWYgdGhlIGJ1aWxkIGlzIFwic2hhZHlcIiBhbmQgU2hhZHlET00gaXMgaW4gdXNlLCB0aGUgc3R5bGluZyBkb2VzIG5vdCBuZWVkXG4gKiBzY29waW5nIGJleW9uZCB0aGUgc2hpbW1pbmcgb2YgQ1NTIEN1c3RvbSBQcm9wZXJ0aWVzXG4gKlxuICogQHBhcmFtIHshSFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbGVtZW50SGFzQnVpbHRDc3MoZWxlbWVudCkge1xuICByZXR1cm4gZ2V0Q3NzQnVpbGQoZWxlbWVudCkgIT09ICcnO1xufVxuXG4vKipcbiAqIEZvciB0ZW1wbGF0ZXMgbWFkZSB3aXRoIHRhZ2dlZCB0ZW1wbGF0ZSBsaXRlcmFscywgcG9seW1lci1jc3MtYnVpbGQgd2lsbFxuICogaW5zZXJ0IGEgY29tbWVudCBvZiB0aGUgZm9ybSBgPCEtLWNzcy1idWlsZDpzaGFkb3ctLT5gXG4gKlxuICogQHBhcmFtIHshSFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1aWxkQ29tbWVudChlbGVtZW50KSB7XG4gIGNvbnN0IGJ1aWxkQ29tbWVudCA9XG4gICAgZWxlbWVudC5sb2NhbE5hbWUgPT09ICd0ZW1wbGF0ZSdcbiAgICAgID8gLyoqIEB0eXBlIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gKi8gKGVsZW1lbnQpLmNvbnRlbnQuZmlyc3RDaGlsZFxuICAgICAgOiBlbGVtZW50LmZpcnN0Q2hpbGQ7XG4gIGlmIChidWlsZENvbW1lbnQgaW5zdGFuY2VvZiBDb21tZW50KSB7XG4gICAgY29uc3QgY29tbWVudFBhcnRzID0gYnVpbGRDb21tZW50LnRleHRDb250ZW50LnRyaW0oKS5zcGxpdCgnOicpO1xuICAgIGlmIChjb21tZW50UGFydHNbMF0gPT09IENTU19CVUlMRF9BVFRSKSB7XG4gICAgICByZXR1cm4gY29tbWVudFBhcnRzWzFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGNzcyBidWlsZCBzdGF0dXMgaXMgb3B0aW1hbCwgYW5kIGRvIG5vIHVubmVlZGVkIHdvcmsuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBjc3NCdWlsZCBDU1MgYnVpbGQgc3RhdHVzXG4gKiBAcmV0dXJuIHtib29sZWFufSBjc3MgYnVpbGQgaXMgb3B0aW1hbCBvciBub3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT3B0aW1hbENzc0J1aWxkKGNzc0J1aWxkID0gJycpIHtcbiAgLy8gQ1NTIGN1c3RvbSBwcm9wZXJ0eSBzaGltIGFsd2F5cyByZXF1aXJlcyB3b3JrXG4gIGlmIChjc3NCdWlsZCA9PT0gJycgfHwgIW5hdGl2ZUNzc1ZhcmlhYmxlcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gbmF0aXZlU2hhZG93ID8gY3NzQnVpbGQgPT09ICdzaGFkb3cnIDogY3NzQnVpbGQgPT09ICdzaGFkeSc7XG59XG5cbi8qKlxuICogQHBhcmFtIHshSFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQnVpbGRDb21tZW50KGVsZW1lbnQpIHtcbiAgY29uc3QgYnVpbGRDb21tZW50ID1cbiAgICBlbGVtZW50LmxvY2FsTmFtZSA9PT0gJ3RlbXBsYXRlJ1xuICAgICAgPyAvKiogQHR5cGUgeyFIVE1MVGVtcGxhdGVFbGVtZW50fSAqLyAoZWxlbWVudCkuY29udGVudC5maXJzdENoaWxkXG4gICAgICA6IGVsZW1lbnQuZmlyc3RDaGlsZDtcbiAgYnVpbGRDb21tZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYnVpbGRDb21tZW50KTtcbn1cbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtTdHlsZU5vZGV9IGZyb20gJy4vY3NzLXBhcnNlLmpzJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbmltcG9ydCAqIGFzIFN0eWxlVXRpbCBmcm9tICcuL3N0eWxlLXV0aWwuanMnO1xuaW1wb3J0IHtuYXRpdmVTaGFkb3d9IGZyb20gJy4vc3R5bGUtc2V0dGluZ3MuanMnO1xuXG4vKiBUcmFuc2Zvcm1zIFNoYWRvd0RPTSBzdHlsaW5nIGludG8gU2hhZHlET00gc3R5bGluZ1xuXG4qIHNjb3Bpbmc6XG5cbiAgKiBlbGVtZW50cyBpbiBzY29wZSBnZXQgc2NvcGluZyBzZWxlY3RvciBjbGFzcz1cIngtZm9vLXNjb3BlXCJcbiAgKiBzZWxlY3RvcnMgcmUtd3JpdHRlbiBhcyBmb2xsb3dzOlxuXG4gICAgZGl2IGJ1dHRvbiAtPiBkaXYueC1mb28tc2NvcGUgYnV0dG9uLngtZm9vLXNjb3BlXG5cbiogOmhvc3QgLT4gc2NvcGVOYW1lXG5cbiogOmhvc3QoLi4uKSAtPiBzY29wZU5hbWUuLi5cblxuKiA6OnNsb3R0ZWQoLi4uKSAtPiBzY29wZU5hbWUgPiAuLi5cblxuKiAuLi46ZGlyKGx0cnxydGwpIC0+IFtkaXI9XCJsdHJ8cnRsXCJdIC4uLiwgLi4uW2Rpcj1cImx0cnxydGxcIl1cblxuKiA6aG9zdCg6ZGlyW3J0bF0pIC0+IHNjb3BlTmFtZTpkaXIocnRsKSAtPiBbZGlyPVwicnRsXCJdIHNjb3BlTmFtZSwgc2NvcGVOYW1lW2Rpcj1cInJ0bFwiXVxuXG4qL1xuY29uc3QgU0NPUEVfTkFNRSA9ICdzdHlsZS1zY29wZSc7XG5cbmNsYXNzIFN0eWxlVHJhbnNmb3JtZXIge1xuICAvKiogQHJldHVybiB7c3RyaW5nfSAqL1xuICBnZXQgU0NPUEVfTkFNRSgpIHtcbiAgICByZXR1cm4gU0NPUEVfTkFNRTtcbiAgfVxuICAvKipcbiAgICogR2l2ZW4gYSBub2RlIGFuZCBzY29wZSBuYW1lLCBhZGQgYSBzY29waW5nIGNsYXNzIHRvIGVhY2ggbm9kZVxuICAgKiBpbiB0aGUgdHJlZS4gVGhpcyBmYWNpbGl0YXRlcyB0cmFuc2Zvcm1pbmcgY3NzIGludG8gc2NvcGVkIHJ1bGVzLlxuICAgKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzY29wZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBzaG91bGRSZW1vdmVTY29wZVxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgZG9tKG5vZGUsIHNjb3BlLCBzaG91bGRSZW1vdmVTY29wZSkge1xuICAgIGNvbnN0IGZuID0gKG5vZGUpID0+IHtcbiAgICAgIHRoaXMuZWxlbWVudChub2RlLCBzY29wZSB8fCAnJywgc2hvdWxkUmVtb3ZlU2NvcGUpO1xuICAgIH07XG4gICAgdGhpcy5fdHJhbnNmb3JtRG9tKG5vZGUsIGZuKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlbiBhIG5vZGUgYW5kIHNjb3BlIG5hbWUsIGFkZCBhIHNjb3BpbmcgY2xhc3MgdG8gZWFjaCBub2RlIGluIHRoZSB0cmVlLlxuICAgKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzY29wZVxuICAgKi9cbiAgZG9tQWRkU2NvcGUobm9kZSwgc2NvcGUpIHtcbiAgICBjb25zdCBmbiA9IChub2RlKSA9PiB7XG4gICAgICB0aGlzLmVsZW1lbnQobm9kZSwgc2NvcGUgfHwgJycpO1xuICAgIH07XG4gICAgdGhpcy5fdHJhbnNmb3JtRG9tKG5vZGUsIGZuKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFOb2RlfSBzdGFydE5vZGVcbiAgICogQHBhcmFtIHtmdW5jdGlvbighTm9kZSl9IHRyYW5zZm9ybWVyXG4gICAqL1xuICBfdHJhbnNmb3JtRG9tKHN0YXJ0Tm9kZSwgdHJhbnNmb3JtZXIpIHtcbiAgICBpZiAoc3RhcnROb2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgdHJhbnNmb3JtZXIoc3RhcnROb2RlKTtcbiAgICB9XG4gICAgbGV0IGMkO1xuICAgIGlmIChzdGFydE5vZGUubG9jYWxOYW1lID09PSAndGVtcGxhdGUnKSB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IC8qKiBAdHlwZSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9ICovIChzdGFydE5vZGUpO1xuICAgICAgLy8gSW4gY2FzZSB0aGUgdGVtcGxhdGUgaXMgaW4gc3ZnIGNvbnRleHQsIGZhbGwgYmFjayB0byB0aGUgbm9kZVxuICAgICAgLy8gc2luY2UgaXQgd29uJ3QgYmUgYW4gSFRNTFRlbXBsYXRlRWxlbWVudCB3aXRoIGEgLmNvbnRlbnQgcHJvcGVydHlcbiAgICAgIGMkID0gKHRlbXBsYXRlLmNvbnRlbnQgfHwgdGVtcGxhdGUuX2NvbnRlbnQgfHwgdGVtcGxhdGUpLmNoaWxkTm9kZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGMkID1cbiAgICAgICAgLyoqIEB0eXBlIHshUGFyZW50Tm9kZX0gKi8gKHN0YXJ0Tm9kZSkuY2hpbGRyZW4gfHwgc3RhcnROb2RlLmNoaWxkTm9kZXM7XG4gICAgfVxuICAgIGlmIChjJCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjJC5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLl90cmFuc2Zvcm1Eb20oYyRbaV0sIHRyYW5zZm9ybWVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAqIEBwYXJhbSB7P30gc2NvcGVcbiAgICogQHBhcmFtIHs/PX0gc2hvdWxkUmVtb3ZlU2NvcGVcbiAgICovXG4gIGVsZW1lbnQoZWxlbWVudCwgc2NvcGUsIHNob3VsZFJlbW92ZVNjb3BlKSB7XG4gICAgLy8gbm90ZTogaWYgdXNpbmcgY2xhc3Nlcywgd2UgYWRkIGJvdGggdGhlIGdlbmVyYWwgJ3N0eWxlLXNjb3BlJyBjbGFzc1xuICAgIC8vIGFzIHdlbGwgYXMgdGhlIHNwZWNpZmljIHNjb3BlLiBUaGlzIGVuYWJsZXMgZWFzeSBmaWx0ZXJpbmcgb2YgYWxsXG4gICAgLy8gYHN0eWxlLXNjb3BlYCBlbGVtZW50c1xuICAgIGlmIChzY29wZSkge1xuICAgICAgLy8gbm90ZTogc3ZnIG9uIElFIGRvZXMgbm90IGhhdmUgY2xhc3NMaXN0IHNvIGZhbGxiYWNrIHRvIGNsYXNzXG4gICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgICAgaWYgKHNob3VsZFJlbW92ZVNjb3BlKSB7XG4gICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFNDT1BFX05BTUUpO1xuICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShzY29wZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFNDT1BFX05BTUUpO1xuICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChzY29wZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUpIHtcbiAgICAgICAgbGV0IGMgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShDTEFTUyk7XG4gICAgICAgIGlmIChzaG91bGRSZW1vdmVTY29wZSkge1xuICAgICAgICAgIGlmIChjKSB7XG4gICAgICAgICAgICBsZXQgbmV3VmFsdWUgPSBjLnJlcGxhY2UoU0NPUEVfTkFNRSwgJycpLnJlcGxhY2Uoc2NvcGUsICcnKTtcbiAgICAgICAgICAgIFN0eWxlVXRpbC5zZXRFbGVtZW50Q2xhc3NSYXcoZWxlbWVudCwgbmV3VmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgbmV3VmFsdWUgPSAoYyA/IGMgKyAnICcgOiAnJykgKyBTQ09QRV9OQU1FICsgJyAnICsgc2NvcGU7XG4gICAgICAgICAgU3R5bGVVdGlsLnNldEVsZW1lbnRDbGFzc1JhdyhlbGVtZW50LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2l2ZW4gYSBub2RlLCByZXBsYWNlIHRoZSBzY29waW5nIGNsYXNzIHRvIGVhY2ggc3Vibm9kZSBpbiB0aGUgdHJlZS5cbiAgICogQHBhcmFtIHshTm9kZX0gbm9kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb2xkU2NvcGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1Njb3BlXG4gICAqL1xuICBkb21SZXBsYWNlU2NvcGUobm9kZSwgb2xkU2NvcGUsIG5ld1Njb3BlKSB7XG4gICAgY29uc3QgZm4gPSAobm9kZSkgPT4ge1xuICAgICAgdGhpcy5lbGVtZW50KG5vZGUsIG9sZFNjb3BlLCB0cnVlKTtcbiAgICAgIHRoaXMuZWxlbWVudChub2RlLCBuZXdTY29wZSk7XG4gICAgfTtcbiAgICB0aGlzLl90cmFuc2Zvcm1Eb20obm9kZSwgZm4pO1xuICB9XG4gIC8qKlxuICAgKiBHaXZlbiBhIG5vZGUsIHJlbW92ZSB0aGUgc2NvcGluZyBjbGFzcyB0byBlYWNoIHN1Ym5vZGUgaW4gdGhlIHRyZWUuXG4gICAqIEBwYXJhbSB7IU5vZGV9IG5vZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9sZFNjb3BlXG4gICAqL1xuICBkb21SZW1vdmVTY29wZShub2RlLCBvbGRTY29wZSkge1xuICAgIGNvbnN0IGZuID0gKG5vZGUpID0+IHtcbiAgICAgIHRoaXMuZWxlbWVudChub2RlLCBvbGRTY29wZSB8fCAnJywgdHJ1ZSk7XG4gICAgfTtcbiAgICB0aGlzLl90cmFuc2Zvcm1Eb20obm9kZSwgZm4pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7P30gZWxlbWVudFxuICAgKiBAcGFyYW0gez99IHN0eWxlUnVsZXNcbiAgICogQHBhcmFtIHs/PX0gY2FsbGJhY2tcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBjc3NCdWlsZFxuICAgKiBAcGFyYW0ge3N0cmluZz19IGNzc1RleHRcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZWxlbWVudFN0eWxlcyhlbGVtZW50LCBzdHlsZVJ1bGVzLCBjYWxsYmFjaywgY3NzQnVpbGQgPSAnJywgY3NzVGV4dCA9ICcnKSB7XG4gICAgLy8gbm8gbmVlZCB0byBzaGltIHNlbGVjdG9ycyBpZiBzZXR0aW5ncy51c2VOYXRpdmVTaGFkb3csIGFsc29cbiAgICAvLyBhIHNoYWR5IGNzcyBidWlsZCB3aWxsIGFscmVhZHkgaGF2ZSB0cmFuc2Zvcm1lZCBzZWxlY3RvcnNcbiAgICAvLyBOT1RFOiBUaGlzIG1ldGhvZCBtYXkgYmUgY2FsbGVkIGFzIHBhcnQgb2Ygc3RhdGljIG9yIHByb3BlcnR5IHNoaW1taW5nLlxuICAgIC8vIFdoZW4gdGhlcmUgaXMgYSB0YXJnZXRlZCBidWlsZCBpdCB3aWxsIG5vdCBiZSBjYWxsZWQgZm9yIHN0YXRpYyBzaGltbWluZyxcbiAgICAvLyBidXQgd2hlbiB0aGUgcHJvcGVydHkgc2hpbSBpcyB1c2VkIGl0IGlzIGNhbGxlZCBhbmQgc2hvdWxkIG9wdCBvdXQgb2ZcbiAgICAvLyBzdGF0aWMgc2hpbW1pbmcgd29yayB3aGVuIGEgcHJvcGVyIGJ1aWxkIGV4aXN0cy5cbiAgICBpZiAoY3NzVGV4dCA9PT0gJycpIHtcbiAgICAgIGlmIChuYXRpdmVTaGFkb3cgfHwgY3NzQnVpbGQgPT09ICdzaGFkeScpIHtcbiAgICAgICAgY3NzVGV4dCA9IFN0eWxlVXRpbC50b0Nzc1RleHQoc3R5bGVSdWxlcywgY2FsbGJhY2spO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHtpcywgdHlwZUV4dGVuc2lvbn0gPSBTdHlsZVV0aWwuZ2V0SXNFeHRlbmRzKGVsZW1lbnQpO1xuICAgICAgICBjc3NUZXh0ID0gdGhpcy5jc3Moc3R5bGVSdWxlcywgaXMsIHR5cGVFeHRlbnNpb24sIGNhbGxiYWNrKSArICdcXG5cXG4nO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3NzVGV4dC50cmltKCk7XG4gIH1cblxuICAvLyBHaXZlbiBhIHN0cmluZyBvZiBjc3NUZXh0IGFuZCBhIHNjb3Bpbmcgc3RyaW5nIChzY29wZSksIHJldHVybnNcbiAgLy8gYSBzdHJpbmcgb2Ygc2NvcGVkIGNzcyB3aGVyZSBlYWNoIHNlbGVjdG9yIGlzIHRyYW5zZm9ybWVkIHRvIGluY2x1ZGVcbiAgLy8gYSBjbGFzcyBjcmVhdGVkIGZyb20gdGhlIHNjb3BlLiBTaGFkb3dET00gc2VsZWN0b3JzIGFyZSBhbHNvIHRyYW5zZm9ybWVkXG4gIC8vIChlLmcuIDpob3N0KSB0byB1c2UgdGhlIHNjb3Bpbmcgc2VsZWN0b3IuXG4gIGNzcyhydWxlcywgc2NvcGUsIGV4dCwgY2FsbGJhY2spIHtcbiAgICBsZXQgaG9zdFNjb3BlID0gdGhpcy5fY2FsY0hvc3RTY29wZShzY29wZSwgZXh0KTtcbiAgICBzY29wZSA9IHRoaXMuX2NhbGNFbGVtZW50U2NvcGUoc2NvcGUpO1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gU3R5bGVVdGlsLnRvQ3NzVGV4dChydWxlcywgZnVuY3Rpb24gKC8qKiBTdHlsZU5vZGUgKi8gcnVsZSkge1xuICAgICAgaWYgKCEoLyoqIEB0eXBlIHs/fSAqLyAocnVsZS5pc1Njb3BlZCkpKSB7XG4gICAgICAgIHNlbGYucnVsZShydWxlLCBzY29wZSwgaG9zdFNjb3BlKTtcbiAgICAgICAgcnVsZS5pc1Njb3BlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2socnVsZSwgc2NvcGUsIGhvc3RTY29wZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBfY2FsY0VsZW1lbnRTY29wZShzY29wZSkge1xuICAgIGlmIChzY29wZSkge1xuICAgICAgcmV0dXJuIENTU19DTEFTU19QUkVGSVggKyBzY29wZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxuXG4gIF9jYWxjSG9zdFNjb3BlKHNjb3BlLCBleHQpIHtcbiAgICByZXR1cm4gZXh0ID8gYFtpcz0ke3Njb3BlfV1gIDogc2NvcGU7XG4gIH1cblxuICBydWxlKHJ1bGUsIHNjb3BlLCBob3N0U2NvcGUpIHtcbiAgICB0aGlzLl90cmFuc2Zvcm1SdWxlKHJ1bGUsIHRoaXMuX3RyYW5zZm9ybUNvbXBsZXhTZWxlY3Rvciwgc2NvcGUsIGhvc3RTY29wZSk7XG4gIH1cblxuICAvKipcbiAgICogdHJhbnNmb3JtcyBhIGNzcyBydWxlIHRvIGEgc2NvcGVkIHJ1bGUuXG4gICAqXG4gICAqIEBwYXJhbSB7U3R5bGVOb2RlfSBydWxlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybWVyXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gc2NvcGVcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBob3N0U2NvcGVcbiAgICovXG4gIF90cmFuc2Zvcm1SdWxlKHJ1bGUsIHRyYW5zZm9ybWVyLCBzY29wZSwgaG9zdFNjb3BlKSB7XG4gICAgLy8gTk9URTogc2F2ZSB0cmFuc2Zvcm1lZFNlbGVjdG9yIGZvciBzdWJzZXF1ZW50IG1hdGNoaW5nIG9mIGVsZW1lbnRzXG4gICAgLy8gYWdhaW5zdCBzZWxlY3RvcnMgKGUuZy4gd2hlbiBjYWxjdWxhdGluZyBzdHlsZSBwcm9wZXJ0aWVzKVxuICAgIHJ1bGVbXG4gICAgICAnc2VsZWN0b3InXG4gICAgXSA9IC8qKiBAdHlwZSB7P30gKi8gKHJ1bGUpLnRyYW5zZm9ybWVkU2VsZWN0b3IgPSB0aGlzLl90cmFuc2Zvcm1SdWxlQ3NzKFxuICAgICAgcnVsZSxcbiAgICAgIHRyYW5zZm9ybWVyLFxuICAgICAgc2NvcGUsXG4gICAgICBob3N0U2NvcGVcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3R5bGVOb2RlfSBydWxlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybWVyXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gc2NvcGVcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBob3N0U2NvcGVcbiAgICovXG4gIF90cmFuc2Zvcm1SdWxlQ3NzKHJ1bGUsIHRyYW5zZm9ybWVyLCBzY29wZSwgaG9zdFNjb3BlKSB7XG4gICAgbGV0IHAkID0gU3R5bGVVdGlsLnNwbGl0U2VsZWN0b3JMaXN0KHJ1bGVbJ3NlbGVjdG9yJ10pO1xuICAgIC8vIHdlIHdhbnQgdG8gc2tpcCB0cmFuc2Zvcm1hdGlvbiBvZiBydWxlcyB0aGF0IGFwcGVhciBpbiBrZXlmcmFtZXMsXG4gICAgLy8gYmVjYXVzZSB0aGV5IGFyZSBrZXlmcmFtZSBzZWxlY3RvcnMsIG5vdCBlbGVtZW50IHNlbGVjdG9ycy5cbiAgICBpZiAoIVN0eWxlVXRpbC5pc0tleWZyYW1lc1NlbGVjdG9yKHJ1bGUpKSB7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHAkLmxlbmd0aCwgcDsgaSA8IGwgJiYgKHAgPSBwJFtpXSk7IGkrKykge1xuICAgICAgICBwJFtpXSA9IHRyYW5zZm9ybWVyLmNhbGwodGhpcywgcCwgc2NvcGUsIGhvc3RTY29wZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwJC5maWx0ZXIoKHBhcnQpID0+IEJvb2xlYW4ocGFydCkpLmpvaW4oQ09NUExFWF9TRUxFQ1RPUl9TRVApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBfdHdpZGRsZU50aFBsdXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gc2VsZWN0b3IucmVwbGFjZShOVEgsIChtLCB0eXBlLCBpbnNpZGUpID0+IHtcbiAgICAgIGlmIChpbnNpZGUuaW5kZXhPZignKycpID4gLTEpIHtcbiAgICAgICAgaW5zaWRlID0gaW5zaWRlLnJlcGxhY2UoL1xcKy9nLCAnX19fJyk7XG4gICAgICB9IGVsc2UgaWYgKGluc2lkZS5pbmRleE9mKCdfX18nKSA+IC0xKSB7XG4gICAgICAgIGluc2lkZSA9IGluc2lkZS5yZXBsYWNlKC9fX18vZywgJysnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBgOiR7dHlwZX0oJHtpbnNpZGV9KWA7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUHJlc2VydmUgYDptYXRjaGVzKClgIHNlbGVjdG9ycyBieSByZXBsYWNpbmcgdGhlbSB3aXRoIE1BVENIRVNfUkVQTEFDTUVOVFxuICAgKiBhbmQgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGA6bWF0Y2hlcygpYCBzZWxlY3RvcnMuXG4gICAqIFVzZSBgX3JlcGxhY2VzTWF0Y2hlc1BzZXVkb2AgdG8gcmVwbGFjZSB0aGUgYDptYXRjaGVzKClgIHBhcnRzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICAgKiBAcmV0dXJuIHt7c2VsZWN0b3I6IHN0cmluZywgbWF0Y2hlczogIUFycmF5PHN0cmluZz59fVxuICAgKi9cbiAgX3ByZXNlcnZlTWF0Y2hlc1BzZXVkbyhzZWxlY3Rvcikge1xuICAgIC8qKiBAdHlwZSB7IUFycmF5PHN0cmluZz59ICovXG4gICAgY29uc3QgbWF0Y2hlcyA9IFtdO1xuICAgIGxldCBtYXRjaDtcbiAgICB3aGlsZSAoKG1hdGNoID0gc2VsZWN0b3IubWF0Y2goTUFUQ0hFUykpKSB7XG4gICAgICBjb25zdCBzdGFydCA9IG1hdGNoLmluZGV4O1xuICAgICAgY29uc3QgZW5kID0gU3R5bGVVdGlsLmZpbmRNYXRjaGluZ1BhcmVuKHNlbGVjdG9yLCBzdGFydCk7XG4gICAgICBpZiAoZW5kID09PSAtMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bWF0Y2guaW5wdXR9IHNlbGVjdG9yIG1pc3NpbmcgJyknYCk7XG4gICAgICB9XG4gICAgICBjb25zdCBwYXJ0ID0gc2VsZWN0b3Iuc2xpY2Uoc3RhcnQsIGVuZCArIDEpO1xuICAgICAgc2VsZWN0b3IgPSBzZWxlY3Rvci5yZXBsYWNlKHBhcnQsIE1BVENIRVNfUkVQTEFDRU1FTlQpO1xuICAgICAgbWF0Y2hlcy5wdXNoKHBhcnQpO1xuICAgIH1cbiAgICByZXR1cm4ge3NlbGVjdG9yLCBtYXRjaGVzfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlIE1BVENIRVNfUkVQTEFDTUVOVCBjaGFyYWN0ZXIgd2l0aCB0aGUgZ2l2ZW4gc2V0IG9mIGA6bWF0Y2hlcygpYFxuICAgKiBzZWxlY3RvcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICAgKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSBtYXRjaGVzXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIF9yZXBsYWNlTWF0Y2hlc1BzZXVkbyhzZWxlY3RvciwgbWF0Y2hlcykge1xuICAgIGNvbnN0IHBhcnRzID0gc2VsZWN0b3Iuc3BsaXQoTUFUQ0hFU19SRVBMQUNFTUVOVCk7XG4gICAgcmV0dXJuIG1hdGNoZXMucmVkdWNlKFxuICAgICAgKGFjYywgY3VyLCBpZHgpID0+IGFjYyArIGN1ciArIHBhcnRzW2lkeCArIDFdLFxuICAgICAgcGFydHNbMF1cbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2NvcGVcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBob3N0U2NvcGVcbiAgICovXG4gIF90cmFuc2Zvcm1Db21wbGV4U2VsZWN0b3Ioc2VsZWN0b3IsIHNjb3BlLCBob3N0U2NvcGUpIHtcbiAgICBsZXQgc3RvcCA9IGZhbHNlO1xuICAgIHNlbGVjdG9yID0gc2VsZWN0b3IudHJpbSgpO1xuICAgIC8vIFJlbW92ZSBzcGFjZXMgaW5zaWRlIG9mIHNlbGVjdG9ycyBsaWtlIGA6bnRoLW9mLXR5cGVgIGJlY2F1c2UgaXQgY29uZnVzZXMgU0lNUExFX1NFTEVDVE9SX1NFUFxuICAgIGxldCBpc050aCA9IE5USC50ZXN0KHNlbGVjdG9yKTtcbiAgICBpZiAoaXNOdGgpIHtcbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZShcbiAgICAgICAgTlRILFxuICAgICAgICAobSwgdHlwZSwgaW5uZXIpID0+IGA6JHt0eXBlfSgke2lubmVyLnJlcGxhY2UoL1xccy9nLCAnJyl9KWBcbiAgICAgICk7XG4gICAgICBzZWxlY3RvciA9IHRoaXMuX3R3aWRkbGVOdGhQbHVzKHNlbGVjdG9yKTtcbiAgICB9XG4gICAgLy8gUHJlc2VydmUgc2VsZWN0b3JzIGxpa2UgYDotd2Via2l0LWFueWAgc28gdGhhdCBTSU1QTEVfU0VMRUNUT1JfU0VQIGRvZXNcbiAgICAvLyBub3QgZ2V0IGNvbmZ1c2VkIGJ5IHNwYWNlcyBpbnNpZGUgdGhlIHBzZXVkbyBzZWxlY3RvclxuICAgIGNvbnN0IGlzTWF0Y2hlcyA9IE1BVENIRVMudGVzdChzZWxlY3Rvcik7XG4gICAgLyoqIEB0eXBlIHshQXJyYXk8c3RyaW5nPn0gKi9cbiAgICBsZXQgbWF0Y2hlcztcbiAgICBpZiAoaXNNYXRjaGVzKSB7XG4gICAgICAoe3NlbGVjdG9yLCBtYXRjaGVzfSA9IHRoaXMuX3ByZXNlcnZlTWF0Y2hlc1BzZXVkbyhzZWxlY3RvcikpO1xuICAgIH1cbiAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UoU0xPVFRFRF9TVEFSVCwgYCR7SE9TVH0gJDFgKTtcbiAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UoU0lNUExFX1NFTEVDVE9SX1NFUCwgKG0sIGMsIHMpID0+IHtcbiAgICAgIGlmICghc3RvcCkge1xuICAgICAgICBsZXQgaW5mbyA9IHRoaXMuX3RyYW5zZm9ybUNvbXBvdW5kU2VsZWN0b3IocywgYywgc2NvcGUsIGhvc3RTY29wZSk7XG4gICAgICAgIHN0b3AgPSBzdG9wIHx8IGluZm8uc3RvcDtcbiAgICAgICAgYyA9IGluZm8uY29tYmluYXRvcjtcbiAgICAgICAgcyA9IGluZm8udmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYyArIHM7XG4gICAgfSk7XG4gICAgLy8gcmVwbGFjZSBgOm1hdGNoZXMoKWAgc2VsZWN0b3JzXG4gICAgaWYgKGlzTWF0Y2hlcykge1xuICAgICAgc2VsZWN0b3IgPSB0aGlzLl9yZXBsYWNlTWF0Y2hlc1BzZXVkbyhzZWxlY3RvciwgbWF0Y2hlcyk7XG4gICAgfVxuICAgIGlmIChpc050aCkge1xuICAgICAgc2VsZWN0b3IgPSB0aGlzLl90d2lkZGxlTnRoUGx1cyhzZWxlY3Rvcik7XG4gICAgfVxuICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZShcbiAgICAgIERJUl9QQVJFTixcbiAgICAgIChtLCBiZWZvcmUsIGRpciwgYWZ0ZXIpID0+XG4gICAgICAgIGBbZGlyPVwiJHtkaXJ9XCJdICR7YmVmb3JlfSR7YWZ0ZXJ9LCAke2JlZm9yZX1bZGlyPVwiJHtkaXJ9XCJdJHthZnRlcn1gXG4gICAgKTtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH1cblxuICBfdHJhbnNmb3JtQ29tcG91bmRTZWxlY3RvcihzZWxlY3RvciwgY29tYmluYXRvciwgc2NvcGUsIGhvc3RTY29wZSkge1xuICAgIC8vIHJlcGxhY2UgOmhvc3Qgd2l0aCBob3N0IHNjb3BpbmcgY2xhc3NcbiAgICBsZXQgc2xvdHRlZEluZGV4ID0gc2VsZWN0b3IuaW5kZXhPZihTTE9UVEVEKTtcbiAgICBpZiAoc2VsZWN0b3IuaW5kZXhPZihIT1NUKSA+PSAwKSB7XG4gICAgICBzZWxlY3RvciA9IHRoaXMuX3RyYW5zZm9ybUhvc3RTZWxlY3RvcihzZWxlY3RvciwgaG9zdFNjb3BlKTtcbiAgICAgIC8vIHJlcGxhY2Ugb3RoZXIgc2VsZWN0b3JzIHdpdGggc2NvcGluZyBjbGFzc1xuICAgIH0gZWxzZSBpZiAoc2xvdHRlZEluZGV4ICE9PSAwKSB7XG4gICAgICBzZWxlY3RvciA9IHNjb3BlXG4gICAgICAgID8gdGhpcy5fdHJhbnNmb3JtU2ltcGxlU2VsZWN0b3Ioc2VsZWN0b3IsIHNjb3BlKVxuICAgICAgICA6IHNlbGVjdG9yO1xuICAgIH1cbiAgICAvLyBtYXJrIDo6c2xvdHRlZCgpIHNjb3BlIGp1bXAgdG8gcmVwbGFjZSB3aXRoIGRlc2NlbmRhbnQgc2VsZWN0b3IgKyBhcmdcbiAgICAvLyBhbHNvIGlnbm9yZSBsZWZ0LXNpZGUgY29tYmluYXRvclxuICAgIGxldCBzbG90dGVkID0gZmFsc2U7XG4gICAgaWYgKHNsb3R0ZWRJbmRleCA+PSAwKSB7XG4gICAgICBjb21iaW5hdG9yID0gJyc7XG4gICAgICBzbG90dGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgLy8gcHJvY2VzcyBzY29wZSBqdW1waW5nIHNlbGVjdG9ycyB1cCB0byB0aGUgc2NvcGUganVtcCBhbmQgdGhlbiBzdG9wXG4gICAgbGV0IHN0b3A7XG4gICAgaWYgKHNsb3R0ZWQpIHtcbiAgICAgIHN0b3AgPSB0cnVlO1xuICAgICAgaWYgKHNsb3R0ZWQpIHtcbiAgICAgICAgLy8gLnpvbmsgOjpzbG90dGVkKC5mb28pIC0+IC56b25rLnNjb3BlID4gLmZvb1xuICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UoU0xPVFRFRF9QQVJFTiwgKG0sIHBhcmVuKSA9PiBgID4gJHtwYXJlbn1gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHt2YWx1ZTogc2VsZWN0b3IsIGNvbWJpbmF0b3IsIHN0b3B9O1xuICB9XG5cbiAgX3RyYW5zZm9ybVNpbXBsZVNlbGVjdG9yKHNlbGVjdG9yLCBzY29wZSkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBzZWxlY3Rvci5zcGxpdCgvKFxcWy4rP1xcXSkvKTtcblxuICAgIGNvbnN0IG91dHB1dCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gRG8gbm90IGF0dGVtcHQgdG8gdHJhbnNmb3JtIGFueSBhdHRyaWJ1dGUgc2VsZWN0b3IgY29udGVudFxuICAgICAgaWYgKGkgJSAyID09PSAxKSB7XG4gICAgICAgIG91dHB1dC5wdXNoKGF0dHJpYnV0ZXNbaV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcGFydCA9IGF0dHJpYnV0ZXNbaV07XG5cbiAgICAgICAgaWYgKCEocGFydCA9PT0gJycgJiYgaSA9PT0gYXR0cmlidXRlcy5sZW5ndGggLSAxKSkge1xuICAgICAgICAgIGxldCBwJCA9IHBhcnQuc3BsaXQoUFNFVURPX1BSRUZJWCk7XG4gICAgICAgICAgcCRbMF0gKz0gc2NvcGU7XG4gICAgICAgICAgb3V0cHV0LnB1c2gocCQuam9pbihQU0VVRE9fUFJFRklYKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xuICB9XG5cbiAgLy8gOmhvc3QoLi4uKSAtPiBzY29wZU5hbWUuLi5cbiAgX3RyYW5zZm9ybUhvc3RTZWxlY3RvcihzZWxlY3RvciwgaG9zdFNjb3BlKSB7XG4gICAgbGV0IG0gPSBzZWxlY3Rvci5tYXRjaChIT1NUX1BBUkVOKTtcbiAgICBsZXQgcGFyZW4gPSAobSAmJiBtWzJdLnRyaW0oKSkgfHwgJyc7XG4gICAgaWYgKHBhcmVuKSB7XG4gICAgICBpZiAoIXBhcmVuWzBdLm1hdGNoKFNJTVBMRV9TRUxFQ1RPUl9QUkVGSVgpKSB7XG4gICAgICAgIC8vIHBhcmVuIHN0YXJ0cyB3aXRoIGEgdHlwZSBzZWxlY3RvclxuICAgICAgICBsZXQgdHlwZVNlbGVjdG9yID0gcGFyZW4uc3BsaXQoU0lNUExFX1NFTEVDVE9SX1BSRUZJWClbMF07XG4gICAgICAgIC8vIGlmIHRoZSB0eXBlIHNlbGVjdG9yIGlzIG91ciBob3N0U2NvcGUgdGhlbiBhdm9pZCBwcmUtcGVuZGluZyBpdFxuICAgICAgICBpZiAodHlwZVNlbGVjdG9yID09PSBob3N0U2NvcGUpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW47XG4gICAgICAgIH1cbiAgICAgICAgLy8gb3RoZXJ3aXNlLCB0aGlzIHNlbGVjdG9yIHNob3VsZCBub3QgbWF0Y2ggaW4gdGhpcyBzY29wZSBzb1xuICAgICAgICAvLyBvdXRwdXQgYSBib2d1cyBzZWxlY3Rvci5cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFNFTEVDVE9SX05PX01BVENIO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBtYWtlIHN1cmUgdG8gZG8gYSByZXBsYWNlIGhlcmUgdG8gY2F0Y2ggc2VsZWN0b3JzIGxpa2U6XG4gICAgICAgIC8vIGA6aG9zdCguZm9vKTo6YmVmb3JlYFxuICAgICAgICByZXR1cm4gc2VsZWN0b3IucmVwbGFjZShIT1NUX1BBUkVOLCBmdW5jdGlvbiAobSwgaG9zdCwgcGFyZW4pIHtcbiAgICAgICAgICByZXR1cm4gaG9zdFNjb3BlICsgcGFyZW47XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBpZiBubyBwYXJlbiwgZG8gYSBzdHJhaWdodCA6aG9zdCByZXBsYWNlbWVudC5cbiAgICAvLyBUT0RPKHNvcnZlbGwpOiB0aGlzIHNob3VsZCBub3Qgc3RyaWN0bHkgYmUgbmVjZXNzYXJ5IGJ1dFxuICAgIC8vIGl0J3MgbmVlZGVkIHRvIG1haW50YWluIHN1cHBvcnQgZm9yIGA6aG9zdFtmb29dYCB0eXBlIHNlbGVjdG9yc1xuICAgIC8vIHdoaWNoIGhhdmUgYmVlbiBpbXByb3Blcmx5IHVzZWQgdW5kZXIgU2hhZHkgRE9NLiBUaGlzIHNob3VsZCBiZVxuICAgIC8vIGRlcHJlY2F0ZWQuXG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3IucmVwbGFjZShIT1NULCBob3N0U2NvcGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0eWxlTm9kZX0gcnVsZVxuICAgKi9cbiAgZG9jdW1lbnRSdWxlKHJ1bGUpIHtcbiAgICAvLyByZXNldCBzZWxlY3RvciBpbiBjYXNlIHRoaXMgaXMgcmVkb25lLlxuICAgIHJ1bGVbJ3NlbGVjdG9yJ10gPSBydWxlWydwYXJzZWRTZWxlY3RvciddO1xuICAgIHRoaXMubm9ybWFsaXplUm9vdFNlbGVjdG9yKHJ1bGUpO1xuICAgIHRoaXMuX3RyYW5zZm9ybVJ1bGUocnVsZSwgdGhpcy5fdHJhbnNmb3JtRG9jdW1lbnRTZWxlY3Rvcik7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtTdHlsZU5vZGV9IHJ1bGVcbiAgICovXG4gIG5vcm1hbGl6ZVJvb3RTZWxlY3RvcihydWxlKSB7XG4gICAgaWYgKHJ1bGVbJ3NlbGVjdG9yJ10gPT09IFJPT1QpIHtcbiAgICAgIHJ1bGVbJ3NlbGVjdG9yJ10gPSAnaHRtbCc7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICAgKi9cbiAgX3RyYW5zZm9ybURvY3VtZW50U2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICBpZiAoc2VsZWN0b3IubWF0Y2goSE9TVCkpIHtcbiAgICAgIC8vIHJlbW92ZSAnOmhvc3QnIHR5cGUgc2VsZWN0b3JzIGluIGRvY3VtZW50IHJ1bGVzXG4gICAgICByZXR1cm4gJyc7XG4gICAgfSBlbHNlIGlmIChzZWxlY3Rvci5tYXRjaChTTE9UVEVEKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zZm9ybUNvbXBsZXhTZWxlY3RvcihzZWxlY3RvciwgU0NPUEVfRE9DX1NFTEVDVE9SKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zZm9ybVNpbXBsZVNlbGVjdG9yKHNlbGVjdG9yLnRyaW0oKSwgU0NPUEVfRE9DX1NFTEVDVE9SKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgTlRIID0gLzoobnRoWy1cXHddKylcXCgoW14pXSspXFwpLztcbmNvbnN0IFNDT1BFX0RPQ19TRUxFQ1RPUiA9IGA6bm90KC4ke1NDT1BFX05BTUV9KWA7XG5jb25zdCBDT01QTEVYX1NFTEVDVE9SX1NFUCA9ICcsJztcbmNvbnN0IFNJTVBMRV9TRUxFQ1RPUl9TRVAgPSAvKF58W1xccz4rfl0rKSgoPzpcXFsuKz9cXF18W15cXHM+K349W10pKykvZztcbmNvbnN0IFNJTVBMRV9TRUxFQ1RPUl9QUkVGSVggPSAvW1suOiMqXS87XG5jb25zdCBIT1NUID0gJzpob3N0JztcbmNvbnN0IFJPT1QgPSAnOnJvb3QnO1xuY29uc3QgU0xPVFRFRCA9ICc6OnNsb3R0ZWQnO1xuY29uc3QgU0xPVFRFRF9TVEFSVCA9IG5ldyBSZWdFeHAoYF4oJHtTTE9UVEVEfSlgKTtcbi8vIE5PVEU6IHRoaXMgc3VwcG9ydHMgMSBuZXN0ZWQgKCkgcGFpciBmb3IgdGhpbmdzIGxpa2Vcbi8vIDpob3N0KDpub3QoW3NlbGVjdGVkXSksIG1vcmUgZ2VuZXJhbCBzdXBwb3J0IHJlcXVpcmVzXG4vLyBwYXJzaW5nIHdoaWNoIHNlZW1zIGxpa2Ugb3ZlcmtpbGxcbmNvbnN0IEhPU1RfUEFSRU4gPSAvKDpob3N0KSg/OlxcKCgoPzpcXChbXikoXSpcXCl8W14pKF0qKSs/KVxcKSkvO1xuLy8gc2ltaWxhciB0byBIT1NUX1BBUkVOXG5jb25zdCBTTE9UVEVEX1BBUkVOID0gLyg/Ojo6c2xvdHRlZCkoPzpcXCgoKD86XFwoW14pKF0qXFwpfFteKShdKikrPylcXCkpLztcbmNvbnN0IERJUl9QQVJFTiA9IC8oLiopOmRpclxcKCg/OihsdHJ8cnRsKSlcXCkoLiopLztcbmNvbnN0IENTU19DTEFTU19QUkVGSVggPSAnLic7XG5jb25zdCBQU0VVRE9fUFJFRklYID0gJzonO1xuY29uc3QgQ0xBU1MgPSAnY2xhc3MnO1xuY29uc3QgU0VMRUNUT1JfTk9fTUFUQ0ggPSAnc2hvdWxkX25vdF9tYXRjaCc7XG5jb25zdCBNQVRDSEVTID0gLzooPzptYXRjaGVzfGFueXwtKD86d2Via2l0fG1veiktYW55KS87XG5jb25zdCBNQVRDSEVTX1JFUExBQ0VNRU5UID0gJ1xcdXtlMDAwfSc7XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBTdHlsZVRyYW5zZm9ybWVyKCk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7cGFyc2UsIFN0eWxlTm9kZX0gZnJvbSAnLi9jc3MtcGFyc2UuanMnO1xuLy8gcHJldHRpZXItaWdub3JlXG5pbXBvcnQge25hdGl2ZVNoYWRvdywgbmF0aXZlQ3NzVmFyaWFibGVzLCBkaXNhYmxlUnVudGltZX0gZnJvbSAnLi9zdHlsZS1zZXR0aW5ncy5qcyc7XG5pbXBvcnQgU3R5bGVUcmFuc2Zvcm1lciBmcm9tICcuL3N0eWxlLXRyYW5zZm9ybWVyLmpzJztcbmltcG9ydCAqIGFzIFN0eWxlVXRpbCBmcm9tICcuL3N0eWxlLXV0aWwuanMnO1xuaW1wb3J0IFN0eWxlUHJvcGVydGllcyBmcm9tICcuL3N0eWxlLXByb3BlcnRpZXMuanMnO1xuLy8gcHJldHRpZXItaWdub3JlXG5pbXBvcnQge2Vuc3VyZVN0eWxlUGxhY2Vob2xkZXIsIGdldFN0eWxlUGxhY2Vob2xkZXJ9IGZyb20gJy4vc3R5bGUtcGxhY2Vob2xkZXIuanMnO1xuaW1wb3J0IFN0eWxlSW5mbyBmcm9tICcuL3N0eWxlLWluZm8uanMnO1xuaW1wb3J0IFN0eWxlQ2FjaGUgZnJvbSAnLi9zdHlsZS1jYWNoZS5qcyc7XG4vLyBwcmV0dGllci1pZ25vcmVcbmltcG9ydCB7Zmx1c2ggYXMgd2F0Y2hlckZsdXNoLCBnZXRPd25lclNjb3BlLCBnZXRDdXJyZW50U2NvcGV9IGZyb20gJy4vZG9jdW1lbnQtd2F0Y2hlci5qcyc7XG5pbXBvcnQgdGVtcGxhdGVNYXAgZnJvbSAnLi90ZW1wbGF0ZS1tYXAuanMnO1xuaW1wb3J0ICogYXMgQXBwbHlTaGltVXRpbHMgZnJvbSAnLi9hcHBseS1zaGltLXV0aWxzLmpzJztcbmltcG9ydCB7dXBkYXRlTmF0aXZlUHJvcGVydGllcywgZGV0ZWN0TWl4aW59IGZyb20gJy4vY29tbW9uLXV0aWxzLmpzJztcbi8vIHByZXR0aWVyLWlnbm9yZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuaW1wb3J0IHtDdXN0b21TdHlsZUludGVyZmFjZUludGVyZmFjZSwgQ3VzdG9tU3R5bGVQcm92aWRlcn0gZnJvbSAnLi9jdXN0b20tc3R5bGUtaW50ZXJmYWNlLmpzJztcblxuLyoqIEB0eXBlIHshT2JqZWN0PHN0cmluZywgc3RyaW5nPn0gKi9cbmNvbnN0IGFkb3B0ZWRDc3NUZXh0TWFwID0ge307XG5cbi8qKlxuICogQGNvbnN0IHtTdHlsZUNhY2hlfVxuICovXG5jb25zdCBzdHlsZUNhY2hlID0gbmV3IFN0eWxlQ2FjaGUoKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NvcGluZ1NoaW0ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9zY29wZUNvdW50ZXIgPSB7fTtcbiAgICB0aGlzLl9kb2N1bWVudE93bmVyID0gLyoqIEB0eXBlIHshSFRNTEVsZW1lbnR9ICovIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuICAgIGxldCBhc3QgPSBuZXcgU3R5bGVOb2RlKCk7XG4gICAgYXN0WydydWxlcyddID0gW107XG4gICAgdGhpcy5fZG9jdW1lbnRPd25lclN0eWxlSW5mbyA9IFN0eWxlSW5mby5zZXQoXG4gICAgICB0aGlzLl9kb2N1bWVudE93bmVyLFxuICAgICAgbmV3IFN0eWxlSW5mbyhhc3QpXG4gICAgKTtcbiAgICB0aGlzLl9lbGVtZW50c0hhdmVBcHBsaWVkID0gZmFsc2U7XG4gICAgLyoqIEB0eXBlIHs/T2JqZWN0fSAqL1xuICAgIHRoaXMuX2FwcGx5U2hpbSA9IG51bGw7XG4gICAgLyoqIEB0eXBlIHs/Q3VzdG9tU3R5bGVJbnRlcmZhY2VJbnRlcmZhY2V9ICovXG4gICAgdGhpcy5fY3VzdG9tU3R5bGVJbnRlcmZhY2UgPSBudWxsO1xuICB9XG4gIGZsdXNoKCkge1xuICAgIHdhdGNoZXJGbHVzaCgpO1xuICB9XG4gIF9nZW5lcmF0ZVNjb3BlU2VsZWN0b3IobmFtZSkge1xuICAgIGxldCBpZCA9ICh0aGlzLl9zY29wZUNvdW50ZXJbbmFtZV0gPSAodGhpcy5fc2NvcGVDb3VudGVyW25hbWVdIHx8IDApICsgMSk7XG4gICAgcmV0dXJuIGAke25hbWV9LSR7aWR9YDtcbiAgfVxuICBnZXRTdHlsZUFzdChzdHlsZSkge1xuICAgIHJldHVybiBTdHlsZVV0aWwucnVsZXNGb3JTdHlsZShzdHlsZSk7XG4gIH1cbiAgc3R5bGVBc3RUb1N0cmluZyhhc3QpIHtcbiAgICByZXR1cm4gU3R5bGVVdGlsLnRvQ3NzVGV4dChhc3QpO1xuICB9XG4gIF9nYXRoZXJTdHlsZXModGVtcGxhdGUpIHtcbiAgICByZXR1cm4gU3R5bGVVdGlsLmdhdGhlclN0eWxlVGV4dCh0ZW1wbGF0ZS5jb250ZW50KTtcbiAgfVxuICAvKipcbiAgICogUHJlcGFyZSB0aGUgc3R5bGluZyBhbmQgdGVtcGxhdGUgZm9yIHRoZSBnaXZlbiBlbGVtZW50IHR5cGVcbiAgICpcbiAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdHlwZUV4dGVuc2lvblxuICAgKi9cbiAgcHJlcGFyZVRlbXBsYXRlKHRlbXBsYXRlLCBlbGVtZW50TmFtZSwgdHlwZUV4dGVuc2lvbikge1xuICAgIHRoaXMucHJlcGFyZVRlbXBsYXRlRG9tKHRlbXBsYXRlLCBlbGVtZW50TmFtZSk7XG4gICAgdGhpcy5wcmVwYXJlVGVtcGxhdGVTdHlsZXModGVtcGxhdGUsIGVsZW1lbnROYW1lLCB0eXBlRXh0ZW5zaW9uKTtcbiAgfVxuICAvKipcbiAgICogUHJlcGFyZSBzdHlsaW5nIGZvciB0aGUgZ2l2ZW4gZWxlbWVudCB0eXBlXG4gICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZz19IHR5cGVFeHRlbnNpb25cbiAgICovXG4gIHByZXBhcmVUZW1wbGF0ZVN0eWxlcyh0ZW1wbGF0ZSwgZWxlbWVudE5hbWUsIHR5cGVFeHRlbnNpb24pIHtcbiAgICBpZiAodGVtcGxhdGUuX3ByZXBhcmVkIHx8IGRpc2FibGVSdW50aW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHN0eWxlIHBsYWNlaG9sZGVycyBhcmUgb25seSB1c2VkIHdoZW4gU2hhZHlET00gaXMgYWN0aXZlXG4gICAgaWYgKCFuYXRpdmVTaGFkb3cpIHtcbiAgICAgIGVuc3VyZVN0eWxlUGxhY2Vob2xkZXIoZWxlbWVudE5hbWUpO1xuICAgIH1cbiAgICB0ZW1wbGF0ZS5fcHJlcGFyZWQgPSB0cnVlO1xuICAgIHRlbXBsYXRlLm5hbWUgPSBlbGVtZW50TmFtZTtcbiAgICB0ZW1wbGF0ZS5leHRlbmRzID0gdHlwZUV4dGVuc2lvbjtcbiAgICB0ZW1wbGF0ZU1hcFtlbGVtZW50TmFtZV0gPSB0ZW1wbGF0ZTtcbiAgICBsZXQgY3NzQnVpbGQgPSBTdHlsZVV0aWwuZ2V0Q3NzQnVpbGQodGVtcGxhdGUpO1xuICAgIGNvbnN0IG9wdGltYWxCdWlsZCA9IFN0eWxlVXRpbC5pc09wdGltYWxDc3NCdWlsZChjc3NCdWlsZCk7XG4gICAgbGV0IGluZm8gPSB7XG4gICAgICBpczogZWxlbWVudE5hbWUsXG4gICAgICBleHRlbmRzOiB0eXBlRXh0ZW5zaW9uLFxuICAgIH07XG4gICAgbGV0IGNzc1RleHQgPVxuICAgICAgdGhpcy5fZ2F0aGVyU3R5bGVzKHRlbXBsYXRlKSArIChhZG9wdGVkQ3NzVGV4dE1hcFtlbGVtZW50TmFtZV0gfHwgJycpO1xuICAgIC8vIGNoZWNrIGlmIHRoZSBzdHlsaW5nIGhhcyBtaXhpbiBkZWZpbml0aW9ucyBvciB1c2VzXG4gICAgdGhpcy5fZW5zdXJlKCk7XG4gICAgaWYgKCFvcHRpbWFsQnVpbGQpIHtcbiAgICAgIGxldCBoYXNNaXhpbnMgPSAhY3NzQnVpbGQgJiYgZGV0ZWN0TWl4aW4oY3NzVGV4dCk7XG4gICAgICBsZXQgYXN0ID0gcGFyc2UoY3NzVGV4dCk7XG4gICAgICAvLyBvbmx5IHJ1biB0aGUgYXBwbHlzaGltIHRyYW5zZm9ybXMgaWYgdGhlcmUgaXMgYSBtaXhpbiBpbnZvbHZlZFxuICAgICAgaWYgKGhhc01peGlucyAmJiBuYXRpdmVDc3NWYXJpYWJsZXMgJiYgdGhpcy5fYXBwbHlTaGltKSB7XG4gICAgICAgIHRoaXMuX2FwcGx5U2hpbVsndHJhbnNmb3JtUnVsZXMnXShhc3QsIGVsZW1lbnROYW1lKTtcbiAgICAgIH1cbiAgICAgIHRlbXBsYXRlWydfc3R5bGVBc3QnXSA9IGFzdDtcbiAgICB9XG4gICAgbGV0IG93blByb3BlcnR5TmFtZXMgPSBbXTtcbiAgICBpZiAoIW5hdGl2ZUNzc1ZhcmlhYmxlcykge1xuICAgICAgb3duUHJvcGVydHlOYW1lcyA9IFN0eWxlUHJvcGVydGllcy5kZWNvcmF0ZVN0eWxlcyh0ZW1wbGF0ZVsnX3N0eWxlQXN0J10pO1xuICAgIH1cbiAgICBpZiAoIW93blByb3BlcnR5TmFtZXMubGVuZ3RoIHx8IG5hdGl2ZUNzc1ZhcmlhYmxlcykge1xuICAgICAgbGV0IHJvb3QgPSBuYXRpdmVTaGFkb3cgPyB0ZW1wbGF0ZS5jb250ZW50IDogbnVsbDtcbiAgICAgIGxldCBwbGFjZWhvbGRlciA9IGdldFN0eWxlUGxhY2Vob2xkZXIoZWxlbWVudE5hbWUpO1xuICAgICAgbGV0IHN0eWxlID0gdGhpcy5fZ2VuZXJhdGVTdGF0aWNTdHlsZShcbiAgICAgICAgaW5mbyxcbiAgICAgICAgdGVtcGxhdGVbJ19zdHlsZUFzdCddLFxuICAgICAgICByb290LFxuICAgICAgICBwbGFjZWhvbGRlcixcbiAgICAgICAgY3NzQnVpbGQsXG4gICAgICAgIG9wdGltYWxCdWlsZCA/IGNzc1RleHQgOiAnJ1xuICAgICAgKTtcbiAgICAgIHRlbXBsYXRlLl9zdHlsZSA9IHN0eWxlO1xuICAgIH1cbiAgICB0ZW1wbGF0ZS5fb3duUHJvcGVydHlOYW1lcyA9IG93blByb3BlcnR5TmFtZXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gY3NzVGV4dEFycmF5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICAgKi9cbiAgcHJlcGFyZUFkb3B0ZWRDc3NUZXh0KGNzc1RleHRBcnJheSwgZWxlbWVudE5hbWUpIHtcbiAgICBhZG9wdGVkQ3NzVGV4dE1hcFtlbGVtZW50TmFtZV0gPSBjc3NUZXh0QXJyYXkuam9pbignICcpO1xuICB9XG4gIC8qKlxuICAgKiBQcmVwYXJlIHRlbXBsYXRlIGZvciB0aGUgZ2l2ZW4gZWxlbWVudCB0eXBlXG4gICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICAgKi9cbiAgcHJlcGFyZVRlbXBsYXRlRG9tKHRlbXBsYXRlLCBlbGVtZW50TmFtZSkge1xuICAgIGlmIChkaXNhYmxlUnVudGltZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjc3NCdWlsZCA9IFN0eWxlVXRpbC5nZXRDc3NCdWlsZCh0ZW1wbGF0ZSk7XG4gICAgaWYgKCFuYXRpdmVTaGFkb3cgJiYgY3NzQnVpbGQgIT09ICdzaGFkeScgJiYgIXRlbXBsYXRlLl9kb21QcmVwYXJlZCkge1xuICAgICAgdGVtcGxhdGUuX2RvbVByZXBhcmVkID0gdHJ1ZTtcbiAgICAgIFN0eWxlVHJhbnNmb3JtZXIuZG9tQWRkU2NvcGUodGVtcGxhdGUuY29udGVudCwgZWxlbWVudE5hbWUpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHshe2lzOiBzdHJpbmcsIGV4dGVuZHM6IChzdHJpbmd8dW5kZWZpbmVkKX19IGluZm9cbiAgICogQHBhcmFtIHshU3R5bGVOb2RlfSBydWxlc1xuICAgKiBAcGFyYW0ge0RvY3VtZW50RnJhZ21lbnR9IHNoYWRvd3Jvb3RcbiAgICogQHBhcmFtIHtOb2RlfSBwbGFjZWhvbGRlclxuICAgKiBAcGFyYW0ge3N0cmluZ30gY3NzQnVpbGRcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBjc3NUZXh0XG4gICAqIEByZXR1cm4gez9IVE1MU3R5bGVFbGVtZW50fVxuICAgKi9cbiAgX2dlbmVyYXRlU3RhdGljU3R5bGUoXG4gICAgaW5mbyxcbiAgICBydWxlcyxcbiAgICBzaGFkb3dyb290LFxuICAgIHBsYWNlaG9sZGVyLFxuICAgIGNzc0J1aWxkLFxuICAgIGNzc1RleHRcbiAgKSB7XG4gICAgY3NzVGV4dCA9IFN0eWxlVHJhbnNmb3JtZXIuZWxlbWVudFN0eWxlcyhcbiAgICAgIGluZm8sXG4gICAgICBydWxlcyxcbiAgICAgIG51bGwsXG4gICAgICBjc3NCdWlsZCxcbiAgICAgIGNzc1RleHRcbiAgICApO1xuICAgIGlmIChjc3NUZXh0Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFN0eWxlVXRpbC5hcHBseUNzcyhjc3NUZXh0LCBpbmZvLmlzLCBzaGFkb3dyb290LCBwbGFjZWhvbGRlcik7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIF9wcmVwYXJlSG9zdChob3N0KSB7XG4gICAgY29uc3Qge2lzLCB0eXBlRXh0ZW5zaW9ufSA9IFN0eWxlVXRpbC5nZXRJc0V4dGVuZHMoaG9zdCk7XG4gICAgY29uc3QgcGxhY2Vob2xkZXIgPSBnZXRTdHlsZVBsYWNlaG9sZGVyKGlzKTtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlTWFwW2lzXTtcbiAgICBpZiAoIXRlbXBsYXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGFzdCA9IHRlbXBsYXRlWydfc3R5bGVBc3QnXTtcbiAgICBjb25zdCBvd25TdHlsZVByb3BlcnR5TmFtZXMgPSB0ZW1wbGF0ZS5fb3duUHJvcGVydHlOYW1lcztcbiAgICBjb25zdCBjc3NCdWlsZCA9IFN0eWxlVXRpbC5nZXRDc3NCdWlsZCh0ZW1wbGF0ZSk7XG4gICAgY29uc3Qgc3R5bGVJbmZvID0gbmV3IFN0eWxlSW5mbyhcbiAgICAgIGFzdCxcbiAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgb3duU3R5bGVQcm9wZXJ0eU5hbWVzLFxuICAgICAgaXMsXG4gICAgICB0eXBlRXh0ZW5zaW9uLFxuICAgICAgY3NzQnVpbGRcbiAgICApO1xuICAgIFN0eWxlSW5mby5zZXQoaG9zdCwgc3R5bGVJbmZvKTtcbiAgICByZXR1cm4gc3R5bGVJbmZvO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiBzdHlsZXMgbmVlZCB0byBiZSByZXByb2Nlc3NlZCBiZWNhdXNlXG4gICAqIHRoZSBhcHBseSBzaGltIGlzIG5vdyBhdmFpbGFibGUuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBfZW5zdXJlQXBwbHlTaGltKCkge1xuICAgIGlmICghdGhpcy5fYXBwbHlTaGltICYmIHdpbmRvdy5TaGFkeUNTUyAmJiB3aW5kb3cuU2hhZHlDU1MuQXBwbHlTaGltKSB7XG4gICAgICB0aGlzLl9hcHBseVNoaW0gPSAvKiogQHR5cGUgeyFPYmplY3R9ICovICh3aW5kb3cuU2hhZHlDU1MuQXBwbHlTaGltKTtcbiAgICAgIHRoaXMuX2FwcGx5U2hpbVsnaW52YWxpZENhbGxiYWNrJ10gPSBBcHBseVNoaW1VdGlscy5pbnZhbGlkYXRlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBfZW5zdXJlQ3VzdG9tU3R5bGVJbnRlcmZhY2UoKSB7XG4gICAgaWYgKHRoaXMuX2N1c3RvbVN0eWxlSW50ZXJmYWNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmICh3aW5kb3cuU2hhZHlDU1MgJiYgd2luZG93LlNoYWR5Q1NTLkN1c3RvbVN0eWxlSW50ZXJmYWNlKSB7XG4gICAgICB0aGlzLl9jdXN0b21TdHlsZUludGVyZmFjZSA9IC8qKiBAdHlwZSB7IUN1c3RvbVN0eWxlSW50ZXJmYWNlSW50ZXJmYWNlfSAqLyAod2luZG93XG4gICAgICAgIC5TaGFkeUNTUy5DdXN0b21TdHlsZUludGVyZmFjZSk7XG4gICAgICAvKiogQHR5cGUge2Z1bmN0aW9uKCFIVE1MU3R5bGVFbGVtZW50KX0gKi9cbiAgICAgIHRoaXMuX2N1c3RvbVN0eWxlSW50ZXJmYWNlWyd0cmFuc2Zvcm1DYWxsYmFjayddID0gKHN0eWxlKSA9PiB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtQ3VzdG9tU3R5bGVGb3JEb2N1bWVudChzdHlsZSk7XG4gICAgICB9O1xuICAgICAgdGhpcy5fY3VzdG9tU3R5bGVJbnRlcmZhY2VbJ3ZhbGlkYXRlQ2FsbGJhY2snXSA9ICgpID0+IHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLl9jdXN0b21TdHlsZUludGVyZmFjZVsnZW5xdWV1ZWQnXSB8fFxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudHNIYXZlQXBwbGllZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5mbHVzaEN1c3RvbVN0eWxlcygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgc3R5bGVzIG5lZWQgdG8gYmUgcmVwcm9jZXNzZWQgYmVjYXVzZVxuICAgKiB0aGUgYXBwbHkgc2hpbSBpcyBub3cgYXZhaWxhYmxlLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgX2Vuc3VyZSgpIHtcbiAgICBjb25zdCBuZWVkc0FwcGx5U2hpbVVwZGF0ZSA9IHRoaXMuX2Vuc3VyZUFwcGx5U2hpbSgpO1xuICAgIHRoaXMuX2Vuc3VyZUN1c3RvbVN0eWxlSW50ZXJmYWNlKCk7XG4gICAgcmV0dXJuIG5lZWRzQXBwbHlTaGltVXBkYXRlO1xuICB9XG4gIC8qKlxuICAgKiBGbHVzaCBhbmQgYXBwbHkgY3VzdG9tIHN0eWxlcyB0byBkb2N1bWVudFxuICAgKi9cbiAgZmx1c2hDdXN0b21TdHlsZXMoKSB7XG4gICAgaWYgKGRpc2FibGVSdW50aW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG5lZWRzQXBwbHlTaGltVXBkYXRlID0gdGhpcy5fZW5zdXJlKCk7XG4gICAgaWYgKCF0aGlzLl9jdXN0b21TdHlsZUludGVyZmFjZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgY3VzdG9tU3R5bGVzID0gdGhpcy5fY3VzdG9tU3R5bGVJbnRlcmZhY2VbJ3Byb2Nlc3NTdHlsZXMnXSgpO1xuICAgIC8vIGVhcmx5IHJldHVybiBpZiBjdXN0b20tc3R5bGVzIGRvbid0IG5lZWQgdmFsaWRhdGlvblxuICAgIGlmICghbmVlZHNBcHBseVNoaW1VcGRhdGUgJiYgIXRoaXMuX2N1c3RvbVN0eWxlSW50ZXJmYWNlWydlbnF1ZXVlZCddKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGJhaWwgaWYgY3VzdG9tIHN0eWxlcyBhcmUgYnVpbHQgb3B0aW1hbGx5XG4gICAgaWYgKFN0eWxlVXRpbC5pc09wdGltYWxDc3NCdWlsZCh0aGlzLl9kb2N1bWVudE93bmVyU3R5bGVJbmZvLmNzc0J1aWxkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIW5hdGl2ZUNzc1ZhcmlhYmxlcykge1xuICAgICAgdGhpcy5fcmVvcmRlckN1c3RvbVN0eWxlc1J1bGVzKGN1c3RvbVN0eWxlcyk7XG4gICAgICB0aGlzLl91cGRhdGVQcm9wZXJ0aWVzKHRoaXMuX2RvY3VtZW50T3duZXIsIHRoaXMuX2RvY3VtZW50T3duZXJTdHlsZUluZm8pO1xuICAgICAgdGhpcy5fYXBwbHlDdXN0b21TdHlsZXMoY3VzdG9tU3R5bGVzKTtcbiAgICAgIGlmICh0aGlzLl9lbGVtZW50c0hhdmVBcHBsaWVkKSB7XG4gICAgICAgIC8vIGlmIGN1c3RvbSBlbGVtZW50cyBoYXZlIHVwZ3JhZGVkIGFuZCB0aGVyZSBhcmUgbm8gbmF0aXZlIGNzcyB2YXJpYWJsZXMsIHdlIG11c3QgcmVjYWxjdWxhdGUgdGhlIHdob2xlIHRyZWVcbiAgICAgICAgdGhpcy5zdHlsZURvY3VtZW50KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghdGhpcy5fZG9jdW1lbnRPd25lclN0eWxlSW5mby5jc3NCdWlsZCkge1xuICAgICAgdGhpcy5fcmV2YWxpZGF0ZUN1c3RvbVN0eWxlQXBwbHlTaGltKGN1c3RvbVN0eWxlcyk7XG4gICAgfVxuICAgIHRoaXMuX2N1c3RvbVN0eWxlSW50ZXJmYWNlWydlbnF1ZXVlZCddID0gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIFJlb3JkZXIgb2YgY3VzdG9tIHN0eWxlcyBmb3IgQ3VzdG9tIFByb3BlcnR5IHNoaW1cbiAgICogQHBhcmFtIHshQXJyYXk8IUN1c3RvbVN0eWxlUHJvdmlkZXI+fSBjdXN0b21TdHlsZXNcbiAgICovXG4gIF9yZW9yZGVyQ3VzdG9tU3R5bGVzUnVsZXMoY3VzdG9tU3R5bGVzKSB7XG4gICAgY29uc3Qgc3R5bGVzID0gY3VzdG9tU3R5bGVzXG4gICAgICAubWFwKChjKSA9PiB0aGlzLl9jdXN0b21TdHlsZUludGVyZmFjZVsnZ2V0U3R5bGVGb3JDdXN0b21TdHlsZSddKGMpKVxuICAgICAgLmZpbHRlcigocykgPT4gISFzKTtcbiAgICAvLyBzb3J0IHN0eWxlcyBpbiBkb2N1bWVudCBvcmRlclxuICAgIHN0eWxlcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAvLyB1c2UgYGIuY29tcGFyZShhKWAgdG8gYmUgbW9yZSBzdHJhaWdodGZvcndhcmRcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihhKTtcbiAgICAgIGlmIChwb3NpdGlvbiAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HKSB7XG4gICAgICAgIC8vIEEgaXMgYWZ0ZXIgQiwgQSBzaG91bGQgYmUgaGlnaGVyIHNvcnRlZFxuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX1BSRUNFRElORykge1xuICAgICAgICAvLyBBIGlzIGJlZm9yZSBCLCBBIHNob3VsZCBiZSBsb3dlciBzb3J0ZWRcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gc29ydCBhc3Qgb3JkZXJpbmcgZm9yIGRvY3VtZW50XG4gICAgdGhpcy5fZG9jdW1lbnRPd25lclN0eWxlSW5mby5zdHlsZVJ1bGVzWydydWxlcyddID0gc3R5bGVzLm1hcCgocykgPT5cbiAgICAgIFN0eWxlVXRpbC5ydWxlc0ZvclN0eWxlKHMpXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogQXBwbHkgc3R5bGVzIGZvciB0aGUgZ2l2ZW4gZWxlbWVudFxuICAgKlxuICAgKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gaG9zdFxuICAgKiBAcGFyYW0ge09iamVjdD19IG92ZXJyaWRlUHJvcHNcbiAgICovXG4gIHN0eWxlRWxlbWVudChob3N0LCBvdmVycmlkZVByb3BzKSB7XG4gICAgaWYgKGRpc2FibGVSdW50aW1lKSB7XG4gICAgICBpZiAob3ZlcnJpZGVQcm9wcykge1xuICAgICAgICBpZiAoIVN0eWxlSW5mby5nZXQoaG9zdCkpIHtcbiAgICAgICAgICBTdHlsZUluZm8uc2V0KGhvc3QsIG5ldyBTdHlsZUluZm8obnVsbCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0eWxlSW5mbyA9IC8qKiBAdHlwZSB7IVN0eWxlSW5mb30gKi8gKFN0eWxlSW5mby5nZXQoaG9zdCkpO1xuICAgICAgICB0aGlzLl9taXhPdmVycmlkZVN0eWxlUHJvcHMoc3R5bGVJbmZvLCBvdmVycmlkZVByb3BzKTtcbiAgICAgICAgdGhpcy5zdHlsZUVsZW1lbnROYXRpdmVWYXJpYWJsZXMoaG9zdCwgc3R5bGVJbmZvKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc3R5bGVJbmZvID0gU3R5bGVJbmZvLmdldChob3N0KSB8fCB0aGlzLl9wcmVwYXJlSG9zdChob3N0KTtcbiAgICAvLyBpZiB0aGVyZSBpcyBubyBzdHlsZSBpbmZvIGF0IHRoaXMgcG9pbnQsIGJhaWxcbiAgICBpZiAoIXN0eWxlSW5mbykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBPbmx5IHRyaXAgdGhlIGBlbGVtZW50c0hhdmVBcHBsaWVkYCBmbGFnIGlmIGEgbm9kZSBvdGhlciB0aGF0IHRoZSByb290IGRvY3VtZW50IGhhcyBgYXBwbHlTdHlsZWAgY2FsbGVkXG4gICAgaWYgKCF0aGlzLl9pc1Jvb3RPd25lcihob3N0KSkge1xuICAgICAgdGhpcy5fZWxlbWVudHNIYXZlQXBwbGllZCA9IHRydWU7XG4gICAgfVxuICAgIGlmIChvdmVycmlkZVByb3BzKSB7XG4gICAgICB0aGlzLl9taXhPdmVycmlkZVN0eWxlUHJvcHMoc3R5bGVJbmZvLCBvdmVycmlkZVByb3BzKTtcbiAgICB9XG4gICAgaWYgKCFuYXRpdmVDc3NWYXJpYWJsZXMpIHtcbiAgICAgIHRoaXMuc3R5bGVFbGVtZW50U2hpbVZhcmlhYmxlcyhob3N0LCBzdHlsZUluZm8pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0eWxlRWxlbWVudE5hdGl2ZVZhcmlhYmxlcyhob3N0LCBzdHlsZUluZm8pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHshU3R5bGVJbmZvfSBzdHlsZUluZm9cbiAgICogQHBhcmFtIHtPYmplY3R9IG92ZXJyaWRlUHJvcHNcbiAgICovXG4gIF9taXhPdmVycmlkZVN0eWxlUHJvcHMoc3R5bGVJbmZvLCBvdmVycmlkZVByb3BzKSB7XG4gICAgc3R5bGVJbmZvLm92ZXJyaWRlU3R5bGVQcm9wZXJ0aWVzID0gc3R5bGVJbmZvLm92ZXJyaWRlU3R5bGVQcm9wZXJ0aWVzIHx8IHt9O1xuICAgIE9iamVjdC5hc3NpZ24oc3R5bGVJbmZvLm92ZXJyaWRlU3R5bGVQcm9wZXJ0aWVzLCBvdmVycmlkZVByb3BzKTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHshSFRNTEVsZW1lbnR9IGhvc3RcbiAgICogQHBhcmFtIHshU3R5bGVJbmZvfSBzdHlsZUluZm9cbiAgICovXG4gIHN0eWxlRWxlbWVudFNoaW1WYXJpYWJsZXMoaG9zdCwgc3R5bGVJbmZvKSB7XG4gICAgdGhpcy5mbHVzaCgpO1xuICAgIHRoaXMuX3VwZGF0ZVByb3BlcnRpZXMoaG9zdCwgc3R5bGVJbmZvKTtcbiAgICBpZiAoXG4gICAgICBzdHlsZUluZm8ub3duU3R5bGVQcm9wZXJ0eU5hbWVzICYmXG4gICAgICBzdHlsZUluZm8ub3duU3R5bGVQcm9wZXJ0eU5hbWVzLmxlbmd0aFxuICAgICkge1xuICAgICAgdGhpcy5fYXBwbHlTdHlsZVByb3BlcnRpZXMoaG9zdCwgc3R5bGVJbmZvKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSBob3N0XG4gICAqIEBwYXJhbSB7IVN0eWxlSW5mb30gc3R5bGVJbmZvXG4gICAqL1xuICBzdHlsZUVsZW1lbnROYXRpdmVWYXJpYWJsZXMoaG9zdCwgc3R5bGVJbmZvKSB7XG4gICAgY29uc3Qge2lzfSA9IFN0eWxlVXRpbC5nZXRJc0V4dGVuZHMoaG9zdCk7XG4gICAgaWYgKHN0eWxlSW5mby5vdmVycmlkZVN0eWxlUHJvcGVydGllcykge1xuICAgICAgdXBkYXRlTmF0aXZlUHJvcGVydGllcyhob3N0LCBzdHlsZUluZm8ub3ZlcnJpZGVTdHlsZVByb3BlcnRpZXMpO1xuICAgIH1cbiAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlTWFwW2lzXTtcbiAgICAvLyBiYWlsIGVhcmx5IGlmIHRoZXJlIGlzIG5vIHNoYWRvd3Jvb3QgZm9yIHRoaXMgZWxlbWVudFxuICAgIGlmICghdGVtcGxhdGUgJiYgIXRoaXMuX2lzUm9vdE93bmVyKGhvc3QpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGJhaWwgZWFybHkgaWYgdGhlIHRlbXBsYXRlIHdhcyBidWlsdCB3aXRoIHBvbHltZXItY3NzLWJ1aWxkXG4gICAgaWYgKHRlbXBsYXRlICYmIFN0eWxlVXRpbC5lbGVtZW50SGFzQnVpbHRDc3ModGVtcGxhdGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChcbiAgICAgIHRlbXBsYXRlICYmXG4gICAgICB0ZW1wbGF0ZS5fc3R5bGUgJiZcbiAgICAgICFBcHBseVNoaW1VdGlscy50ZW1wbGF0ZUlzVmFsaWQodGVtcGxhdGUpXG4gICAgKSB7XG4gICAgICAvLyB1cGRhdGUgdGVtcGxhdGVcbiAgICAgIGlmICghQXBwbHlTaGltVXRpbHMudGVtcGxhdGVJc1ZhbGlkYXRpbmcodGVtcGxhdGUpKSB7XG4gICAgICAgIHRoaXMuX2Vuc3VyZSgpO1xuICAgICAgICB0aGlzLl9hcHBseVNoaW0gJiZcbiAgICAgICAgICB0aGlzLl9hcHBseVNoaW1bJ3RyYW5zZm9ybVJ1bGVzJ10odGVtcGxhdGVbJ19zdHlsZUFzdCddLCBpcyk7XG4gICAgICAgIHRlbXBsYXRlLl9zdHlsZS50ZXh0Q29udGVudCA9IFN0eWxlVHJhbnNmb3JtZXIuZWxlbWVudFN0eWxlcyhcbiAgICAgICAgICBob3N0LFxuICAgICAgICAgIHN0eWxlSW5mby5zdHlsZVJ1bGVzXG4gICAgICAgICk7XG4gICAgICAgIEFwcGx5U2hpbVV0aWxzLnN0YXJ0VmFsaWRhdGluZ1RlbXBsYXRlKHRlbXBsYXRlKTtcbiAgICAgIH1cbiAgICAgIC8vIHVwZGF0ZSBpbnN0YW5jZSBpZiBuYXRpdmUgc2hhZG93ZG9tXG4gICAgICBpZiAobmF0aXZlU2hhZG93KSB7XG4gICAgICAgIGxldCByb290ID0gaG9zdC5zaGFkb3dSb290O1xuICAgICAgICBpZiAocm9vdCkge1xuICAgICAgICAgIGxldCBzdHlsZSA9IHJvb3QucXVlcnlTZWxlY3Rvcignc3R5bGUnKTtcbiAgICAgICAgICBpZiAoc3R5bGUpIHtcbiAgICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gU3R5bGVUcmFuc2Zvcm1lci5lbGVtZW50U3R5bGVzKFxuICAgICAgICAgICAgICBob3N0LFxuICAgICAgICAgICAgICBzdHlsZUluZm8uc3R5bGVSdWxlc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0eWxlSW5mby5zdHlsZVJ1bGVzID0gdGVtcGxhdGVbJ19zdHlsZUFzdCddO1xuICAgIH1cbiAgfVxuICBfc3R5bGVPd25lckZvck5vZGUobm9kZSkge1xuICAgIGxldCByb290ID0gU3R5bGVVdGlsLndyYXAobm9kZSkuZ2V0Um9vdE5vZGUoKTtcbiAgICBsZXQgaG9zdCA9IHJvb3QuaG9zdDtcbiAgICBpZiAoaG9zdCkge1xuICAgICAgaWYgKFN0eWxlSW5mby5nZXQoaG9zdCkgfHwgdGhpcy5fcHJlcGFyZUhvc3QoaG9zdCkpIHtcbiAgICAgICAgcmV0dXJuIGhvc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3R5bGVPd25lckZvck5vZGUoaG9zdCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9kb2N1bWVudE93bmVyO1xuICB9XG4gIF9pc1Jvb3RPd25lcihub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUgPT09IHRoaXMuX2RvY3VtZW50T3duZXI7XG4gIH1cbiAgX2FwcGx5U3R5bGVQcm9wZXJ0aWVzKGhvc3QsIHN0eWxlSW5mbykge1xuICAgIGxldCBpcyA9IFN0eWxlVXRpbC5nZXRJc0V4dGVuZHMoaG9zdCkuaXM7XG4gICAgbGV0IGNhY2hlRW50cnkgPSBzdHlsZUNhY2hlLmZldGNoKFxuICAgICAgaXMsXG4gICAgICBzdHlsZUluZm8uc3R5bGVQcm9wZXJ0aWVzLFxuICAgICAgc3R5bGVJbmZvLm93blN0eWxlUHJvcGVydHlOYW1lc1xuICAgICk7XG4gICAgbGV0IGNhY2hlZFNjb3BlU2VsZWN0b3IgPSBjYWNoZUVudHJ5ICYmIGNhY2hlRW50cnkuc2NvcGVTZWxlY3RvcjtcbiAgICBsZXQgY2FjaGVkU3R5bGUgPSBjYWNoZUVudHJ5ID8gY2FjaGVFbnRyeS5zdHlsZUVsZW1lbnQgOiBudWxsO1xuICAgIGxldCBvbGRTY29wZVNlbGVjdG9yID0gc3R5bGVJbmZvLnNjb3BlU2VsZWN0b3I7XG4gICAgLy8gb25seSBnZW5lcmF0ZSBuZXcgc2NvcGUgaWYgY2FjaGVkIHN0eWxlIGlzIG5vdCBmb3VuZFxuICAgIHN0eWxlSW5mby5zY29wZVNlbGVjdG9yID1cbiAgICAgIGNhY2hlZFNjb3BlU2VsZWN0b3IgfHwgdGhpcy5fZ2VuZXJhdGVTY29wZVNlbGVjdG9yKGlzKTtcbiAgICBsZXQgc3R5bGUgPSBTdHlsZVByb3BlcnRpZXMuYXBwbHlFbGVtZW50U3R5bGUoXG4gICAgICBob3N0LFxuICAgICAgc3R5bGVJbmZvLnN0eWxlUHJvcGVydGllcyxcbiAgICAgIHN0eWxlSW5mby5zY29wZVNlbGVjdG9yLFxuICAgICAgY2FjaGVkU3R5bGVcbiAgICApO1xuICAgIGlmICghbmF0aXZlU2hhZG93KSB7XG4gICAgICBTdHlsZVByb3BlcnRpZXMuYXBwbHlFbGVtZW50U2NvcGVTZWxlY3RvcihcbiAgICAgICAgaG9zdCxcbiAgICAgICAgc3R5bGVJbmZvLnNjb3BlU2VsZWN0b3IsXG4gICAgICAgIG9sZFNjb3BlU2VsZWN0b3JcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghY2FjaGVFbnRyeSkge1xuICAgICAgc3R5bGVDYWNoZS5zdG9yZShcbiAgICAgICAgaXMsXG4gICAgICAgIHN0eWxlSW5mby5zdHlsZVByb3BlcnRpZXMsXG4gICAgICAgIHN0eWxlLFxuICAgICAgICBzdHlsZUluZm8uc2NvcGVTZWxlY3RvclxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG4gIF91cGRhdGVQcm9wZXJ0aWVzKGhvc3QsIHN0eWxlSW5mbykge1xuICAgIGxldCBvd25lciA9IHRoaXMuX3N0eWxlT3duZXJGb3JOb2RlKGhvc3QpO1xuICAgIGxldCBvd25lclN0eWxlSW5mbyA9IFN0eWxlSW5mby5nZXQob3duZXIpO1xuICAgIGxldCBvd25lclByb3BlcnRpZXMgPSBvd25lclN0eWxlSW5mby5zdHlsZVByb3BlcnRpZXM7XG4gICAgLy8gc3R5bGUgb3duZXIgaGFzIG5vdCB1cGRhdGVkIHByb3BlcnRpZXMgeWV0XG4gICAgLy8gZ28gdXAgdGhlIGNoYWluIGFuZCBmb3JjZSBwcm9wZXJ0eSB1cGRhdGUsXG4gICAgLy8gZXhjZXB0IGlmIHRoZSBvd25lciBpcyB0aGUgZG9jdW1lbnRcbiAgICBpZiAob3duZXIgIT09IHRoaXMuX2RvY3VtZW50T3duZXIgJiYgIW93bmVyUHJvcGVydGllcykge1xuICAgICAgdGhpcy5fdXBkYXRlUHJvcGVydGllcyhvd25lciwgb3duZXJTdHlsZUluZm8pO1xuICAgICAgb3duZXJQcm9wZXJ0aWVzID0gb3duZXJTdHlsZUluZm8uc3R5bGVQcm9wZXJ0aWVzO1xuICAgIH1cbiAgICBsZXQgcHJvcHMgPSBPYmplY3QuY3JlYXRlKG93bmVyUHJvcGVydGllcyB8fCBudWxsKTtcbiAgICBsZXQgaG9zdEFuZFJvb3RQcm9wcyA9IFN0eWxlUHJvcGVydGllcy5ob3N0QW5kUm9vdFByb3BlcnRpZXNGb3JTY29wZShcbiAgICAgIGhvc3QsXG4gICAgICBzdHlsZUluZm8uc3R5bGVSdWxlcyxcbiAgICAgIHN0eWxlSW5mby5jc3NCdWlsZFxuICAgICk7XG4gICAgbGV0IHByb3BlcnR5RGF0YSA9IFN0eWxlUHJvcGVydGllcy5wcm9wZXJ0eURhdGFGcm9tU3R5bGVzKFxuICAgICAgb3duZXJTdHlsZUluZm8uc3R5bGVSdWxlcyxcbiAgICAgIGhvc3RcbiAgICApO1xuICAgIGxldCBwcm9wZXJ0aWVzTWF0Y2hpbmdIb3N0ID0gcHJvcGVydHlEYXRhLnByb3BlcnRpZXM7XG4gICAgT2JqZWN0LmFzc2lnbihcbiAgICAgIHByb3BzLFxuICAgICAgaG9zdEFuZFJvb3RQcm9wcy5ob3N0UHJvcHMsXG4gICAgICBwcm9wZXJ0aWVzTWF0Y2hpbmdIb3N0LFxuICAgICAgaG9zdEFuZFJvb3RQcm9wcy5yb290UHJvcHNcbiAgICApO1xuICAgIHRoaXMuX21peGluT3ZlcnJpZGVTdHlsZXMocHJvcHMsIHN0eWxlSW5mby5vdmVycmlkZVN0eWxlUHJvcGVydGllcyk7XG4gICAgU3R5bGVQcm9wZXJ0aWVzLnJlaWZ5KHByb3BzKTtcbiAgICBzdHlsZUluZm8uc3R5bGVQcm9wZXJ0aWVzID0gcHJvcHM7XG4gIH1cbiAgX21peGluT3ZlcnJpZGVTdHlsZXMocHJvcHMsIG92ZXJyaWRlcykge1xuICAgIGZvciAobGV0IHAgaW4gb3ZlcnJpZGVzKSB7XG4gICAgICBsZXQgdiA9IG92ZXJyaWRlc1twXTtcbiAgICAgIC8vIHNraXAgb3ZlcnJpZGUgcHJvcHMgaWYgdGhleSBhcmUgbm90IHRydXRoeSBvciAwXG4gICAgICAvLyBpbiBvcmRlciB0byBmYWxsIGJhY2sgdG8gaW5oZXJpdGVkIHZhbHVlc1xuICAgICAgaWYgKHYgfHwgdiA9PT0gMCkge1xuICAgICAgICBwcm9wc1twXSA9IHY7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgc3R5bGVzIG9mIHRoZSB3aG9sZSBkb2N1bWVudFxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdD19IHByb3BlcnRpZXNcbiAgICovXG4gIHN0eWxlRG9jdW1lbnQocHJvcGVydGllcykge1xuICAgIHRoaXMuc3R5bGVTdWJ0cmVlKHRoaXMuX2RvY3VtZW50T3duZXIsIHByb3BlcnRpZXMpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgc3R5bGVzIG9mIGEgc3VidHJlZVxuICAgKlxuICAgKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gaG9zdFxuICAgKiBAcGFyYW0ge09iamVjdD19IHByb3BlcnRpZXNcbiAgICovXG4gIHN0eWxlU3VidHJlZShob3N0LCBwcm9wZXJ0aWVzKSB7XG4gICAgY29uc3Qgd3JhcHBlZEhvc3QgPSBTdHlsZVV0aWwud3JhcChob3N0KTtcbiAgICBjb25zdCByb290ID0gd3JhcHBlZEhvc3Quc2hhZG93Um9vdDtcbiAgICBjb25zdCBpc1Jvb3RPd25lciA9IHRoaXMuX2lzUm9vdE93bmVyKGhvc3QpO1xuICAgIGlmIChyb290IHx8IGlzUm9vdE93bmVyKSB7XG4gICAgICB0aGlzLnN0eWxlRWxlbWVudChob3N0LCBwcm9wZXJ0aWVzKTtcbiAgICB9XG4gICAgY29uc3QgZGVzY2VuZGFudFJvb3QgPSBpc1Jvb3RPd25lciA/IHdyYXBwZWRIb3N0IDogcm9vdDtcbiAgICBpZiAoZGVzY2VuZGFudFJvb3QpIHtcbiAgICAgIGNvbnN0IGRlc2NlbmRhbnRIb3N0cyA9IEFycmF5LmZyb20oXG4gICAgICAgIGRlc2NlbmRhbnRSb290LnF1ZXJ5U2VsZWN0b3JBbGwoJyonKVxuICAgICAgKS5maWx0ZXIoKHgpID0+IFN0eWxlVXRpbC53cmFwKHgpLnNoYWRvd1Jvb3QpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXNjZW5kYW50SG9zdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5zdHlsZVN1YnRyZWUoZGVzY2VuZGFudEhvc3RzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyogQ3VzdG9tIFN0eWxlIG9wZXJhdGlvbnMgKi9cbiAgX3JldmFsaWRhdGVDdXN0b21TdHlsZUFwcGx5U2hpbShjdXN0b21TdHlsZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1c3RvbVN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGMgPSBjdXN0b21TdHlsZXNbaV07XG4gICAgICBsZXQgcyA9IHRoaXMuX2N1c3RvbVN0eWxlSW50ZXJmYWNlWydnZXRTdHlsZUZvckN1c3RvbVN0eWxlJ10oYyk7XG4gICAgICBpZiAocykge1xuICAgICAgICB0aGlzLl9yZXZhbGlkYXRlQXBwbHlTaGltKHMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBfYXBwbHlDdXN0b21TdHlsZXMoY3VzdG9tU3R5bGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXN0b21TdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBjID0gY3VzdG9tU3R5bGVzW2ldO1xuICAgICAgbGV0IHMgPSB0aGlzLl9jdXN0b21TdHlsZUludGVyZmFjZVsnZ2V0U3R5bGVGb3JDdXN0b21TdHlsZSddKGMpO1xuICAgICAgaWYgKHMpIHtcbiAgICAgICAgU3R5bGVQcm9wZXJ0aWVzLmFwcGx5Q3VzdG9tU3R5bGUoXG4gICAgICAgICAgcyxcbiAgICAgICAgICB0aGlzLl9kb2N1bWVudE93bmVyU3R5bGVJbmZvLnN0eWxlUHJvcGVydGllc1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB0cmFuc2Zvcm1DdXN0b21TdHlsZUZvckRvY3VtZW50KHN0eWxlKSB7XG4gICAgY29uc3QgY3NzQnVpbGQgPSBTdHlsZVV0aWwuZ2V0Q3NzQnVpbGQoc3R5bGUpO1xuICAgIGlmIChjc3NCdWlsZCAhPT0gdGhpcy5fZG9jdW1lbnRPd25lclN0eWxlSW5mby5jc3NCdWlsZCkge1xuICAgICAgdGhpcy5fZG9jdW1lbnRPd25lclN0eWxlSW5mby5jc3NCdWlsZCA9IGNzc0J1aWxkO1xuICAgIH1cbiAgICBpZiAoU3R5bGVVdGlsLmlzT3B0aW1hbENzc0J1aWxkKGNzc0J1aWxkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgYXN0ID0gU3R5bGVVdGlsLnJ1bGVzRm9yU3R5bGUoc3R5bGUpO1xuICAgIFN0eWxlVXRpbC5mb3JFYWNoUnVsZShhc3QsIChydWxlKSA9PiB7XG4gICAgICBpZiAobmF0aXZlU2hhZG93KSB7XG4gICAgICAgIFN0eWxlVHJhbnNmb3JtZXIubm9ybWFsaXplUm9vdFNlbGVjdG9yKHJ1bGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgU3R5bGVUcmFuc2Zvcm1lci5kb2N1bWVudFJ1bGUocnVsZSk7XG4gICAgICB9XG4gICAgICBpZiAobmF0aXZlQ3NzVmFyaWFibGVzICYmIGNzc0J1aWxkID09PSAnJykge1xuICAgICAgICB0aGlzLl9lbnN1cmUoKTtcbiAgICAgICAgdGhpcy5fYXBwbHlTaGltICYmIHRoaXMuX2FwcGx5U2hpbVsndHJhbnNmb3JtUnVsZSddKHJ1bGUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChuYXRpdmVDc3NWYXJpYWJsZXMpIHtcbiAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gU3R5bGVVdGlsLnRvQ3NzVGV4dChhc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9kb2N1bWVudE93bmVyU3R5bGVJbmZvLnN0eWxlUnVsZXNbJ3J1bGVzJ10ucHVzaChhc3QpO1xuICAgIH1cbiAgfVxuICBfcmV2YWxpZGF0ZUFwcGx5U2hpbShzdHlsZSkge1xuICAgIGlmIChuYXRpdmVDc3NWYXJpYWJsZXMgJiYgdGhpcy5fYXBwbHlTaGltKSB7XG4gICAgICBsZXQgYXN0ID0gU3R5bGVVdGlsLnJ1bGVzRm9yU3R5bGUoc3R5bGUpO1xuICAgICAgdGhpcy5fZW5zdXJlKCk7XG4gICAgICB0aGlzLl9hcHBseVNoaW1bJ3RyYW5zZm9ybVJ1bGVzJ10oYXN0KTtcbiAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gU3R5bGVVdGlsLnRvQ3NzVGV4dChhc3QpO1xuICAgIH1cbiAgfVxuICBnZXRDb21wdXRlZFN0eWxlVmFsdWUoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgICBsZXQgdmFsdWU7XG4gICAgaWYgKCFuYXRpdmVDc3NWYXJpYWJsZXMpIHtcbiAgICAgIC8vIGVsZW1lbnQgaXMgZWl0aGVyIGEgc3R5bGUgaG9zdCwgb3IgYW4gYW5jZXN0b3Igb2YgYSBzdHlsZSBob3N0XG4gICAgICBsZXQgc3R5bGVJbmZvID1cbiAgICAgICAgU3R5bGVJbmZvLmdldChlbGVtZW50KSB8fFxuICAgICAgICBTdHlsZUluZm8uZ2V0KHRoaXMuX3N0eWxlT3duZXJGb3JOb2RlKGVsZW1lbnQpKTtcbiAgICAgIHZhbHVlID0gc3R5bGVJbmZvLnN0eWxlUHJvcGVydGllc1twcm9wZXJ0eV07XG4gICAgfVxuICAgIC8vIGZhbGwgYmFjayB0byB0aGUgcHJvcGVydHkgdmFsdWUgZnJvbSB0aGUgY29tcHV0ZWQgc3R5bGluZ1xuICAgIHZhbHVlID1cbiAgICAgIHZhbHVlIHx8IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpO1xuICAgIC8vIHRyaW0gd2hpdGVzcGFjZSB0aGF0IGNhbiBjb21lIGFmdGVyIHRoZSBgOmAgaW4gY3NzXG4gICAgLy8gZXhhbXBsZTogcGFkZGluZzogMnB4IC0+IFwiIDJweFwiXG4gICAgcmV0dXJuIHZhbHVlID8gdmFsdWUudHJpbSgpIDogJyc7XG4gIH1cbiAgLy8gZ2l2ZW4gYW4gZWxlbWVudCBhbmQgYSBjbGFzc1N0cmluZywgcmVwbGFjZXNcbiAgLy8gdGhlIGVsZW1lbnQncyBjbGFzcyB3aXRoIHRoZSBwcm92aWRlZCBjbGFzc1N0cmluZyBhbmQgYWRkc1xuICAvLyBhbnkgbmVjZXNzYXJ5IFNoYWR5Q1NTIHN0YXRpYyBhbmQgcHJvcGVydHkgYmFzZWQgc2NvcGluZyBzZWxlY3RvcnNcbiAgc2V0RWxlbWVudENsYXNzKGVsZW1lbnQsIGNsYXNzU3RyaW5nKSB7XG4gICAgbGV0IHJvb3QgPSBTdHlsZVV0aWwud3JhcChlbGVtZW50KS5nZXRSb290Tm9kZSgpO1xuICAgIGxldCBjbGFzc2VzO1xuICAgIGlmIChjbGFzc1N0cmluZykge1xuICAgICAgbGV0IGRlZmluaXRlbHlTdHJpbmcgPVxuICAgICAgICB0eXBlb2YgY2xhc3NTdHJpbmcgPT09ICdzdHJpbmcnID8gY2xhc3NTdHJpbmcgOiBTdHJpbmcoY2xhc3NTdHJpbmcpO1xuICAgICAgY2xhc3NlcyA9IGRlZmluaXRlbHlTdHJpbmcuc3BsaXQoL1xccy8pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjbGFzc2VzID0gW107XG4gICAgfVxuICAgIGxldCBzY29wZU5hbWUgPSByb290Lmhvc3QgJiYgcm9vdC5ob3N0LmxvY2FsTmFtZTtcbiAgICAvLyBJZiBubyBzY29wZSwgdHJ5IHRvIGRpc2NvdmVyIHNjb3BlIG5hbWUgZnJvbSBleGlzdGluZyBjbGFzcy5cbiAgICAvLyBUaGlzIGNhbiBvY2N1ciBpZiwgZm9yIGV4YW1wbGUsIGEgdGVtcGxhdGUgc3RhbXBlZCBlbGVtZW50IHRoYXRcbiAgICAvLyBoYXMgYmVlbiBzY29wZWQgaXMgbWFuaXB1bGF0ZWQgd2hlbiBub3QgaW4gYSByb290LlxuICAgIGlmICghc2NvcGVOYW1lKSB7XG4gICAgICB2YXIgY2xhc3NBdHRyID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgICBpZiAoY2xhc3NBdHRyKSB7XG4gICAgICAgIGxldCBrJCA9IGNsYXNzQXR0ci5zcGxpdCgvXFxzLyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgayQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoayRbaV0gPT09IFN0eWxlVHJhbnNmb3JtZXIuU0NPUEVfTkFNRSkge1xuICAgICAgICAgICAgc2NvcGVOYW1lID0gayRbaSArIDFdO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzY29wZU5hbWUpIHtcbiAgICAgIGNsYXNzZXMucHVzaChTdHlsZVRyYW5zZm9ybWVyLlNDT1BFX05BTUUsIHNjb3BlTmFtZSk7XG4gICAgfVxuICAgIGlmICghbmF0aXZlQ3NzVmFyaWFibGVzKSB7XG4gICAgICBsZXQgc3R5bGVJbmZvID0gU3R5bGVJbmZvLmdldChlbGVtZW50KTtcbiAgICAgIGlmIChzdHlsZUluZm8gJiYgc3R5bGVJbmZvLnNjb3BlU2VsZWN0b3IpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKFN0eWxlUHJvcGVydGllcy5YU0NPUEVfTkFNRSwgc3R5bGVJbmZvLnNjb3BlU2VsZWN0b3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBTdHlsZVV0aWwuc2V0RWxlbWVudENsYXNzUmF3KGVsZW1lbnQsIGNsYXNzZXMuam9pbignICcpKTtcbiAgfVxuICBfc3R5bGVJbmZvRm9yTm9kZShub2RlKSB7XG4gICAgcmV0dXJuIFN0eWxlSW5mby5nZXQobm9kZSk7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IG5vZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNjb3BlXG4gICAqL1xuICBzY29wZU5vZGUobm9kZSwgc2NvcGUpIHtcbiAgICBTdHlsZVRyYW5zZm9ybWVyLmVsZW1lbnQobm9kZSwgc2NvcGUpO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0geyFFbGVtZW50fSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzY29wZVxuICAgKi9cbiAgdW5zY29wZU5vZGUobm9kZSwgc2NvcGUpIHtcbiAgICBTdHlsZVRyYW5zZm9ybWVyLmVsZW1lbnQobm9kZSwgc2NvcGUsIHRydWUpO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHNjb3BlRm9yTm9kZShub2RlKSB7XG4gICAgcmV0dXJuIGdldE93bmVyU2NvcGUobm9kZSk7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUVsZW1lbnR9IG5vZGVcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgY3VycmVudFNjb3BlRm9yTm9kZShub2RlKSB7XG4gICAgcmV0dXJuIGdldEN1cnJlbnRTY29wZShub2RlKTtcbiAgfVxufVxuXG4vKiBleHBvcnRzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWFzc2lnbiAqL1xuU2NvcGluZ1NoaW0ucHJvdG90eXBlWydmbHVzaCddID0gU2NvcGluZ1NoaW0ucHJvdG90eXBlLmZsdXNoO1xuU2NvcGluZ1NoaW0ucHJvdG90eXBlWydwcmVwYXJlVGVtcGxhdGUnXSA9XG4gIFNjb3BpbmdTaGltLnByb3RvdHlwZS5wcmVwYXJlVGVtcGxhdGU7XG5TY29waW5nU2hpbS5wcm90b3R5cGVbJ3N0eWxlRWxlbWVudCddID0gU2NvcGluZ1NoaW0ucHJvdG90eXBlLnN0eWxlRWxlbWVudDtcblNjb3BpbmdTaGltLnByb3RvdHlwZVsnc3R5bGVEb2N1bWVudCddID0gU2NvcGluZ1NoaW0ucHJvdG90eXBlLnN0eWxlRG9jdW1lbnQ7XG5TY29waW5nU2hpbS5wcm90b3R5cGVbJ3N0eWxlU3VidHJlZSddID0gU2NvcGluZ1NoaW0ucHJvdG90eXBlLnN0eWxlU3VidHJlZTtcblNjb3BpbmdTaGltLnByb3RvdHlwZVsnZ2V0Q29tcHV0ZWRTdHlsZVZhbHVlJ10gPVxuICBTY29waW5nU2hpbS5wcm90b3R5cGUuZ2V0Q29tcHV0ZWRTdHlsZVZhbHVlO1xuU2NvcGluZ1NoaW0ucHJvdG90eXBlWydzZXRFbGVtZW50Q2xhc3MnXSA9XG4gIFNjb3BpbmdTaGltLnByb3RvdHlwZS5zZXRFbGVtZW50Q2xhc3M7XG5TY29waW5nU2hpbS5wcm90b3R5cGVbJ19zdHlsZUluZm9Gb3JOb2RlJ10gPVxuICBTY29waW5nU2hpbS5wcm90b3R5cGUuX3N0eWxlSW5mb0Zvck5vZGU7XG5TY29waW5nU2hpbS5wcm90b3R5cGVbJ3RyYW5zZm9ybUN1c3RvbVN0eWxlRm9yRG9jdW1lbnQnXSA9XG4gIFNjb3BpbmdTaGltLnByb3RvdHlwZS50cmFuc2Zvcm1DdXN0b21TdHlsZUZvckRvY3VtZW50O1xuU2NvcGluZ1NoaW0ucHJvdG90eXBlWydnZXRTdHlsZUFzdCddID0gU2NvcGluZ1NoaW0ucHJvdG90eXBlLmdldFN0eWxlQXN0O1xuU2NvcGluZ1NoaW0ucHJvdG90eXBlWydzdHlsZUFzdFRvU3RyaW5nJ10gPVxuICBTY29waW5nU2hpbS5wcm90b3R5cGUuc3R5bGVBc3RUb1N0cmluZztcblNjb3BpbmdTaGltLnByb3RvdHlwZVsnZmx1c2hDdXN0b21TdHlsZXMnXSA9XG4gIFNjb3BpbmdTaGltLnByb3RvdHlwZS5mbHVzaEN1c3RvbVN0eWxlcztcblNjb3BpbmdTaGltLnByb3RvdHlwZVsnc2NvcGVOb2RlJ10gPSBTY29waW5nU2hpbS5wcm90b3R5cGUuc2NvcGVOb2RlO1xuU2NvcGluZ1NoaW0ucHJvdG90eXBlWyd1bnNjb3BlTm9kZSddID0gU2NvcGluZ1NoaW0ucHJvdG90eXBlLnVuc2NvcGVOb2RlO1xuU2NvcGluZ1NoaW0ucHJvdG90eXBlWydzY29wZUZvck5vZGUnXSA9IFNjb3BpbmdTaGltLnByb3RvdHlwZS5zY29wZUZvck5vZGU7XG5TY29waW5nU2hpbS5wcm90b3R5cGVbJ2N1cnJlbnRTY29wZUZvck5vZGUnXSA9XG4gIFNjb3BpbmdTaGltLnByb3RvdHlwZS5jdXJyZW50U2NvcGVGb3JOb2RlO1xuU2NvcGluZ1NoaW0ucHJvdG90eXBlWydwcmVwYXJlQWRvcHRlZENzc1RleHQnXSA9XG4gIFNjb3BpbmdTaGltLnByb3RvdHlwZS5wcmVwYXJlQWRvcHRlZENzc1RleHQ7XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtYXNzaWduICovXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhTY29waW5nU2hpbS5wcm90b3R5cGUsIHtcbiAgJ25hdGl2ZVNoYWRvdyc6IHtcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gbmF0aXZlU2hhZG93O1xuICAgIH0sXG4gIH0sXG4gICduYXRpdmVDc3MnOiB7XG4gICAgZ2V0KCkge1xuICAgICAgcmV0dXJuIG5hdGl2ZUNzc1ZhcmlhYmxlcztcbiAgICB9LFxuICB9LFxufSk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7bmF0aXZlU2hhZG93fSBmcm9tICcuL3N0eWxlLXNldHRpbmdzLmpzJztcbmltcG9ydCBTdHlsZVRyYW5zZm9ybWVyIGZyb20gJy4vc3R5bGUtdHJhbnNmb3JtZXIuanMnO1xuaW1wb3J0IHtnZXRJc0V4dGVuZHMsIGVsZW1lbnRIYXNCdWlsdENzcywgd3JhcH0gZnJvbSAnLi9zdHlsZS11dGlsLmpzJztcblxuZXhwb3J0IGxldCBmbHVzaCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4vKipcbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0Q2xhc3NlcyhlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LmNsYXNzTGlzdCAmJiBlbGVtZW50LmNsYXNzTGlzdC52YWx1ZSkge1xuICAgIHJldHVybiBlbGVtZW50LmNsYXNzTGlzdC52YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBOT1RFOiBjbGFzc05hbWUgaXMgcGF0Y2hlZCB0byByZW1vdmUgc2NvcGluZyBjbGFzc2VzIGluIFNoYWR5RE9NXG4gICAgLy8gdXNlIGdldEF0dHJpYnV0ZSgnY2xhc3MnKSBpbnN0ZWFkLCB3aGljaCBpcyB1bnBhdGNoZWRcbiAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJyc7XG4gIH1cbn1cblxuY29uc3Qgc2NvcGVSZWdFeHAgPSBuZXcgUmVnRXhwKGAke1N0eWxlVHJhbnNmb3JtZXIuU0NPUEVfTkFNRX1cXFxccyooW15cXFxcc10qKWApO1xuXG4vKipcbiAqIEBwYXJhbSB7IUVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRTY29wZShlbGVtZW50KSB7XG4gIGNvbnN0IG1hdGNoID0gZ2V0Q2xhc3NlcyhlbGVtZW50KS5tYXRjaChzY29wZVJlZ0V4cCk7XG4gIGlmIChtYXRjaCkge1xuICAgIHJldHVybiBtYXRjaFsxXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRPd25lclNjb3BlKG5vZGUpIHtcbiAgY29uc3Qgb3duZXJSb290ID0gd3JhcChub2RlKS5nZXRSb290Tm9kZSgpO1xuICBpZiAob3duZXJSb290ID09PSBub2RlIHx8IG93bmVyUm9vdCA9PT0gbm9kZS5vd25lckRvY3VtZW50KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGNvbnN0IGhvc3QgPSAvKiogQHR5cGUgeyFTaGFkb3dSb290fSAqLyAob3duZXJSb290KS5ob3N0O1xuICBpZiAoIWhvc3QpIHtcbiAgICAvLyB0aGlzIG1heSBhY3R1YWxseSBiZSBhIGRvY3VtZW50IGZyYWdtZW50XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHJldHVybiBnZXRJc0V4dGVuZHMoaG9zdCkuaXM7XG59XG5cbi8qKlxuICogQHBhcmFtIHshRWxlbWVudH0gZWxlbWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlQ29ycmVjdFNjb3BlKGVsZW1lbnQpIHtcbiAgY29uc3QgY3VycmVudFNjb3BlID0gZ2V0Q3VycmVudFNjb3BlKGVsZW1lbnQpO1xuICBjb25zdCBvd25lclJvb3QgPSB3cmFwKGVsZW1lbnQpLmdldFJvb3ROb2RlKCk7XG4gIGlmIChvd25lclJvb3QgPT09IGVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGN1cnJlbnRTY29wZSAmJiBvd25lclJvb3QgPT09IGVsZW1lbnQub3duZXJEb2N1bWVudCkge1xuICAgIC8vIG5vZGUgd2FzIHNjb3BlZCwgYnV0IG5vdyBpcyBpbiBkb2N1bWVudFxuICAgIFN0eWxlVHJhbnNmb3JtZXIuZG9tUmVtb3ZlU2NvcGUoZWxlbWVudCwgY3VycmVudFNjb3BlKTtcbiAgfSBlbHNlIGlmIChvd25lclJvb3QgaW5zdGFuY2VvZiBTaGFkb3dSb290KSB7XG4gICAgY29uc3Qgb3duZXJTY29wZSA9IGdldE93bmVyU2NvcGUoZWxlbWVudCk7XG4gICAgaWYgKG93bmVyU2NvcGUgIT09IGN1cnJlbnRTY29wZSkge1xuICAgICAgLy8gbm9kZSB3YXMgc2NvcGVkLCBidXQgbm90IGJ5IGl0cyBjdXJyZW50IG93bmVyXG4gICAgICBTdHlsZVRyYW5zZm9ybWVyLmRvbVJlcGxhY2VTY29wZShlbGVtZW50LCBjdXJyZW50U2NvcGUsIG93bmVyU2NvcGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fCFIVE1MRG9jdW1lbnR9IGVsZW1lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZUNvcnJlY3RTdWJ0cmVlU2NvcGluZyhlbGVtZW50KSB7XG4gIC8vIGZpbmQgdW5zY29wZWQgc3VidHJlZSBub2Rlc1xuICBjb25zdCB1bnNjb3BlZE5vZGVzID0gd2luZG93WydTaGFkeURPTSddWyduYXRpdmVNZXRob2RzJ11bXG4gICAgJ3F1ZXJ5U2VsZWN0b3JBbGwnXG4gIF0uY2FsbChlbGVtZW50LCBgOm5vdCguJHtTdHlsZVRyYW5zZm9ybWVyLlNDT1BFX05BTUV9KWApO1xuXG4gIGZvciAobGV0IGogPSAwOyBqIDwgdW5zY29wZWROb2Rlcy5sZW5ndGg7IGorKykge1xuICAgIC8vIGl0J3MgcG9zc2libGUsIGR1cmluZyBsYXJnZSBiYXRjaCBpbnNlcnRzLCB0aGF0IG5vZGVzIHRoYXQgYXJlbid0XG4gICAgLy8gc2NvcGVkIHdpdGhpbiB0aGUgY3VycmVudCBzY29wZSB3ZXJlIGFkZGVkLlxuICAgIC8vIFRvIG1ha2Ugc3VyZSB0aGF0IGFueSB1bnNjb3BlZCBub2RlcyB0aGF0IHdlcmUgaW5zZXJ0ZWQgaW4gdGhlIGN1cnJlbnQgYmF0Y2ggYXJlIGNvcnJlY3RseSBzdHlsZWQsXG4gICAgLy8gcXVlcnkgYWxsIHVuc2NvcGVkIG5vZGVzIGFuZCBmb3JjZSB0aGVpciBzdHlsZS1zY29wZSB0byBiZSBhcHBsaWVkLlxuICAgIC8vIFRoaXMgY291bGQgaGFwcGVuIGlmIGEgc3ViLWVsZW1lbnQgYXBwZW5kZWQgYW4gdW5zY29wZWQgbm9kZSBpbiBpdHMgc2hhZG93cm9vdCBhbmQgdGhpcyBmdW5jdGlvblxuICAgIC8vIHJ1bnMgb24gYSBwYXJlbnQgZWxlbWVudCBvZiB0aGUgaG9zdCBvZiB0aGF0IHVuc2NvcGVkIG5vZGU6XG4gICAgLy8gcGFyZW50LWVsZW1lbnQgLT4gZWxlbWVudCAtPiB1bnNjb3BlZCBub2RlXG4gICAgLy8gSGVyZSB1bnNjb3BlZCBub2RlIHNob3VsZCBoYXZlIHRoZSBzdHlsZS1zY29wZSBlbGVtZW50LCBub3QgcGFyZW50LWVsZW1lbnQuXG4gICAgY29uc3QgdW5zY29wZWROb2RlID0gdW5zY29wZWROb2Rlc1tqXTtcbiAgICBjb25zdCBzY29wZUZvclByZXZpb3VzbHlVbnNjb3BlZE5vZGUgPSBnZXRPd25lclNjb3BlKHVuc2NvcGVkTm9kZSk7XG4gICAgaWYgKHNjb3BlRm9yUHJldmlvdXNseVVuc2NvcGVkTm9kZSkge1xuICAgICAgU3R5bGVUcmFuc2Zvcm1lci5lbGVtZW50KHVuc2NvcGVkTm9kZSwgc2NvcGVGb3JQcmV2aW91c2x5VW5zY29wZWROb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNFbGVtZW50V2l0aEJ1aWx0Q3NzKGVsKSB7XG4gIGlmIChlbC5sb2NhbE5hbWUgPT09ICdzdHlsZScgfHwgZWwubG9jYWxOYW1lID09PSAndGVtcGxhdGUnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnRIYXNCdWlsdENzcyhlbCk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8TXV0YXRpb25SZWNvcmR8bnVsbD58bnVsbH0gbXhuc1xuICovXG5mdW5jdGlvbiBoYW5kbGVyKG14bnMpIHtcbiAgZm9yIChsZXQgeCA9IDA7IHggPCBteG5zLmxlbmd0aDsgeCsrKSB7XG4gICAgbGV0IG14biA9IG14bnNbeF07XG4gICAgaWYgKFxuICAgICAgbXhuLnRhcmdldCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8XG4gICAgICBteG4udGFyZ2V0ID09PSBkb2N1bWVudC5oZWFkXG4gICAgKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBteG4uYWRkZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IG4gPSBteG4uYWRkZWROb2Rlc1tpXTtcbiAgICAgIGlmIChuLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIG4gPSAvKiogQHR5cGUge0hUTUxFbGVtZW50fSAqLyAobik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1hc3NpZ25cbiAgICAgIGxldCByb290ID0gbi5nZXRSb290Tm9kZSgpO1xuICAgICAgbGV0IGN1cnJlbnRTY29wZSA9IGdldEN1cnJlbnRTY29wZShuKTtcbiAgICAgIC8vIG5vZGUgd2FzIHNjb3BlZCwgYnV0IG5vdyBpcyBpbiBkb2N1bWVudFxuICAgICAgLy8gSWYgdGhpcyBlbGVtZW50IGhhcyBidWlsdCBjc3MsIHdlIG11c3Qgbm90IHJlbW92ZSBzY29waW5nIGFzIHRoaXMgbm9kZVxuICAgICAgLy8gd2lsbCBiZSB1c2VkIGFzIGEgdGVtcGxhdGUgb3Igc3R5bGUgd2l0aG91dCByZSAtIGFwcGx5aW5nIHNjb3BpbmcgYXMgYW4gb3B0aW1pemF0aW9uXG4gICAgICBpZiAoXG4gICAgICAgIGN1cnJlbnRTY29wZSAmJlxuICAgICAgICByb290ID09PSBuLm93bmVyRG9jdW1lbnQgJiZcbiAgICAgICAgIWlzRWxlbWVudFdpdGhCdWlsdENzcyhuKVxuICAgICAgKSB7XG4gICAgICAgIFN0eWxlVHJhbnNmb3JtZXIuZG9tUmVtb3ZlU2NvcGUobiwgY3VycmVudFNjb3BlKTtcbiAgICAgIH0gZWxzZSBpZiAocm9vdCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QpIHtcbiAgICAgICAgY29uc3QgbmV3U2NvcGUgPSBnZXRPd25lclNjb3BlKG4pO1xuICAgICAgICAvLyByZXNjb3BlIGN1cnJlbnQgbm9kZSBhbmQgc3VidHJlZSBpZiBuZWNlc3NhcnlcbiAgICAgICAgaWYgKG5ld1Njb3BlICE9PSBjdXJyZW50U2NvcGUpIHtcbiAgICAgICAgICBTdHlsZVRyYW5zZm9ybWVyLmRvbVJlcGxhY2VTY29wZShuLCBjdXJyZW50U2NvcGUsIG5ld1Njb3BlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtYWtlIHN1cmUgYWxsIHRoZSBzdWJ0cmVlIGVsZW1lbnRzIGFyZSBzY29wZWQgY29ycmVjdGx5XG4gICAgICAgIGVuc3VyZUNvcnJlY3RTdWJ0cmVlU2NvcGluZyhuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gaWYgbmF0aXZlIFNoYWRvdyBET00gaXMgYmVpbmcgdXNlZCwgb3IgU2hhZHlET00gaGFuZGxlcyBkeW5hbWljIHNjb2lwaW5nLCBkbyBub3QgYWN0aXZhdGUgdGhlIE11dGF0aW9uT2JzZXJ2ZXJcbmlmIChcbiAgIW5hdGl2ZVNoYWRvdyAmJlxuICAhKHdpbmRvd1snU2hhZHlET00nXSAmJiB3aW5kb3dbJ1NoYWR5RE9NJ11bJ2hhbmRsZXNEeW5hbWljU2NvcGluZyddKVxuKSB7XG4gIGxldCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGhhbmRsZXIpO1xuICBsZXQgc3RhcnQgPSAobm9kZSkgPT4ge1xuICAgIG9ic2VydmVyLm9ic2VydmUobm9kZSwge2NoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZX0pO1xuICB9O1xuICBsZXQgbmF0aXZlQ3VzdG9tRWxlbWVudHMgPVxuICAgIHdpbmRvd1snY3VzdG9tRWxlbWVudHMnXSAmJlxuICAgICF3aW5kb3dbJ2N1c3RvbUVsZW1lbnRzJ11bJ3BvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2snXTtcbiAgLy8gbmVlZCB0byBzdGFydCBpbW1lZGlhdGVseSB3aXRoIG5hdGl2ZSBjdXN0b20gZWxlbWVudHNcbiAgLy8gVE9ETyhkZnJlZWRtKTogd2l0aCBwb2x5ZmlsbGVkIEhUTUxJbXBvcnRzIGFuZCBuYXRpdmUgY3VzdG9tIGVsZW1lbnRzXG4gIC8vIGV4Y2Vzc2l2ZSBtdXRhdGlvbnMgbWF5IGJlIG9ic2VydmVkOyB0aGlzIGNhbiBiZSBvcHRpbWl6ZWQgdmlhIGNvb3BlcmF0aW9uXG4gIC8vIHdpdGggdGhlIEhUTUxJbXBvcnRzIHBvbHlmaWxsLlxuICBpZiAobmF0aXZlQ3VzdG9tRWxlbWVudHMpIHtcbiAgICBzdGFydChkb2N1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGRlbGF5ZWRTdGFydCA9ICgpID0+IHtcbiAgICAgIHN0YXJ0KGRvY3VtZW50LmJvZHkpO1xuICAgIH07XG4gICAgLy8gdXNlIHBvbHlmaWxsIHRpbWluZyBpZiBpdCdzIGF2YWlsYWJsZVxuICAgIGlmICh3aW5kb3dbJ0hUTUxJbXBvcnRzJ10pIHtcbiAgICAgIHdpbmRvd1snSFRNTEltcG9ydHMnXVsnd2hlblJlYWR5J10oZGVsYXllZFN0YXJ0KTtcbiAgICAgIC8vIG90aGVyd2lzZSBwdXNoIGJleW9uZCBuYXRpdmUgaW1wb3J0cyBiZWluZyByZWFkeVxuICAgICAgLy8gd2hpY2ggcmVxdWlyZXMgUkFGICsgcmVhZHlzdGF0ZSBpbnRlcmFjdGl2ZS5cbiAgICB9IGVsc2Uge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgICAgICAgIGxldCBsaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRlbGF5ZWRTdGFydCgpO1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIGxpc3RlbmVyKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3JlYWR5c3RhdGVjaGFuZ2UnLCBsaXN0ZW5lcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsYXllZFN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIGhhbmRsZXIob2JzZXJ2ZXIudGFrZVJlY29yZHMoKSk7XG4gIH07XG59XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7cmVtb3ZlQ3VzdG9tUHJvcEFzc2lnbm1lbnQsIFN0eWxlTm9kZX0gZnJvbSAnLi9jc3MtcGFyc2UuanMnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuaW1wb3J0IHtuYXRpdmVTaGFkb3d9IGZyb20gJy4vc3R5bGUtc2V0dGluZ3MuanMnO1xuaW1wb3J0IFN0eWxlVHJhbnNmb3JtZXIgZnJvbSAnLi9zdHlsZS10cmFuc2Zvcm1lci5qcyc7XG5pbXBvcnQgKiBhcyBTdHlsZVV0aWwgZnJvbSAnLi9zdHlsZS11dGlsLmpzJztcbmltcG9ydCAqIGFzIFJYIGZyb20gJy4vY29tbW9uLXJlZ2V4LmpzJztcbmltcG9ydCBTdHlsZUluZm8gZnJvbSAnLi9zdHlsZS1pbmZvLmpzJztcblxuLy8gVE9ETzogZGVkdXBlIHdpdGggc2hhZHlcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogQHRoaXMge0VsZW1lbnR9XG4gKi9cbmNvbnN0IG1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICBjb25zdCBtZXRob2QgPVxuICAgIHRoaXMubWF0Y2hlcyB8fFxuICAgIHRoaXMubWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgdGhpcy5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcbiAgICB0aGlzLm1zTWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgdGhpcy5vTWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgdGhpcy53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XG4gIHJldHVybiBtZXRob2QgJiYgbWV0aG9kLmNhbGwodGhpcywgc2VsZWN0b3IpO1xufTtcblxuY29uc3Qgcm9vdFNlbGVjdG9yID0gLzpob3N0XFxzKj5cXHMqLztcblxuZnVuY3Rpb24gY2hlY2tSb290KGhvc3RTY29wZSwgc2VsZWN0b3IpIHtcbiAgcmV0dXJuIChcbiAgICBCb29sZWFuKHNlbGVjdG9yLm1hdGNoKHJvb3RTZWxlY3RvcikpIHx8XG4gICAgKGhvc3RTY29wZSA9PT0gJ2h0bWwnICYmIHNlbGVjdG9yLmluZGV4T2YoJ2h0bWwnKSA+IC0xKVxuICApO1xufVxuXG5jb25zdCBJU19JRSA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goJ1RyaWRlbnQnKTtcblxuY29uc3QgWFNDT1BFX05BTUUgPSAneC1zY29wZSc7XG5cbmNsYXNzIFN0eWxlUHJvcGVydGllcyB7XG4gIC8qKiBAcmV0dXJuIHtzdHJpbmd9ICovXG4gIGdldCBYU0NPUEVfTkFNRSgpIHtcbiAgICByZXR1cm4gWFNDT1BFX05BTUU7XG4gIH1cbiAgLyoqXG4gICAqIGRlY29yYXRlcyBzdHlsZXMgd2l0aCBydWxlIGluZm8gYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdXNlZCBzdHlsZSBwcm9wZXJ0eSBuYW1lc1xuICAgKlxuICAgKiBAcGFyYW0ge1N0eWxlTm9kZX0gcnVsZXNcbiAgICogQHJldHVybiB7IUFycmF5PHN0cmluZz59XG4gICAqL1xuICBkZWNvcmF0ZVN0eWxlcyhydWxlcykge1xuICAgIGxldCBzZWxmID0gdGhpcyxcbiAgICAgIHByb3BzID0ge30sXG4gICAgICBrZXlmcmFtZXMgPSBbXSxcbiAgICAgIHJ1bGVJbmRleCA9IDA7XG4gICAgU3R5bGVVdGlsLmZvckVhY2hSdWxlKFxuICAgICAgcnVsZXMsXG4gICAgICBmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICBzZWxmLmRlY29yYXRlUnVsZShydWxlKTtcbiAgICAgICAgLy8gbWFyayBpbi1vcmRlciBwb3NpdGlvbiBvZiBhc3QgcnVsZSBpbiBzdHlsZXMgYmxvY2ssIHVzZWQgZm9yIGNhY2hlIGtleVxuICAgICAgICBydWxlLmluZGV4ID0gcnVsZUluZGV4Kys7XG4gICAgICAgIHNlbGYuY29sbGVjdFByb3BlcnRpZXNJbkNzc1RleHQocnVsZS5wcm9wZXJ0eUluZm8uY3NzVGV4dCwgcHJvcHMpO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uIG9uS2V5ZnJhbWVzUnVsZShydWxlKSB7XG4gICAgICAgIGtleWZyYW1lcy5wdXNoKHJ1bGUpO1xuICAgICAgfVxuICAgICk7XG4gICAgLy8gQ2FjaGUgYWxsIGZvdW5kIGtleWZyYW1lcyBydWxlcyBmb3IgbGF0ZXIgcmVmZXJlbmNlOlxuICAgIHJ1bGVzLl9rZXlmcmFtZXMgPSBrZXlmcmFtZXM7XG4gICAgLy8gcmV0dXJuIHRoaXMgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lcyAqY29uc3VtZXMqIGluIHRoZXNlIHN0eWxlcy5cbiAgICBsZXQgbmFtZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpIGluIHByb3BzKSB7XG4gICAgICBuYW1lcy5wdXNoKGkpO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZXM7XG4gIH1cblxuICAvLyBkZWNvcmF0ZSBhIHNpbmdsZSBydWxlIHdpdGggcHJvcGVydHkgaW5mb1xuICBkZWNvcmF0ZVJ1bGUocnVsZSkge1xuICAgIGlmIChydWxlLnByb3BlcnR5SW5mbykge1xuICAgICAgcmV0dXJuIHJ1bGUucHJvcGVydHlJbmZvO1xuICAgIH1cbiAgICBsZXQgaW5mbyA9IHt9LFxuICAgICAgcHJvcGVydGllcyA9IHt9O1xuICAgIGxldCBoYXNQcm9wZXJ0aWVzID0gdGhpcy5jb2xsZWN0UHJvcGVydGllcyhydWxlLCBwcm9wZXJ0aWVzKTtcbiAgICBpZiAoaGFzUHJvcGVydGllcykge1xuICAgICAgaW5mby5wcm9wZXJ0aWVzID0gcHJvcGVydGllcztcbiAgICAgIC8vIFRPRE8oc29ydmVsbCk6IHdvcmthcm91bmQgcGFyc2VyIHNlZWluZyBtaXhpbnMgYXMgYWRkaXRpb25hbCBydWxlc1xuICAgICAgcnVsZVsncnVsZXMnXSA9IG51bGw7XG4gICAgfVxuICAgIGluZm8uY3NzVGV4dCA9IHRoaXMuY29sbGVjdENzc1RleHQocnVsZSk7XG4gICAgcnVsZS5wcm9wZXJ0eUluZm8gPSBpbmZvO1xuICAgIHJldHVybiBpbmZvO1xuICB9XG5cbiAgLy8gY29sbGVjdHMgdGhlIGN1c3RvbSBwcm9wZXJ0aWVzIGZyb20gYSBydWxlJ3MgY3NzVGV4dFxuICBjb2xsZWN0UHJvcGVydGllcyhydWxlLCBwcm9wZXJ0aWVzKSB7XG4gICAgbGV0IGluZm8gPSBydWxlLnByb3BlcnR5SW5mbztcbiAgICBpZiAoaW5mbykge1xuICAgICAgaWYgKGluZm8ucHJvcGVydGllcykge1xuICAgICAgICBPYmplY3QuYXNzaWduKHByb3BlcnRpZXMsIGluZm8ucHJvcGVydGllcyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbSxcbiAgICAgICAgcnggPSBSWC5WQVJfQVNTSUdOO1xuICAgICAgbGV0IGNzc1RleHQgPSBydWxlWydwYXJzZWRDc3NUZXh0J107XG4gICAgICBsZXQgdmFsdWU7XG4gICAgICBsZXQgYW55O1xuICAgICAgd2hpbGUgKChtID0gcnguZXhlYyhjc3NUZXh0KSkpIHtcbiAgICAgICAgLy8gbm90ZTogZ3JvdXAgMiBpcyB2YXIsIDMgaXMgbWl4aW5cbiAgICAgICAgdmFsdWUgPSAobVsyXSB8fCBtWzNdKS50cmltKCk7XG4gICAgICAgIC8vIHZhbHVlIG9mICdpbmhlcml0JyBvciAndW5zZXQnIGlzIGVxdWl2YWxlbnQgdG8gbm90IHNldHRpbmcgdGhlIHByb3BlcnR5IGhlcmVcbiAgICAgICAgaWYgKHZhbHVlICE9PSAnaW5oZXJpdCcgfHwgdmFsdWUgIT09ICd1bnNldCcpIHtcbiAgICAgICAgICBwcm9wZXJ0aWVzW21bMV0udHJpbSgpXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGFueSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYW55O1xuICAgIH1cbiAgfVxuXG4gIC8vIHJldHVybnMgY3NzVGV4dCBvZiBwcm9wZXJ0aWVzIHRoYXQgY29uc3VtZSB2YXJpYWJsZXMvbWl4aW5zXG4gIGNvbGxlY3RDc3NUZXh0KHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5jb2xsZWN0Q29uc3VtaW5nQ3NzVGV4dChydWxlWydwYXJzZWRDc3NUZXh0J10pO1xuICB9XG5cbiAgLy8gTk9URTogd2Ugc3VwcG9ydCBjb25zdW1wdGlvbiBpbnNpZGUgbWl4aW4gYXNzaWdubWVudFxuICAvLyBidXQgbm90IHByb2R1Y3Rpb24sIHNvIHN0cmlwIG91dCB7Li4ufVxuICBjb2xsZWN0Q29uc3VtaW5nQ3NzVGV4dChjc3NUZXh0KSB7XG4gICAgcmV0dXJuIGNzc1RleHQucmVwbGFjZShSWC5CUkFDS0VURUQsICcnKS5yZXBsYWNlKFJYLlZBUl9BU1NJR04sICcnKTtcbiAgfVxuXG4gIGNvbGxlY3RQcm9wZXJ0aWVzSW5Dc3NUZXh0KGNzc1RleHQsIHByb3BzKSB7XG4gICAgbGV0IG07XG4gICAgd2hpbGUgKChtID0gUlguVkFSX0NPTlNVTUVELmV4ZWMoY3NzVGV4dCkpKSB7XG4gICAgICBsZXQgbmFtZSA9IG1bMV07XG4gICAgICAvLyBUaGlzIHJlZ2V4IGNhdGNoZXMgYWxsIHZhcmlhYmxlIG5hbWVzLCBhbmQgZm9sbG93aW5nIG5vbi13aGl0ZXNwYWNlIGNoYXJcbiAgICAgIC8vIElmIG5leHQgY2hhciBpcyBub3QgJzonLCB0aGVuIHZhcmlhYmxlIGlzIGEgY29uc3VtZXJcbiAgICAgIGlmIChtWzJdICE9PSAnOicpIHtcbiAgICAgICAgcHJvcHNbbmFtZV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHR1cm5zIGN1c3RvbSBwcm9wZXJ0aWVzIGludG8gcmVhbGl6ZWQgdmFsdWVzLlxuICByZWlmeShwcm9wcykge1xuICAgIC8vIGJpZyBwZXJmIG9wdGltaXphdGlvbiBoZXJlOiByZWlmeSBvbmx5ICpvd24qIHByb3BlcnRpZXNcbiAgICAvLyBzaW5jZSB0aGlzIG9iamVjdCBoYXMgX19wcm90b19fIG9mIHRoZSBlbGVtZW50J3Mgc2NvcGUgcHJvcGVydGllc1xuICAgIGxldCBuYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3BzKTtcbiAgICBmb3IgKGxldCBpID0gMCwgbjsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuID0gbmFtZXNbaV07XG4gICAgICBwcm9wc1tuXSA9IHRoaXMudmFsdWVGb3JQcm9wZXJ0eShwcm9wc1tuXSwgcHJvcHMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGdpdmVuIGEgcHJvcGVydHkgdmFsdWUsIHJldHVybnMgdGhlIHJlaWZpZWQgdmFsdWVcbiAgLy8gYSBwcm9wZXJ0eSB2YWx1ZSBtYXkgYmU6XG4gIC8vICgxKSBhIGxpdGVyYWwgdmFsdWUgbGlrZTogcmVkIG9yIDVweDtcbiAgLy8gKDIpIGEgdmFyaWFibGUgdmFsdWUgbGlrZTogdmFyKC0tYSksIHZhcigtLWEsIHJlZCksIG9yIHZhcigtLWEsIC0tYikgb3JcbiAgLy8gdmFyKC0tYSwgdmFyKC0tYikpO1xuICAvLyAoMykgYSBsaXRlcmFsIG1peGluIHZhbHVlIGxpa2UgeyBwcm9wZXJ0aWVzIH0uIEVhY2ggb2YgdGhlc2UgcHJvcGVydGllc1xuICAvLyBjYW4gaGF2ZSB2YWx1ZXMgdGhhdCBhcmU6IChhKSBsaXRlcmFsLCAoYikgdmFyaWFibGVzLCAoYykgQGFwcGx5IG1peGlucy5cbiAgdmFsdWVGb3JQcm9wZXJ0eShwcm9wZXJ0eSwgcHJvcHMpIHtcbiAgICAvLyBjYXNlICgxKSBkZWZhdWx0XG4gICAgLy8gY2FzZSAoMykgZGVmaW5lcyBhIG1peGluIGFuZCB3ZSBoYXZlIHRvIHJlaWZ5IHRoZSBpbnRlcm5hbHNcbiAgICBpZiAocHJvcGVydHkpIHtcbiAgICAgIGlmIChwcm9wZXJ0eS5pbmRleE9mKCc7JykgPj0gMCkge1xuICAgICAgICBwcm9wZXJ0eSA9IHRoaXMudmFsdWVGb3JQcm9wZXJ0aWVzKHByb3BlcnR5LCBwcm9wcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjYXNlICgyKSB2YXJpYWJsZVxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgIGxldCBmbiA9IGZ1bmN0aW9uIChwcmVmaXgsIHZhbHVlLCBmYWxsYmFjaywgc3VmZml4KSB7XG4gICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHByZWZpeCArIHN1ZmZpeDtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IHByb3BlcnR5VmFsdWUgPSBzZWxmLnZhbHVlRm9yUHJvcGVydHkocHJvcHNbdmFsdWVdLCBwcm9wcyk7XG4gICAgICAgICAgLy8gaWYgdmFsdWUgaXMgXCJpbml0aWFsXCIsIHRoZW4gdGhlIHZhcmlhYmxlIHNob3VsZCBiZSB0cmVhdGVkIGFzIHVuc2V0XG4gICAgICAgICAgaWYgKCFwcm9wZXJ0eVZhbHVlIHx8IHByb3BlcnR5VmFsdWUgPT09ICdpbml0aWFsJykge1xuICAgICAgICAgICAgLy8gZmFsbGJhY2sgbWF5IGJlIC0tYSBvciB2YXIoLS1hKSBvciBsaXRlcmFsXG4gICAgICAgICAgICBwcm9wZXJ0eVZhbHVlID1cbiAgICAgICAgICAgICAgc2VsZi52YWx1ZUZvclByb3BlcnR5KHByb3BzW2ZhbGxiYWNrXSB8fCBmYWxsYmFjaywgcHJvcHMpIHx8XG4gICAgICAgICAgICAgIGZhbGxiYWNrO1xuICAgICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlWYWx1ZSA9PT0gJ2FwcGx5LXNoaW0taW5oZXJpdCcpIHtcbiAgICAgICAgICAgIC8vIENTUyBidWlsZCB3aWxsIHJlcGxhY2UgYGluaGVyaXRgIHdpdGggYGFwcGx5LXNoaW0taW5oZXJpdGBcbiAgICAgICAgICAgIC8vIGZvciB1c2Ugd2l0aCBuYXRpdmUgY3NzIHZhcmlhYmxlcy5cbiAgICAgICAgICAgIC8vIFNpbmNlIHdlIGhhdmUgZnVsbCBjb250cm9sLCB3ZSBjYW4gdXNlIGBpbmhlcml0YCBkaXJlY3RseS5cbiAgICAgICAgICAgIHByb3BlcnR5VmFsdWUgPSAnaW5oZXJpdCc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwcmVmaXggKyAocHJvcGVydHlWYWx1ZSB8fCAnJykgKyBzdWZmaXg7XG4gICAgICAgIH07XG4gICAgICAgIHByb3BlcnR5ID0gU3R5bGVVdGlsLnByb2Nlc3NWYXJpYWJsZUFuZEZhbGxiYWNrKHByb3BlcnR5LCBmbik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAocHJvcGVydHkgJiYgcHJvcGVydHkudHJpbSgpKSB8fCAnJztcbiAgfVxuXG4gIC8vIG5vdGU6IHdlIGRvIG5vdCB5ZXQgc3VwcG9ydCBtaXhpbiB3aXRoaW4gbWl4aW5cbiAgdmFsdWVGb3JQcm9wZXJ0aWVzKHByb3BlcnR5LCBwcm9wcykge1xuICAgIGxldCBwYXJ0cyA9IHByb3BlcnR5LnNwbGl0KCc7Jyk7XG4gICAgZm9yIChsZXQgaSA9IDAsIHAsIG07IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKChwID0gcGFydHNbaV0pKSB7XG4gICAgICAgIFJYLk1JWElOX01BVENILmxhc3RJbmRleCA9IDA7XG4gICAgICAgIG0gPSBSWC5NSVhJTl9NQVRDSC5leGVjKHApO1xuICAgICAgICBpZiAobSkge1xuICAgICAgICAgIHAgPSB0aGlzLnZhbHVlRm9yUHJvcGVydHkocHJvcHNbbVsxXV0sIHByb3BzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgY29sb24gPSBwLmluZGV4T2YoJzonKTtcbiAgICAgICAgICBpZiAoY29sb24gIT09IC0xKSB7XG4gICAgICAgICAgICBsZXQgcHAgPSBwLnN1YnN0cmluZyhjb2xvbik7XG4gICAgICAgICAgICBwcCA9IHBwLnRyaW0oKTtcbiAgICAgICAgICAgIHBwID0gdGhpcy52YWx1ZUZvclByb3BlcnR5KHBwLCBwcm9wcykgfHwgcHA7XG4gICAgICAgICAgICBwID0gcC5zdWJzdHJpbmcoMCwgY29sb24pICsgcHA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBhcnRzW2ldID1cbiAgICAgICAgICBwICYmIHAubGFzdEluZGV4T2YoJzsnKSA9PT0gcC5sZW5ndGggLSAxXG4gICAgICAgICAgICA/IHAuc2xpY2UoMCwgLTEpIC8vIHN0cmlwIHRyYWlsaW5nIDtcbiAgICAgICAgICAgIDogcCB8fCAnJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhcnRzLmpvaW4oJzsnKTtcbiAgfVxuXG4gIGFwcGx5UHJvcGVydGllcyhydWxlLCBwcm9wcykge1xuICAgIGxldCBvdXRwdXQgPSAnJztcbiAgICAvLyBkeW5hbWljYWxseSBhZGRlZCBzaGVldHMgbWF5IG5vdCBiZSBkZWNvcmF0ZWQgc28gZW5zdXJlIHRoZXkgYXJlLlxuICAgIGlmICghcnVsZS5wcm9wZXJ0eUluZm8pIHtcbiAgICAgIHRoaXMuZGVjb3JhdGVSdWxlKHJ1bGUpO1xuICAgIH1cbiAgICBpZiAocnVsZS5wcm9wZXJ0eUluZm8uY3NzVGV4dCkge1xuICAgICAgb3V0cHV0ID0gdGhpcy52YWx1ZUZvclByb3BlcnRpZXMocnVsZS5wcm9wZXJ0eUluZm8uY3NzVGV4dCwgcHJvcHMpO1xuICAgIH1cbiAgICBydWxlWydjc3NUZXh0J10gPSBvdXRwdXQ7XG4gIH1cblxuICAvLyBBcHBseSBrZXlmcmFtZSB0cmFuc2Zvcm1hdGlvbnMgdG8gdGhlIGNzc1RleHQgb2YgYSBnaXZlbiBydWxlLiBUaGVcbiAgLy8ga2V5ZnJhbWVUcmFuc2Zvcm1zIG9iamVjdCBpcyBhIG1hcCBvZiBrZXlmcmFtZSBuYW1lcyB0byB0cmFuc2Zvcm1lclxuICAvLyBmdW5jdGlvbnMgd2hpY2ggdGFrZSBpbiBjc3NUZXh0IGFuZCBzcGl0IG91dCB0cmFuc2Zvcm1lZCBjc3NUZXh0LlxuICBhcHBseUtleWZyYW1lVHJhbnNmb3JtcyhydWxlLCBrZXlmcmFtZVRyYW5zZm9ybXMpIHtcbiAgICBsZXQgaW5wdXQgPSBydWxlWydjc3NUZXh0J107XG4gICAgbGV0IG91dHB1dCA9IHJ1bGVbJ2Nzc1RleHQnXTtcbiAgICBpZiAocnVsZS5oYXNBbmltYXRpb25zID09IG51bGwpIHtcbiAgICAgIC8vIENhY2hlIHdoZXRoZXIgb3Igbm90IHRoZSBydWxlIGhhcyBhbnkgYW5pbWF0aW9ucyB0byBiZWdpbiB3aXRoOlxuICAgICAgcnVsZS5oYXNBbmltYXRpb25zID0gUlguQU5JTUFUSU9OX01BVENILnRlc3QoaW5wdXQpO1xuICAgIH1cbiAgICAvLyBJZiB0aGVyZSBhcmUgbm8gYW5pbWF0aW9ucyByZWZlcmVuY2VkLCB3ZSBjYW4gc2tpcCB0cmFuc2Zvcm1zOlxuICAgIGlmIChydWxlLmhhc0FuaW1hdGlvbnMpIHtcbiAgICAgIGxldCB0cmFuc2Zvcm07XG4gICAgICAvLyBJZiB3ZSBoYXZlbid0IHRyYW5zZm9ybWVkIHRoaXMgcnVsZSBiZWZvcmUsIHdlIGl0ZXJhdGUgb3ZlciBhbGxcbiAgICAgIC8vIHRyYW5zZm9ybXM6XG4gICAgICBpZiAocnVsZS5rZXlmcmFtZU5hbWVzVG9UcmFuc2Zvcm0gPT0gbnVsbCkge1xuICAgICAgICBydWxlLmtleWZyYW1lTmFtZXNUb1RyYW5zZm9ybSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBrZXlmcmFtZSBpbiBrZXlmcmFtZVRyYW5zZm9ybXMpIHtcbiAgICAgICAgICB0cmFuc2Zvcm0gPSBrZXlmcmFtZVRyYW5zZm9ybXNba2V5ZnJhbWVdO1xuICAgICAgICAgIG91dHB1dCA9IHRyYW5zZm9ybShpbnB1dCk7XG4gICAgICAgICAgLy8gSWYgdGhlIHRyYW5zZm9ybSBhY3R1YWxseSBjaGFuZ2VkIHRoZSBDU1MgdGV4dCwgd2UgY2FjaGUgdGhlXG4gICAgICAgICAgLy8gdHJhbnNmb3JtIG5hbWUgZm9yIGZ1dHVyZSB1c2U6XG4gICAgICAgICAgaWYgKGlucHV0ICE9PSBvdXRwdXQpIHtcbiAgICAgICAgICAgIGlucHV0ID0gb3V0cHV0O1xuICAgICAgICAgICAgcnVsZS5rZXlmcmFtZU5hbWVzVG9UcmFuc2Zvcm0ucHVzaChrZXlmcmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgYSBsaXN0IG9mIGtleWZyYW1lIG5hbWVzIHRoYXQgYXBwbHkgdG8gdGhpc1xuICAgICAgICAvLyBydWxlLCB3ZSBhcHBseSBvbmx5IHRob3NlIGtleWZyYW1lIG5hbWUgdHJhbnNmb3JtczpcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBydWxlLmtleWZyYW1lTmFtZXNUb1RyYW5zZm9ybS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIHRyYW5zZm9ybSA9IGtleWZyYW1lVHJhbnNmb3Jtc1tydWxlLmtleWZyYW1lTmFtZXNUb1RyYW5zZm9ybVtpXV07XG4gICAgICAgICAgaW5wdXQgPSB0cmFuc2Zvcm0oaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIG91dHB1dCA9IGlucHV0O1xuICAgICAgfVxuICAgIH1cbiAgICBydWxlWydjc3NUZXh0J10gPSBvdXRwdXQ7XG4gIH1cblxuICAvLyBUZXN0IGlmIHRoZSBydWxlcyBpbiB0aGVzZSBzdHlsZXMgbWF0Y2hlcyB0aGUgZ2l2ZW4gYGVsZW1lbnRgIGFuZCBpZiBzbyxcbiAgLy8gY29sbGVjdCBhbnkgY3VzdG9tIHByb3BlcnRpZXMgaW50byBgcHJvcHNgLlxuICAvKipcbiAgICogQHBhcmFtIHtTdHlsZU5vZGV9IHJ1bGVzXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICAgKi9cbiAgcHJvcGVydHlEYXRhRnJvbVN0eWxlcyhydWxlcywgZWxlbWVudCkge1xuICAgIGxldCBwcm9wcyA9IHt9O1xuICAgIC8vIGdlbmVyYXRlcyBhIHVuaXF1ZSBrZXkgZm9yIHRoZXNlIG1hdGNoZXNcbiAgICBsZXQgbyA9IFtdO1xuICAgIC8vIG5vdGU6IGFjdGl2ZSBydWxlcyBleGNsdWRlcyBub24tbWF0Y2hpbmcgQG1lZGlhIHJ1bGVzXG4gICAgU3R5bGVVdGlsLmZvckVhY2hSdWxlKFxuICAgICAgcnVsZXMsXG4gICAgICAocnVsZSkgPT4ge1xuICAgICAgICAvLyBUT0RPKHNvcnZlbGwpOiB3ZSBjb3VsZCB0cmltIHRoZSBzZXQgb2YgcnVsZXMgYXQgZGVjbGFyYXRpb25cbiAgICAgICAgLy8gdGltZSB0byBvbmx5IGluY2x1ZGUgb25lcyB0aGF0IGhhdmUgcHJvcGVydGllc1xuICAgICAgICBpZiAoIXJ1bGUucHJvcGVydHlJbmZvKSB7XG4gICAgICAgICAgdGhpcy5kZWNvcmF0ZVJ1bGUocnVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbWF0Y2ggZWxlbWVudCBhZ2FpbnN0IHRyYW5zZm9ybWVkU2VsZWN0b3I6IHNlbGVjdG9yIG1heSBjb250YWluXG4gICAgICAgIC8vIHVud2FudGVkIHVuaXF1aWZpY2F0aW9uIGFuZCBwYXJzZWRTZWxlY3RvciBkb2VzIG5vdCBkaXJlY3RseSBtYXRjaFxuICAgICAgICAvLyBmb3IgOmhvc3Qgc2VsZWN0b3JzLlxuICAgICAgICBsZXQgc2VsZWN0b3JUb01hdGNoID1cbiAgICAgICAgICBydWxlLnRyYW5zZm9ybWVkU2VsZWN0b3IgfHwgcnVsZVsncGFyc2VkU2VsZWN0b3InXTtcbiAgICAgICAgaWYgKGVsZW1lbnQgJiYgcnVsZS5wcm9wZXJ0eUluZm8ucHJvcGVydGllcyAmJiBzZWxlY3RvclRvTWF0Y2gpIHtcbiAgICAgICAgICBpZiAobWF0Y2hlc1NlbGVjdG9yLmNhbGwoZWxlbWVudCwgc2VsZWN0b3JUb01hdGNoKSkge1xuICAgICAgICAgICAgdGhpcy5jb2xsZWN0UHJvcGVydGllcyhydWxlLCBwcm9wcyk7XG4gICAgICAgICAgICAvLyBwcm9kdWNlIG51bWVyaWMga2V5IGZvciB0aGVzZSBtYXRjaGVzIGZvciBsb29rdXBcbiAgICAgICAgICAgIGFkZFRvQml0TWFzayhydWxlLmluZGV4LCBvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBudWxsLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgcmV0dXJuIHtwcm9wZXJ0aWVzOiBwcm9wcywga2V5OiBvfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IHNjb3BlXG4gICAqIEBwYXJhbSB7U3R5bGVOb2RlfSBydWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjc3NCdWlsZFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKE9iamVjdCl9IGNhbGxiYWNrXG4gICAqL1xuICB3aGVuSG9zdE9yUm9vdFJ1bGUoc2NvcGUsIHJ1bGUsIGNzc0J1aWxkLCBjYWxsYmFjaykge1xuICAgIGlmICghKC8qKiBAdHlwZSB7P30gKi8gKHJ1bGUucHJvcGVydHlJbmZvKSkpIHtcbiAgICAgIHRoaXMuZGVjb3JhdGVSdWxlKHJ1bGUpO1xuICAgIH1cbiAgICBpZiAoISgvKiogQHR5cGUgez99ICovIChydWxlLnByb3BlcnR5SW5mbykucHJvcGVydGllcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHtpcywgdHlwZUV4dGVuc2lvbn0gPSBTdHlsZVV0aWwuZ2V0SXNFeHRlbmRzKHNjb3BlKTtcbiAgICBsZXQgaG9zdFNjb3BlID0gaXNcbiAgICAgID8gU3R5bGVUcmFuc2Zvcm1lci5fY2FsY0hvc3RTY29wZShpcywgdHlwZUV4dGVuc2lvbilcbiAgICAgIDogJ2h0bWwnO1xuICAgIGxldCBwYXJzZWRTZWxlY3RvciA9IHJ1bGVbJ3BhcnNlZFNlbGVjdG9yJ107XG4gICAgbGV0IGlzUm9vdCA9IGNoZWNrUm9vdChob3N0U2NvcGUsIHBhcnNlZFNlbGVjdG9yKTtcbiAgICBsZXQgaXNIb3N0ID0gcGFyc2VkU2VsZWN0b3IuaW5kZXhPZignOmhvc3QnKSA9PT0gMCAmJiAhaXNSb290O1xuICAgIC8vIGJ1aWxkIGluZm8gaXMgZWl0aGVyIGluIHNjb3BlICh3aGVuIHNjb3BlIGlzIGFuIGVsZW1lbnQpIG9yIGluIHRoZSBzdHlsZVxuICAgIC8vIHdoZW4gc2NvcGUgaXMgdGhlIGRlZmF1bHQgc2NvcGU7IG5vdGU6IHRoaXMgYWxsb3dzIGRlZmF1bHQgc2NvcGUgdG8gaGF2ZVxuICAgIC8vIG1peGVkIG1vZGUgYnVpbHQgYW5kIHVuYnVpbHQgc3R5bGVzLlxuICAgIGlmIChjc3NCdWlsZCA9PT0gJ3NoYWR5Jykge1xuICAgICAgLy8gOnJvb3QgLT4geC1mb28gPiAqLngtZm9vIGZvciBlbGVtZW50cyBhbmQgaHRtbCBmb3IgY3VzdG9tLXN0eWxlXG4gICAgICBpc1Jvb3QgPVxuICAgICAgICBwYXJzZWRTZWxlY3RvciA9PT0gaG9zdFNjb3BlICsgJyA+ICouJyArIGhvc3RTY29wZSB8fFxuICAgICAgICBwYXJzZWRTZWxlY3Rvci5pbmRleE9mKCdodG1sJykgIT09IC0xO1xuICAgICAgLy8gOmhvc3QgLT4geC1mb28gZm9yIGVsZW1lbnRzLCBidXQgc3ViLXJ1bGVzIGhhdmUgLngtZm9vIGluIHRoZW1cbiAgICAgIGlzSG9zdCA9ICFpc1Jvb3QgJiYgcGFyc2VkU2VsZWN0b3IuaW5kZXhPZihob3N0U2NvcGUpID09PSAwO1xuICAgIH1cbiAgICBpZiAoIWlzUm9vdCAmJiAhaXNIb3N0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBzZWxlY3RvclRvTWF0Y2ggPSBob3N0U2NvcGU7XG4gICAgaWYgKGlzSG9zdCkge1xuICAgICAgLy8gbmVlZCB0byB0cmFuc2Zvcm0gOmhvc3QgYmVjYXVzZSBgOmhvc3RgIGRvZXMgbm90IHdvcmsgd2l0aCBgbWF0Y2hlc2BcbiAgICAgIGlmICghKC8qKiBAdHlwZSB7P30gKi8gKHJ1bGUudHJhbnNmb3JtZWRTZWxlY3RvcikpKSB7XG4gICAgICAgIC8vIHRyYW5zZm9ybSA6aG9zdCBpbnRvIGEgbWF0Y2hhYmxlIHNlbGVjdG9yXG4gICAgICAgIHJ1bGUudHJhbnNmb3JtZWRTZWxlY3RvciA9IFN0eWxlVHJhbnNmb3JtZXIuX3RyYW5zZm9ybVJ1bGVDc3MoXG4gICAgICAgICAgcnVsZSxcbiAgICAgICAgICBTdHlsZVRyYW5zZm9ybWVyLl90cmFuc2Zvcm1Db21wbGV4U2VsZWN0b3IsXG4gICAgICAgICAgU3R5bGVUcmFuc2Zvcm1lci5fY2FsY0VsZW1lbnRTY29wZShpcyksXG4gICAgICAgICAgaG9zdFNjb3BlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBzZWxlY3RvclRvTWF0Y2ggPVxuICAgICAgICAvKiogQHR5cGUgez99ICovIChydWxlLnRyYW5zZm9ybWVkU2VsZWN0b3IpIHx8IGhvc3RTY29wZTtcbiAgICB9XG4gICAgaWYgKGlzUm9vdCAmJiBob3N0U2NvcGUgPT09ICdodG1sJykge1xuICAgICAgc2VsZWN0b3JUb01hdGNoID1cbiAgICAgICAgLyoqIEB0eXBlIHs/fSAqLyAocnVsZS50cmFuc2Zvcm1lZFNlbGVjdG9yKSB8fFxuICAgICAgICAvKiogQHR5cGUgez99ICovIChydWxlLnBhcnNlZFNlbGVjdG9yKTtcbiAgICB9XG4gICAgY2FsbGJhY2soe1xuICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yVG9NYXRjaCxcbiAgICAgIGlzSG9zdDogaXNIb3N0LFxuICAgICAgaXNSb290OiBpc1Jvb3QsXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gc2NvcGVcbiAgICogQHBhcmFtIHtTdHlsZU5vZGV9IHJ1bGVzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjc3NCdWlsZFxuICAgKiBAcmV0dXJuIHshT2JqZWN0fVxuICAgKi9cbiAgaG9zdEFuZFJvb3RQcm9wZXJ0aWVzRm9yU2NvcGUoc2NvcGUsIHJ1bGVzLCBjc3NCdWlsZCkge1xuICAgIGxldCBob3N0UHJvcHMgPSB7fSxcbiAgICAgIHJvb3RQcm9wcyA9IHt9O1xuICAgIC8vIG5vdGU6IGFjdGl2ZSBydWxlcyBleGNsdWRlcyBub24tbWF0Y2hpbmcgQG1lZGlhIHJ1bGVzXG4gICAgU3R5bGVVdGlsLmZvckVhY2hSdWxlKFxuICAgICAgcnVsZXMsXG4gICAgICAocnVsZSkgPT4ge1xuICAgICAgICAvLyBpZiBzY29wZSBpcyBTdHlsZURlZmF1bHRzLCB1c2UgX2VsZW1lbnQgZm9yIG1hdGNoZXNTZWxlY3RvclxuICAgICAgICB0aGlzLndoZW5Ib3N0T3JSb290UnVsZShzY29wZSwgcnVsZSwgY3NzQnVpbGQsIChpbmZvKSA9PiB7XG4gICAgICAgICAgbGV0IGVsZW1lbnQgPSBzY29wZS5fZWxlbWVudCB8fCBzY29wZTtcbiAgICAgICAgICBpZiAobWF0Y2hlc1NlbGVjdG9yLmNhbGwoZWxlbWVudCwgaW5mby5zZWxlY3RvcikpIHtcbiAgICAgICAgICAgIGlmIChpbmZvLmlzSG9zdCkge1xuICAgICAgICAgICAgICB0aGlzLmNvbGxlY3RQcm9wZXJ0aWVzKHJ1bGUsIGhvc3RQcm9wcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmNvbGxlY3RQcm9wZXJ0aWVzKHJ1bGUsIHJvb3RQcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBudWxsLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgcmV0dXJuIHtyb290UHJvcHM6IHJvb3RQcm9wcywgaG9zdFByb3BzOiBob3N0UHJvcHN9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gc2NvcGVTZWxlY3RvclxuICAgKi9cbiAgdHJhbnNmb3JtU3R5bGVzKGVsZW1lbnQsIHByb3BlcnRpZXMsIHNjb3BlU2VsZWN0b3IpIHtcbiAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgbGV0IHtpcywgdHlwZUV4dGVuc2lvbn0gPSBTdHlsZVV0aWwuZ2V0SXNFeHRlbmRzKGVsZW1lbnQpO1xuICAgIGxldCBob3N0U2VsZWN0b3IgPSBTdHlsZVRyYW5zZm9ybWVyLl9jYWxjSG9zdFNjb3BlKGlzLCB0eXBlRXh0ZW5zaW9uKTtcbiAgICBsZXQgcnhIb3N0U2VsZWN0b3IgPSBlbGVtZW50LmV4dGVuZHNcbiAgICAgID8gJ1xcXFwnICsgaG9zdFNlbGVjdG9yLnNsaWNlKDAsIC0xKSArICdcXFxcXSdcbiAgICAgIDogaG9zdFNlbGVjdG9yO1xuICAgIGxldCBob3N0UnggPSBuZXcgUmVnRXhwKFJYLkhPU1RfUFJFRklYICsgcnhIb3N0U2VsZWN0b3IgKyBSWC5IT1NUX1NVRkZJWCk7XG4gICAgbGV0IHtzdHlsZVJ1bGVzOiBydWxlcywgY3NzQnVpbGR9ID0gU3R5bGVJbmZvLmdldChlbGVtZW50KTtcbiAgICBsZXQga2V5ZnJhbWVUcmFuc2Zvcm1zID0gdGhpcy5fZWxlbWVudEtleWZyYW1lVHJhbnNmb3JtcyhcbiAgICAgIGVsZW1lbnQsXG4gICAgICBydWxlcyxcbiAgICAgIHNjb3BlU2VsZWN0b3JcbiAgICApO1xuICAgIHJldHVybiBTdHlsZVRyYW5zZm9ybWVyLmVsZW1lbnRTdHlsZXMoXG4gICAgICBlbGVtZW50LFxuICAgICAgcnVsZXMsXG4gICAgICBmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICBzZWxmLmFwcGx5UHJvcGVydGllcyhydWxlLCBwcm9wZXJ0aWVzKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICFuYXRpdmVTaGFkb3cgJiZcbiAgICAgICAgICAhU3R5bGVVdGlsLmlzS2V5ZnJhbWVzU2VsZWN0b3IocnVsZSkgJiZcbiAgICAgICAgICBydWxlWydjc3NUZXh0J11cbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gTk9URToga2V5ZnJhbWUgdHJhbnNmb3JtcyBvbmx5IHNjb3BlIG11bmdlIGFuaW1hdGlvbiBuYW1lcywgc28gaXRcbiAgICAgICAgICAvLyBpcyBub3QgbmVjZXNzYXJ5IHRvIGFwcGx5IHRoZW0gaW4gU2hhZG93RE9NLlxuICAgICAgICAgIHNlbGYuYXBwbHlLZXlmcmFtZVRyYW5zZm9ybXMocnVsZSwga2V5ZnJhbWVUcmFuc2Zvcm1zKTtcbiAgICAgICAgICBzZWxmLl9zY29wZVNlbGVjdG9yKHJ1bGUsIGhvc3RSeCwgaG9zdFNlbGVjdG9yLCBzY29wZVNlbGVjdG9yKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNzc0J1aWxkXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAgICogQHBhcmFtIHtTdHlsZU5vZGV9IHJ1bGVzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzY29wZVNlbGVjdG9yXG4gICAqIEByZXR1cm4geyFPYmplY3R9XG4gICAqL1xuICBfZWxlbWVudEtleWZyYW1lVHJhbnNmb3JtcyhlbGVtZW50LCBydWxlcywgc2NvcGVTZWxlY3Rvcikge1xuICAgIGxldCBrZXlmcmFtZXNSdWxlcyA9IHJ1bGVzLl9rZXlmcmFtZXM7XG4gICAgbGV0IGtleWZyYW1lVHJhbnNmb3JtcyA9IHt9O1xuICAgIGlmICghbmF0aXZlU2hhZG93ICYmIGtleWZyYW1lc1J1bGVzKSB7XG4gICAgICAvLyBGb3Igbm9uLVNoYWRvd0RPTSwgd2UgdHJhbnNmb3JtIGFsbCBrbm93biBrZXlmcmFtZXMgcnVsZXMgaW5cbiAgICAgIC8vIGFkdmFuY2UgZm9yIHRoZSBjdXJyZW50IHNjb3BlLiBUaGlzIGFsbG93cyB1cyB0byBjYXRjaCBrZXlmcmFtZXNcbiAgICAgIC8vIHJ1bGVzIHRoYXQgYXBwZWFyIGFueXdoZXJlIGluIHRoZSBzdHlsZXNoZWV0OlxuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGkgPSAwLCBrZXlmcmFtZXNSdWxlID0ga2V5ZnJhbWVzUnVsZXNbaV07XG4gICAgICAgIGkgPCBrZXlmcmFtZXNSdWxlcy5sZW5ndGg7XG4gICAgICAgIGtleWZyYW1lc1J1bGUgPSBrZXlmcmFtZXNSdWxlc1srK2ldXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5fc2NvcGVLZXlmcmFtZXMoa2V5ZnJhbWVzUnVsZSwgc2NvcGVTZWxlY3Rvcik7XG4gICAgICAgIGtleWZyYW1lVHJhbnNmb3Jtc1tcbiAgICAgICAgICBrZXlmcmFtZXNSdWxlWydrZXlmcmFtZXNOYW1lJ11cbiAgICAgICAgXSA9IHRoaXMuX2tleWZyYW1lc1J1bGVUcmFuc2Zvcm1lcihrZXlmcmFtZXNSdWxlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGtleWZyYW1lVHJhbnNmb3JtcztcbiAgfVxuXG4gIC8vIEdlbmVyYXRlIGEgZmFjdG9yeSBmb3IgdHJhbnNmb3JtaW5nIGEgY2h1bmsgb2YgQ1NTIHRleHQgdG8gaGFuZGxlIGFcbiAgLy8gcGFydGljdWxhciBzY29wZWQga2V5ZnJhbWVzIHJ1bGUuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1N0eWxlTm9kZX0ga2V5ZnJhbWVzUnVsZVxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbihzdHJpbmcpOnN0cmluZ31cbiAgICovXG4gIF9rZXlmcmFtZXNSdWxlVHJhbnNmb3JtZXIoa2V5ZnJhbWVzUnVsZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoY3NzVGV4dCkge1xuICAgICAgcmV0dXJuIGNzc1RleHQucmVwbGFjZShcbiAgICAgICAgLyoqIEB0eXBlIHs/fSAqLyAoa2V5ZnJhbWVzUnVsZS5rZXlmcmFtZXNOYW1lUngpLFxuICAgICAgICAvKiogQHR5cGUgez99ICovIChrZXlmcmFtZXNSdWxlLnRyYW5zZm9ybWVkS2V5ZnJhbWVzTmFtZSlcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIGBAa2V5ZnJhbWVzYCBuYW1lcyB0byBiZSB1bmlxdWUgZm9yIHRoZSBjdXJyZW50IGhvc3QuXG4gICAqIEV4YW1wbGU6IEBrZXlmcmFtZXMgZm9vLWFuaW0gLT4gQGtleWZyYW1lcyBmb28tYW5pbS14LWZvby0wXG4gICAqXG4gICAqIEBwYXJhbSB7U3R5bGVOb2RlfSBydWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzY29wZUlkXG4gICAqL1xuICBfc2NvcGVLZXlmcmFtZXMocnVsZSwgc2NvcGVJZCkge1xuICAgIC8vIEFuaW1hdGlvbiBuYW1lcyBhcmUgb2YgdGhlIGZvcm0gW1xcdy1dLCBzbyBlbnN1cmUgdGhhdCB0aGUgbmFtZSByZWdleCBkb2VzIG5vdCBwYXJ0aWFsbHkgYXBwbHlcbiAgICAvLyB0byBzaW1pbGFybHkgbmFtZWQga2V5ZnJhbWUgbmFtZXMgYnkgY2hlY2tpbmcgZm9yIGEgd29yZCBib3VuZGFyeSBhdCB0aGUgYmVnaW5uaW5nIGFuZFxuICAgIC8vIGEgbm9uLXdvcmQgYm91bmRhcnkgb3IgYC1gIGF0IHRoZSBlbmQuXG4gICAgcnVsZS5rZXlmcmFtZXNOYW1lUnggPSBuZXcgUmVnRXhwKFxuICAgICAgYFxcXFxiJHtydWxlWydrZXlmcmFtZXNOYW1lJ119KD8hXFxcXEJ8LSlgLFxuICAgICAgJ2cnXG4gICAgKTtcbiAgICBydWxlLnRyYW5zZm9ybWVkS2V5ZnJhbWVzTmFtZSA9IHJ1bGVbJ2tleWZyYW1lc05hbWUnXSArICctJyArIHNjb3BlSWQ7XG4gICAgcnVsZS50cmFuc2Zvcm1lZFNlbGVjdG9yID1cbiAgICAgIC8qKiBAdHlwZSB7P30gKi8gKHJ1bGUudHJhbnNmb3JtZWRTZWxlY3RvcikgfHwgcnVsZVsnc2VsZWN0b3InXTtcbiAgICBydWxlWydzZWxlY3RvciddID0gLyoqIEB0eXBlIHs/fSAqLyAocnVsZS50cmFuc2Zvcm1lZFNlbGVjdG9yKS5yZXBsYWNlKFxuICAgICAgcnVsZVsna2V5ZnJhbWVzTmFtZSddLFxuICAgICAgcnVsZS50cmFuc2Zvcm1lZEtleWZyYW1lc05hbWVcbiAgICApO1xuICB9XG5cbiAgLy8gU3RyYXRlZ3k6IHggc2NvcGUgc2hpbSBhIHNlbGVjdG9yIGUuZy4gdG8gc2NvcGUgYC54LWZvby00MmAgKHZpYSBjbGFzc2VzKTpcbiAgLy8gbm9uLWhvc3Qgc2VsZWN0b3I6IC5hLngtZm9vIC0+IC54LWZvby00MiAuYS54LWZvb1xuICAvLyBob3N0IHNlbGVjdG9yOiB4LWZvby53aWRlIC0+IC54LWZvby00Mi53aWRlXG4gIC8vIG5vdGU6IHdlIHVzZSBvbmx5IHRoZSBzY29wZSBjbGFzcyAoLngtZm9vLTQyKSBhbmQgbm90IHRoZSBob3N0U2VsZWN0b3JcbiAgLy8gKHgtZm9vKSB0byBzY29wZSA6aG9zdCBydWxlczsgdGhpcyBoZWxwcyBtYWtlIHByb3BlcnR5IGhvc3QgcnVsZXNcbiAgLy8gaGF2ZSBsb3cgc3BlY2lmaWNpdHkuIFRoZXkgYXJlIG92ZXJyaWRlYWJsZSBieSBjbGFzcyBzZWxlY3RvcnMgYnV0LFxuICAvLyB1bmZvcnR1bmF0ZWx5LCBub3QgYnkgdHlwZSBzZWxlY3RvcnMgKGUuZy4gb3ZlcnJpZGluZyB2aWFcbiAgLy8gYC5zcGVjaWFsYCBpcyBvaywgYnV0IG5vdCBieSBgeC1mb29gKS5cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3R5bGVOb2RlfSBydWxlXG4gICAqIEBwYXJhbSB7UmVnRXhwfSBob3N0UnhcbiAgICogQHBhcmFtIHtzdHJpbmd9IGhvc3RTZWxlY3RvclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2NvcGVJZFxuICAgKi9cbiAgX3Njb3BlU2VsZWN0b3IocnVsZSwgaG9zdFJ4LCBob3N0U2VsZWN0b3IsIHNjb3BlSWQpIHtcbiAgICBydWxlLnRyYW5zZm9ybWVkU2VsZWN0b3IgPVxuICAgICAgLyoqIEB0eXBlIHs/fSAqLyAocnVsZS50cmFuc2Zvcm1lZFNlbGVjdG9yKSB8fCBydWxlWydzZWxlY3RvciddO1xuICAgIGxldCBzZWxlY3RvciA9IHJ1bGUudHJhbnNmb3JtZWRTZWxlY3RvcjtcbiAgICBsZXQgc2NvcGUgPSAnLicgKyBzY29wZUlkO1xuICAgIGxldCBwYXJ0cyA9IFN0eWxlVXRpbC5zcGxpdFNlbGVjdG9yTGlzdChzZWxlY3Rvcik7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBwYXJ0cy5sZW5ndGgsIHA7IGkgPCBsICYmIChwID0gcGFydHNbaV0pOyBpKyspIHtcbiAgICAgIHBhcnRzW2ldID0gcC5tYXRjaChob3N0UngpXG4gICAgICAgID8gcC5yZXBsYWNlKGhvc3RTZWxlY3Rvciwgc2NvcGUpXG4gICAgICAgIDogc2NvcGUgKyAnICcgKyBwO1xuICAgIH1cbiAgICBydWxlWydzZWxlY3RvciddID0gcGFydHMuam9pbignLCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9sZFxuICAgKi9cbiAgYXBwbHlFbGVtZW50U2NvcGVTZWxlY3RvcihlbGVtZW50LCBzZWxlY3Rvciwgb2xkKSB7XG4gICAgbGV0IGMgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJztcbiAgICBsZXQgdiA9IGM7XG4gICAgaWYgKG9sZCkge1xuICAgICAgdiA9IGMucmVwbGFjZShcbiAgICAgICAgbmV3IFJlZ0V4cCgnXFxcXHMqJyArIFhTQ09QRV9OQU1FICsgJ1xcXFxzKicgKyBvbGQgKyAnXFxcXHMqJywgJ2cnKSxcbiAgICAgICAgJyAnXG4gICAgICApO1xuICAgIH1cbiAgICB2ICs9ICh2ID8gJyAnIDogJycpICsgWFNDT1BFX05BTUUgKyAnICcgKyBzZWxlY3RvcjtcbiAgICBpZiAoYyAhPT0gdikge1xuICAgICAgU3R5bGVVdGlsLnNldEVsZW1lbnRDbGFzc1JhdyhlbGVtZW50LCB2KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JcbiAgICogQHBhcmFtIHtIVE1MU3R5bGVFbGVtZW50fSBzdHlsZVxuICAgKiBAcmV0dXJuIHtIVE1MU3R5bGVFbGVtZW50fVxuICAgKi9cbiAgYXBwbHlFbGVtZW50U3R5bGUoZWxlbWVudCwgcHJvcGVydGllcywgc2VsZWN0b3IsIHN0eWxlKSB7XG4gICAgLy8gY2FsY3VsYXRlIGNzc1RleHQgdG8gYXBwbHlcbiAgICBsZXQgY3NzVGV4dCA9IHN0eWxlXG4gICAgICA/IHN0eWxlLnRleHRDb250ZW50IHx8ICcnXG4gICAgICA6IHRoaXMudHJhbnNmb3JtU3R5bGVzKGVsZW1lbnQsIHByb3BlcnRpZXMsIHNlbGVjdG9yKTtcbiAgICAvLyBpZiBzaGFkeSBhbmQgd2UgaGF2ZSBhIGNhY2hlZCBzdHlsZSB0aGF0IGlzIG5vdCBzdHlsZSwgZGVjcmVtZW50XG4gICAgbGV0IHN0eWxlSW5mbyA9IFN0eWxlSW5mby5nZXQoZWxlbWVudCk7XG4gICAgbGV0IHMgPSBzdHlsZUluZm8uY3VzdG9tU3R5bGU7XG4gICAgaWYgKHMgJiYgIW5hdGl2ZVNoYWRvdyAmJiBzICE9PSBzdHlsZSkge1xuICAgICAgc1snX3VzZUNvdW50J10tLTtcbiAgICAgIGlmIChzWydfdXNlQ291bnQnXSA8PSAwICYmIHMucGFyZW50Tm9kZSkge1xuICAgICAgICBzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGFwcGx5IHN0eWxpbmcgYWx3YXlzIHVuZGVyIG5hdGl2ZSBvciBpZiB3ZSBnZW5lcmF0ZWQgc3R5bGVcbiAgICAvLyBvciB0aGUgY2FjaGVkIHN0eWxlIGlzIG5vdCBpbiBkb2N1bWVudCghKVxuICAgIGlmIChuYXRpdmVTaGFkb3cpIHtcbiAgICAgIC8vIHVwZGF0ZSBleGlzdGluZyBzdHlsZSBvbmx5IHVuZGVyIG5hdGl2ZVxuICAgICAgaWYgKHN0eWxlSW5mby5jdXN0b21TdHlsZSkge1xuICAgICAgICBzdHlsZUluZm8uY3VzdG9tU3R5bGUudGV4dENvbnRlbnQgPSBjc3NUZXh0O1xuICAgICAgICBzdHlsZSA9IHN0eWxlSW5mby5jdXN0b21TdHlsZTtcbiAgICAgICAgLy8gb3RoZXJ3aXNlLCBpZiB3ZSBoYXZlIGNzcyB0byBhcHBseSwgZG8gc29cbiAgICAgIH0gZWxzZSBpZiAoY3NzVGV4dCkge1xuICAgICAgICAvLyBhcHBseSBjc3MgYWZ0ZXIgdGhlIHNjb3BlIHN0eWxlIG9mIHRoZSBlbGVtZW50IHRvIGhlbHAgd2l0aFxuICAgICAgICAvLyBzdHlsZSBwcmVjZWRlbmNlIHJ1bGVzLlxuICAgICAgICBzdHlsZSA9IFN0eWxlVXRpbC5hcHBseUNzcyhcbiAgICAgICAgICBjc3NUZXh0LFxuICAgICAgICAgIHNlbGVjdG9yLFxuICAgICAgICAgIGVsZW1lbnQuc2hhZG93Um9vdCxcbiAgICAgICAgICBzdHlsZUluZm8ucGxhY2Vob2xkZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc2hhZHkgYW5kIG5vIGNhY2hlIGhpdFxuICAgICAgaWYgKCFzdHlsZSkge1xuICAgICAgICAvLyBhcHBseSBjc3MgYWZ0ZXIgdGhlIHNjb3BlIHN0eWxlIG9mIHRoZSBlbGVtZW50IHRvIGhlbHAgd2l0aFxuICAgICAgICAvLyBzdHlsZSBwcmVjZWRlbmNlIHJ1bGVzLlxuICAgICAgICBpZiAoY3NzVGV4dCkge1xuICAgICAgICAgIHN0eWxlID0gU3R5bGVVdGlsLmFwcGx5Q3NzKFxuICAgICAgICAgICAgY3NzVGV4dCxcbiAgICAgICAgICAgIHNlbGVjdG9yLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHN0eWxlSW5mby5wbGFjZWhvbGRlclxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2hhZHkgYW5kIGNhY2hlIGhpdCBidXQgbm90IGluIGRvY3VtZW50XG4gICAgICB9IGVsc2UgaWYgKCFzdHlsZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIGlmIChJU19JRSAmJiBjc3NUZXh0LmluZGV4T2YoJ0BtZWRpYScpID4gLTEpIHtcbiAgICAgICAgICAvLyBAbWVkaWEgcnVsZXMgbWF5IGJlIHN0YWxlIGluIElFIDEwIGFuZCAxMVxuICAgICAgICAgIC8vIHJlZnJlc2ggdGhlIHRleHQgY29udGVudCBvZiB0aGUgc3R5bGUgdG8gcmV2YWxpZGF0ZSB0aGVtLlxuICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gY3NzVGV4dDtcbiAgICAgICAgfVxuICAgICAgICBTdHlsZVV0aWwuYXBwbHlTdHlsZShzdHlsZSwgbnVsbCwgc3R5bGVJbmZvLnBsYWNlaG9sZGVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZW5zdXJlIHRoaXMgc3R5bGUgaXMgb3VyIGN1c3RvbSBzdHlsZSBhbmQgaW5jcmVtZW50IGl0cyB1c2UgY291bnQuXG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICBzdHlsZVsnX3VzZUNvdW50J10gPSBzdHlsZVsnX3VzZUNvdW50J10gfHwgMDtcbiAgICAgIC8vIGluY3JlbWVudCB1c2UgY291bnQgaWYgd2UgY2hhbmdlZCBzdHlsZXNcbiAgICAgIGlmIChzdHlsZUluZm8uY3VzdG9tU3R5bGUgIT0gc3R5bGUpIHtcbiAgICAgICAgc3R5bGVbJ191c2VDb3VudCddKys7XG4gICAgICB9XG4gICAgICBzdHlsZUluZm8uY3VzdG9tU3R5bGUgPSBzdHlsZTtcbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gc3R5bGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXNcbiAgICovXG4gIGFwcGx5Q3VzdG9tU3R5bGUoc3R5bGUsIHByb3BlcnRpZXMpIHtcbiAgICBsZXQgcnVsZXMgPSBTdHlsZVV0aWwucnVsZXNGb3JTdHlsZShcbiAgICAgIC8qKiBAdHlwZSB7SFRNTFN0eWxlRWxlbWVudH0gKi8gKHN0eWxlKVxuICAgICk7XG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIHN0eWxlLnRleHRDb250ZW50ID0gU3R5bGVVdGlsLnRvQ3NzVGV4dChydWxlcywgZnVuY3Rpb24gKFxuICAgICAgLyoqIFN0eWxlTm9kZSAqLyBydWxlXG4gICAgKSB7XG4gICAgICBsZXQgY3NzID0gKHJ1bGVbJ2Nzc1RleHQnXSA9IHJ1bGVbJ3BhcnNlZENzc1RleHQnXSk7XG4gICAgICBpZiAoXG4gICAgICAgIC8qKiBAdHlwZSB7P30gKi8gKHJ1bGUucHJvcGVydHlJbmZvKSAmJlxuICAgICAgICAvKiogQHR5cGUgez99ICovIChydWxlLnByb3BlcnR5SW5mbykuY3NzVGV4dFxuICAgICAgKSB7XG4gICAgICAgIC8vIHJlbW92ZSBwcm9wZXJ0eSBhc3NpZ25tZW50c1xuICAgICAgICAvLyBzbyBuZXh0IGZ1bmN0aW9uIGlzbid0IGNvbmZ1c2VkXG4gICAgICAgIC8vIE5PVEU6IHdlIGhhdmUgMyBjYXRlZ29yaWVzIG9mIGNzczpcbiAgICAgICAgLy8gKDEpIG5vcm1hbCBwcm9wZXJ0aWVzLFxuICAgICAgICAvLyAoMikgY3VzdG9tIHByb3BlcnR5IGFzc2lnbm1lbnRzICgtLWZvbzogcmVkOyksXG4gICAgICAgIC8vICgzKSBjdXN0b20gcHJvcGVydHkgdXNhZ2U6IGJvcmRlcjogdmFyKC0tZm9vKTsgQGFwcGx5KC0tZm9vKTtcbiAgICAgICAgLy8gSW4gZWxlbWVudHMsIDEgYW5kIDMgYXJlIHNlcGFyYXRlZCBmb3IgZWZmaWNpZW5jeTsgaGVyZSB0aGV5XG4gICAgICAgIC8vIGFyZSBub3QgYW5kIHRoaXMgbWFrZXMgdGhpcyBjYXNlIHVuaXF1ZS5cbiAgICAgICAgY3NzID0gcmVtb3ZlQ3VzdG9tUHJvcEFzc2lnbm1lbnQoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChjc3MpKTtcbiAgICAgICAgLy8gcmVwbGFjZSB3aXRoIHJlaWZpZWQgcHJvcGVydGllcywgc2NlbmFyaW8gaXMgc2FtZSBhcyBtaXhpblxuICAgICAgICBydWxlWydjc3NUZXh0J10gPSBzZWxmLnZhbHVlRm9yUHJvcGVydGllcyhjc3MsIHByb3BlcnRpZXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IG5cbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gYml0c1xuICovXG5mdW5jdGlvbiBhZGRUb0JpdE1hc2sobiwgYml0cykge1xuICBsZXQgbyA9IHBhcnNlSW50KG4gLyAzMiwgMTApO1xuICBsZXQgdiA9IDEgPDwgbiAlIDMyO1xuICBiaXRzW29dID0gKGJpdHNbb10gfHwgMCkgfCB2O1xufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgU3R5bGVQcm9wZXJ0aWVzKCk7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7U3R5bGVOb2RlfSBmcm9tICcuL2Nzcy1wYXJzZS5qcyc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5cbi8qKiBAY29uc3Qge3N0cmluZ30gKi9cbmNvbnN0IGluZm9LZXkgPSAnX19zdHlsZUluZm8nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdHlsZUluZm8ge1xuICAvKipcbiAgICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gICAqIEByZXR1cm4ge1N0eWxlSW5mb31cbiAgICovXG4gIHN0YXRpYyBnZXQobm9kZSkge1xuICAgIGlmIChub2RlKSB7XG4gICAgICByZXR1cm4gbm9kZVtpbmZvS2V5XTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0geyFFbGVtZW50fSBub2RlXG4gICAqIEBwYXJhbSB7U3R5bGVJbmZvfSBzdHlsZUluZm9cbiAgICogQHJldHVybiB7U3R5bGVJbmZvfVxuICAgKi9cbiAgc3RhdGljIHNldChub2RlLCBzdHlsZUluZm8pIHtcbiAgICBub2RlW2luZm9LZXldID0gc3R5bGVJbmZvO1xuICAgIHJldHVybiBzdHlsZUluZm87XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7U3R5bGVOb2RlfSBhc3RcbiAgICogQHBhcmFtIHtOb2RlPX0gcGxhY2Vob2xkZXJcbiAgICogQHBhcmFtIHtBcnJheTxzdHJpbmc+PX0gb3duU3R5bGVQcm9wZXJ0eU5hbWVzXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gZWxlbWVudE5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmc9fSB0eXBlRXh0ZW5zaW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gY3NzQnVpbGRcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIGFzdCxcbiAgICBwbGFjZWhvbGRlcixcbiAgICBvd25TdHlsZVByb3BlcnR5TmFtZXMsXG4gICAgZWxlbWVudE5hbWUsXG4gICAgdHlwZUV4dGVuc2lvbixcbiAgICBjc3NCdWlsZFxuICApIHtcbiAgICAvKiogQHR5cGUge1N0eWxlTm9kZX0gKi9cbiAgICB0aGlzLnN0eWxlUnVsZXMgPSBhc3QgfHwgbnVsbDtcbiAgICAvKiogQHR5cGUge05vZGV9ICovXG4gICAgdGhpcy5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyIHx8IG51bGw7XG4gICAgLyoqIEB0eXBlIHshQXJyYXk8c3RyaW5nPn0gKi9cbiAgICB0aGlzLm93blN0eWxlUHJvcGVydHlOYW1lcyA9IG93blN0eWxlUHJvcGVydHlOYW1lcyB8fCBbXTtcbiAgICAvKiogQHR5cGUge09iamVjdH0gKi9cbiAgICB0aGlzLm92ZXJyaWRlU3R5bGVQcm9wZXJ0aWVzID0gbnVsbDtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB0aGlzLmVsZW1lbnROYW1lID0gZWxlbWVudE5hbWUgfHwgJyc7XG4gICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgdGhpcy5jc3NCdWlsZCA9IGNzc0J1aWxkIHx8ICcnO1xuICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgIHRoaXMudHlwZUV4dGVuc2lvbiA9IHR5cGVFeHRlbnNpb24gfHwgJyc7XG4gICAgLyoqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fSAqL1xuICAgIHRoaXMuc3R5bGVQcm9wZXJ0aWVzID0gbnVsbDtcbiAgICAvKiogQHR5cGUgez9zdHJpbmd9ICovXG4gICAgdGhpcy5zY29wZVNlbGVjdG9yID0gbnVsbDtcbiAgICAvKiogQHR5cGUge0hUTUxTdHlsZUVsZW1lbnR9ICovXG4gICAgdGhpcy5jdXN0b21TdHlsZSA9IG51bGw7XG4gIH1cbiAgX2dldFN0eWxlUnVsZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3R5bGVSdWxlcztcbiAgfVxufVxuXG4vKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1hc3NpZ24gKi9cblN0eWxlSW5mby5wcm90b3R5cGVbJ19nZXRTdHlsZVJ1bGVzJ10gPSBTdHlsZUluZm8ucHJvdG90eXBlLl9nZXRTdHlsZVJ1bGVzO1xuIiwiLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge2FwcGx5U3R5bGVQbGFjZUhvbGRlcn0gZnJvbSAnLi9zdHlsZS11dGlsLmpzJztcbmltcG9ydCB7bmF0aXZlU2hhZG93LCBkaXNhYmxlUnVudGltZX0gZnJvbSAnLi9zdHlsZS1zZXR0aW5ncy5qcyc7XG5cbi8qKiBAdHlwZSB7IU9iamVjdDxzdHJpbmcsICFOb2RlPn0gKi9cbmNvbnN0IHBsYWNlaG9sZGVyTWFwID0ge307XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lXG4gKiBAcmV0dXJuIHtOb2RlfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGVQbGFjZWhvbGRlcihlbGVtZW50TmFtZSkge1xuICByZXR1cm4gcGxhY2Vob2xkZXJNYXBbZWxlbWVudE5hbWVdIHx8IG51bGw7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVTdHlsZVBsYWNlaG9sZGVyKGVsZW1lbnROYW1lKSB7XG4gIGlmICghcGxhY2Vob2xkZXJNYXBbZWxlbWVudE5hbWVdKSB7XG4gICAgcGxhY2Vob2xkZXJNYXBbZWxlbWVudE5hbWVdID0gYXBwbHlTdHlsZVBsYWNlSG9sZGVyKGVsZW1lbnROYW1lKTtcbiAgfVxufVxuXG4vKipcbiAqIEBjb25zdCB7Q3VzdG9tRWxlbWVudFJlZ2lzdHJ5fVxuICovXG5jb25zdCBjZSA9IHdpbmRvd1snY3VzdG9tRWxlbWVudHMnXTtcbmlmIChjZSAmJiAhbmF0aXZlU2hhZG93ICYmICFkaXNhYmxlUnVudGltZSkge1xuICAvKipcbiAgICogQGNvbnN0IHtmdW5jdGlvbih0aGlzOkN1c3RvbUVsZW1lbnRSZWdpc3RyeSwgc3RyaW5nLGZ1bmN0aW9uKG5ldzpIVE1MRWxlbWVudCkse2V4dGVuZHM6IHN0cmluZ309KX1cbiAgICovXG4gIGNvbnN0IG9yaWdEZWZpbmUgPSBjZVsnZGVmaW5lJ107XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ldzpIVE1MRWxlbWVudCl9IGNsYXp6XG4gICAqIEBwYXJhbSB7e2V4dGVuZHM6IHN0cmluZ309fSBvcHRpb25zXG4gICAqL1xuICBjb25zdCB3cmFwcGVkRGVmaW5lID0gKG5hbWUsIGNsYXp6LCBvcHRpb25zKSA9PiB7XG4gICAgZW5zdXJlU3R5bGVQbGFjZWhvbGRlcihuYW1lKTtcbiAgICBvcmlnRGVmaW5lLmNhbGwoXG4gICAgICAvKiogQHR5cGUgeyFDdXN0b21FbGVtZW50UmVnaXN0cnl9ICovIChjZSksXG4gICAgICBuYW1lLFxuICAgICAgY2xhenosXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgfTtcbiAgY2VbJ2RlZmluZSddID0gd3JhcHBlZERlZmluZTtcbn1cbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0eWxlQ2FjaGUge1xuICBjb25zdHJ1Y3Rvcih0eXBlTWF4ID0gMTAwKSB7XG4gICAgLy8gbWFwIGVsZW1lbnQgbmFtZSAtPiBbe3Byb3BlcnRpZXMsIHN0eWxlRWxlbWVudCwgc2NvcGVTZWxlY3Rvcn1dXG4gICAgdGhpcy5jYWNoZSA9IHt9O1xuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgIHRoaXMudHlwZU1heCA9IHR5cGVNYXg7XG4gIH1cblxuICBfdmFsaWRhdGUoY2FjaGVFbnRyeSwgcHJvcGVydGllcywgb3duUHJvcGVydHlOYW1lcykge1xuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IG93blByb3BlcnR5TmFtZXMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgbGV0IHBuID0gb3duUHJvcGVydHlOYW1lc1tpZHhdO1xuICAgICAgaWYgKGNhY2hlRW50cnkucHJvcGVydGllc1twbl0gIT09IHByb3BlcnRpZXNbcG5dKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzdG9yZSh0YWduYW1lLCBwcm9wZXJ0aWVzLCBzdHlsZUVsZW1lbnQsIHNjb3BlU2VsZWN0b3IpIHtcbiAgICBsZXQgbGlzdCA9IHRoaXMuY2FjaGVbdGFnbmFtZV0gfHwgW107XG4gICAgbGlzdC5wdXNoKHtwcm9wZXJ0aWVzLCBzdHlsZUVsZW1lbnQsIHNjb3BlU2VsZWN0b3J9KTtcbiAgICBpZiAobGlzdC5sZW5ndGggPiB0aGlzLnR5cGVNYXgpIHtcbiAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICB9XG4gICAgdGhpcy5jYWNoZVt0YWduYW1lXSA9IGxpc3Q7XG4gIH1cblxuICBmZXRjaCh0YWduYW1lLCBwcm9wZXJ0aWVzLCBvd25Qcm9wZXJ0eU5hbWVzKSB7XG4gICAgbGV0IGxpc3QgPSB0aGlzLmNhY2hlW3RhZ25hbWVdO1xuICAgIGlmICghbGlzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyByZXZlcnNlIGxpc3QgZm9yIG1vc3QtcmVjZW50IGxvb2t1cHNcbiAgICBmb3IgKGxldCBpZHggPSBsaXN0Lmxlbmd0aCAtIDE7IGlkeCA+PSAwOyBpZHgtLSkge1xuICAgICAgbGV0IGVudHJ5ID0gbGlzdFtpZHhdO1xuICAgICAgaWYgKHRoaXMuX3ZhbGlkYXRlKGVudHJ5LCBwcm9wZXJ0aWVzLCBvd25Qcm9wZXJ0eU5hbWVzKSkge1xuICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQGNvbnN0IHshT2JqZWN0PHN0cmluZywgIUhUTUxUZW1wbGF0ZUVsZW1lbnQ+fVxuICovXG5jb25zdCB0ZW1wbGF0ZU1hcCA9IHt9O1xuZXhwb3J0IGRlZmF1bHQgdGVtcGxhdGVNYXA7XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgdGVtcGxhdGVNYXAgZnJvbSAnLi90ZW1wbGF0ZS1tYXAuanMnO1xuaW1wb3J0IHtTdHlsZU5vZGV9IGZyb20gJy4vY3NzLXBhcnNlLmpzJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcblxuLypcbiAqIFV0aWxpdGllcyBmb3IgaGFuZGxpbmcgaW52YWxpZGF0aW5nIGFwcGx5LXNoaW0gbWl4aW5zIGZvciBhIGdpdmVuIHRlbXBsYXRlLlxuICpcbiAqIFRoZSBpbnZhbGlkYXRpb24gc3RyYXRlZ3kgaW52b2x2ZXMga2VlcGluZyB0cmFjayBvZiB0aGUgXCJjdXJyZW50XCIgdmVyc2lvbiBvZiBhIHRlbXBsYXRlJ3MgbWl4aW5zLCBhbmQgdXBkYXRpbmcgdGhhdCBjb3VudCB3aGVuIGEgbWl4aW4gaXMgaW52YWxpZGF0ZWQuXG4gKiBUaGUgdGVtcGxhdGVcbiAqL1xuXG4vKiogQGNvbnN0IHtzdHJpbmd9ICovXG5jb25zdCBDVVJSRU5UX1ZFUlNJT04gPSAnX2FwcGx5U2hpbUN1cnJlbnRWZXJzaW9uJztcblxuLyoqIEBjb25zdCB7c3RyaW5nfSAqL1xuY29uc3QgTkVYVF9WRVJTSU9OID0gJ19hcHBseVNoaW1OZXh0VmVyc2lvbic7XG5cbi8qKiBAY29uc3Qge3N0cmluZ30gKi9cbmNvbnN0IFZBTElEQVRJTkdfVkVSU0lPTiA9ICdfYXBwbHlTaGltVmFsaWRhdGluZ1ZlcnNpb24nO1xuXG4vKipcbiAqIEBjb25zdCB7UHJvbWlzZTx2b2lkPn1cbiAqL1xuY29uc3QgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52YWxpZGF0ZShlbGVtZW50TmFtZSkge1xuICBsZXQgdGVtcGxhdGUgPSB0ZW1wbGF0ZU1hcFtlbGVtZW50TmFtZV07XG4gIGlmICh0ZW1wbGF0ZSkge1xuICAgIGludmFsaWRhdGVUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMgdG8gbWFyayBhIHRlbXBsYXRlIGludmFsaWRcbiAqIGFuZCBzaWduYWwgdGhhdCB0aGUgc3R5bGUgaW5zaWRlIG11c3QgYmUgcmVnZW5lcmF0ZWQuXG4gKlxuICogVXNlIGBzdGFydFZhbGlkYXRpbmdUZW1wbGF0ZWAgdG8gYmVnaW4gYW4gYXN5bmNocm9ub3VzIHZhbGlkYXRpb24gY3ljbGUuXG4gKiBEdXJpbmcgdGhhdCBjeWNsZSwgY2FsbCBgdGVtcGxhdGVJc1ZhbGlkYXRpbmdgIHRvIHNlZSBpZiB0aGUgdGVtcGxhdGUgbXVzdFxuICogYmUgcmV2YWxpZGF0ZWRcbiAqIEBwYXJhbSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludmFsaWRhdGVUZW1wbGF0ZSh0ZW1wbGF0ZSkge1xuICAvLyBkZWZhdWx0IHRoZSBjdXJyZW50IHZlcnNpb24gdG8gMFxuICB0ZW1wbGF0ZVtDVVJSRU5UX1ZFUlNJT05dID0gdGVtcGxhdGVbQ1VSUkVOVF9WRVJTSU9OXSB8fCAwO1xuICAvLyBlbnN1cmUgdGhlIFwidmFsaWRhdGluZyBmb3JcIiBmbGFnIGV4aXN0c1xuICB0ZW1wbGF0ZVtWQUxJREFUSU5HX1ZFUlNJT05dID0gdGVtcGxhdGVbVkFMSURBVElOR19WRVJTSU9OXSB8fCAwO1xuICAvLyBpbmNyZW1lbnQgdGhlIG5leHQgdmVyc2lvblxuICB0ZW1wbGF0ZVtORVhUX1ZFUlNJT05dID0gKHRlbXBsYXRlW05FWFRfVkVSU0lPTl0gfHwgMCkgKyAxO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWQoZWxlbWVudE5hbWUpIHtcbiAgbGV0IHRlbXBsYXRlID0gdGVtcGxhdGVNYXBbZWxlbWVudE5hbWVdO1xuICBpZiAodGVtcGxhdGUpIHtcbiAgICByZXR1cm4gdGVtcGxhdGVJc1ZhbGlkKHRlbXBsYXRlKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGVJc1ZhbGlkKHRlbXBsYXRlKSB7XG4gIHJldHVybiB0ZW1wbGF0ZVtDVVJSRU5UX1ZFUlNJT05dID09PSB0ZW1wbGF0ZVtORVhUX1ZFUlNJT05dO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRhdGluZyhlbGVtZW50TmFtZSkge1xuICBsZXQgdGVtcGxhdGUgPSB0ZW1wbGF0ZU1hcFtlbGVtZW50TmFtZV07XG4gIGlmICh0ZW1wbGF0ZSkge1xuICAgIHJldHVybiB0ZW1wbGF0ZUlzVmFsaWRhdGluZyh0ZW1wbGF0ZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgdGVtcGxhdGUgaXMgY3VycmVudGx5IGludmFsaWQgYW5kIGBzdGFydFZhbGlkYXRpbmdgIGhhcyBiZWVuIGNhbGxlZCBzaW5jZSB0aGUgbGFzdCBpbnZhbGlkYXRpb24uXG4gKiBJZiBmYWxzZSwgdGhlIHRlbXBsYXRlIG11c3QgYmUgdmFsaWRhdGVkLlxuICogQHBhcmFtIHtIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRlbXBsYXRlSXNWYWxpZGF0aW5nKHRlbXBsYXRlKSB7XG4gIHJldHVybiAoXG4gICAgIXRlbXBsYXRlSXNWYWxpZCh0ZW1wbGF0ZSkgJiZcbiAgICB0ZW1wbGF0ZVtWQUxJREFUSU5HX1ZFUlNJT05dID09PSB0ZW1wbGF0ZVtORVhUX1ZFUlNJT05dXG4gICk7XG59XG5cbi8qKlxuICogdGhlIHRlbXBsYXRlIGlzIG1hcmtlZCBhcyBgdmFsaWRhdGluZ2AgZm9yIG9uZSBtaWNyb3Rhc2sgc28gdGhhdCBhbGwgaW5zdGFuY2VzXG4gKiBmb3VuZCBpbiB0aGUgdHJlZSBjcmF3bCBvZiBgYXBwbHlTdHlsZWAgd2lsbCB1cGRhdGUgdGhlbXNlbHZlcyxcbiAqIGJ1dCB0aGUgdGVtcGxhdGUgd2lsbCBvbmx5IGJlIHVwZGF0ZWQgb25jZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRWYWxpZGF0aW5nKGVsZW1lbnROYW1lKSB7XG4gIGxldCB0ZW1wbGF0ZSA9IHRlbXBsYXRlTWFwW2VsZW1lbnROYW1lXTtcbiAgc3RhcnRWYWxpZGF0aW5nVGVtcGxhdGUodGVtcGxhdGUpO1xufVxuXG4vKipcbiAqIEJlZ2luIGFuIGFzeW5jaHJvbm91cyBpbnZhbGlkYXRpb24gY3ljbGUuXG4gKiBUaGlzIHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgZXZlcnkgdmFsaWRhdGlvbiBvZiBhIHRlbXBsYXRlXG4gKlxuICogQWZ0ZXIgb25lIG1pY3JvdGFzaywgdGhlIHRlbXBsYXRlIHdpbGwgYmUgbWFya2VkIGFzIHZhbGlkIHVudGlsIHRoZSBuZXh0IGNhbGwgdG8gYGludmFsaWRhdGVUZW1wbGF0ZWBcbiAqIEBwYXJhbSB7SFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0VmFsaWRhdGluZ1RlbXBsYXRlKHRlbXBsYXRlKSB7XG4gIC8vIHJlbWVtYmVyIHRoYXQgdGhlIGN1cnJlbnQgXCJuZXh0IHZlcnNpb25cIiBpcyB0aGUgcmVhc29uIGZvciB0aGlzIHZhbGlkYXRpb24gY3ljbGVcbiAgdGVtcGxhdGVbVkFMSURBVElOR19WRVJTSU9OXSA9IHRlbXBsYXRlW05FWFRfVkVSU0lPTl07XG4gIC8vIGhvd2V2ZXIsIHRoZXJlIG9ubHkgbmVlZHMgdG8gYmUgb25lIGFzeW5jIHRhc2sgdG8gY2xlYXIgdGhlIGNvdW50ZXJzXG4gIGlmICghdGVtcGxhdGUuX3ZhbGlkYXRpbmcpIHtcbiAgICB0ZW1wbGF0ZS5fdmFsaWRhdGluZyA9IHRydWU7XG4gICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN5bmMgdGhlIGN1cnJlbnQgdmVyc2lvbiB0byBsZXQgZnV0dXJlIGludmFsaWRhdGlvbnMgY2F1c2UgYSByZWZyZXNoIGN5Y2xlXG4gICAgICB0ZW1wbGF0ZVtDVVJSRU5UX1ZFUlNJT05dID0gdGVtcGxhdGVbTkVYVF9WRVJTSU9OXTtcbiAgICAgIHRlbXBsYXRlLl92YWxpZGF0aW5nID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gZWxlbWVudHNBcmVJbnZhbGlkKCkge1xuICBmb3IgKGxldCBlbGVtZW50TmFtZSBpbiB0ZW1wbGF0ZU1hcCkge1xuICAgIGxldCB0ZW1wbGF0ZSA9IHRlbXBsYXRlTWFwW2VsZW1lbnROYW1lXTtcbiAgICBpZiAoIXRlbXBsYXRlSXNWYWxpZCh0ZW1wbGF0ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7TUlYSU5fTUFUQ0gsIFZBUl9BU1NJR059IGZyb20gJy4vY29tbW9uLXJlZ2V4LmpzJztcblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0PX0gcHJvcGVydGllc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlTmF0aXZlUHJvcGVydGllcyhlbGVtZW50LCBwcm9wZXJ0aWVzKSB7XG4gIC8vIHJlbW92ZSBwcmV2aW91cyBwcm9wZXJ0aWVzXG4gIGZvciAobGV0IHAgaW4gcHJvcGVydGllcykge1xuICAgIC8vIE5PVEU6IGZvciBiYyB3aXRoIHNoaW0sIGRvbid0IGFwcGx5IG51bGwgdmFsdWVzLlxuICAgIGlmIChwID09PSBudWxsKSB7XG4gICAgICBlbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KHAsIHByb3BlcnRpZXNbcF0pO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlVmFsdWUoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgLyoqXG4gICAqIEBjb25zdCB7c3RyaW5nfVxuICAgKi9cbiAgY29uc3QgdmFsdWUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5KTtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiAnJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWUudHJpbSgpO1xuICB9XG59XG5cbi8qKlxuICogcmV0dXJuIHRydWUgaWYgYGNzc1RleHRgIGNvbnRhaW5zIGEgbWl4aW4gZGVmaW5pdGlvbiBvciBjb25zdW1wdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IGNzc1RleHRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RNaXhpbihjc3NUZXh0KSB7XG4gIGNvbnN0IGhhcyA9IE1JWElOX01BVENILnRlc3QoY3NzVGV4dCkgfHwgVkFSX0FTU0lHTi50ZXN0KGNzc1RleHQpO1xuICAvLyByZXNldCBzdGF0ZSBvZiB0aGUgcmVnZXhlc1xuICBNSVhJTl9NQVRDSC5sYXN0SW5kZXggPSAwO1xuICBWQVJfQVNTSUdOLmxhc3RJbmRleCA9IDA7XG4gIHJldHVybiBoYXM7XG59XG4iLCIvKipcbkBsaWNlbnNlXG5Db3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbnN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBTY29waW5nU2hpbSBmcm9tICcuLi9zcmMvc2NvcGluZy1zaGltLmpzJztcbi8vIHByZXR0aWVyLWlnbm9yZVxuaW1wb3J0IHtuYXRpdmVDc3NWYXJpYWJsZXMsIG5hdGl2ZVNoYWRvdywgY3NzQnVpbGQsIGRpc2FibGVSdW50aW1lfSBmcm9tICcuLi9zcmMvc3R5bGUtc2V0dGluZ3MuanMnO1xuXG4vKiogQGNvbnN0IHtTY29waW5nU2hpbX0gKi9cbmNvbnN0IHNjb3BpbmdTaGltID0gbmV3IFNjb3BpbmdTaGltKCk7XG5cbmxldCBBcHBseVNoaW0sIEN1c3RvbVN0eWxlSW50ZXJmYWNlO1xuXG5pZiAod2luZG93WydTaGFkeUNTUyddKSB7XG4gIEFwcGx5U2hpbSA9IHdpbmRvd1snU2hhZHlDU1MnXVsnQXBwbHlTaGltJ107XG4gIEN1c3RvbVN0eWxlSW50ZXJmYWNlID0gd2luZG93WydTaGFkeUNTUyddWydDdXN0b21TdHlsZUludGVyZmFjZSddO1xufVxuXG53aW5kb3cuU2hhZHlDU1MgPSB7XG4gIFNjb3BpbmdTaGltOiBzY29waW5nU2hpbSxcbiAgLyoqXG4gICAqIEBwYXJhbSB7IUhUTUxUZW1wbGF0ZUVsZW1lbnR9IHRlbXBsYXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbGVtZW50TmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZz19IGVsZW1lbnRFeHRlbmRzXG4gICAqL1xuICBwcmVwYXJlVGVtcGxhdGUodGVtcGxhdGUsIGVsZW1lbnROYW1lLCBlbGVtZW50RXh0ZW5kcykge1xuICAgIHNjb3BpbmdTaGltLmZsdXNoQ3VzdG9tU3R5bGVzKCk7XG4gICAgc2NvcGluZ1NoaW0ucHJlcGFyZVRlbXBsYXRlKHRlbXBsYXRlLCBlbGVtZW50TmFtZSwgZWxlbWVudEV4dGVuZHMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyFIVE1MVGVtcGxhdGVFbGVtZW50fSB0ZW1wbGF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZWxlbWVudE5hbWVcbiAgICovXG4gIHByZXBhcmVUZW1wbGF0ZURvbSh0ZW1wbGF0ZSwgZWxlbWVudE5hbWUpIHtcbiAgICBzY29waW5nU2hpbS5wcmVwYXJlVGVtcGxhdGVEb20odGVtcGxhdGUsIGVsZW1lbnROYW1lKTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHshSFRNTFRlbXBsYXRlRWxlbWVudH0gdGVtcGxhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVsZW1lbnROYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gZWxlbWVudEV4dGVuZHNcbiAgICovXG4gIHByZXBhcmVUZW1wbGF0ZVN0eWxlcyh0ZW1wbGF0ZSwgZWxlbWVudE5hbWUsIGVsZW1lbnRFeHRlbmRzKSB7XG4gICAgc2NvcGluZ1NoaW0uZmx1c2hDdXN0b21TdHlsZXMoKTtcbiAgICBzY29waW5nU2hpbS5wcmVwYXJlVGVtcGxhdGVTdHlsZXModGVtcGxhdGUsIGVsZW1lbnROYW1lLCBlbGVtZW50RXh0ZW5kcyk7XG4gIH0sXG4gIC8qKlxuICAgKiBAcGFyYW0geyFIVE1MRWxlbWVudH0gZWxlbWVudFxuICAgKiBAcGFyYW0ge09iamVjdD19IHByb3BlcnRpZXNcbiAgICovXG4gIHN0eWxlU3VidHJlZShlbGVtZW50LCBwcm9wZXJ0aWVzKSB7XG4gICAgc2NvcGluZ1NoaW0uZmx1c2hDdXN0b21TdHlsZXMoKTtcbiAgICBzY29waW5nU2hpbS5zdHlsZVN1YnRyZWUoZWxlbWVudCwgcHJvcGVydGllcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IUhUTUxFbGVtZW50fSBlbGVtZW50XG4gICAqL1xuICBzdHlsZUVsZW1lbnQoZWxlbWVudCkge1xuICAgIHNjb3BpbmdTaGltLmZsdXNoQ3VzdG9tU3R5bGVzKCk7XG4gICAgc2NvcGluZ1NoaW0uc3R5bGVFbGVtZW50KGVsZW1lbnQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdD19IHByb3BlcnRpZXNcbiAgICovXG4gIHN0eWxlRG9jdW1lbnQocHJvcGVydGllcykge1xuICAgIHNjb3BpbmdTaGltLmZsdXNoQ3VzdG9tU3R5bGVzKCk7XG4gICAgc2NvcGluZ1NoaW0uc3R5bGVEb2N1bWVudChwcm9wZXJ0aWVzKTtcbiAgfSxcblxuICBmbHVzaEN1c3RvbVN0eWxlcygpIHtcbiAgICBzY29waW5nU2hpbS5mbHVzaEN1c3RvbVN0eWxlcygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldENvbXB1dGVkU3R5bGVWYWx1ZShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICAgIHJldHVybiBzY29waW5nU2hpbS5nZXRDb21wdXRlZFN0eWxlVmFsdWUoZWxlbWVudCwgcHJvcGVydHkpO1xuICB9LFxuXG4gIG5hdGl2ZUNzczogbmF0aXZlQ3NzVmFyaWFibGVzLFxuXG4gIG5hdGl2ZVNoYWRvdzogbmF0aXZlU2hhZG93LFxuXG4gIGNzc0J1aWxkOiBjc3NCdWlsZCxcblxuICBkaXNhYmxlUnVudGltZTogZGlzYWJsZVJ1bnRpbWUsXG59O1xuXG5pZiAoQXBwbHlTaGltKSB7XG4gIHdpbmRvdy5TaGFkeUNTUy5BcHBseVNoaW0gPSBBcHBseVNoaW07XG59XG5cbmlmIChDdXN0b21TdHlsZUludGVyZmFjZSkge1xuICB3aW5kb3cuU2hhZHlDU1MuQ3VzdG9tU3R5bGVJbnRlcmZhY2UgPSBDdXN0b21TdHlsZUludGVyZmFjZTtcbn1cbiIsIi8qIEFueSBjb3B5cmlnaHQgaXMgZGVkaWNhdGVkIHRvIHRoZSBQdWJsaWMgRG9tYWluLlxuICogaHR0cDovL2NyZWF0aXZlY29tbW9ucy5vcmcvcHVibGljZG9tYWluL3plcm8vMS4wLyAqL1xuXG4vKiogQHR5cGUge2Jvb2xlYW58dW5kZWZpbmVkfSAqL1xuV2luZG93LnByb3RvdHlwZS5mb3JjZUpVUkwgPSBmYWxzZTtcblxuKGZ1bmN0aW9uIChzY29wZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gZmVhdHVyZSBkZXRlY3QgZm9yIFVSTCBjb25zdHJ1Y3RvclxuICB2YXIgaGFzV29ya2luZ1VybCA9IGZhbHNlO1xuICBpZiAoIXNjb3BlLmZvcmNlSlVSTCkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgdSA9IG5ldyBVUkwoJ2InLCAnaHR0cDovL2EnKTtcbiAgICAgIHUucGF0aG5hbWUgPSAnYyUyMGQnO1xuICAgICAgaGFzV29ya2luZ1VybCA9IHUuaHJlZiA9PT0gJ2h0dHA6Ly9hL2MlMjBkJztcbiAgICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gIH1cblxuICBpZiAoaGFzV29ya2luZ1VybCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciByZWxhdGl2ZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJlbGF0aXZlWydmdHAnXSA9IDIxO1xuICByZWxhdGl2ZVsnZmlsZSddID0gMDtcbiAgcmVsYXRpdmVbJ2dvcGhlciddID0gNzA7XG4gIHJlbGF0aXZlWydodHRwJ10gPSA4MDtcbiAgcmVsYXRpdmVbJ2h0dHBzJ10gPSA0NDM7XG4gIHJlbGF0aXZlWyd3cyddID0gODA7XG4gIHJlbGF0aXZlWyd3c3MnXSA9IDQ0MztcblxuICB2YXIgcmVsYXRpdmVQYXRoRG90TWFwcGluZyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJlbGF0aXZlUGF0aERvdE1hcHBpbmdbJyUyZSddID0gJy4nO1xuICByZWxhdGl2ZVBhdGhEb3RNYXBwaW5nWycuJTJlJ10gPSAnLi4nO1xuICByZWxhdGl2ZVBhdGhEb3RNYXBwaW5nWyclMmUuJ10gPSAnLi4nO1xuICByZWxhdGl2ZVBhdGhEb3RNYXBwaW5nWyclMmUlMmUnXSA9ICcuLic7XG5cbiAgZnVuY3Rpb24gaXNSZWxhdGl2ZVNjaGVtZShzY2hlbWUpIHtcbiAgICByZXR1cm4gcmVsYXRpdmVbc2NoZW1lXSAhPT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52YWxpZCgpIHtcbiAgICBjbGVhci5jYWxsKHRoaXMpO1xuICAgIHRoaXMuX2lzSW52YWxpZCA9IHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBJRE5BVG9BU0NJSShoKSB7XG4gICAgaWYgKCcnID09IGgpIHtcbiAgICAgIGludmFsaWQuY2FsbCh0aGlzKTtcbiAgICB9XG4gICAgLy8gWFhYXG4gICAgcmV0dXJuIGgudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlcmNlbnRFc2NhcGUoYykge1xuICAgIHZhciB1bmljb2RlID0gYy5jaGFyQ29kZUF0KDApO1xuICAgIGlmIChcbiAgICAgIHVuaWNvZGUgPiAweDIwICYmXG4gICAgICB1bmljb2RlIDwgMHg3ZiAmJlxuICAgICAgLy8gXCIgIyA8ID4gPyBgXG4gICAgICBbMHgyMiwgMHgyMywgMHgzYywgMHgzZSwgMHgzZiwgMHg2MF0uaW5kZXhPZih1bmljb2RlKSA9PSAtMVxuICAgICkge1xuICAgICAgcmV0dXJuIGM7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoYyk7XG4gIH1cblxuICBmdW5jdGlvbiBwZXJjZW50RXNjYXBlUXVlcnkoYykge1xuICAgIC8vIFhYWCBUaGlzIGFjdHVhbGx5IG5lZWRzIHRvIGVuY29kZSBjIHVzaW5nIGVuY29kaW5nIGFuZCB0aGVuXG4gICAgLy8gY29udmVydCB0aGUgYnl0ZXMgb25lLWJ5LW9uZS5cblxuICAgIHZhciB1bmljb2RlID0gYy5jaGFyQ29kZUF0KDApO1xuICAgIGlmIChcbiAgICAgIHVuaWNvZGUgPiAweDIwICYmXG4gICAgICB1bmljb2RlIDwgMHg3ZiAmJlxuICAgICAgLy8gXCIgIyA8ID4gYCAoZG8gbm90IGVzY2FwZSAnPycpXG4gICAgICBbMHgyMiwgMHgyMywgMHgzYywgMHgzZSwgMHg2MF0uaW5kZXhPZih1bmljb2RlKSA9PSAtMVxuICAgICkge1xuICAgICAgcmV0dXJuIGM7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoYyk7XG4gIH1cblxuICB2YXIgRU9GID0gdW5kZWZpbmVkLFxuICAgIEFMUEhBID0gL1thLXpBLVpdLyxcbiAgICBBTFBIQU5VTUVSSUMgPSAvW2EtekEtWjAtOStcXC0uXS87XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7IXN0cmluZ30gaW5wdXRcbiAgICogQHBhcmFtIHs/c3RyaW5nPX0gc3RhdGVPdmVycmlkZVxuICAgKiBAcGFyYW0geyhVUkx8c3RyaW5nKT19IGJhc2VcbiAgICovXG4gIGZ1bmN0aW9uIHBhcnNlKGlucHV0LCBzdGF0ZU92ZXJyaWRlLCBiYXNlKSB7XG4gICAgZnVuY3Rpb24gZXJyKG1lc3NhZ2UpIHtcbiAgICAgIGVycm9ycy5wdXNoKG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHZhciBzdGF0ZSA9IHN0YXRlT3ZlcnJpZGUgfHwgJ3NjaGVtZSBzdGFydCcsXG4gICAgICBjdXJzb3IgPSAwLFxuICAgICAgYnVmZmVyID0gJycsXG4gICAgICBzZWVuQXQgPSBmYWxzZSxcbiAgICAgIHNlZW5CcmFja2V0ID0gZmFsc2UsXG4gICAgICBlcnJvcnMgPSBbXTtcblxuICAgIGxvb3A6IHdoaWxlIChcbiAgICAgIChpbnB1dFtjdXJzb3IgLSAxXSAhPSBFT0YgfHwgY3Vyc29yID09IDApICYmXG4gICAgICAhdGhpcy5faXNJbnZhbGlkXG4gICAgKSB7XG4gICAgICB2YXIgYyA9IGlucHV0W2N1cnNvcl07XG4gICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgIGNhc2UgJ3NjaGVtZSBzdGFydCc6XG4gICAgICAgICAgaWYgKGMgJiYgQUxQSEEudGVzdChjKSkge1xuICAgICAgICAgICAgYnVmZmVyICs9IGMudG9Mb3dlckNhc2UoKTsgLy8gQVNDSUktc2FmZVxuICAgICAgICAgICAgc3RhdGUgPSAnc2NoZW1lJztcbiAgICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gJ25vIHNjaGVtZSc7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXJyKCdJbnZhbGlkIHNjaGVtZS4nKTtcbiAgICAgICAgICAgIGJyZWFrIGxvb3A7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3NjaGVtZSc6XG4gICAgICAgICAgaWYgKGMgJiYgQUxQSEFOVU1FUklDLnRlc3QoYykpIHtcbiAgICAgICAgICAgIGJ1ZmZlciArPSBjLnRvTG93ZXJDYXNlKCk7IC8vIEFTQ0lJLXNhZmVcbiAgICAgICAgICB9IGVsc2UgaWYgKCc6JyA9PSBjKSB7XG4gICAgICAgICAgICB0aGlzLl9zY2hlbWUgPSBidWZmZXI7XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSB7XG4gICAgICAgICAgICAgIGJyZWFrIGxvb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNSZWxhdGl2ZVNjaGVtZSh0aGlzLl9zY2hlbWUpKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2lzUmVsYXRpdmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdmaWxlJyA9PSB0aGlzLl9zY2hlbWUpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSAncmVsYXRpdmUnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgdGhpcy5faXNSZWxhdGl2ZSAmJlxuICAgICAgICAgICAgICBiYXNlICYmXG4gICAgICAgICAgICAgIGJhc2UuX3NjaGVtZSA9PSB0aGlzLl9zY2hlbWVcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBzdGF0ZSA9ICdyZWxhdGl2ZSBvciBhdXRob3JpdHknO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9pc1JlbGF0aXZlKSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gJ2F1dGhvcml0eSBmaXJzdCBzbGFzaCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdGF0ZSA9ICdzY2hlbWUgZGF0YSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBjdXJzb3IgPSAwO1xuICAgICAgICAgICAgc3RhdGUgPSAnbm8gc2NoZW1lJztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoRU9GID09IGMpIHtcbiAgICAgICAgICAgIGJyZWFrIGxvb3A7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVycignQ29kZSBwb2ludCBub3QgYWxsb3dlZCBpbiBzY2hlbWU6ICcgKyBjKTtcbiAgICAgICAgICAgIGJyZWFrIGxvb3A7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3NjaGVtZSBkYXRhJzpcbiAgICAgICAgICBpZiAoJz8nID09IGMpIHtcbiAgICAgICAgICAgIHRoaXMuX3F1ZXJ5ID0gJz8nO1xuICAgICAgICAgICAgc3RhdGUgPSAncXVlcnknO1xuICAgICAgICAgIH0gZWxzZSBpZiAoJyMnID09IGMpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZyYWdtZW50ID0gJyMnO1xuICAgICAgICAgICAgc3RhdGUgPSAnZnJhZ21lbnQnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBYWFggZXJyb3IgaGFuZGxpbmdcbiAgICAgICAgICAgIGlmIChFT0YgIT0gYyAmJiAnXFx0JyAhPSBjICYmICdcXG4nICE9IGMgJiYgJ1xccicgIT0gYykge1xuICAgICAgICAgICAgICB0aGlzLl9zY2hlbWVEYXRhICs9IHBlcmNlbnRFc2NhcGUoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ25vIHNjaGVtZSc6XG4gICAgICAgICAgaWYgKCFiYXNlIHx8ICFpc1JlbGF0aXZlU2NoZW1lKGJhc2UuX3NjaGVtZSkpIHtcbiAgICAgICAgICAgIGVycignTWlzc2luZyBzY2hlbWUuJyk7XG4gICAgICAgICAgICBpbnZhbGlkLmNhbGwodGhpcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlID0gJ3JlbGF0aXZlJztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdyZWxhdGl2ZSBvciBhdXRob3JpdHknOlxuICAgICAgICAgIGlmICgnLycgPT0gYyAmJiAnLycgPT0gaW5wdXRbY3Vyc29yICsgMV0pIHtcbiAgICAgICAgICAgIHN0YXRlID0gJ2F1dGhvcml0eSBpZ25vcmUgc2xhc2hlcyc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVycignRXhwZWN0ZWQgLywgZ290OiAnICsgYyk7XG4gICAgICAgICAgICBzdGF0ZSA9ICdyZWxhdGl2ZSc7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncmVsYXRpdmUnOlxuICAgICAgICAgIHRoaXMuX2lzUmVsYXRpdmUgPSB0cnVlO1xuICAgICAgICAgIGlmICgnZmlsZScgIT0gdGhpcy5fc2NoZW1lKSB7XG4gICAgICAgICAgICB0aGlzLl9zY2hlbWUgPSBiYXNlLl9zY2hlbWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChFT0YgPT0gYykge1xuICAgICAgICAgICAgdGhpcy5faG9zdCA9IGJhc2UuX2hvc3Q7XG4gICAgICAgICAgICB0aGlzLl9wb3J0ID0gYmFzZS5fcG9ydDtcbiAgICAgICAgICAgIHRoaXMuX3BhdGggPSBiYXNlLl9wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgICB0aGlzLl9xdWVyeSA9IGJhc2UuX3F1ZXJ5O1xuICAgICAgICAgICAgdGhpcy5fdXNlcm5hbWUgPSBiYXNlLl91c2VybmFtZTtcbiAgICAgICAgICAgIHRoaXMuX3Bhc3N3b3JkID0gYmFzZS5fcGFzc3dvcmQ7XG4gICAgICAgICAgICBicmVhayBsb29wO1xuICAgICAgICAgIH0gZWxzZSBpZiAoJy8nID09IGMgfHwgJ1xcXFwnID09IGMpIHtcbiAgICAgICAgICAgIGlmICgnXFxcXCcgPT0gYykge1xuICAgICAgICAgICAgICBlcnIoJ1xcXFwgaXMgYW4gaW52YWxpZCBjb2RlIHBvaW50LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhdGUgPSAncmVsYXRpdmUgc2xhc2gnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoJz8nID09IGMpIHtcbiAgICAgICAgICAgIHRoaXMuX2hvc3QgPSBiYXNlLl9ob3N0O1xuICAgICAgICAgICAgdGhpcy5fcG9ydCA9IGJhc2UuX3BvcnQ7XG4gICAgICAgICAgICB0aGlzLl9wYXRoID0gYmFzZS5fcGF0aC5zbGljZSgpO1xuICAgICAgICAgICAgdGhpcy5fcXVlcnkgPSAnPyc7XG4gICAgICAgICAgICB0aGlzLl91c2VybmFtZSA9IGJhc2UuX3VzZXJuYW1lO1xuICAgICAgICAgICAgdGhpcy5fcGFzc3dvcmQgPSBiYXNlLl9wYXNzd29yZDtcbiAgICAgICAgICAgIHN0YXRlID0gJ3F1ZXJ5JztcbiAgICAgICAgICB9IGVsc2UgaWYgKCcjJyA9PSBjKSB7XG4gICAgICAgICAgICB0aGlzLl9ob3N0ID0gYmFzZS5faG9zdDtcbiAgICAgICAgICAgIHRoaXMuX3BvcnQgPSBiYXNlLl9wb3J0O1xuICAgICAgICAgICAgdGhpcy5fcGF0aCA9IGJhc2UuX3BhdGguc2xpY2UoKTtcbiAgICAgICAgICAgIHRoaXMuX3F1ZXJ5ID0gYmFzZS5fcXVlcnk7XG4gICAgICAgICAgICB0aGlzLl9mcmFnbWVudCA9ICcjJztcbiAgICAgICAgICAgIHRoaXMuX3VzZXJuYW1lID0gYmFzZS5fdXNlcm5hbWU7XG4gICAgICAgICAgICB0aGlzLl9wYXNzd29yZCA9IGJhc2UuX3Bhc3N3b3JkO1xuICAgICAgICAgICAgc3RhdGUgPSAnZnJhZ21lbnQnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgbmV4dEMgPSBpbnB1dFtjdXJzb3IgKyAxXTtcbiAgICAgICAgICAgIHZhciBuZXh0TmV4dEMgPSBpbnB1dFtjdXJzb3IgKyAyXTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgJ2ZpbGUnICE9IHRoaXMuX3NjaGVtZSB8fFxuICAgICAgICAgICAgICAhQUxQSEEudGVzdChjKSB8fFxuICAgICAgICAgICAgICAobmV4dEMgIT0gJzonICYmIG5leHRDICE9ICd8JykgfHxcbiAgICAgICAgICAgICAgKEVPRiAhPSBuZXh0TmV4dEMgJiZcbiAgICAgICAgICAgICAgICAnLycgIT0gbmV4dE5leHRDICYmXG4gICAgICAgICAgICAgICAgJ1xcXFwnICE9IG5leHROZXh0QyAmJlxuICAgICAgICAgICAgICAgICc/JyAhPSBuZXh0TmV4dEMgJiZcbiAgICAgICAgICAgICAgICAnIycgIT0gbmV4dE5leHRDKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2hvc3QgPSBiYXNlLl9ob3N0O1xuICAgICAgICAgICAgICB0aGlzLl9wb3J0ID0gYmFzZS5fcG9ydDtcbiAgICAgICAgICAgICAgdGhpcy5fdXNlcm5hbWUgPSBiYXNlLl91c2VybmFtZTtcbiAgICAgICAgICAgICAgdGhpcy5fcGFzc3dvcmQgPSBiYXNlLl9wYXNzd29yZDtcbiAgICAgICAgICAgICAgdGhpcy5fcGF0aCA9IGJhc2UuX3BhdGguc2xpY2UoKTtcbiAgICAgICAgICAgICAgdGhpcy5fcGF0aC5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlID0gJ3JlbGF0aXZlIHBhdGgnO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3JlbGF0aXZlIHNsYXNoJzpcbiAgICAgICAgICBpZiAoJy8nID09IGMgfHwgJ1xcXFwnID09IGMpIHtcbiAgICAgICAgICAgIGlmICgnXFxcXCcgPT0gYykge1xuICAgICAgICAgICAgICBlcnIoJ1xcXFwgaXMgYW4gaW52YWxpZCBjb2RlIHBvaW50LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCdmaWxlJyA9PSB0aGlzLl9zY2hlbWUpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSAnZmlsZSBob3N0JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gJ2F1dGhvcml0eSBpZ25vcmUgc2xhc2hlcyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICgnZmlsZScgIT0gdGhpcy5fc2NoZW1lKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2hvc3QgPSBiYXNlLl9ob3N0O1xuICAgICAgICAgICAgICB0aGlzLl9wb3J0ID0gYmFzZS5fcG9ydDtcbiAgICAgICAgICAgICAgdGhpcy5fdXNlcm5hbWUgPSBiYXNlLl91c2VybmFtZTtcbiAgICAgICAgICAgICAgdGhpcy5fcGFzc3dvcmQgPSBiYXNlLl9wYXNzd29yZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlID0gJ3JlbGF0aXZlIHBhdGgnO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2F1dGhvcml0eSBmaXJzdCBzbGFzaCc6XG4gICAgICAgICAgaWYgKCcvJyA9PSBjKSB7XG4gICAgICAgICAgICBzdGF0ZSA9ICdhdXRob3JpdHkgc2Vjb25kIHNsYXNoJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXJyKFwiRXhwZWN0ZWQgJy8nLCBnb3Q6IFwiICsgYyk7XG4gICAgICAgICAgICBzdGF0ZSA9ICdhdXRob3JpdHkgaWdub3JlIHNsYXNoZXMnO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2F1dGhvcml0eSBzZWNvbmQgc2xhc2gnOlxuICAgICAgICAgIHN0YXRlID0gJ2F1dGhvcml0eSBpZ25vcmUgc2xhc2hlcyc7XG4gICAgICAgICAgaWYgKCcvJyAhPSBjKSB7XG4gICAgICAgICAgICBlcnIoXCJFeHBlY3RlZCAnLycsIGdvdDogXCIgKyBjKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdhdXRob3JpdHkgaWdub3JlIHNsYXNoZXMnOlxuICAgICAgICAgIGlmICgnLycgIT0gYyAmJiAnXFxcXCcgIT0gYykge1xuICAgICAgICAgICAgc3RhdGUgPSAnYXV0aG9yaXR5JztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlcnIoJ0V4cGVjdGVkIGF1dGhvcml0eSwgZ290OiAnICsgYyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2F1dGhvcml0eSc6XG4gICAgICAgICAgaWYgKCdAJyA9PSBjKSB7XG4gICAgICAgICAgICBpZiAoc2VlbkF0KSB7XG4gICAgICAgICAgICAgIGVycignQCBhbHJlYWR5IHNlZW4uJyk7XG4gICAgICAgICAgICAgIGJ1ZmZlciArPSAnJTQwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlZW5BdCA9IHRydWU7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICB2YXIgY3AgPSBidWZmZXJbaV07XG4gICAgICAgICAgICAgIGlmICgnXFx0JyA9PSBjcCB8fCAnXFxuJyA9PSBjcCB8fCAnXFxyJyA9PSBjcCkge1xuICAgICAgICAgICAgICAgIGVycignSW52YWxpZCB3aGl0ZXNwYWNlIGluIGF1dGhvcml0eS4nKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBYWFggY2hlY2sgVVJMIGNvZGUgcG9pbnRzXG4gICAgICAgICAgICAgIGlmICgnOicgPT0gY3AgJiYgbnVsbCA9PT0gdGhpcy5fcGFzc3dvcmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXNzd29yZCA9ICcnO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciB0ZW1wQyA9IHBlcmNlbnRFc2NhcGUoY3ApO1xuICAgICAgICAgICAgICBudWxsICE9PSB0aGlzLl9wYXNzd29yZFxuICAgICAgICAgICAgICAgID8gKHRoaXMuX3Bhc3N3b3JkICs9IHRlbXBDKVxuICAgICAgICAgICAgICAgIDogKHRoaXMuX3VzZXJuYW1lICs9IHRlbXBDKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBFT0YgPT0gYyB8fFxuICAgICAgICAgICAgJy8nID09IGMgfHxcbiAgICAgICAgICAgICdcXFxcJyA9PSBjIHx8XG4gICAgICAgICAgICAnPycgPT0gYyB8fFxuICAgICAgICAgICAgJyMnID09IGNcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGN1cnNvciAtPSBidWZmZXIubGVuZ3RoO1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9ICdob3N0JztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBidWZmZXIgKz0gYztcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZmlsZSBob3N0JzpcbiAgICAgICAgICBpZiAoRU9GID09IGMgfHwgJy8nID09IGMgfHwgJ1xcXFwnID09IGMgfHwgJz8nID09IGMgfHwgJyMnID09IGMpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgYnVmZmVyLmxlbmd0aCA9PSAyICYmXG4gICAgICAgICAgICAgIEFMUEhBLnRlc3QoYnVmZmVyWzBdKSAmJlxuICAgICAgICAgICAgICAoYnVmZmVyWzFdID09ICc6JyB8fCBidWZmZXJbMV0gPT0gJ3wnKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gJ3JlbGF0aXZlIHBhdGgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChidWZmZXIubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSAncmVsYXRpdmUgcGF0aCBzdGFydCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9ob3N0ID0gSUROQVRvQVNDSUkuY2FsbCh0aGlzLCBidWZmZXIpO1xuICAgICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgICAgc3RhdGUgPSAncmVsYXRpdmUgcGF0aCBzdGFydCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCdcXHQnID09IGMgfHwgJ1xcbicgPT0gYyB8fCAnXFxyJyA9PSBjKSB7XG4gICAgICAgICAgICBlcnIoJ0ludmFsaWQgd2hpdGVzcGFjZSBpbiBmaWxlIGhvc3QuJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ1ZmZlciArPSBjO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdob3N0JzpcbiAgICAgICAgY2FzZSAnaG9zdG5hbWUnOlxuICAgICAgICAgIGlmICgnOicgPT0gYyAmJiAhc2VlbkJyYWNrZXQpIHtcbiAgICAgICAgICAgIC8vIFhYWCBob3N0IHBhcnNpbmdcbiAgICAgICAgICAgIHRoaXMuX2hvc3QgPSBJRE5BVG9BU0NJSS5jYWxsKHRoaXMsIGJ1ZmZlcik7XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gJ3BvcnQnO1xuICAgICAgICAgICAgaWYgKCdob3N0bmFtZScgPT0gc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgICAgICBicmVhayBsb29wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBFT0YgPT0gYyB8fFxuICAgICAgICAgICAgJy8nID09IGMgfHxcbiAgICAgICAgICAgICdcXFxcJyA9PSBjIHx8XG4gICAgICAgICAgICAnPycgPT0gYyB8fFxuICAgICAgICAgICAgJyMnID09IGNcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuX2hvc3QgPSBJRE5BVG9BU0NJSS5jYWxsKHRoaXMsIGJ1ZmZlcik7XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gJ3JlbGF0aXZlIHBhdGggc3RhcnQnO1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgYnJlYWsgbG9vcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoJ1xcdCcgIT0gYyAmJiAnXFxuJyAhPSBjICYmICdcXHInICE9IGMpIHtcbiAgICAgICAgICAgIGlmICgnWycgPT0gYykge1xuICAgICAgICAgICAgICBzZWVuQnJhY2tldCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCddJyA9PSBjKSB7XG4gICAgICAgICAgICAgIHNlZW5CcmFja2V0ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIgKz0gYztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXJyKCdJbnZhbGlkIGNvZGUgcG9pbnQgaW4gaG9zdC9ob3N0bmFtZTogJyArIGMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdwb3J0JzpcbiAgICAgICAgICBpZiAoL1swLTldLy50ZXN0KGMpKSB7XG4gICAgICAgICAgICBidWZmZXIgKz0gYztcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgRU9GID09IGMgfHxcbiAgICAgICAgICAgICcvJyA9PSBjIHx8XG4gICAgICAgICAgICAnXFxcXCcgPT0gYyB8fFxuICAgICAgICAgICAgJz8nID09IGMgfHxcbiAgICAgICAgICAgICcjJyA9PSBjIHx8XG4gICAgICAgICAgICBzdGF0ZU92ZXJyaWRlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoJycgIT0gYnVmZmVyKSB7XG4gICAgICAgICAgICAgIHZhciB0ZW1wID0gcGFyc2VJbnQoYnVmZmVyLCAxMCk7XG4gICAgICAgICAgICAgIGlmICh0ZW1wICE9IHJlbGF0aXZlW3RoaXMuX3NjaGVtZV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3J0ID0gdGVtcCArICcnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgYnJlYWsgbG9vcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlID0gJ3JlbGF0aXZlIHBhdGggc3RhcnQnO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmICgnXFx0JyA9PSBjIHx8ICdcXG4nID09IGMgfHwgJ1xccicgPT0gYykge1xuICAgICAgICAgICAgZXJyKCdJbnZhbGlkIGNvZGUgcG9pbnQgaW4gcG9ydDogJyArIGMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnZhbGlkLmNhbGwodGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3JlbGF0aXZlIHBhdGggc3RhcnQnOlxuICAgICAgICAgIGlmICgnXFxcXCcgPT0gYykge1xuICAgICAgICAgICAgZXJyKFwiJ1xcXFwnIG5vdCBhbGxvd2VkIGluIHBhdGguXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGF0ZSA9ICdyZWxhdGl2ZSBwYXRoJztcbiAgICAgICAgICBpZiAoJy8nICE9IGMgJiYgJ1xcXFwnICE9IGMpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdyZWxhdGl2ZSBwYXRoJzpcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBFT0YgPT0gYyB8fFxuICAgICAgICAgICAgJy8nID09IGMgfHxcbiAgICAgICAgICAgICdcXFxcJyA9PSBjIHx8XG4gICAgICAgICAgICAoIXN0YXRlT3ZlcnJpZGUgJiYgKCc/JyA9PSBjIHx8ICcjJyA9PSBjKSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGlmICgnXFxcXCcgPT0gYykge1xuICAgICAgICAgICAgICBlcnIoJ1xcXFwgbm90IGFsbG93ZWQgaW4gcmVsYXRpdmUgcGF0aC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0bXA7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uZC1hc3NpZ25cbiAgICAgICAgICAgIGlmICgodG1wID0gcmVsYXRpdmVQYXRoRG90TWFwcGluZ1tidWZmZXIudG9Mb3dlckNhc2UoKV0pKSB7XG4gICAgICAgICAgICAgIGJ1ZmZlciA9IHRtcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgnLi4nID09IGJ1ZmZlcikge1xuICAgICAgICAgICAgICB0aGlzLl9wYXRoLnBvcCgpO1xuICAgICAgICAgICAgICBpZiAoJy8nICE9IGMgJiYgJ1xcXFwnICE9IGMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXRoLnB1c2goJycpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCcuJyA9PSBidWZmZXIgJiYgJy8nICE9IGMgJiYgJ1xcXFwnICE9IGMpIHtcbiAgICAgICAgICAgICAgdGhpcy5fcGF0aC5wdXNoKCcnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJy4nICE9IGJ1ZmZlcikge1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgJ2ZpbGUnID09IHRoaXMuX3NjaGVtZSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX3BhdGgubGVuZ3RoID09IDAgJiZcbiAgICAgICAgICAgICAgICBidWZmZXIubGVuZ3RoID09IDIgJiZcbiAgICAgICAgICAgICAgICBBTFBIQS50ZXN0KGJ1ZmZlclswXSkgJiZcbiAgICAgICAgICAgICAgICBidWZmZXJbMV0gPT0gJ3wnXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGJ1ZmZlclswXSArICc6JztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0aGlzLl9wYXRoLnB1c2goYnVmZmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgaWYgKCc/JyA9PSBjKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3F1ZXJ5ID0gJz8nO1xuICAgICAgICAgICAgICBzdGF0ZSA9ICdxdWVyeSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCcjJyA9PSBjKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2ZyYWdtZW50ID0gJyMnO1xuICAgICAgICAgICAgICBzdGF0ZSA9ICdmcmFnbWVudCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICgnXFx0JyAhPSBjICYmICdcXG4nICE9IGMgJiYgJ1xccicgIT0gYykge1xuICAgICAgICAgICAgYnVmZmVyICs9IHBlcmNlbnRFc2NhcGUoYyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3F1ZXJ5JzpcbiAgICAgICAgICBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgJyMnID09IGMpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZyYWdtZW50ID0gJyMnO1xuICAgICAgICAgICAgc3RhdGUgPSAnZnJhZ21lbnQnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoRU9GICE9IGMgJiYgJ1xcdCcgIT0gYyAmJiAnXFxuJyAhPSBjICYmICdcXHInICE9IGMpIHtcbiAgICAgICAgICAgIHRoaXMuX3F1ZXJ5ICs9IHBlcmNlbnRFc2NhcGVRdWVyeShjKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZnJhZ21lbnQnOlxuICAgICAgICAgIGlmIChFT0YgIT0gYyAmJiAnXFx0JyAhPSBjICYmICdcXG4nICE9IGMgJiYgJ1xccicgIT0gYykge1xuICAgICAgICAgICAgdGhpcy5fZnJhZ21lbnQgKz0gYztcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGN1cnNvcisrO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuX3NjaGVtZSA9ICcnO1xuICAgIHRoaXMuX3NjaGVtZURhdGEgPSAnJztcbiAgICB0aGlzLl91c2VybmFtZSA9ICcnO1xuICAgIHRoaXMuX3Bhc3N3b3JkID0gbnVsbDtcbiAgICB0aGlzLl9ob3N0ID0gJyc7XG4gICAgdGhpcy5fcG9ydCA9ICcnO1xuICAgIHRoaXMuX3BhdGggPSBbXTtcbiAgICB0aGlzLl9xdWVyeSA9ICcnO1xuICAgIHRoaXMuX2ZyYWdtZW50ID0gJyc7XG4gICAgdGhpcy5faXNJbnZhbGlkID0gZmFsc2U7XG4gICAgdGhpcy5faXNSZWxhdGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgLy8gRG9lcyBub3QgcHJvY2VzcyBkb21haW4gbmFtZXMgb3IgSVAgYWRkcmVzc2VzLlxuICAvLyBEb2VzIG5vdCBoYW5kbGUgZW5jb2RpbmcgZm9yIHRoZSBxdWVyeSBwYXJhbWV0ZXIuXG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQGV4dGVuZHMge1VSTH1cbiAgICogQHBhcmFtIHshc3RyaW5nfSB1cmxcbiAgICogQHBhcmFtIHsoVVJMfHN0cmluZyk9fSBiYXNlXG4gICAqL1xuICBmdW5jdGlvbiBqVVJMKHVybCwgYmFzZSAvKiAsIGVuY29kaW5nICovKSB7XG4gICAgaWYgKGJhc2UgIT09IHVuZGVmaW5lZCAmJiAhKGJhc2UgaW5zdGFuY2VvZiBqVVJMKSkge1xuICAgICAgYmFzZSA9IG5ldyBqVVJMKFN0cmluZyhiYXNlKSk7XG4gICAgfVxuXG4gICAgdGhpcy5fdXJsID0gJycgKyB1cmw7XG4gICAgY2xlYXIuY2FsbCh0aGlzKTtcblxuICAgIHZhciBpbnB1dCA9IHRoaXMuX3VybC5yZXBsYWNlKC9eWyBcXHRcXHJcXG5cXGZdK3xbIFxcdFxcclxcblxcZl0rJC9nLCAnJyk7XG4gICAgLy8gZW5jb2RpbmcgPSBlbmNvZGluZyB8fCAndXRmLTgnXG5cbiAgICBwYXJzZS5jYWxsKHRoaXMsIGlucHV0LCBudWxsLCBiYXNlKTtcbiAgfVxuXG4gIGpVUkwucHJvdG90eXBlID0ge1xuICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5ocmVmO1xuICAgIH0sXG4gICAgZ2V0IGhyZWYoKSB7XG4gICAgICBpZiAodGhpcy5faXNJbnZhbGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91cmw7XG4gICAgICB9XG5cbiAgICAgIHZhciBhdXRob3JpdHkgPSAnJztcbiAgICAgIGlmICgnJyAhPSB0aGlzLl91c2VybmFtZSB8fCBudWxsICE9IHRoaXMuX3Bhc3N3b3JkKSB7XG4gICAgICAgIGF1dGhvcml0eSA9XG4gICAgICAgICAgdGhpcy5fdXNlcm5hbWUgK1xuICAgICAgICAgIChudWxsICE9IHRoaXMuX3Bhc3N3b3JkID8gJzonICsgdGhpcy5fcGFzc3dvcmQgOiAnJykgK1xuICAgICAgICAgICdAJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5wcm90b2NvbCArXG4gICAgICAgICh0aGlzLl9pc1JlbGF0aXZlID8gJy8vJyArIGF1dGhvcml0eSArIHRoaXMuaG9zdCA6ICcnKSArXG4gICAgICAgIHRoaXMucGF0aG5hbWUgK1xuICAgICAgICB0aGlzLl9xdWVyeSArXG4gICAgICAgIHRoaXMuX2ZyYWdtZW50XG4gICAgICApO1xuICAgIH0sXG4gICAgc2V0IGhyZWYoaHJlZikge1xuICAgICAgY2xlYXIuY2FsbCh0aGlzKTtcbiAgICAgIHBhcnNlLmNhbGwodGhpcywgaHJlZik7XG4gICAgfSxcblxuICAgIGdldCBwcm90b2NvbCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zY2hlbWUgKyAnOic7XG4gICAgfSxcbiAgICBzZXQgcHJvdG9jb2wocHJvdG9jb2wpIHtcbiAgICAgIGlmICh0aGlzLl9pc0ludmFsaWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcGFyc2UuY2FsbCh0aGlzLCBwcm90b2NvbCArICc6JywgJ3NjaGVtZSBzdGFydCcpO1xuICAgIH0sXG5cbiAgICBnZXQgaG9zdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pc0ludmFsaWRcbiAgICAgICAgPyAnJ1xuICAgICAgICA6IHRoaXMuX3BvcnRcbiAgICAgICAgPyB0aGlzLl9ob3N0ICsgJzonICsgdGhpcy5fcG9ydFxuICAgICAgICA6IHRoaXMuX2hvc3Q7XG4gICAgfSxcbiAgICBzZXQgaG9zdChob3N0KSB7XG4gICAgICBpZiAodGhpcy5faXNJbnZhbGlkIHx8ICF0aGlzLl9pc1JlbGF0aXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHBhcnNlLmNhbGwodGhpcywgaG9zdCwgJ2hvc3QnKTtcbiAgICB9LFxuXG4gICAgZ2V0IGhvc3RuYW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2hvc3Q7XG4gICAgfSxcbiAgICBzZXQgaG9zdG5hbWUoaG9zdG5hbWUpIHtcbiAgICAgIGlmICh0aGlzLl9pc0ludmFsaWQgfHwgIXRoaXMuX2lzUmVsYXRpdmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcGFyc2UuY2FsbCh0aGlzLCBob3N0bmFtZSwgJ2hvc3RuYW1lJyk7XG4gICAgfSxcblxuICAgIGdldCBwb3J0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BvcnQ7XG4gICAgfSxcbiAgICBzZXQgcG9ydChwb3J0KSB7XG4gICAgICBpZiAodGhpcy5faXNJbnZhbGlkIHx8ICF0aGlzLl9pc1JlbGF0aXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHBhcnNlLmNhbGwodGhpcywgcG9ydCwgJ3BvcnQnKTtcbiAgICB9LFxuXG4gICAgZ2V0IHBhdGhuYW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lzSW52YWxpZFxuICAgICAgICA/ICcnXG4gICAgICAgIDogdGhpcy5faXNSZWxhdGl2ZVxuICAgICAgICA/ICcvJyArIHRoaXMuX3BhdGguam9pbignLycpXG4gICAgICAgIDogdGhpcy5fc2NoZW1lRGF0YTtcbiAgICB9LFxuICAgIHNldCBwYXRobmFtZShwYXRobmFtZSkge1xuICAgICAgaWYgKHRoaXMuX2lzSW52YWxpZCB8fCAhdGhpcy5faXNSZWxhdGl2ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLl9wYXRoID0gW107XG4gICAgICBwYXJzZS5jYWxsKHRoaXMsIHBhdGhuYW1lLCAncmVsYXRpdmUgcGF0aCBzdGFydCcpO1xuICAgIH0sXG5cbiAgICBnZXQgc2VhcmNoKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lzSW52YWxpZCB8fCAhdGhpcy5fcXVlcnkgfHwgJz8nID09IHRoaXMuX3F1ZXJ5XG4gICAgICAgID8gJydcbiAgICAgICAgOiB0aGlzLl9xdWVyeTtcbiAgICB9LFxuICAgIHNldCBzZWFyY2goc2VhcmNoKSB7XG4gICAgICBpZiAodGhpcy5faXNJbnZhbGlkIHx8ICF0aGlzLl9pc1JlbGF0aXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3F1ZXJ5ID0gJz8nO1xuICAgICAgaWYgKCc/JyA9PSBzZWFyY2hbMF0pIHtcbiAgICAgICAgc2VhcmNoID0gc2VhcmNoLnNsaWNlKDEpO1xuICAgICAgfVxuICAgICAgcGFyc2UuY2FsbCh0aGlzLCBzZWFyY2gsICdxdWVyeScpO1xuICAgIH0sXG5cbiAgICBnZXQgaGFzaCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pc0ludmFsaWQgfHwgIXRoaXMuX2ZyYWdtZW50IHx8ICcjJyA9PSB0aGlzLl9mcmFnbWVudFxuICAgICAgICA/ICcnXG4gICAgICAgIDogdGhpcy5fZnJhZ21lbnQ7XG4gICAgfSxcbiAgICBzZXQgaGFzaChoYXNoKSB7XG4gICAgICBpZiAodGhpcy5faXNJbnZhbGlkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghaGFzaCkge1xuICAgICAgICB0aGlzLl9mcmFnbWVudCA9ICcnO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLl9mcmFnbWVudCA9ICcjJztcbiAgICAgIGlmICgnIycgPT0gaGFzaFswXSkge1xuICAgICAgICBoYXNoID0gaGFzaC5zbGljZSgxKTtcbiAgICAgIH1cbiAgICAgIHBhcnNlLmNhbGwodGhpcywgaGFzaCwgJ2ZyYWdtZW50Jyk7XG4gICAgfSxcblxuICAgIGdldCBvcmlnaW4oKSB7XG4gICAgICB2YXIgaG9zdDtcbiAgICAgIGlmICh0aGlzLl9pc0ludmFsaWQgfHwgIXRoaXMuX3NjaGVtZSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICAvLyBqYXZhc2NyaXB0OiBHZWNrbyByZXR1cm5zIFN0cmluZyhcIlwiKSwgV2ViS2l0L0JsaW5rIFN0cmluZyhcIm51bGxcIilcbiAgICAgIC8vIEdlY2tvIHRocm93cyBlcnJvciBmb3IgXCJkYXRhOi8vXCJcbiAgICAgIC8vIGRhdGE6IEdlY2tvIHJldHVybnMgXCJcIiwgQmxpbmsgcmV0dXJucyBcImRhdGE6Ly9cIiwgV2ViS2l0IHJldHVybnMgXCJudWxsXCJcbiAgICAgIC8vIEdlY2tvIHJldHVybnMgU3RyaW5nKFwiXCIpIGZvciBmaWxlOiBtYWlsdG86XG4gICAgICAvLyBXZWJLaXQvQmxpbmsgcmV0dXJucyBTdHJpbmcoXCJTQ0hFTUU6Ly9cIikgZm9yIGZpbGU6IG1haWx0bzpcbiAgICAgIHN3aXRjaCAodGhpcy5fc2NoZW1lKSB7XG4gICAgICAgIGNhc2UgJ2RhdGEnOlxuICAgICAgICBjYXNlICdmaWxlJzpcbiAgICAgICAgY2FzZSAnamF2YXNjcmlwdCc6XG4gICAgICAgIGNhc2UgJ21haWx0byc6XG4gICAgICAgICAgcmV0dXJuICdudWxsJztcbiAgICAgIH1cbiAgICAgIGhvc3QgPSB0aGlzLmhvc3Q7XG4gICAgICBpZiAoIWhvc3QpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX3NjaGVtZSArICc6Ly8nICsgaG9zdDtcbiAgICB9LFxuICB9O1xuXG4gIC8vIENvcHkgb3ZlciB0aGUgc3RhdGljIG1ldGhvZHNcbiAgdmFyIE9yaWdpbmFsVVJMID0gc2NvcGUuVVJMO1xuICBpZiAoT3JpZ2luYWxVUkwpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgalVSTFsnY3JlYXRlT2JqZWN0VVJMJ10gPSBmdW5jdGlvbiAoYmxvYikge1xuICAgICAgLy8gSUUgZXh0ZW5zaW9uIGFsbG93cyBhIHNlY29uZCBvcHRpb25hbCBvcHRpb25zIGFyZ3VtZW50LlxuICAgICAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNzcyMzAyKHY9dnMuODUpLmFzcHhcbiAgICAgIHJldHVybiBPcmlnaW5hbFVSTC5jcmVhdGVPYmplY3RVUkwuYXBwbHkoT3JpZ2luYWxVUkwsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgICBqVVJMWydyZXZva2VPYmplY3RVUkwnXSA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgIE9yaWdpbmFsVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuICAgIH07XG4gIH1cblxuICBzY29wZS5VUkwgPSBqVVJMO1xufSkod2luZG93KTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxOCBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG4ndXNlIHN0cmljdCc7XG5cbi8qXG4gKiBQb2x5ZmlsbHMgbG9hZGVkOiBIVE1MIEltcG9ydHMsIEN1c3RvbSBFbGVtZW50cywgU2hhZHkgRE9NL1NoYWR5IENTUywgcGxhdGZvcm0gcG9seWZpbGxzLCB0ZW1wbGF0ZVxuICogVXNlZCBpbjogd2ViY29tcG9uZW50cyBidW5kbGUgdG8gbG9hZCBBTEwgdGhlIHRoaW5nc1xuICovXG5cbmltcG9ydCAnLi93ZWJjb21wb25lbnRzLXNkLWNlLXBmLWluZGV4LmpzJztcblxuY29uc3QgY3VzdG9tRWxlbWVudHMgPSB3aW5kb3cuY3VzdG9tRWxlbWVudHM7XG5cbmxldCBzaG91bGRGbHVzaCA9IGZhbHNlO1xuLyoqIEB0eXBlIHs/ZnVuY3Rpb24oKX0gKi9cbmxldCBmbHVzaGVyID0gbnVsbDtcblxuaWYgKGN1c3RvbUVsZW1lbnRzWydwb2x5ZmlsbFdyYXBGbHVzaENhbGxiYWNrJ10pIHtcbiAgY3VzdG9tRWxlbWVudHNbJ3BvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2snXSgoZmx1c2gpID0+IHtcbiAgICBmbHVzaGVyID0gZmx1c2g7XG4gICAgaWYgKHNob3VsZEZsdXNoKSB7XG4gICAgICBmbHVzaCgpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZsdXNoQW5kRmlyZSgpIHtcbiAgaWYgKHdpbmRvdy5IVE1MVGVtcGxhdGVFbGVtZW50LmJvb3RzdHJhcCkge1xuICAgIHdpbmRvdy5IVE1MVGVtcGxhdGVFbGVtZW50LmJvb3RzdHJhcCh3aW5kb3cuZG9jdW1lbnQpO1xuICB9XG4gIGZsdXNoZXIgJiYgZmx1c2hlcigpO1xuICBzaG91bGRGbHVzaCA9IHRydWU7XG4gIHdpbmRvdy5XZWJDb21wb25lbnRzLnJlYWR5ID0gdHJ1ZTtcbiAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChcbiAgICBuZXcgQ3VzdG9tRXZlbnQoJ1dlYkNvbXBvbmVudHNSZWFkeScsIHtidWJibGVzOiB0cnVlfSlcbiAgKTtcbn1cblxuaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09ICdjb21wbGV0ZScpIHtcbiAgLy8gdGhpcyBzY3JpcHQgbWF5IGNvbWUgYmV0d2VlbiBEQ0wgYW5kIGxvYWQsIHNvIGxpc3RlbiBmb3IgYm90aCwgYW5kIGNhbmNlbCBsb2FkIGxpc3RlbmVyIGlmIERDTCBmaXJlc1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZsdXNoQW5kRmlyZSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgZmx1c2hBbmRGaXJlKTtcbiAgICBmbHVzaEFuZEZpcmUoKTtcbiAgfSk7XG59IGVsc2Uge1xuICBmbHVzaEFuZEZpcmUoKTtcbn1cbiJdLCJuYW1lcyI6WyIkanNjb21wLmRlZmluZVByb3BlcnR5IiwiZ2xvYmFsIiwiJGpzY29tcC5nbG9iYWwiLCIkanNjb21wLmdldEdsb2JhbCIsIiRqc2NvbXAucG9seWZpbGwiLCIkanNjb21wLml0ZXJhdG9yUHJvdG90eXBlIiwiJGpzY29tcC5hcnJheUl0ZXJhdG9ySW1wbCIsIiRqc2NvbXAuc2V0UHJvdG90eXBlT2YiLCIkanNjb21wLmdlbmVyYXRvci5Db250ZXh0IiwiJGpzY29tcC5nZW5lcmF0b3IuR2VuZXJhdG9yXyIsIiRqc2NvbXAuZ2VuZXJhdG9yLkVuZ2luZV8iLCJBcnJheSIsImZyb20iLCJBcnJheS5mcm9tIiwib2JqZWN0Iiwic2xpY2UiLCJjYWxsIiwiYXNzaWduIiwiT2JqZWN0IiwiT2JqZWN0LmFzc2lnbiIsInRhcmdldCIsImFyZ3MiLCJhcmd1bWVudHMiLCJpIiwicyIsImxlbmd0aCIsIm4kIiwia2V5cyIsInNvdXJjZSIsInAiLCJzZXRUaW1lb3V0RnVuYyIsInNldFRpbWVvdXQiLCJub29wIiwiYmluZCIsImZuIiwidGhpc0FyZyIsImFwcGx5IiwiUHJvbWlzZSIsIlR5cGVFcnJvciIsIl9zdGF0ZSIsIl9oYW5kbGVkIiwiX3ZhbHVlIiwidW5kZWZpbmVkIiwiX2RlZmVycmVkcyIsImRvUmVzb2x2ZSIsImhhbmRsZSIsInNlbGYiLCJkZWZlcnJlZCIsInB1c2giLCJQcm9taXNlJCRtb2R1bGUkbm9kZV9tb2R1bGVzJHByb21pc2VfcG9seWZpbGwkc3JjJGluZGV4Ll9pbW1lZGlhdGVGbiIsImNiIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwicmVzb2x2ZSIsInJlamVjdCIsInByb21pc2UiLCJyZXQiLCJlIiwibmV3VmFsdWUiLCJ0aGVuIiwiZmluYWxlIiwiY29uc29sZSIsIndhcm4iLCJsZW4iLCJIYW5kbGVyIiwiZG9uZSIsInZhbHVlIiwicmVhc29uIiwiZXgiLCJwcm90b3R5cGUiLCJQcm9taXNlLnByb3RvdHlwZS50aGVuIiwicHJvbSIsImNvbnN0cnVjdG9yIiwiZmluYWxseUNvbnN0cnVjdG9yIiwiY2FsbGJhY2siLCJhcnIiLCJyZXMiLCJ2YWwiLCJyZW1haW5pbmciLCJQcm9taXNlLnJlc29sdmUiLCJQcm9taXNlLnJlamVjdCIsIlByb21pc2UucmFjZSIsIlByb21pc2UkJG1vZHVsZSRub2RlX21vZHVsZXMkcHJvbWlzZV9wb2x5ZmlsbCRzcmMkaW5kZXgucmVzb2x2ZSIsInNldEltbWVkaWF0ZSIsIndpbmRvdyIsIlByb21pc2UkJG1vZHVsZSRub2RlX21vZHVsZXMkcHJvbWlzZV9wb2x5ZmlsbCRzcmMkaW5kZXguYWxsIiwiUHJvbWlzZSQkbW9kdWxlJG5vZGVfbW9kdWxlcyRwcm9taXNlX3BvbHlmaWxsJHNyYyRpbmRleC5yYWNlIiwiUHJvbWlzZSQkbW9kdWxlJG5vZGVfbW9kdWxlcyRwcm9taXNlX3BvbHlmaWxsJHNyYyRpbmRleC5yZWplY3QiLCJub2RlIiwiZG9jdW1lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsImNhbGxiYWNrcyIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJzcGxpY2UiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsIlByb21pc2VQb2x5ZmlsbC5faW1tZWRpYXRlRm4iLCJ0ZXh0Q29udGVudCIsIkdPUFMiLCJHIiwiaWQiLCJyYW5kb20iLCJTdHJpbmciLCJNYXRoIiwiaW50ZXJuYWxTeW1ib2wiLCJnT1BOIiwiR09QTiIsImdPUEQiLCJHT1BEIiwiY3JlYXRlIiwiZnJlZXplIiwiZGVmaW5lUHJvcGVydHkiLCJEUCIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiRFBpZXMiLCJkZXNjcmlwdG9yIiwiT2JqZWN0UHJvdG8iLCJoT1AiLCJoYXNPd25Qcm9wZXJ0eSIsInBJRSIsIlBJRSIsInRvU3RyaW5nIiwiYWRkSW50ZXJuYWxJZk5lZWRlZCIsIm8iLCJ1aWQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJjcmVhdGVXaXRoU3ltYm9scyIsInByb3RvIiwiZGVzY3JpcHRvcnMiLCJmb3JFYWNoIiwia2V5IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCIkZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJvbmx5Tm9uU3ltYm9scyIsIm5hbWUiLCJvbmx5U3ltYm9scyIsInNldEFuZEdldFN5bWJvbCIsInNldCIsInNldERlc2NyaXB0b3IiLCJzb3VyY2VDb25zdHJ1Y3RvciIsIlN5bWJvbCIsImRlc2NyaXB0aW9uIiwicHJlZml4IiwiY29uY2F0Iiwic291cmNlTWFwIiwibmV3RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJmaWx0ZXIiLCJtYXAiLCJkZXNjcmlwdG9yLnZhbHVlIiwic3ltYm9scyIsInN5bWJvbCIsImxhYmVsIiwic3RyIiwib19PIiwicHJvdG9EZXNjcmlwdG9yIiwiTyIsImRQIiwidG9TdHJpbmdUYWciLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ0c3QiLCJTaSIsIkFQIiwiU1AiLCJyZXR1cm5UaGlzIiwiaXRlcmF0b3IiLCJuZXh0IiwiZnJvbUNvZGVQb2ludCIsImMiLCJjb2RlUG9pbnRBdCIsIk9iamVjdC5wcm90b3R5cGUudG9TdHJpbmciLCJPYmplY3Qua2V5cyIsIm9iaiIsImdldE93blByb3BlcnR5TmFtZXMiLCJwcm9wIiwiJGpzY29tcC5nZW5lcmF0b3IuY3JlYXRlR2VuZXJhdG9yIiwiU2V0IiwidGVtcCIsIk1hcCIsImVudHJpZXMiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsInByZXZlbnREZWZhdWx0IiwiZGVmYXVsdFByZXZlbnRlZCIsIm9yaWdQcmV2ZW50RGVmYXVsdCIsIkV2ZW50IiwiRXZlbnQucHJvdG90eXBlLnByZXZlbnREZWZhdWx0IiwiY2FuY2VsYWJsZSIsImlzSUUiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50Iiwib3JpZ0V2ZW50IiwiaW5UeXBlIiwicGFyYW1zIiwiYnViYmxlcyIsIkN1c3RvbUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiTW91c2VFdmVudCIsIm9yaWdNb3VzZUV2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJ2aWV3Iiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsImN0cmxLZXkiLCJhbHRLZXkiLCJzaGlmdEtleSIsIm1ldGFLZXkiLCJidXR0b24iLCJyZWxhdGVkVGFyZ2V0IiwiaiIsIl9hIiwic3VwcG9ydHNFdmVudE9wdGlvbnMiLCJsaXN0ZW5lciIsImNhbGxDb3VudCIsInN1cHBvcnRlZCIsIm9uY2VTdXBwb3J0ZWQiLCJldmVudE9wdGlvbnMiLCJjYXB0dXJlIiwib25jZSIsImQiLCJjcmVhdGVFbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImZ1bGx5U3VwcG9ydGVkIiwiZGlzcGF0Y2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJuYXRpdmVFdmVudFRhcmdldCIsIkV2ZW50VGFyZ2V0IiwiTm9kZSIsInBhcnNlRXZlbnRPcHRpb25zIiwib3B0aW9uc09yQ2FwdHVyZSIsIm9yaWdBZGRFdmVudExpc3RlbmVyIiwib3JpZ1JlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYXB0dXJlTGlzdGVuZXJNYXAiLCJXZWFrTWFwIiwibGlzdGVuZXJNYXAiLCJnZXRMaXN0ZW5lck1hcCIsInR5cGUiLCJlbE1hcCIsInR5cGVNYXAiLCJsaXN0ZW5lcnMiLCJuYXRpdmVFdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciIsIm9wdGlvbnMiLCJoYXMiLCJjYWNoZWRMaXN0ZW5lciIsImRlbGV0ZSIsImhhbmRsZUV2ZW50IiwibmF0aXZlRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIiLCJuYXRpdmVfYmFzZVVSSSIsImJhc2UiLCJvd25lckRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImhyZWYiLCJsb2NhdGlvbiIsIl9iIiwiRWxlbWVudF9wcm90b3R5cGUiLCJFbGVtZW50IiwiYXR0cmlidXRlc0Rlc2NyaXB0b3IiLCJnZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsImdldEF0dHJpYnV0ZU5hbWVzIiwiRWxlbWVudF9wcm90b3R5cGUuZ2V0QXR0cmlidXRlTmFtZXMiLCJhdHRyIiwibWF0Y2hlcyIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwibmF0aXZlQXBwZW5kQ2hpbGQiLCJhcHBlbmRDaGlsZCIsImFwcGVuZCIsIiRqc2NvbXAubWFrZUl0ZXJhdG9yIiwiYXJnIiwiaW5zdGFsbEFwcGVuZCIsIkRvY3VtZW50IiwiRG9jdW1lbnRGcmFnbWVudCIsIm5hdGl2ZUluc2VydEJlZm9yZSIsImluc2VydEJlZm9yZSIsIm5hdGl2ZUdldEZpcnN0Q2hpbGQiLCJmaXJzdENoaWxkIiwicHJlcGVuZCIsImluc3RhbGxQcmVwZW5kIiwibmF0aXZlUmVtb3ZlQ2hpbGQiLCJyZW1vdmVDaGlsZCIsInJlcGxhY2VDaGlsZHJlbiIsImNoaWxkIiwiaW5zdGFsbFJlcGxhY2VDaGlsZHJlbiIsIl9jIiwiX2QiLCJuYXRpdmVHZXRQYXJlbnROb2RlIiwicGFyZW50Tm9kZSIsIm5hdGl2ZUdldE5leHRTaWJsaW5nIiwibmV4dFNpYmxpbmciLCJhZnRlciIsImluc3RhbGxBZnRlciIsIkNoYXJhY3RlckRhdGEiLCJiZWZvcmUiLCJpbnN0YWxsQmVmb3JlIiwicmVtb3ZlIiwiaW5zdGFsbFJlbW92ZSIsInJlcGxhY2VXaXRoIiwiaW5zdGFsbFJlcGxhY2VXaXRoIiwiSFRNTEVsZW1lbnRfcHJvdG90eXBlIiwiSFRNTEVsZW1lbnQiLCJTVkdFbGVtZW50X3Byb3RvdHlwZSIsIm5hdGl2ZUhhc0F0dHJpYnV0ZSIsImhhc0F0dHJpYnV0ZSIsIm5hdGl2ZVNldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsIm5hdGl2ZVJlbW92ZUF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsInRvZ2dsZUF0dHJpYnV0ZSIsIkVsZW1lbnRfcHJvdG90eXBlLnRvZ2dsZUF0dHJpYnV0ZSIsImZvcmNlIiwic3R5bGUiLCJoZWFkIiwiZXh0ZW5kZWRXaW5kb3ciLCJzY3JpcHQiLCJmbGFnTWF0Y2hlciIsImZsYWdzIiwic2VhcmNoIiwic3BsaXQiLCJvcHRpb24iLCJwYXJ0cyIsIm1hdGNoIiwiYSIsImxvZyIsImYiLCJmb3JjZVNoYWR5Iiwibm9QYXRjaCIsImZvcmNlQ0UiLCJQb2x5ZmlsbGVkSFRNTFRlbXBsYXRlRWxlbWVudCIsIlFTQSIsInNlbGVjdG9yIiwiY2hpbGROb2RlcyIsIm5vZGVUeXBlIiwiRE9DVU1FTlRfTk9ERSIsImRvY1F1ZXJ5U2VsZWN0b3JBbGwiLCJET0NVTUVOVF9GUkFHTUVOVF9OT0RFIiwibmVlZHNUZW1wbGF0ZSIsIkhUTUxUZW1wbGF0ZUVsZW1lbnQiLCJicm9rZW5Eb2NGcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjbG9uZU5vZGUiLCJuZWVkc0RvY0ZyYWciLCJuZXdOb2RlIiwicmVmTm9kZSIsIm9yaWdJbnNlcnRCZWZvcmUiLCJvcmlnQ2xvbmVOb2RlIiwiTm9kZS5wcm90b3R5cGUuY2xvbmVOb2RlIiwiZGVlcCIsIm5ld0RvbSIsIl9fcHJvdG9fXyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJkZWZpbmVQcm9wZXJ0aWVzIiwib3JpZ0FwcGVuZENoaWxkIiwiTm9kZS5wcm90b3R5cGUuYXBwZW5kQ2hpbGQiLCJvcmlnUmVtb3ZlQ2hpbGQiLCJvcmlnUmVwbGFjZUNoaWxkIiwicmVwbGFjZUNoaWxkIiwiTm9kZS5wcm90b3R5cGUucmVwbGFjZUNoaWxkIiwibmV3Q2hpbGQiLCJvbGRDaGlsZCIsIkRvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZnJhZyIsIm9yaWdJbXBvcnROb2RlIiwiaW1wb3J0Tm9kZSIsIkRvY3VtZW50LnByb3RvdHlwZS5pbXBvcnROb2RlIiwiaW1wTm9kZSIsImNhcHR1cmVkQ2xvbmVOb2RlIiwiY2FwdHVyZWRDcmVhdGVFbGVtZW50IiwiY2FwdHVyZWRJbXBvcnROb2RlIiwiY2FwdHVyZWRSZW1vdmVDaGlsZCIsImNhcHR1cmVkQXBwZW5kQ2hpbGQiLCJjYXB0dXJlZFJlcGxhY2VDaGlsZCIsImNhcHR1cmVkUGFyc2VGcm9tU3RyaW5nIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiY2FwdHVyZWRIVE1MRWxlbWVudElubmVySFRNTCIsImlubmVySFRNTCIsInRleHQiLCJjYXB0dXJlZENoaWxkTm9kZXMiLCJlbGVtZW50UXVlcnlTZWxlY3RvckFsbCIsImZyYWdRdWVyeVNlbGVjdG9yQWxsIiwibmVlZHNDbG9uaW5nIiwidCIsInQyIiwiY29udGVudCIsImNsb25lIiwiY29udGVudERvYyIsImltcGxlbWVudGF0aW9uIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiY2FuRGVjb3JhdGUiLCJ0ZW1wbGF0ZVN0eWxlIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJjYW5Qcm90b1BhdGNoIiwiZGVjb3JhdGUiLCJQb2x5ZmlsbGVkSFRNTFRlbXBsYXRlRWxlbWVudC5kZWNvcmF0ZSIsInRlbXBsYXRlIiwibmFtZXNwYWNlVVJJIiwiZG9jdW1lbnRFbGVtZW50IiwidGVtcGxhdGUuY2xvbmVOb2RlIiwiX2Nsb25lTm9kZSIsImRlZmluZUlubmVySFRNTCIsImRlZmluZU91dGVySFRNTCIsImVyciIsImJvb3RzdHJhcCIsInRvcExldmVsV3JhcHBpbmdNYXAiLCJ3cmFwIiwiZXhlYyIsInRvTG93ZXJDYXNlIiwiYm9keSIsImxhc3RDaGlsZCIsImRvY0ZyYWciLCJQb2x5ZmlsbGVkSFRNTFRlbXBsYXRlRWxlbWVudC5ib290c3RyYXAiLCJkb2MiLCJ0ZW1wbGF0ZXMiLCJURU1QTEFURV9UQUciLCJsIiwiRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnQiLCJlbCIsImxvY2FsTmFtZSIsIkRPTVBhcnNlci5wcm90b3R5cGUucGFyc2VGcm9tU3RyaW5nIiwiZXNjYXBlQXR0clJlZ0V4cCIsImVzY2FwZURhdGFSZWdFeHAiLCJlc2NhcGVSZXBsYWNlIiwibWFrZVNldCIsInZvaWRFbGVtZW50cyIsInBsYWludGV4dFBhcmVudHMiLCJnZXRJbm5lckhUTUwiLCJjJCIsIkVMRU1FTlRfTk9ERSIsInRhZ05hbWUiLCJhdHRycyIsInJlcGxhY2UiLCJURVhUX05PREUiLCJkYXRhIiwiQ09NTUVOVF9OT0RFIiwiZXJyb3IiLCJFcnJvciIsIlBvbHlmaWxsZWRIVE1MVGVtcGxhdGVFbGVtZW50Ll9jbG9uZU5vZGUiLCJmaXhDbG9uZWREb20iLCJzJCIsInQkIiwiZG9tIiwiZWxlbWVudCIsInNjcmlwdHMiLCJzY3JpcHRTZWxlY3RvciIsIm5zIiwiYWkiLCJ0b0pTT04iLCJfX3NoYWR5IiwiU2hhZHlEYXRhIiwic2hhZHlEYXRhRm9yTm9kZSIsInNldHRpbmdzIiwiaGFzTmF0aXZlU2hhZG93RE9NIiwiYXR0YWNoU2hhZG93IiwiZ2V0Um9vdE5vZGUiLCJkZXNjIiwiaGFzRGVzY3JpcHRvcnMiLCJpblVzZSIsInByZWZlclBlcmZvcm1hbmNlIiwicGF0Y2hPbkRlbWFuZCIsInVzZXJWYWx1ZSIsImFjY2VwdGVkVmFsdWVzIiwiaW5kZXhPZiIsInF1ZXJ5U2VsZWN0b3JJbXBsZW1lbnRhdGlvbiIsIklTX0lFIiwicHJlZml4ZWQiLCJpc1RyYWNraW5nTG9naWNhbENoaWxkTm9kZXMiLCJub2RlRGF0YSIsImlzU2hhZHlSb290IiwiU2hhZG93Um9vdCIsImhhc1NoYWRvd1Jvb3RXaXRoU2xvdCIsInJvb3QiLCJfaGFzSW5zZXJ0aW9uUG9pbnQiLCJtYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwidHdpZGRsZSIsInF1ZXVlIiwic2hpZnQiLCJkb2N1bWVudENvbnRhaW5zIiwiY29udGFpbnMiLCJjb250YWluZXIiLCJjcmVhdGVQb2x5ZmlsbGVkSFRNTENvbGxlY3Rpb24iLCJub2RlcyIsImdldEF0dHJpYnV0ZSIsImlzTmFOIiwiaXRlbSIsIm5vZGVzLml0ZW0iLCJpbmRleCIsIm5hbWVkSXRlbSIsIm5vZGVzLm5hbWVkSXRlbSIsIm5hdGl2ZUNoaWxkTm9kZXNBcnJheSIsInBhcmVudCIsInJlc3VsdCIsIm4iLCJjaGlsZE5vZGVzQXJyYXkiLCJwYXRjaFByb3BlcnR5IiwicGF0Y2hQcm9wZXJ0aWVzIiwiZGlzYWxsb3dlZFBhdGNoZXMiLCJwYXRjaEV4aXN0aW5nUHJvcGVydGllcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJuYW1lcyIsImNvbnZlcnRJbnRvQU5vZGUiLCJjb252ZXJ0Tm9kZXNJbnRvQU5vZGUiLCJmcmFnbWVudCIsImZsYXQiLCJhcnJheSIsImRlcHRoIiwicmVkdWNlIiwiYWNjIiwiaXNBcnJheSIsIiRqc2NvbXAuYXJyYXlGcm9tSXRlcmFibGUiLCJkZWR1cGxpY2F0ZSIsInJlc3VsdHMiLCJhZGQiLCJmbHVzaExpc3QiLCJzY2hlZHVsZWQiLCJlbnF1ZXVlIiwibWljcm90YXNrIiwiZmx1c2giLCJkaWRGbHVzaCIsIl9zY2hlZHVsZWQiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwic2NoZWR1bGUiLCJtdXRhdGlvbnMiLCJ0YWtlUmVjb3JkcyIsInNkIiwiZW5zdXJlU2hhZHlEYXRhRm9yTm9kZSIsIm9ic2VydmVyIiwiQXN5bmNPYnNlcnZlciIsIl9jYWxsYmFjayIsIl9vYnNlcnZlciIsIl9ub2RlIiwidW5vYnNlcnZlQ2hpbGRyZW4iLCJzaXplIiwiZmlsdGVyTXV0YXRpb25zIiwidGFyZ2V0Um9vdE5vZGUiLCJtdXRhdGlvbiIsIm11dGF0aW9uSW5TY29wZSIsIm0iLCJuYXRpdmVNZXRob2RzIiwibmF0aXZlVHJlZSIsImluc3RhbGxOYXRpdmVBY2Nlc3NvciIsIk5BVElWRV9QUkVGSVgiLCJkZWZpbmVOYXRpdmVBY2Nlc3NvcnMiLCJjb3B5UHJvcGVydGllcyIsImxpc3QiLCJub2RlV2Fsa2VyIiwiY3JlYXRlVHJlZVdhbGtlciIsIk5vZGVGaWx0ZXIiLCJTSE9XX0FMTCIsImVsZW1lbnRXYWxrZXIiLCJTSE9XX0VMRU1FTlQiLCJpbmVydERvYyIsIlBhcmVudE5vZGVBY2Nlc3NvcnMiLCJQYXJlbnROb2RlTWV0aG9kcyIsImV2ZW50UHJvcHMiLCJXaW5kb3ciLCJYTUxIdHRwUmVxdWVzdCIsImN1cnJlbnROb2RlIiwicHJldmlvdXNTaWJsaW5nIiwicGFyZW50RWxlbWVudCIsInRleHRXYWxrZXIiLCJTSE9XX1RFWFQiLCJuZXh0Tm9kZSIsIm5vZGVWYWx1ZSIsImNsZWFyTm9kZSIsIlBhcmVudE5vZGVXYWxrZXJEZXNjcmlwdG9ycyIsImxhc3RFbGVtZW50Q2hpbGQiLCJjaGlsZHJlbiIsImNoaWxkRWxlbWVudENvdW50IiwicHJldmlvdXNFbGVtZW50U2libGluZyIsIm5leHRFbGVtZW50U2libGluZyIsImNvbnRhaW5lck5hbWUiLCJodG1sQ29udGFpbmVyIiwiY3JlYXRlRWxlbWVudE5TIiwibmV3Q29udGVudCIsImNsYXNzTmFtZSIsImdldFByb3BlcnR5TmFtZSIsIkluc2lkZURlc2NyaXB0b3JzIiwic2hhZG93Um9vdCIsIlRleHRDb250ZW50SW5uZXJIVE1MRGVzY3JpcHRvcnMiLCJPdXRzaWRlRGVzY3JpcHRvcnMiLCJtYWtlTm9uRW51bWVyYWJsZSIsIm5vSW5zdGFuY2VQYXRjaGluZyIsInBhdGNoT3V0c2lkZUVsZW1lbnRBY2Nlc3NvcnMiLCJfX291dHNpZGVBY2Nlc3NvcnMiLCJwYXRjaEluc2lkZUVsZW1lbnRBY2Nlc3NvcnMiLCJfX2luc2lkZUFjY2Vzc29ycyIsImN1c3RvbUVsZW1lbnRzIiwiZXZlbnRXcmFwcGVyc05hbWUiLCJEYXRlIiwibm93IiwiY29tcG9zZWRHZXR0ZXIiLCJjb21wb3NlZFByb3AiLCJldiIsInNoYWR5VGFyZ2V0IiwiX19zaGFkeVRhcmdldCIsIm5hdGl2ZUV2ZW50T3B0aW9ucyIsImFsd2F5c0NvbXBvc2VkIiwidW5wYXRjaGVkRXZlbnRzIiwiZ2V0Um9vdE5vZGVXaXRoRmFsbGJhY2siLCJldmVudFRhcmdldCIsInBhdGhDb21wb3NlciIsInN0YXJ0Tm9kZSIsImNvbXBvc2VkIiwiY29tcG9zZWRQYXRoIiwiY3VycmVudCIsInN0YXJ0Um9vdCIsImhvc3QiLCJldmVudCIsIl9fY29tcG9zZWRQYXRoIiwicmV0YXJnZXQiLCJwYXRoIiwiYW5jZXN0b3IiLCJsYXN0Um9vdCIsInJvb3RJZHgiLCJyZWZOb2RlUGF0aCIsIkV2ZW50UGF0Y2hlcyIsIl9fY29tcG9zZWQiLCJpc1RydXN0ZWQiLCJjdXJyZW50VGFyZ2V0IiwiX19yZWxhdGVkVGFyZ2V0IiwiX19yZWxhdGVkVGFyZ2V0Q29tcG9zZWRQYXRoIiwic3RvcFByb3BhZ2F0aW9uIiwiX19wcm9wYWdhdGlvblN0b3BwZWQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJfX2ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsImV2ZW50UGhhc2VEZXNjcmlwdG9yIiwiQVRfVEFSR0VUIiwibWl4aW5Db21wb3NlZEZsYWciLCJCYXNlIiwia2xhenoiLCJub25CdWJibGluZ0V2ZW50c1RvUmV0YXJnZXQiLCJoYXNSZXRhcmdldGVkIiwiZmlyZUhhbmRsZXJzIiwicGhhc2UiLCJocyIsIl9faGFuZGxlcnMiLCJzaGFkeURpc3BhdGNoRXZlbnROZWVkc1Byb3h5RXZlbnQiLCJzaGFkeURpc3BhdGNoRXZlbnQiLCJvcmlnaW5hbEV2ZW50IiwicmV0YXJnZXRlZFBhdGgiLCJwcmV2Q3VycmVudFRhcmdldERlc2MiLCJldmVudFBoYXNlIiwiQ0FQVFVSSU5HX1BIQVNFIiwicHJldkV2ZW50UGhhc2VEZXNjIiwiYXRUYXJnZXQiLCJCVUJCTElOR19QSEFTRSIsImZpbmRMaXN0ZW5lciIsIndyYXBwZXJzIiwic2F2ZWRUeXBlIiwic2F2ZWRMaXN0ZW5lciIsInNhdmVkQ2FwdHVyZSIsInNhdmVkTm9kZSIsInBhdGNoRXZlbnQiLCJmbk9yT2JqIiwiaGFuZGxlclR5cGUiLCJ3cmFwcGVyRm4iLCJsYXN0Q3VycmVudFRhcmdldERlc2MiLCJsYXN0RXZlbnRQaGFzZURlc2MiLCJpZHgiLCJhY3RpdmF0ZUZvY3VzRXZlbnRPdmVycmlkZXMiLCJFdmVudFBhdGNoZXNEZXNjcmlwdG9ycyIsImdldFByb3RvdHlwZU9mIiwiU0hBRFlfUFJPVE8iLCJwYXRjaGVkUHJvdG8iLCJTSEFEWV9TT1VSQ0VfUFJPVE8iLCJQYXRjaGVkRXZlbnQiLCJQYXRjaGVkQ3VzdG9tRXZlbnQiLCJQYXRjaGVkTW91c2VFdmVudCIsInBhdGNoQ2xpY2siLCJjb21wb3NlZENsaWNrRm4iLCJjbGljayIsImV2ZW50UHJvcGVydHlOYW1lc0ZvckVsZW1lbnQiLCJzdWJzdHJpbmciLCJldmVudFByb3BlcnR5TmFtZXNGb3JIVE1MRWxlbWVudCIsInByb3BlcnR5Iiwic2hhZHlEYXRhIiwiZXZlbnROYW1lIiwiX19vbkNhbGxiYWNrTGlzdGVuZXJzIiwibmV3U3BsaWNlIiwiYWRkZWRDb3VudCIsInJlbW92ZWQiLCJjYWxjU3BsaWNlcyIsImN1cnJlbnRFbmQiLCJvbGQiLCJvbGRFbmQiLCJjdXJyZW50U3RhcnQiLCJvbGRTdGFydCIsInByZWZpeENvdW50Iiwic3VmZml4Q291bnQiLCJtaW5MZW5ndGgiLCJtaW4iLCJjdXJyZW50VmFsdWUiLCJwcmV2aW91c1ZhbHVlIiwiaW5kZXgxIiwiaW5kZXgyIiwiY291bnQiLCJlcXVhbHMiLCJjb2x1bW5Db3VudCIsImRpc3RhbmNlcyIsInJvd0NvdW50Iiwibm9ydGgiLCJ3ZXN0IiwiZWRpdHMiLCJFRElUX0FERCIsIkVESVRfREVMRVRFIiwibm9ydGhXZXN0IiwiRURJVF9MRUFWRSIsIkVESVRfVVBEQVRFIiwicmV2ZXJzZSIsInNwbGljZXMiLCJvbGRJbmRleCIsIkV2ZW50VGFyZ2V0UGF0Y2hlcyIsInNjb3BpbmdTaGltIiwiZ2V0U2NvcGluZ1NoaW0iLCJzY29wZUNsYXNzQXR0cmlidXRlIiwicmVtb3ZlU2hhZHlTY29waW5nIiwiY3VycmVudFNjb3BlTmFtZSIsImN1cnJlbnRTY29wZUlzQ29ycmVjdCIsIm5ld1Njb3BlTmFtZSIsImNvcnJlY3RTY29wZSIsImN1cnJlbnRTY29wZSIsImN1cnJlbnRTY29wZUZvck5vZGUiLCJ0cmVlVmlzaXRvciIsInZpc2l0b3JGbiIsIm5hdGl2ZUlzQ29ubmVjdGVkQWNjZXNzb3JzIiwibmF0aXZlSXNDb25uZWN0ZWQiLCJyZW1vdmVPd25lclNoYWR5Um9vdCIsIm93bmVyU2hhZHlSb290IiwiZmlyc3RDb21wb3NlZE5vZGUiLCJmbGF0dGVuZWQiLCJmbGF0dGVuZWROb2RlcyIsInNjaGVkdWxlT2JzZXJ2ZXIiLCJhZGRlZE5vZGUiLCJyZW1vdmVkTm9kZSIsIk5vZGVQYXRjaGVzIiwiY2hpbGROb2Rlcy5pdGVtIiwiaXNDb25uZWN0ZWQiLCJ0YyIsImpvaW4iLCJyZWZfbm9kZSIsInJlZkRhdGEiLCJzbG90c0FkZGVkIiwib3duZXJSb290Iiwib3duZXJTaGFkeVJvb3RGb3JOb2RlIiwib2xkU2NvcGVOYW1lIiwic2tpcFVuc2NvcGluZyIsImFsbG93TmF0aXZlSW5zZXJ0IiwibmVlZHNTY29waW5nIiwibmVlZHNTbG90RmluZGluZyIsIl9lbnN1cmVTbG90RGF0YSIsIl9wZW5kaW5nU2xvdHMiLCJfYXN5bmNSZW5kZXIiLCJyZWNvcmRJbnNlcnRCZWZvcmUiLCJwYXJlbnREYXRhIiwiYWRvcHROb2RlIiwicmVtb3ZpbmdJbnNlcnRpb25Qb2ludCIsIl9yZW1vdmVDb250YWluZWRTbG90cyIsInJlY29yZFJlbW92ZUNoaWxkIiwicHJldmVudE5hdGl2ZVJlbW92ZSIsImNoYW5nZVNsb3RDb250ZW50IiwiQVRUUklCVVRFX05PREUiLCJuYyIsIlNsb3RhYmxlUGF0Y2hlcyIsImFzc2lnbmVkU2xvdCIsIl9yZW5kZXIiLCJQQVJFTlMiLCJlbmQiLCJtYXRjaE5lc3RlZFBhcmVucyIsImsiLCJ2IiwiZmluZE5leHQiLCJzdGFydCIsInF1ZXJ5Q2hhcnMiLCJwYXJlbkluZm8iLCJwYXJzZVNlbGVjdG9yTGlzdCIsImVuZENvbXBsZXhTZWxlY3RvciIsImNodW5rcyIsInBvcCIsImNvbXBvdW5kU2VsZWN0b3JzIiwieCIsImNvbWJpbmF0b3JzIiwicHJldkNodW5rIiwibmV4dEluZGV4IiwibmV4dENodW5rIiwicXVlcnkiLCJtYXRjaGVyIiwiaGFsdGVyIiwicXVlcnlDaGlsZE5vZGVzIiwiUGFyZW50Tm9kZVBhdGNoZXMiLCJjb250ZXh0Tm9kZSIsInNlbGVjdG9yTGlzdCIsIm1hdGNoZXNDb21wb3VuZFNlbGVjdG9yIiwiY29tcG91bmRTZWxlY3RvciIsImNvbXBsZXhTZWxlY3RvcnMiLCJjdXJzb3JzIiwiY29tcGxleFNlbGVjdG9yUGFydHMiLCJtYXRjaGVkRWxlbWVudCIsInNvbWUiLCJjdXJzb3IiLCJsYXN0SW5kZXgiLCJjb21iaW5hdG9yIiwic2libGluZyIsIlF1ZXJ5UGF0Y2hlcyIsImNhbmRpZGF0ZXMiLCJjYW5kaWRhdGUiLCJsb2dpY2FsUXVlcnlTZWxlY3RvckFsbCIsInVzZU5hdGl2ZSIsIlBhcmVudE5vZGVEb2N1bWVudE9yRnJhZ21lbnRQYXRjaGVzIiwiQ2hpbGROb2RlUGF0Y2hlcyIsImRpc3RyaWJ1dGVBdHRyaWJ1dGVDaGFuZ2UiLCJfc2xvdExpc3QiLCJfdmFsaWRhdGVTbG90cyIsIm9sZE5hbWUiLCJfX3Nsb3ROYW1lIiwiX25hbWVGb3JTbG90Iiwic2xvdHMiLCJfc2xvdE1hcCIsIl9zb3J0U2xvdHMiLCJFbGVtZW50UGF0Y2hlcyIsInNsb3QiLCJ3cmFwcGVkRGVzY3JpcHRvckZvckV2ZW50UHJvcGVydHkiLCJFbGVtZW50U2hhZG93UGF0Y2hlcyIsInJlY29yZENoaWxkTm9kZXMiLCJTaGFkeVJvb3QiLCJTaGFkeVJvb3RDb25zdHJ1Y3Rpb25Ub2tlbiIsInB1YmxpY1Jvb3QiLCJFbGVtZW50T3JTaGFkb3dSb290UGF0Y2hlcyIsIkhUTUxFbGVtZW50UGF0Y2hlcyIsImJsdXIiLCJzaGFkb3dBY3RpdmUiLCJhY3RpdmVFbGVtZW50IiwiU2xvdFBhdGNoZXMiLCJhc3NpZ25lZE5vZGVzIiwiZmxhdHRlbiIsIkRvY3VtZW50T3JGcmFnbWVudFBhdGNoZXMiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsSW5Sb290Iiwicm9vdHMiLCJlbFJvb3QiLCJnZXRBbmNlc3RvclJvb3RzIiwiZG9jT3JSb290IiwiZWxlbWVudHNGcm9tUG9pbnRQcm9wZXJ0eSIsIkRvY3VtZW50T3JTaGFkb3dSb290UGF0Y2hlcyIsImFjdGl2ZSIsImFjdGl2ZVJvb3QiLCJlbGVtZW50c0Zyb21Qb2ludCIsInkiLCJuYXRpdmVSZXN1bHQiLCJVU0VfTkFUSVZFX0RPQ1VNRU5UX0VGUCIsIm5hdGl2ZUFycmF5IiwiYW5jZXN0b3JSb290cyIsInJvb3RlZFJlc3VsdCIsInIiLCJlbGVtZW50RnJvbVBvaW50IiwiRG9jdW1lbnRQYXRjaGVzIiwiV2luZG93UGF0Y2hlcyIsIk5vblN0YW5kYXJkSFRNTEVsZW1lbnQiLCJwYXRjaE1hcCIsIlRleHQiLCJDb21tZW50IiwiQ0RBVEFTZWN0aW9uIiwiUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwiSFRNTFNsb3RFbGVtZW50IiwiZGlzYWxsb3dlZE5hdGl2ZVBhdGNoZXMiLCJhcHBseVBhdGNoTGlzdCIsImRpc2FsbG93ZWQiLCJwYXRjaCIsImFwcGx5UGF0Y2hlcyIsImN0b3IiLCJQUk9UT19JU19QQVRDSEVEIiwiUEFUQ0hFRF9QUk9UTyIsInBhdGNoTm9kZSIsIm5hdGl2ZVByb3RvIiwicGF0Y2hFbGVtZW50UHJvdG8iLCJzZXRQcm90b3R5cGVPZiIsIk91dHNpZGVBY2Nlc3NvcnMiLCJJbnNpZGVBY2NjZXNzb3JzIiwibGlua05vZGUiLCJjb250YWluZXJEYXRhIiwicmVmX25vZGVEYXRhIiwicHNkIiwibnNkIiwiZmlyc3QiLCJhZG9wdGVkUGFyZW50IiwicHJldmlvdXMiLCJTaGFkb3dSb290UGF0Y2hlcyIsInBhdGNoU2hhZHlBY2Nlc3NvcnMiLCJpc1JlbmRlcmluZyIsInJlYWR5U3RhdGUiLCJyb290UmVuZGVyZWQiLCJhbmNlc3Rvckxpc3QiLCJhbmNlc3RvcnMiLCJ1bnNoaWZ0IiwidG9rZW4iLCJfaW5pdCIsIm1vZGUiLCJob3N0RGF0YSIsIk1PREVfQ0xPU0VEIiwicm9vdERhdGEiLCJfcmVuZGVyUGVuZGluZyIsInJlbmRlclJvb3QiLCJfX2NoaWxkU2xvdENvdW50IiwiX3JlbmRlclNlbGYiLCJ3YXNSZW5kZXJpbmciLCJfZGlzdHJpYnV0ZSIsInNsb3REYXRhIiwiX3ByZXZpb3VzbHlBc3NpZ25lZE5vZGVzIiwiX3ByZXZBc3NpZ25lZFNsb3QiLCJfZGlzdHJpYnV0ZU5vZGVUb1Nsb3QiLCJzbG90UGFyZW50Um9vdCIsInNsb3RQYXJlbnREYXRhIiwicHJldkFzc2lnbmVkTm9kZXMiLCJkaXJ0eSIsIl9maXJlU2xvdENoYW5nZSIsIl9jb21wb3NlIiwiY29tcG9zZUxpc3QiLCJ0YXJnZXROb2RlIiwiZGlzdHJpYnV0ZWROb2RlIiwiX2hhc1JlbmRlcmVkIiwiZm9yY2VkU2xvdCIsIm9sZFNsb3QiLCJDQVRDSEFMTF9OQU1FIiwiX2FkZEFzc2lnbmVkVG9GbGF0dGVuZWROb2RlcyIsImFzc2lnbmVkIiwibmVzdGVkQXNzaWduZWQiLCJzbG90TmFtZXNUb1NvcnQiLCJzbG90UGFyZW50IiwiX21hcFNsb3RzIiwic29ydCIsImIiLCJsaXN0QSIsImxpc3RCIiwibkEiLCJuQiIsImRpZFJlbW92ZSIsInBhdGNoU2hhZHlSb290IiwiU0hBRFlfUFJFRklYIiwibm9kZU5hbWUiLCJkZWZpbmUiLCJjb25uZWN0TWFwIiwiY2xlYXIiLCJNYW5hZ2VDb25uZWN0IiwiY29ubmVjdGVkIiwiZGlzY29ubmVjdGVkIiwiY291bnRlciIsImNvbm5lY3RGbGFnIiwiY29ubmVjdGVkQ2FsbGJhY2siLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsIm9yaWdpbmFsRGVmaW5lIiwiV3JhcHBlciIsIj8ucHJvdG90eXBlIiwiZm9jdXMiLCJfYWN0aXZlRWxlbWVudCIsImFkZEV2ZW50UHJvcGVydHlXcmFwcGVyIiwid3JhcHBlck1hcCIsIndyYXBwZXIiLCJTaGFkeURPTSIsImZsdXNoSW5pdGlhbCIsIm9ic2VydmVDaGlsZHJlbiIsIkRvY3VtZW50X2NyZWF0ZUVsZW1lbnQiLCJEb2N1bWVudF9jcmVhdGVFbGVtZW50TlMiLCJEb2N1bWVudF9pbXBvcnROb2RlIiwiRG9jdW1lbnRfcHJlcGVuZCIsIkRvY3VtZW50X2FwcGVuZCIsIkRvY3VtZW50RnJhZ21lbnRfcHJlcGVuZCIsIkRvY3VtZW50RnJhZ21lbnRfYXBwZW5kIiwiTm9kZV9jbG9uZU5vZGUiLCJOb2RlX2FwcGVuZENoaWxkIiwiTm9kZV9pbnNlcnRCZWZvcmUiLCJOb2RlX3JlbW92ZUNoaWxkIiwiTm9kZV9yZXBsYWNlQ2hpbGQiLCJOb2RlX3RleHRDb250ZW50IiwiRWxlbWVudF9hdHRhY2hTaGFkb3ciLCJFbGVtZW50X2lubmVySFRNTCIsIkVsZW1lbnRfZ2V0QXR0cmlidXRlIiwiRWxlbWVudF9zZXRBdHRyaWJ1dGUiLCJFbGVtZW50X3JlbW92ZUF0dHJpYnV0ZSIsIkVsZW1lbnRfdG9nZ2xlQXR0cmlidXRlIiwiRWxlbWVudF9nZXRBdHRyaWJ1dGVOUyIsImdldEF0dHJpYnV0ZU5TIiwiRWxlbWVudF9zZXRBdHRyaWJ1dGVOUyIsInNldEF0dHJpYnV0ZU5TIiwiRWxlbWVudF9yZW1vdmVBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZU5TIiwiRWxlbWVudF9pbnNlcnRBZGphY2VudEVsZW1lbnQiLCJFbGVtZW50X2luc2VydEFkamFjZW50SFRNTCIsIkVsZW1lbnRfcHJlcGVuZCIsIkVsZW1lbnRfYXBwZW5kIiwiRWxlbWVudF9iZWZvcmUiLCJFbGVtZW50X2FmdGVyIiwiRWxlbWVudF9yZXBsYWNlV2l0aCIsIkVsZW1lbnRfcmVtb3ZlIiwiSFRNTEVsZW1lbnRfaW5uZXJIVE1MIiwiSFRNTEVsZW1lbnRfaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwiSFRNTEVsZW1lbnRfaW5zZXJ0QWRqYWNlbnRIVE1MIiwicmVzZXJ2ZWRFbGVtZW50TmFtZVNldCIsImlzVmFsaWRDdXN0b21FbGVtZW50TmFtZSIsInJlc2VydmVkIiwidmFsaWRGb3JtIiwibmF0aXZlQ29udGFpbnMiLCJuYXRpdmVWYWx1ZSIsIl9fQ0VfaXNJbXBvcnREb2N1bWVudCIsImNoaWxkcmVuRnJvbUZyYWdtZW50IiwibmF0aXZlQ2hpbGRyZW4iLCJuZXh0U2libGluZ09yQW5jZXN0b3JTaWJsaW5nIiwid2Fsa0RlZXBEZXNjZW5kYW50RWxlbWVudHMiLCJ2aXNpdGVkSW1wb3J0cyIsImltcG9ydCIsIl9fQ0Vfc2hhZG93Um9vdCIsIm5vRG9jdW1lbnRDb25zdHJ1Y3Rpb25PYnNlcnZlciIsInByaW9yQ3VzdG9tRWxlbWVudHMiLCJzaGFkeURvbUZhc3RXYWxrIiwiX3BhdGNoZXNOb2RlIiwiX3BhdGNoZXNFbGVtZW50IiwiX2hhc1BhdGNoZXMiLCJ1c2VEb2N1bWVudENvbnN0cnVjdGlvbk9ic2VydmVyIiwiZm9yRWFjaEVsZW1lbnQiLCJlbGVtZW50cyIsImFkZE5vZGVQYXRjaCIsImFkZEVsZW1lbnRQYXRjaCIsInBhdGNoVHJlZSIsInBhdGNoRWxlbWVudCIsIl9fQ0VfcGF0Y2hlZCIsImNvbm5lY3RUcmVlIiwiY3VzdG9tIiwiX19DRV9zdGF0ZSIsInVwZ3JhZGVSZWFjdGlvbiIsImRpc2Nvbm5lY3RUcmVlIiwicGF0Y2hBbmRVcGdyYWRlVHJlZSIsInVwZ3JhZGUiLCJnYXRoZXJFbGVtZW50cyIsIl9fQ0VfcmVnaXN0cnkiLCJfX0NFX2RvY3VtZW50TG9hZEhhbmRsZWQiLCJjbG9uZWRWaXNpdGVkSW1wb3J0cyIsInJlZ2lzdHJ5IiwiZGVmYXVsdFZpZXciLCJpbnRlcm5hbF9sb2NhbE5hbWVUb0RlZmluaXRpb24iLCJkZWZpbml0aW9uIiwiY29uc3RydWN0aW9uU3RhY2siLCJjb25zdHJ1Y3RvckZ1bmN0aW9uIiwiZmFpbGVkIiwiX19DRV9kZWZpbml0aW9uIiwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrIiwiaGFzQXR0cmlidXRlcyIsIm9ic2VydmVkQXR0cmlidXRlcyIsIl91cGdyYWRlQW5FbGVtZW50IiwicmVwb3J0VGhlRXhjZXB0aW9uIiwib2xkVmFsdWUiLCJuYW1lc3BhY2UiLCJjcmVhdGVBbkVsZW1lbnQiLCJOU19IVE1MIiwiSFRNTFVua25vd25FbGVtZW50IiwibWVzc2FnZSIsImZpbGVuYW1lIiwibGluZW5vIiwiY29sbm8iLCJzb3VyY2VVUkwiLCJmaWxlTmFtZSIsImxpbmUiLCJsaW5lTnVtYmVyIiwiY29sdW1uIiwiY29sdW1uTnVtYmVyIiwiRXJyb3JFdmVudCIsImluaXRFcnJvckV2ZW50IiwiZXZlbnQucHJldmVudERlZmF1bHQiLCJfcHJvbWlzZSIsIl9yZXNvbHZlIiwiRG9jdW1lbnRDb25zdHJ1Y3Rpb25PYnNlcnZlciIsImludGVybmFscyIsIl9pbnRlcm5hbHMiLCJfZG9jdW1lbnQiLCJfaGFuZGxlTXV0YXRpb25zIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImRpc2Nvbm5lY3QiLCJfbG9jYWxOYW1lVG9Db25zdHJ1Y3RvckdldHRlciIsIl9sb2NhbE5hbWVUb0RlZmluaXRpb24iLCJfY29uc3RydWN0b3JUb0RlZmluaXRpb24iLCJfZWxlbWVudERlZmluaXRpb25Jc1J1bm5pbmciLCJfd2hlbkRlZmluZWREZWZlcnJlZCIsIl9mbHVzaENhbGxiYWNrIiwidGhpcy5fZmx1c2hDYWxsYmFjayIsIl9mbHVzaFBlbmRpbmciLCJfdW5mbHVzaGVkTG9jYWxOYW1lcyIsIl9kb2N1bWVudENvbnN0cnVjdGlvbk9ic2VydmVyIiwicG9seWZpbGxEZWZpbmVMYXp5IiwiY29uc3RydWN0b3JHZXR0ZXIiLCJpbnRlcm5hbF9hc3NlcnRDYW5EZWZpbmVMb2NhbE5hbWUiLCJfZmx1c2giLCJpbnRlcm5hbF9yZWlmeURlZmluaXRpb24iLCJTeW50YXhFcnJvciIsImdldENhbGxiYWNrIiwiY2FsbGJhY2tWYWx1ZSIsImFkb3B0ZWRDYWxsYmFjayIsImVsZW1lbnRzV2l0aFN0YWJsZURlZmluaXRpb25zIiwidW5mbHVzaGVkTG9jYWxOYW1lcyIsImVsZW1lbnRzV2l0aFBlbmRpbmdEZWZpbml0aW9ucyIsInBlbmRpbmdFbGVtZW50cyIsInBlbmRpbmdVcGdyYWRhYmxlRWxlbWVudHMiLCJ3aGVuRGVmaW5lZCIsInByaW9yIiwiRGVmZXJyZWQiLCJhbnlEZWZpbml0aW9uRXhpc3RzIiwiZGVmaW5pdGlvbkhhc0ZsdXNoZWQiLCJwb2x5ZmlsbFdyYXBGbHVzaENhbGxiYWNrIiwib3V0ZXIiLCJpbm5lciIsImV4aXN0aW5nRGVmaW5pdGlvbiIsIkN1c3RvbUVsZW1lbnRSZWdpc3RyeSIsImRlc3RpbmF0aW9uIiwiYnVpbHRJbiIsImFwcGVuZFByZXBlbmRQYXRjaCIsImJ1aWx0SW5NZXRob2QiLCJjb25uZWN0ZWRFbGVtZW50cyIsIkRvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50TlMiLCJQYXRjaFBhcmVudE5vZGUiLCJiZWZvcmVBZnRlclBhdGNoIiwiZGVzdGluYXRpb24ucmVwbGFjZVdpdGgiLCJ3YXNDb25uZWN0ZWQiLCJkZXN0aW5hdGlvbi5yZW1vdmUiLCJwYXRjaF9pbm5lckhUTUwiLCJiYXNlRGVzY3JpcHRvciIsImh0bWxTdHJpbmciLCJyZW1vdmVkRWxlbWVudHMiLCJwYXRjaF9pbnNlcnRBZGphY2VudEVsZW1lbnQiLCJiYXNlTWV0aG9kIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwiZGVzdGluYXRpb24uaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwicG9zaXRpb24iLCJpbnNlcnRlZEVsZW1lbnQiLCJwYXRjaF9pbnNlcnRBZGphY2VudEhUTUwiLCJ1cGdyYWRlTm9kZXNJblJhbmdlIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiZGVzdGluYXRpb24uaW5zZXJ0QWRqYWNlbnRIVE1MIiwic3RyUG9zaXRpb24iLCJtYXJrZXIiLCJFbGVtZW50LnByb3RvdHlwZS5hdHRhY2hTaGFkb3ciLCJpbml0IiwiYXNzaWduZWRWYWx1ZSIsImlzVGVtcGxhdGUiLCJyYXdFbGVtZW50IiwiRWxlbWVudC5wcm90b3R5cGUuc2V0QXR0cmlidXRlIiwiRWxlbWVudC5wcm90b3R5cGUuc2V0QXR0cmlidXRlTlMiLCJFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGUiLCJFbGVtZW50LnByb3RvdHlwZS50b2dnbGVBdHRyaWJ1dGUiLCJoYWRBdHRyaWJ1dGUiLCJFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGVOUyIsImFscmVhZHlDb25zdHJ1Y3RlZE1hcmtlciIsIlBhdGNoZWRIVE1MRWxlbWVudCIsInBhdGNoX3RleHRDb250ZW50IiwiY2hpbGROb2Rlc0xlbmd0aCIsIk5vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZSIsImluc2VydGVkTm9kZXMiLCJub2RlV2FzQ29ubmVjdGVkRWxlbWVudCIsIk5vZGUucHJvdG90eXBlLnJlbW92ZUNoaWxkIiwibm9kZVRvSW5zZXJ0Iiwibm9kZVRvUmVtb3ZlIiwibm9kZVRvSW5zZXJ0V2FzQ29ubmVjdGVkRWxlbWVudCIsInRoaXNJc0Nvbm5lY3RlZCIsIkN1c3RvbUVsZW1lbnRJbnRlcm5hbHMiLCJQYXRjaEhUTUxFbGVtZW50IiwiaW5zdGFsbFBvbHlmaWxsIiwiU3R5bGVOb2RlIiwicGFyc2UiLCJSWCQkbW9kdWxlJG5vZGVfbW9kdWxlcyQkd2ViY29tcG9uZW50cyRzaGFkeWNzcyRzcmMkY3NzX3BhcnNlLmNvbW1lbnRzIiwiUlgkJG1vZHVsZSRub2RlX21vZHVsZXMkJHdlYmNvbXBvbmVudHMkc2hhZHljc3Mkc3JjJGNzc19wYXJzZS5wb3J0IiwiT1BFTl9CUkFDRSIsIkNMT1NFX0JSQUNFIiwicGFyc2VDc3MiLCJ0cmltIiwiX2V4cGFuZFVuaWNvZGVFc2NhcGVzIiwiUlgkJG1vZHVsZSRub2RlX21vZHVsZXMkJHdlYmNvbXBvbmVudHMkc2hhZHljc3Mkc3JjJGNzc19wYXJzZS5tdWx0aXBsZVNwYWNlcyIsImxhc3RJbmRleE9mIiwiQVRfU1RBUlQiLCJNRURJQV9TVEFSVCIsInR5cGVzJCRtb2R1bGUkbm9kZV9tb2R1bGVzJCR3ZWJjb21wb25lbnRzJHNoYWR5Y3NzJHNyYyRjc3NfcGFyc2UuTUVESUFfUlVMRSIsIlJYJCRtb2R1bGUkbm9kZV9tb2R1bGVzJCR3ZWJjb21wb25lbnRzJHNoYWR5Y3NzJHNyYyRjc3NfcGFyc2Uua2V5ZnJhbWVzUnVsZSIsInR5cGVzJCRtb2R1bGUkbm9kZV9tb2R1bGVzJCR3ZWJjb21wb25lbnRzJHNoYWR5Y3NzJHNyYyRjc3NfcGFyc2UuS0VZRlJBTUVTX1JVTEUiLCJWQVJfU1RBUlQiLCJ0eXBlcyQkbW9kdWxlJG5vZGVfbW9kdWxlcyQkd2ViY29tcG9uZW50cyRzaGFkeWNzcyRzcmMkY3NzX3BhcnNlLk1JWElOX1JVTEUiLCJ0eXBlcyQkbW9kdWxlJG5vZGVfbW9kdWxlcyQkd2ViY29tcG9uZW50cyRzaGFkeWNzcyRzcmMkY3NzX3BhcnNlLlNUWUxFX1JVTEUiLCJyJCIsImNvZGUiLCJyZXBlYXQiLCJzdHJpbmdpZnkiLCJwcmVzZXJ2ZVByb3BlcnRpZXMiLCJjc3NUZXh0IiwicnVsZXMiLCJSWCQkbW9kdWxlJG5vZGVfbW9kdWxlcyQkd2ViY29tcG9uZW50cyRzaGFkeWNzcyRzcmMkY3NzX3BhcnNlLmN1c3RvbVByb3AiLCJSWCQkbW9kdWxlJG5vZGVfbW9kdWxlcyQkd2ViY29tcG9uZW50cyRzaGFkeWNzcyRzcmMkY3NzX3BhcnNlLm1peGluUHJvcCIsIlJYJCRtb2R1bGUkbm9kZV9tb2R1bGVzJCR3ZWJjb21wb25lbnRzJHNoYWR5Y3NzJHNyYyRjc3NfcGFyc2UubWl4aW5BcHBseSIsIlJYJCRtb2R1bGUkbm9kZV9tb2R1bGVzJCR3ZWJjb21wb25lbnRzJHNoYWR5Y3NzJHNyYyRjc3NfcGFyc2UudmFyQXBwbHkiLCJTVFlMRV9SVUxFIiwiS0VZRlJBTUVTX1JVTEUiLCJNRURJQV9SVUxFIiwiTUlYSU5fUlVMRSIsImNvbW1lbnRzIiwicG9ydCIsImN1c3RvbVByb3AiLCJtaXhpblByb3AiLCJtaXhpbkFwcGx5IiwidmFyQXBwbHkiLCJrZXlmcmFtZXNSdWxlIiwibXVsdGlwbGVTcGFjZXMiLCJuYXRpdmVTaGFkb3ciLCJuYXRpdmVDc3NWYXJpYWJsZXNfIiwiY2FsY0Nzc1ZhcmlhYmxlcyIsInNoaW1jc3Nwcm9wZXJ0aWVzIiwiQ1NTIiwic3VwcG9ydHMiLCJjc3NCdWlsZCIsIlNoYWR5Q1NTIiwiZGlzYWJsZVJ1bnRpbWUiLCJuYXRpdmVDc3MiLCJuYXRpdmVDc3NWYXJpYWJsZXMiLCJWQVJfQVNTSUdOIiwiTUlYSU5fTUFUQ0giLCJWQVJfQ09OU1VNRUQiLCJBTklNQVRJT05fTUFUQ0giLCJNRURJQV9NQVRDSCIsIkJSQUNLRVRFRCIsInN0eWxlVGV4dFNldCIsInRvQ3NzVGV4dCIsImZvckVhY2hSdWxlIiwicnVsZXNGb3JTdHlsZSIsImlzS2V5ZnJhbWVzU2VsZWN0b3IiLCJydWxlIiwic3R5bGVSdWxlQ2FsbGJhY2siLCJrZXlmcmFtZXNSdWxlQ2FsbGJhY2siLCJvbmx5QWN0aXZlUnVsZXMiLCJza2lwUnVsZXMiLCJtYXRjaE1lZGlhIiwiYXBwbHlDc3MiLCJtb25pa2VyIiwiYXBwbHlTdHlsZSIsImxhc3RIZWFkQXBwbHlOb2RlIiwiYXBwbHlTdHlsZVBsYWNlSG9sZGVyIiwicGxhY2VIb2xkZXIiLCJjcmVhdGVDb21tZW50Iiwic2NvcGUiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIkRPQ1VNRU5UX1BPU0lUSU9OX1BSRUNFRElORyIsImZpbmRNYXRjaGluZ1BhcmVuIiwibGV2ZWwiLCJwcm9jZXNzVmFyaWFibGVBbmRGYWxsYmFjayIsInN1ZmZpeCIsImNvbW1hIiwiZmFsbGJhY2siLCJzZXRFbGVtZW50Q2xhc3NSYXciLCJnZXRJc0V4dGVuZHMiLCJ0eXBlRXh0ZW5zaW9uIiwiaXMiLCJleHRlbmRzIiwic3BsaXRTZWxlY3Rvckxpc3QiLCJwYXJ0IiwiZ2V0Q3NzQnVpbGQiLCJfX2Nzc0J1aWxkIiwiYXR0clZhbHVlIiwiQ1NTX0JVSUxEX0FUVFIiLCJidWlsZENvbW1lbnQiLCJjb21tZW50UGFydHMiLCJpc09wdGltYWxDc3NCdWlsZCIsIlN0eWxlVHJhbnNmb3JtZXIiLCJkb21BZGRTY29wZSIsIl90cmFuc2Zvcm1Eb20iLCJ0cmFuc2Zvcm1lciIsIl9jb250ZW50Iiwic2hvdWxkUmVtb3ZlU2NvcGUiLCJjbGFzc0xpc3QiLCJTQ09QRV9OQU1FIiwiQ0xBU1MiLCJkb21SZXBsYWNlU2NvcGUiLCJvbGRTY29wZSIsIm5ld1Njb3BlIiwiZG9tUmVtb3ZlU2NvcGUiLCJlbGVtZW50U3R5bGVzIiwic3R5bGVSdWxlcyIsImNzcyIsImV4dCIsImhvc3RTY29wZSIsIl9jYWxjSG9zdFNjb3BlIiwiQ1NTX0NMQVNTX1BSRUZJWCIsImlzU2NvcGVkIiwidHJhbnNmb3JtZWRTZWxlY3RvciIsIl90cmFuc2Zvcm1SdWxlQ3NzIiwiX3RyYW5zZm9ybUNvbXBsZXhTZWxlY3RvciIsInAkIiwiQ09NUExFWF9TRUxFQ1RPUl9TRVAiLCJfdHdpZGRsZU50aFBsdXMiLCJOVEgiLCJpbnNpZGUiLCJfcHJlc2VydmVNYXRjaGVzUHNldWRvIiwiTUFUQ0hFUyIsImlucHV0IiwiTUFUQ0hFU19SRVBMQUNFTUVOVCIsIl9yZXBsYWNlTWF0Y2hlc1BzZXVkbyIsImN1ciIsInN0b3AiLCJpc050aCIsImlzTWF0Y2hlcyIsIlNMT1RURURfU1RBUlQiLCJTSU1QTEVfU0VMRUNUT1JfU0VQIiwiaW5mbyIsIl90cmFuc2Zvcm1Db21wb3VuZFNlbGVjdG9yIiwiRElSX1BBUkVOIiwiZGlyIiwic2xvdHRlZEluZGV4IiwiU0xPVFRFRCIsIkhPU1QiLCJfdHJhbnNmb3JtSG9zdFNlbGVjdG9yIiwiX3RyYW5zZm9ybVNpbXBsZVNlbGVjdG9yIiwic2xvdHRlZCIsIlNMT1RURURfUEFSRU4iLCJwYXJlbiIsIm91dHB1dCIsIlBTRVVET19QUkVGSVgiLCJIT1NUX1BBUkVOIiwiU0lNUExFX1NFTEVDVE9SX1BSRUZJWCIsInR5cGVTZWxlY3RvciIsIlNFTEVDVE9SX05PX01BVENIIiwibm9ybWFsaXplUm9vdFNlbGVjdG9yIiwiUk9PVCIsIl90cmFuc2Zvcm1Eb2N1bWVudFNlbGVjdG9yIiwiU0NPUEVfRE9DX1NFTEVDVE9SIiwiJGpzY29tcERlZmF1bHRFeHBvcnQiLCJhc3QiLCJwbGFjZWhvbGRlciIsIm93blN0eWxlUHJvcGVydHlOYW1lcyIsIm92ZXJyaWRlU3R5bGVQcm9wZXJ0aWVzIiwiY3VzdG9tU3R5bGUiLCJzY29wZVNlbGVjdG9yIiwic3R5bGVQcm9wZXJ0aWVzIiwiaW5mb0tleSIsInN0eWxlSW5mbyIsIl9nZXRTdHlsZVJ1bGVzIiwiU3R5bGVJbmZvIiwibWV0aG9kIiwicm9vdFNlbGVjdG9yIiwiZGVjb3JhdGVTdHlsZXMiLCJwcm9wcyIsImtleWZyYW1lcyIsInJ1bGVJbmRleCIsImRlY29yYXRlUnVsZSIsIm9uS2V5ZnJhbWVzUnVsZSIsIl9rZXlmcmFtZXMiLCJwcm9wZXJ0eUluZm8iLCJwcm9wZXJ0aWVzIiwiY29sbGVjdFByb3BlcnRpZXMiLCJoYXNQcm9wZXJ0aWVzIiwicngiLCJ2YWx1ZUZvclByb3BlcnR5IiwidmFsdWVGb3JQcm9wZXJ0aWVzIiwicHJvcGVydHlWYWx1ZSIsImNvbG9uIiwicHAiLCJwcm9wZXJ0eURhdGFGcm9tU3R5bGVzIiwic2VsZWN0b3JUb01hdGNoIiwicGFyc2VJbnQiLCJ3aGVuSG9zdE9yUm9vdFJ1bGUiLCJwYXJzZWRTZWxlY3RvciIsImlzSG9zdCIsImlzUm9vdCIsImhvc3RBbmRSb290UHJvcGVydGllc0ZvclNjb3BlIiwiaG9zdFByb3BzIiwicm9vdFByb3BzIiwiX2VsZW1lbnQiLCJ0cmFuc2Zvcm1TdHlsZXMiLCJob3N0U2VsZWN0b3IiLCJob3N0UngiLCJSZWdFeHAiLCJIT1NUX1BSRUZJWCIsIkhPU1RfU1VGRklYIiwiU3R5bGVJbmZvJCRtb2R1bGUkbm9kZV9tb2R1bGVzJCR3ZWJjb21wb25lbnRzJHNoYWR5Y3NzJHNyYyRzdHlsZV9pbmZvLmdldCIsImtleWZyYW1lVHJhbnNmb3JtcyIsIl9lbGVtZW50S2V5ZnJhbWVUcmFuc2Zvcm1zIiwiaGFzQW5pbWF0aW9ucyIsImtleWZyYW1lTmFtZXNUb1RyYW5zZm9ybSIsImtleWZyYW1lIiwidHJhbnNmb3JtIiwia2V5ZnJhbWVzUnVsZXMiLCJrZXlmcmFtZXNOYW1lUngiLCJ0cmFuc2Zvcm1lZEtleWZyYW1lc05hbWUiLCJzY29wZUlkIiwiX2tleWZyYW1lc1J1bGVUcmFuc2Zvcm1lciIsImFwcGx5Q3VzdG9tU3R5bGUiLCJTdHlsZVByb3BlcnRpZXMiLCIkanNjb21wLmdsb2JhbC5PYmplY3QuZGVmaW5lUHJvcGVydGllcyIsIlhTQ09QRV9OQU1FIiwicGxhY2Vob2xkZXJNYXAiLCJjZSIsIm9yaWdEZWZpbmUiLCJ3cmFwcGVkRGVmaW5lIiwiY2xhenoiLCJjYWNoZSIsInN0b3JlIiwidGFnbmFtZSIsInN0eWxlRWxlbWVudCIsInNjb3BlUmVnRXhwIiwiZ2V0Q3VycmVudFNjb3BlIiwiZ2V0T3duZXJTY29wZSIsImhhbmRsZXIiLCJteG5zIiwibXhuIiwidW5zY29wZWROb2RlcyIsInVuc2NvcGVkTm9kZSIsInNjb3BlRm9yUHJldmlvdXNseVVuc2NvcGVkTm9kZSIsImRlbGF5ZWRTdGFydCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRlbXBsYXRlTWFwIiwiaW52YWxpZGF0ZSIsImVsZW1lbnROYW1lIiwiQ1VSUkVOVF9WRVJTSU9OIiwiVkFMSURBVElOR19WRVJTSU9OIiwiTkVYVF9WRVJTSU9OIiwidGVtcGxhdGVJc1ZhbGlkIiwic3RhcnRWYWxpZGF0aW5nVGVtcGxhdGUiLCJfdmFsaWRhdGluZyIsImFkb3B0ZWRDc3NUZXh0TWFwIiwic3R5bGVDYWNoZSIsIlN0eWxlQ2FjaGUiLCJTY29waW5nU2hpbSIsIl9zY29wZUNvdW50ZXIiLCJfZG9jdW1lbnRPd25lciIsIl9kb2N1bWVudE93bmVyU3R5bGVJbmZvIiwiU3R5bGVJbmZvJCRtb2R1bGUkbm9kZV9tb2R1bGVzJCR3ZWJjb21wb25lbnRzJHNoYWR5Y3NzJHNyYyRzdHlsZV9pbmZvLnNldCIsIl9lbGVtZW50c0hhdmVBcHBsaWVkIiwiX2N1c3RvbVN0eWxlSW50ZXJmYWNlIiwiX2FwcGx5U2hpbSIsIndhdGNoZXJGbHVzaCIsImdldFN0eWxlQXN0Iiwic3R5bGVBc3RUb1N0cmluZyIsInByZXBhcmVUZW1wbGF0ZSIsInByZXBhcmVUZW1wbGF0ZURvbSIsInByZXBhcmVUZW1wbGF0ZVN0eWxlcyIsIl9wcmVwYXJlZCIsIm9wdGltYWxCdWlsZCIsInN0eWxlVGV4dFBhcnRzIiwic3R5bGVzIiwic2NvcGluZ0F0dHJpYnV0ZSIsIm5ld1N0eWxlIiwiX2Vuc3VyZSIsImhhc01peGlucyIsIm93blByb3BlcnR5TmFtZXMiLCJzaGFkb3dyb290IiwiX3N0eWxlIiwiX293blByb3BlcnR5TmFtZXMiLCJwcmVwYXJlQWRvcHRlZENzc1RleHQiLCJjc3NUZXh0QXJyYXkiLCJfZG9tUHJlcGFyZWQiLCJfZW5zdXJlQ3VzdG9tU3R5bGVJbnRlcmZhY2UiLCJDdXN0b21TdHlsZUludGVyZmFjZSIsInRyYW5zZm9ybUN1c3RvbVN0eWxlRm9yRG9jdW1lbnQiLCJmbHVzaEN1c3RvbVN0eWxlcyIsIl9lbnN1cmVBcHBseVNoaW0iLCJBcHBseVNoaW0iLCJuZWVkc0FwcGx5U2hpbVVwZGF0ZSIsImN1c3RvbVN0eWxlcyIsIl9yZXZhbGlkYXRlQ3VzdG9tU3R5bGVBcHBseVNoaW0iLCJfcmVvcmRlckN1c3RvbVN0eWxlc1J1bGVzIiwiX3VwZGF0ZVByb3BlcnRpZXMiLCJfYXBwbHlDdXN0b21TdHlsZXMiLCJzdHlsZURvY3VtZW50IiwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HIiwib3ZlcnJpZGVQcm9wcyIsInN0eWxlRWxlbWVudE5hdGl2ZVZhcmlhYmxlcyIsIl9wcmVwYXJlSG9zdCIsIl9pc1Jvb3RPd25lciIsInN0eWxlRWxlbWVudFNoaW1WYXJpYWJsZXMiLCJjYWNoZUVudHJ5IiwiZW50cnkiLCJwbiIsImNhY2hlZFN0eWxlIiwib2xkU2NvcGVTZWxlY3RvciIsImNhY2hlZFNjb3BlU2VsZWN0b3IiLCJhcHBseUVsZW1lbnRTdHlsZSIsInJlbW92ZVByb3BlcnR5Iiwic2V0UHJvcGVydHkiLCJfc3R5bGVPd25lckZvck5vZGUiLCJvd25lciIsIm93bmVyU3R5bGVJbmZvIiwib3duZXJQcm9wZXJ0aWVzIiwiaG9zdEFuZFJvb3RQcm9wcyIsInByb3BlcnRpZXNNYXRjaGluZ0hvc3QiLCJwcm9wZXJ0eURhdGEiLCJvdmVycmlkZXMiLCJyZWlmeSIsInN0eWxlU3VidHJlZSIsIndyYXBwZWRIb3N0IiwiaXNSb290T3duZXIiLCJkZXNjZW5kYW50Um9vdCIsImRlc2NlbmRhbnRIb3N0cyIsImRvY3VtZW50UnVsZSIsIl90cmFuc2Zvcm1SdWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZVZhbHVlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJzZXRFbGVtZW50Q2xhc3MiLCJjbGFzc1N0cmluZyIsImRlZmluaXRlbHlTdHJpbmciLCJzY29wZU5hbWUiLCJjbGFzc0F0dHIiLCJrJCIsImNsYXNzZXMiLCJfc3R5bGVJbmZvRm9yTm9kZSIsInNjb3BlTm9kZSIsInVuc2NvcGVOb2RlIiwic2NvcGVGb3JOb2RlIiwiZWxlbWVudEV4dGVuZHMiLCJJRE5BVG9BU0NJSSIsImgiLCJfaXNJbnZhbGlkIiwicGVyY2VudEVzY2FwZSIsInVuaWNvZGUiLCJjaGFyQ29kZUF0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicGVyY2VudEVzY2FwZVF1ZXJ5Iiwic3RhdGVPdmVycmlkZSIsInN0YXRlIiwiYnVmZmVyIiwic2VlbkF0Iiwic2VlbkJyYWNrZXQiLCJBTFBIQSIsIkFMUEhBTlVNRVJJQyIsIl9zY2hlbWUiLCJyZWxhdGl2ZSIsIl9pc1JlbGF0aXZlIiwiX3F1ZXJ5IiwiX2ZyYWdtZW50IiwiX3NjaGVtZURhdGEiLCJfaG9zdCIsIl9wb3J0IiwiX3BhdGgiLCJfdXNlcm5hbWUiLCJfcGFzc3dvcmQiLCJuZXh0QyIsIm5leHROZXh0QyIsImNwIiwidGVtcEMiLCJ0bXAiLCJyZWxhdGl2ZVBhdGhEb3RNYXBwaW5nIiwialVSTCIsInVybCIsIl91cmwiLCJoYXNXb3JraW5nVXJsIiwidSIsIlVSTCIsInBhdGhuYW1lIiwiYXV0aG9yaXR5IiwicHJvdG9jb2wiLCJob3N0bmFtZSIsImhhc2giLCJvcmlnaW4iLCJPcmlnaW5hbFVSTCIsImJsb2IiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJzaG91bGRGbHVzaCIsImZsdXNoZXIiLCJXZWJDb21wb25lbnRzIiwicmVhZHkiLCJmbHVzaEFuZEZpcmUiLCJ0aGlzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFhQSxNQUFBO0FDYzRCLFdBQUEsR0FBUyxHQUFPO0FBQzFDLFFBQUksSUFBUTtBQUNMLFdBQUEsV0FBVztBQUNoQixpQkFBWSxFQUFNLFNBQ1QsRUFDTCxNQUFNLE9BQ04sT0FBTyxFQUFNLEdBQU4sRUFGRixJQUtBLEVBQUMsTUFBTSxLQUFQO0FBQUEsSUFQTztBQUFBLEVBRndCO0FDUTVDLE1BQUFBLEtBQzRELGNBQWxDLGNBQWMsbUJBQ3BDLE9BQU8saUJBQ1AsU0FBUyxHQUFRLEdBQVUsR0FBWTtBQUNyQyxRQUFJLEtBQVUsTUFBTSxhQUVFLEtBQVcsT0FBTyxVQUN0QyxRQUFPO01BVUYsQ0FBUCxJQUFtQixFQUFXO0FBQzlCO0VBZnFDO1dDTGYsR0FBQyxH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UUFBNUM7QUFFRixVQUFXdThDO0FBQ1hELFNBQWM7V0FDUEUsY0FBY0MsUUFBUTthQUNwQjV6QyxjQUNQLElBQUkvQixZQUFZLHNCQUFzQixFQUFDRCxTQUFTLEtBQVYsQ0FBdEMsQ0FERjtBQUFBLEVBUHNCO0FBWUksaUJBQXhCN0csU0FBUzB5QixjQUVYL3lCLE9BQU9nSixpQkFBaUIsUUFBUSt6QyxFQUFoQyxHQUNBLzhDLE9BQU9nSixpQkFBaUIsb0JBQW9CLFdBQU07QUFDaERoSixXQUFPbUosb0JBQW9CLFFBQVE0ekMsRUFBbkM7QUFDQSxPQUZnRDtBQUFBLEVBQUEsQ0FBbEQsS0FLQUE7QUFBQSxHQUFBLEtBQUFDLGNBQUE7IiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzAsMSwyLDMsNCw1LDYsNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTgsMTksMjAsMjEsMjIsMjMsMjQsMjUsMjYsMjcsMjgsMjksMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDQsNDUsNDYsNDcsNDgsNDksNTAsNTEsNTIsNTMsNTQsNTUsNTYsNTcsNTgsNTksNjAsNjEsNjIsNjMsNjQsNjUsNjYsNjcsNjgsNjksNzAsNzEsNzIsNzMsNzQsNzUsNzYsNzcsNzgsNzksODAsODEsODIsODMsODQsODUsODYsODcsODgsODksOTAsOTEsOTIsOTMsOTQsOTUsOTYsOTddfQ==
