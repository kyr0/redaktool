var e,t,n={"?2ce3":
/*!**********************************!*\
  !*** onnxruntime-node (ignored) ***!
  \**********************************/()=>{},"?7a2c":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/()=>{},"?a42a":
/*!**********************!*\
  !*** path (ignored) ***!
  \**********************/()=>{},"?2b25":
/*!***********************!*\
  !*** sharp (ignored) ***!
  \***********************/()=>{},"?569f":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/()=>{},"?3f59":
/*!**********************!*\
  !*** path (ignored) ***!
  \**********************/()=>{},"?154a":
/*!*********************!*\
  !*** url (ignored) ***!
  \*********************/()=>{},"./node_modules/@huggingface/jinja/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@huggingface/jinja/dist/index.js ***!
  \*******************************************************/(e,t,n)=>{n.r(t),n.d(t,{Environment:()=>H,Interpreter:()=>K,Template:()=>Q,parse:()=>I,tokenize:()=>u});var r=Object.freeze({Text:"Text",NumericLiteral:"NumericLiteral",BooleanLiteral:"BooleanLiteral",StringLiteral:"StringLiteral",Identifier:"Identifier",Equals:"Equals",OpenParen:"OpenParen",CloseParen:"CloseParen",OpenStatement:"OpenStatement",CloseStatement:"CloseStatement",OpenExpression:"OpenExpression",CloseExpression:"CloseExpression",OpenSquareBracket:"OpenSquareBracket",CloseSquareBracket:"CloseSquareBracket",OpenCurlyBracket:"OpenCurlyBracket",CloseCurlyBracket:"CloseCurlyBracket",Comma:"Comma",Dot:"Dot",Colon:"Colon",Pipe:"Pipe",CallOperator:"CallOperator",AdditiveBinaryOperator:"AdditiveBinaryOperator",MultiplicativeBinaryOperator:"MultiplicativeBinaryOperator",ComparisonBinaryOperator:"ComparisonBinaryOperator",UnaryOperator:"UnaryOperator",Set:"Set",If:"If",For:"For",In:"In",Is:"Is",NotIn:"NotIn",Else:"Else",EndIf:"EndIf",ElseIf:"ElseIf",EndFor:"EndFor",And:"And",Or:"Or",Not:"UnaryOperator"}),s=Object.freeze({set:r.Set,for:r.For,in:r.In,is:r.Is,if:r.If,else:r.Else,endif:r.EndIf,elif:r.ElseIf,endfor:r.EndFor,and:r.And,or:r.Or,not:r.Not,"not in":r.NotIn,true:r.BooleanLiteral,false:r.BooleanLiteral}),i=class{constructor(e,t){this.value=e,this.type=t}};function o(e){return/\w/.test(e)}function a(e){return/[0-9]/.test(e)}var l=[["{%",r.OpenStatement],["%}",r.CloseStatement],["{{",r.OpenExpression],["}}",r.CloseExpression],["(",r.OpenParen],[")",r.CloseParen],["{",r.OpenCurlyBracket],["}",r.CloseCurlyBracket],["[",r.OpenSquareBracket],["]",r.CloseSquareBracket],[",",r.Comma],[".",r.Dot],[":",r.Colon],["|",r.Pipe],["<=",r.ComparisonBinaryOperator],[">=",r.ComparisonBinaryOperator],["==",r.ComparisonBinaryOperator],["!=",r.ComparisonBinaryOperator],["<",r.ComparisonBinaryOperator],[">",r.ComparisonBinaryOperator],["+",r.AdditiveBinaryOperator],["-",r.AdditiveBinaryOperator],["*",r.MultiplicativeBinaryOperator],["/",r.MultiplicativeBinaryOperator],["%",r.MultiplicativeBinaryOperator],["=",r.Equals]],d=new Map([["n","\n"],["t","\t"],["r","\r"],["b","\b"],["f","\f"],["v","\v"],["'","'"],['"','"'],["\\","\\"]]);function u(e,t={}){const n=[],u=function(e,t={}){return e.endsWith("\n")&&(e=e.slice(0,-1)),e=e.replace(/{#.*?#}/gs,"{##}"),t.lstrip_blocks&&(e=e.replace(/^[ \t]*({[#%])/gm,"$1")),t.trim_blocks&&(e=e.replace(/([#%]})\n/g,"$1")),e.replace(/{##}/g,"").replace(/-%}\s*/g,"%}").replace(/\s*{%-/g,"{%").replace(/-}}\s*/g,"}}").replace(/\s*{{-/g,"{{")}(e,t);let c=0;const p=e=>{let t="";for(;e(u[c]);)if("\\"!==u[c]){if(t+=u[c++],c>=u.length)throw new SyntaxError("Unexpected end of input")}else{if(++c,c>=u.length)throw new SyntaxError("Unexpected end of input");const e=u[c++],n=d.get(e);if(void 0===n)throw new SyntaxError(`Unexpected escaped character: ${e}`);t+=n}return t};e:for(;c<u.length;){const e=n.at(-1)?.type;if(void 0===e||e===r.CloseStatement||e===r.CloseExpression){let e="";for(;c<u.length&&("{"!==u[c]||"%"!==u[c+1]&&"{"!==u[c+1]);)e+=u[c++];if(e.length>0){n.push(new i(e,r.Text));continue}}p((e=>/\s/.test(e)));const t=u[c];if("-"===t||"+"===t){const e=n.at(-1)?.type;if(e===r.Text||void 0===e)throw new SyntaxError(`Unexpected character: ${t}`);switch(e){case r.Identifier:case r.NumericLiteral:case r.BooleanLiteral:case r.StringLiteral:case r.CloseParen:case r.CloseSquareBracket:break;default:{++c;const e=p(a);n.push(new i(`${t}${e}`,e.length>0?r.NumericLiteral:r.UnaryOperator));continue}}}for(const[e,t]of l){if(u.slice(c,c+e.length)===e){n.push(new i(e,t)),c+=e.length;continue e}}if("'"!==t&&'"'!==t)if(a(t)){const e=p(a);n.push(new i(e,r.NumericLiteral))}else{if(!o(t))throw new SyntaxError(`Unexpected character: ${t}`);{const e=p(o),t=Object.hasOwn(s,e)?s[e]:r.Identifier;t===r.In&&n.at(-1)?.type===r.Not?(n.pop(),n.push(new i("not in",r.NotIn))):n.push(new i(e,t))}}else{++c;const e=p((e=>e!==t));n.push(new i(e,r.StringLiteral)),++c}}return n}var c=class{type="Statement"},p=class extends c{constructor(e){super(),this.body=e}type="Program"},h=class extends c{constructor(e,t,n){super(),this.test=e,this.body=t,this.alternate=n}type="If"},m=class extends c{constructor(e,t,n){super(),this.loopvar=e,this.iterable=t,this.body=n}type="For"},f=class extends c{constructor(e,t){super(),this.assignee=e,this.value=t}type="Set"},g=class extends c{type="Expression"},_=class extends g{constructor(e,t,n){super(),this.object=e,this.property=t,this.computed=n}type="MemberExpression"},w=class extends g{constructor(e,t){super(),this.callee=e,this.args=t}type="CallExpression"},b=class extends g{constructor(e){super(),this.value=e}type="Identifier"},y=class extends g{constructor(e){super(),this.value=e}type="Literal"},v=class extends y{type="NumericLiteral"},x=class extends y{type="StringLiteral"},M=class extends y{type="BooleanLiteral"},T=class extends y{type="ArrayLiteral"},k=class extends y{type="TupleLiteral"},$=class extends y{type="ObjectLiteral"},S=class extends g{constructor(e,t,n){super(),this.operator=e,this.left=t,this.right=n}type="BinaryExpression"},C=class extends g{constructor(e,t){super(),this.operand=e,this.filter=t}type="FilterExpression"},P=class extends g{constructor(e,t,n){super(),this.operand=e,this.negate=t,this.test=n}type="TestExpression"},E=class extends g{constructor(e,t){super(),this.operator=e,this.argument=t}type="UnaryExpression"},F=class extends g{constructor(e=void 0,t=void 0,n=void 0){super(),this.start=e,this.stop=t,this.step=n}type="SliceExpression"},A=class extends g{constructor(e,t){super(),this.key=e,this.value=t}type="KeywordArgumentExpression"};function I(e){const t=new p([]);let n=0;function s(t,r){const s=e[n++];if(!s||s.type!==t)throw new Error(`Parser Error: ${r}. ${s.type} !== ${t}.`);return s}function i(){switch(e[n].type){case r.Text:return new x(s(r.Text,"Expected text token").value);case r.OpenStatement:return function(){let t;switch(s(r.OpenStatement,"Expected opening statement token"),e[n].type){case r.Set:++n,t=l(),s(r.CloseStatement,"Expected closing statement token");break;case r.If:++n,t=d(),s(r.OpenStatement,"Expected {% token"),s(r.EndIf,"Expected endif token"),s(r.CloseStatement,"Expected %} token");break;case r.For:++n,t=function(){const e=u(!0);if(!(e instanceof b||e instanceof k))throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${e.type} instead`);s(r.In,"Expected `in` keyword following loop variable");const t=c();s(r.CloseStatement,"Expected closing statement token");const n=[];for(;o(r.OpenStatement,r.EndFor);)n.push(i());return new m(e,t,n)}(),s(r.OpenStatement,"Expected {% token"),s(r.EndFor,"Expected endfor token"),s(r.CloseStatement,"Expected %} token");break;default:throw new SyntaxError(`Unknown statement type: ${e[n].type}`)}return t}();case r.OpenExpression:return function(){s(r.OpenExpression,"Expected opening expression token");const e=c();return s(r.CloseExpression,"Expected closing expression token"),e}();default:throw new SyntaxError(`Unexpected token type: ${e[n].type}`)}}function o(...t){return n+t.length<=e.length&&t.some(((t,r)=>t!==e[n+r].type))}function a(...t){return n+t.length<=e.length&&t.every(((t,r)=>t===e[n+r].type))}function l(){const e=c();if(a(r.Equals)){++n;const t=l();return new f(e,t)}return e}function d(){const t=c();s(r.CloseStatement,"Expected closing statement token");const o=[],l=[];for(;e[n]?.type!==r.OpenStatement||e[n+1]?.type!==r.ElseIf&&e[n+1]?.type!==r.Else&&e[n+1]?.type!==r.EndIf;)o.push(i());if(e[n]?.type===r.OpenStatement&&e[n+1]?.type!==r.EndIf)if(++n,a(r.ElseIf))s(r.ElseIf,"Expected elseif token"),l.push(d());else for(s(r.Else,"Expected else token"),s(r.CloseStatement,"Expected closing statement token");e[n]?.type!==r.OpenStatement||e[n+1]?.type!==r.EndIf;)l.push(i());return new h(t,o,l)}function u(e=!1){const t=e?N:c,s=[t()],i=a(r.Comma);for(;i&&(++n,s.push(t()),a(r.Comma)););return i?new k(s):s[0]}function c(){return function(){const e=g();if(a(r.If)){++n;const t=g();s(r.Else,"Expected else token");const i=g();return new h(t,[e],[i])}return e}()}function g(){let t=y();for(;a(r.Or);){const r=e[n];++n;const s=y();t=new S(r,t,s)}return t}function y(){let t=I();for(;a(r.And);){const r=e[n];++n;const s=I();t=new S(r,t,s)}return t}function I(){let t;for(;a(r.Not);){const r=e[n];++n;const s=I();t=new E(r,s)}return t??function(){let t=z();for(;a(r.ComparisonBinaryOperator)||a(r.In)||a(r.NotIn);){const r=e[n];++n;const s=z();t=new S(r,t,s)}return t}()}function z(){let t=D();for(;a(r.AdditiveBinaryOperator);){const r=e[n];++n;const s=D();t=new S(r,t,s)}return t}function B(){const t=function(){let t=N();for(;a(r.Dot)||a(r.OpenSquareBracket);){const i=e[n];let o;++n;const a=i.type!==r.Dot;if(a)o=L(),s(r.CloseSquareBracket,"Expected closing square bracket");else if(o=N(),"Identifier"!==o.type)throw new SyntaxError("Expected identifier following dot operator");t=new _(t,o,a)}return t}();return a(r.OpenParen)?O(t):t}function O(e){let t=new w(e,function(){s(r.OpenParen,"Expected opening parenthesis for arguments list");const e=function(){const e=[];for(;!a(r.CloseParen);){let t=c();if(a(r.Equals)){if(++n,!(t instanceof b))throw new SyntaxError("Expected identifier for keyword argument");const e=c();t=new A(t,e)}e.push(t),a(r.Comma)&&++n}return e}();return s(r.CloseParen,"Expected closing parenthesis for arguments list"),e}());return a(r.OpenParen)&&(t=O(t)),t}function L(){const e=[];let t=!1;for(;!a(r.CloseSquareBracket);)a(r.Colon)?(e.push(void 0),++n,t=!0):(e.push(c()),a(r.Colon)&&(++n,t=!0));if(0===e.length)throw new SyntaxError("Expected at least one argument for member/slice expression");if(t){if(e.length>3)throw new SyntaxError("Expected 0-3 arguments for slice expression");return new F(...e)}return e[0]}function D(){let t=R();for(;a(r.MultiplicativeBinaryOperator);){const r=e[n];++n;const s=R();t=new S(r,t,s)}return t}function R(){let e=function(){let e=B();for(;a(r.Pipe);){++n;let t=N();if(!(t instanceof b))throw new SyntaxError("Expected identifier for the filter");a(r.OpenParen)&&(t=O(t)),e=new C(e,t)}return e}();for(;a(r.Is);){++n;const t=a(r.Not);t&&++n;let s=N();if(s instanceof M&&(s=new b(s.value.toString())),!(s instanceof b))throw new SyntaxError("Expected identifier for the test");e=new P(e,t,s)}return e}function N(){const t=e[n];switch(t.type){case r.NumericLiteral:return++n,new v(Number(t.value));case r.StringLiteral:return++n,new x(t.value);case r.BooleanLiteral:return++n,new M("true"===t.value);case r.Identifier:return++n,new b(t.value);case r.OpenParen:{++n;const t=u();if(e[n].type!==r.CloseParen)throw new SyntaxError(`Expected closing parenthesis, got ${e[n].type} instead`);return++n,t}case r.OpenSquareBracket:{++n;const e=[];for(;!a(r.CloseSquareBracket);)e.push(c()),a(r.Comma)&&++n;return++n,new T(e)}case r.OpenCurlyBracket:{++n;const e=new Map;for(;!a(r.CloseCurlyBracket);){const t=c();s(r.Colon,"Expected colon between key and value in object literal");const i=c();e.set(t,i),a(r.Comma)&&++n}return++n,new $(e)}default:throw new SyntaxError(`Unexpected token: ${t.type}`)}}for(;n<e.length;)t.body.push(i());return t}function z(e,t,n=1){void 0===t&&(t=e,e=0);const r=[];for(let s=e;s<t;s+=n)r.push(s);return r}function B(e,t,n,r=1){const s=Math.sign(r);s>=0?(t=(t??=0)<0?Math.max(e.length+t,0):Math.min(t,e.length),n=(n??=e.length)<0?Math.max(e.length+n,0):Math.min(n,e.length)):(t=(t??=e.length-1)<0?Math.max(e.length+t,-1):Math.min(t,e.length-1),n=(n??=-1)<-1?Math.max(e.length+n,-1):Math.min(n,e.length-1));const i=[];for(let o=t;s*o<s*n;o+=r)i.push(e[o]);return i}function O(e){return e.replace(/\b\w/g,(e=>e.toUpperCase()))}var L=class{type="RuntimeValue";value;builtins=new Map;constructor(e=void 0){this.value=e}__bool__(){return new N(!!this.value)}},D=class extends L{type="NumericValue"},R=class extends L{type="StringValue";builtins=new Map([["upper",new G((()=>new R(this.value.toUpperCase())))],["lower",new G((()=>new R(this.value.toLowerCase())))],["strip",new G((()=>new R(this.value.trim())))],["title",new G((()=>new R(O(this.value))))],["length",new D(this.value.length)]])},N=class extends L{type="BooleanValue"},V=class extends L{type="ObjectValue";__bool__(){return new N(this.value.size>0)}builtins=new Map([["get",new G((([e,t])=>{if(!(e instanceof R))throw new Error(`Object key must be a string: got ${e.type}`);return this.value.get(e.value)??t??new U}))],["items",new G((()=>new j(Array.from(this.value.entries()).map((([e,t])=>new j([new R(e),t]))))))]])},j=class extends L{type="ArrayValue";builtins=new Map([["length",new D(this.value.length)]]);__bool__(){return new N(this.value.length>0)}},q=class extends j{type="TupleValue"},G=class extends L{type="FunctionValue"},U=class extends L{type="NullValue"},W=class extends L{type="UndefinedValue"},H=class{constructor(e){this.parent=e}variables=new Map([["namespace",new G((e=>{if(0===e.length)return new V(new Map);if(1!==e.length||!(e[0]instanceof V))throw new Error("`namespace` expects either zero arguments or a single object argument");return e[0]}))]]);tests=new Map([["boolean",e=>"BooleanValue"===e.type],["callable",e=>e instanceof G],["odd",e=>{if("NumericValue"!==e.type)throw new Error(`Cannot apply test "odd" to type: ${e.type}`);return e.value%2!=0}],["even",e=>{if("NumericValue"!==e.type)throw new Error(`Cannot apply test "even" to type: ${e.type}`);return e.value%2==0}],["false",e=>"BooleanValue"===e.type&&!e.value],["true",e=>"BooleanValue"===e.type&&e.value],["number",e=>"NumericValue"===e.type],["integer",e=>"NumericValue"===e.type&&Number.isInteger(e.value)],["iterable",e=>e instanceof j||e instanceof R],["lower",e=>{const t=e.value;return"StringValue"===e.type&&t===t.toLowerCase()}],["upper",e=>{const t=e.value;return"StringValue"===e.type&&t===t.toUpperCase()}],["none",e=>"NullValue"===e.type],["defined",e=>"UndefinedValue"!==e.type],["undefined",e=>"UndefinedValue"===e.type],["equalto",(e,t)=>e.value===t.value]]);set(e,t){return this.declareVariable(e,X(t))}declareVariable(e,t){if(this.variables.has(e))throw new SyntaxError(`Variable already declared: ${e}`);return this.variables.set(e,t),t}setVariable(e,t){return this.variables.set(e,t),t}resolve(e){if(this.variables.has(e))return this;if(this.parent)return this.parent.resolve(e);throw new Error(`Unknown variable: ${e}`)}lookupVariable(e){try{return this.resolve(e).variables.get(e)??new W}catch{return new W}}},K=class{global;constructor(e){this.global=e??new H}run(e){return this.evaluate(e,this.global)}evaluateBinaryExpression(e,t){const n=this.evaluate(e.left,t);switch(e.operator.value){case"and":return n.__bool__().value?this.evaluate(e.right,t):n;case"or":return n.__bool__().value?n:this.evaluate(e.right,t)}const r=this.evaluate(e.right,t);switch(e.operator.value){case"==":return new N(n.value==r.value);case"!=":return new N(n.value!=r.value)}if(n instanceof W||r instanceof W)throw new Error("Cannot perform operation on undefined values");if(n instanceof U||r instanceof U)throw new Error("Cannot perform operation on null values");if(n instanceof D&&r instanceof D)switch(e.operator.value){case"+":return new D(n.value+r.value);case"-":return new D(n.value-r.value);case"*":return new D(n.value*r.value);case"/":return new D(n.value/r.value);case"%":return new D(n.value%r.value);case"<":return new N(n.value<r.value);case">":return new N(n.value>r.value);case">=":return new N(n.value>=r.value);case"<=":return new N(n.value<=r.value)}else if(n instanceof j&&r instanceof j){if("+"===e.operator.value)return new j(n.value.concat(r.value))}else if(r instanceof j){const t=void 0!==r.value.find((e=>e.value===n.value));switch(e.operator.value){case"in":return new N(t);case"not in":return new N(!t)}}if((n instanceof R||r instanceof R)&&"+"===e.operator.value)return new R(n.value.toString()+r.value.toString());if(n instanceof R&&r instanceof R)switch(e.operator.value){case"in":return new N(r.value.includes(n.value));case"not in":return new N(!r.value.includes(n.value))}if(n instanceof R&&r instanceof V)switch(e.operator.value){case"in":return new N(r.value.has(n.value));case"not in":return new N(!r.value.has(n.value))}throw new SyntaxError(`Unknown operator "${e.operator.value}" between ${n.type} and ${r.type}`)}evaluateFilterExpression(e,t){const n=this.evaluate(e.operand,t);if("Identifier"===e.filter.type){const t=e.filter;if(n instanceof j)switch(t.value){case"list":return n;case"first":return n.value[0];case"last":return n.value[n.value.length-1];case"length":return new D(n.value.length);case"reverse":return new j(n.value.reverse());case"sort":return new j(n.value.sort(((e,t)=>{if(e.type!==t.type)throw new Error(`Cannot compare different types: ${e.type} and ${t.type}`);switch(e.type){case"NumericValue":return e.value-t.value;case"StringValue":return e.value.localeCompare(t.value);default:throw new Error(`Cannot compare type: ${e.type}`)}})));default:throw new Error(`Unknown ArrayValue filter: ${t.value}`)}else if(n instanceof R)switch(t.value){case"length":return new D(n.value.length);case"upper":return new R(n.value.toUpperCase());case"lower":return new R(n.value.toLowerCase());case"title":return new R(O(n.value));case"capitalize":return new R(n.value.charAt(0).toUpperCase()+n.value.slice(1));case"trim":return new R(n.value.trim());default:throw new Error(`Unknown StringValue filter: ${t.value}`)}else{if(n instanceof D){if("abs"===t.value)return new D(Math.abs(n.value));throw new Error(`Unknown NumericValue filter: ${t.value}`)}if(n instanceof V)switch(t.value){case"items":return new j(Array.from(n.value.entries()).map((([e,t])=>new j([new R(e),t]))));case"length":return new D(n.value.size);default:throw new Error(`Unknown ObjectValue filter: ${t.value}`)}}throw new Error(`Cannot apply filter "${t.value}" to type: ${n.type}`)}if("CallExpression"===e.filter.type){const r=e.filter;if("Identifier"!==r.callee.type)throw new Error(`Unknown filter: ${r.callee.type}`);const s=r.callee.value;if(n instanceof j){if("selectattr"===s){if(n.value.some((e=>!(e instanceof V))))throw new Error("`selectattr` can only be applied to array of objects");if(r.args.some((e=>"StringLiteral"!==e.type)))throw new Error("arguments of `selectattr` must be strings");const[e,s,i]=r.args.map((e=>this.evaluate(e,t)));let o;if(s){const e=t.tests.get(s.value);if(!e)throw new Error(`Unknown test: ${s.value}`);o=e}else o=(...e)=>e[0].__bool__().value;const a=n.value.filter((t=>{const n=t.value.get(e.value);return!!n&&o(n,i)}));return new j(a)}throw new Error(`Unknown ArrayValue filter: ${s}`)}throw new Error(`Cannot apply filter "${s}" to type: ${n.type}`)}throw new Error(`Unknown filter: ${e.filter.type}`)}evaluateTestExpression(e,t){const n=this.evaluate(e.operand,t),r=t.tests.get(e.test.value);if(!r)throw new Error(`Unknown test: ${e.test.value}`);const s=r(n);return new N(e.negate?!s:s)}evaluateUnaryExpression(e,t){const n=this.evaluate(e.argument,t);if("not"===e.operator.value)return new N(!n.value);throw new SyntaxError(`Unknown operator: ${e.operator.value}`)}evalProgram(e,t){return this.evaluateBlock(e.body,t)}evaluateBlock(e,t){let n="";for(const r of e){const e=this.evaluate(r,t);"NullValue"!==e.type&&"UndefinedValue"!==e.type&&(n+=e.value)}return new R(n)}evaluateIdentifier(e,t){return t.lookupVariable(e.value)}evaluateCallExpression(e,t){const n=[],r=new Map;for(const s of e.args)if("KeywordArgumentExpression"===s.type){const e=s;r.set(e.key.value,this.evaluate(e.value,t))}else n.push(this.evaluate(s,t));r.size>0&&n.push(new V(r));const s=this.evaluate(e.callee,t);if("FunctionValue"!==s.type)throw new Error(`Cannot call something that is not a function: got ${s.type}`);return s.value(n,t)}evaluateSliceExpression(e,t,n){if(!(e instanceof j||e instanceof R))throw new Error("Slice object must be an array or string");const r=this.evaluate(t.start,n),s=this.evaluate(t.stop,n),i=this.evaluate(t.step,n);if(!(r instanceof D||r instanceof W))throw new Error("Slice start must be numeric or undefined");if(!(s instanceof D||s instanceof W))throw new Error("Slice stop must be numeric or undefined");if(!(i instanceof D||i instanceof W))throw new Error("Slice step must be numeric or undefined");return e instanceof j?new j(B(e.value,r.value,s.value,i.value)):new R(B(Array.from(e.value),r.value,s.value,i.value).join(""))}evaluateMemberExpression(e,t){const n=this.evaluate(e.object,t);let r,s;if(e.computed){if("SliceExpression"===e.property.type)return this.evaluateSliceExpression(n,e.property,t);r=this.evaluate(e.property,t)}else r=new R(e.property.value);if(n instanceof V){if(!(r instanceof R))throw new Error(`Cannot access property with non-string: got ${r.type}`);s=n.value.get(r.value)??n.builtins.get(r.value)}else if(n instanceof j||n instanceof R)if(r instanceof D)s=n.value.at(r.value),n instanceof R&&(s=new R(n.value.at(r.value)));else{if(!(r instanceof R))throw new Error(`Cannot access property with non-string/non-number: got ${r.type}`);s=n.builtins.get(r.value)}else{if(!(r instanceof R))throw new Error(`Cannot access property with non-string: got ${r.type}`);s=n.builtins.get(r.value)}return s instanceof L?s:new W}evaluateSet(e,t){const n=this.evaluate(e.value,t);if("Identifier"===e.assignee.type){const r=e.assignee.value;t.setVariable(r,n)}else{if("MemberExpression"!==e.assignee.type)throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(e.assignee)}`);{const r=e.assignee,s=this.evaluate(r.object,t);if(!(s instanceof V))throw new Error("Cannot assign to member of non-object");if("Identifier"!==r.property.type)throw new Error("Cannot assign to member with non-identifier property");s.value.set(r.property.value,n)}}return new U}evaluateIf(e,t){const n=this.evaluate(e.test,t);return this.evaluateBlock(n.__bool__().value?e.body:e.alternate,t)}evaluateFor(e,t){const n=new H(t),r=this.evaluate(e.iterable,n);if(!(r instanceof j))throw new Error(`Expected iterable type in for loop: got ${r.type}`);let s="";for(let t=0;t<r.value.length;++t){const i=new Map([["index",new D(t+1)],["index0",new D(t)],["revindex",new D(r.value.length-t)],["revindex0",new D(r.value.length-t-1)],["first",new N(0===t)],["last",new N(t===r.value.length-1)],["length",new D(r.value.length)],["previtem",t>0?r.value[t-1]:new W],["nextitem",t<r.value.length-1?r.value[t+1]:new W]]);n.setVariable("loop",new V(i));const o=r.value[t];if("Identifier"===e.loopvar.type)n.setVariable(e.loopvar.value,o);else if("TupleLiteral"===e.loopvar.type){const t=e.loopvar;if("ArrayValue"!==o.type)throw new Error(`Cannot unpack non-iterable type: ${o.type}`);const r=o;if(t.value.length!==r.value.length)throw new Error(`Too ${t.value.length>r.value.length?"few":"many"} items to unpack`);for(let e=0;e<t.value.length;++e){if("Identifier"!==t.value[e].type)throw new Error(`Cannot unpack non-identifier type: ${t.value[e].type}`);n.setVariable(t.value[e].value,r.value[e])}}s+=this.evaluateBlock(e.body,n).value}return new R(s)}evaluate(e,t){if(void 0===e)return new W;switch(e.type){case"Program":return this.evalProgram(e,t);case"Set":return this.evaluateSet(e,t);case"If":return this.evaluateIf(e,t);case"For":return this.evaluateFor(e,t);case"NumericLiteral":return new D(Number(e.value));case"StringLiteral":return new R(e.value);case"BooleanLiteral":return new N(e.value);case"ArrayLiteral":return new j(e.value.map((e=>this.evaluate(e,t))));case"TupleLiteral":return new q(e.value.map((e=>this.evaluate(e,t))));case"ObjectLiteral":{const n=new Map;for(const[r,s]of e.value){const e=this.evaluate(r,t);if(!(e instanceof R))throw new Error(`Object keys must be strings: got ${e.type}`);n.set(e.value,this.evaluate(s,t))}return new V(n)}case"Identifier":return this.evaluateIdentifier(e,t);case"CallExpression":return this.evaluateCallExpression(e,t);case"MemberExpression":return this.evaluateMemberExpression(e,t);case"UnaryExpression":return this.evaluateUnaryExpression(e,t);case"BinaryExpression":return this.evaluateBinaryExpression(e,t);case"FilterExpression":return this.evaluateFilterExpression(e,t);case"TestExpression":return this.evaluateTestExpression(e,t);default:throw new SyntaxError(`Unknown node type: ${e.type}`)}}};function X(e){switch(typeof e){case"number":return new D(e);case"string":return new R(e);case"boolean":return new N(e);case"object":return null===e?new U:Array.isArray(e)?new j(e.map(X)):new V(new Map(Object.entries(e).map((([e,t])=>[e,X(t)]))));case"function":return new G(((t,n)=>X(e(...t.map((e=>e.value)))??null)));default:throw new Error(`Cannot convert to runtime value: ${e}`)}}var Q=class{parsed;constructor(e){const t=u(e,{lstrip_blocks:!0,trim_blocks:!0});this.parsed=I(t)}render(e){const t=new H;t.set("false",!1),t.set("true",!0),t.set("raise_exception",(e=>{throw new Error(e)})),t.set("range",z);for(const[n,r]of Object.entries(e))t.set(n,r);return new K(t).run(this.parsed).value}}},"./node_modules/onnxruntime-common/dist/esm/backend-impl.js":
/*!******************************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/backend-impl.js ***!
  \******************************************************************/(e,t,n)=>{n.r(t),n.d(t,{registerBackend:()=>i,resolveBackendAndExecutionProviders:()=>a});const r=new Map,s=[],i=(e,t,n)=>{if(!t||"function"!=typeof t.init||"function"!=typeof t.createInferenceSessionHandler)throw new TypeError("not a valid backend");{const i=r.get(e);if(void 0===i)r.set(e,{backend:t,priority:n});else{if(i.priority>n)return;if(i.priority===n&&i.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${n}`)}if(n>=0){const t=s.indexOf(e);-1!==t&&s.splice(t,1);for(let t=0;t<s.length;t++)if(r.get(s[t]).priority<=n)return void s.splice(t,0,e);s.push(e)}}},o=async e=>{const t=r.get(e);if(!t)return"backend not found.";if(t.initialized)return t.backend;if(t.aborted)return t.error;{const n=!!t.initPromise;try{return n||(t.initPromise=t.backend.init(e)),await t.initPromise,t.initialized=!0,t.backend}catch(e){return n||(t.error=`${e}`,t.aborted=!0),t.error}finally{delete t.initPromise}}},a=async e=>{const t=e.executionProviders||[],n=t.map((e=>"string"==typeof e?e:e.name)),r=0===n.length?s:n;let i;const a=[],l=new Set;for(const e of r){const t=await o(e);"string"==typeof t?a.push({name:e,err:t}):(i||(i=t),i===t&&l.add(e))}if(!i)throw new Error(`no available backend found. ERR: ${a.map((e=>`[${e.name}] ${e.err}`)).join(", ")}`);for(const{name:e,err:t}of a)n.includes(e)&&console.warn(`removing requested execution provider "${e}" from session options because it is not available: ${t}`);const d=t.filter((e=>l.has("string"==typeof e?e:e.name)));return[i,new Proxy(e,{get:(e,t)=>"executionProviders"===t?d:Reflect.get(e,t)})]}},"./node_modules/onnxruntime-common/dist/esm/backend.js":
/*!*************************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/backend.js ***!
  \*************************************************************/(e,t,n)=>{n.r(t),n.d(t,{registerBackend:()=>r.registerBackend});var r=n(/*! ./backend-impl.js */"./node_modules/onnxruntime-common/dist/esm/backend-impl.js")},"./node_modules/onnxruntime-common/dist/esm/env-impl.js":
/*!**************************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/env-impl.js ***!
  \**************************************************************/(e,t,n)=>{n.r(t),n.d(t,{env:()=>i});var r=n(/*! ./version.js */"./node_modules/onnxruntime-common/dist/esm/version.js");let s="warning";const i={wasm:{},webgl:{},webgpu:{},versions:{common:r.version},set logLevel(e){if(void 0!==e){if("string"!=typeof e||-1===["verbose","info","warning","error","fatal"].indexOf(e))throw new Error(`Unsupported logging level: ${e}`);s=e}},get logLevel(){return s}};Object.defineProperty(i,"logLevel",{enumerable:!0})},"./node_modules/onnxruntime-common/dist/esm/env.js":
/*!*********************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/env.js ***!
  \*********************************************************/(e,t,n)=>{n.r(t),n.d(t,{env:()=>r});const r=n(/*! ./env-impl.js */"./node_modules/onnxruntime-common/dist/esm/env-impl.js").env},"./node_modules/onnxruntime-common/dist/esm/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/index.js ***!
  \***********************************************************/(e,t,n)=>{n.r(t),n.d(t,{InferenceSession:()=>i.InferenceSession,TRACE:()=>a.TRACE,TRACE_FUNC_BEGIN:()=>a.TRACE_FUNC_BEGIN,TRACE_FUNC_END:()=>a.TRACE_FUNC_END,Tensor:()=>o.Tensor,TrainingSession:()=>l.TrainingSession,env:()=>s.env,registerBackend:()=>r.registerBackend});var r=n(/*! ./backend.js */"./node_modules/onnxruntime-common/dist/esm/backend.js"),s=n(/*! ./env.js */"./node_modules/onnxruntime-common/dist/esm/env.js"),i=n(/*! ./inference-session.js */"./node_modules/onnxruntime-common/dist/esm/inference-session.js"),o=n(/*! ./tensor.js */"./node_modules/onnxruntime-common/dist/esm/tensor.js"),a=(n(/*! ./tensor-conversion.js */"./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js"),n(/*! ./tensor-factory.js */"./node_modules/onnxruntime-common/dist/esm/tensor-factory.js"),n(/*! ./trace.js */"./node_modules/onnxruntime-common/dist/esm/trace.js")),l=(n(/*! ./onnx-model.js */"./node_modules/onnxruntime-common/dist/esm/onnx-model.js"),n(/*! ./onnx-value.js */"./node_modules/onnxruntime-common/dist/esm/onnx-value.js"),n(/*! ./training-session.js */"./node_modules/onnxruntime-common/dist/esm/training-session.js"))},"./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js":
/*!****************************************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js ***!
  \****************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{InferenceSession:()=>o});var r=n(/*! ./backend-impl.js */"./node_modules/onnxruntime-common/dist/esm/backend-impl.js"),s=n(/*! ./tensor.js */"./node_modules/onnxruntime-common/dist/esm/tensor.js"),i=n(/*! ./trace.js */"./node_modules/onnxruntime-common/dist/esm/trace.js");class o{constructor(e){this.handler=e}async run(e,t,n){(0,i.TRACE_FUNC_BEGIN)();const r={};let o={};if("object"!=typeof e||null===e||e instanceof s.Tensor||Array.isArray(e))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let a=!0;if("object"==typeof t){if(null===t)throw new TypeError("Unexpected argument[1]: cannot be null.");if(t instanceof s.Tensor)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(t)){if(0===t.length)throw new TypeError("'fetches' cannot be an empty array.");a=!1;for(const e of t){if("string"!=typeof e)throw new TypeError("'fetches' must be a string array or an object.");if(-1===this.outputNames.indexOf(e))throw new RangeError(`'fetches' contains invalid output name: ${e}.`);r[e]=null}if("object"==typeof n&&null!==n)o=n;else if(void 0!==n)throw new TypeError("'options' must be an object.")}else{let e=!1;const i=Object.getOwnPropertyNames(t);for(const n of this.outputNames)if(-1!==i.indexOf(n)){const i=t[n];(null===i||i instanceof s.Tensor)&&(e=!0,a=!1,r[n]=i)}if(e){if("object"==typeof n&&null!==n)o=n;else if(void 0!==n)throw new TypeError("'options' must be an object.")}else o=t}}else if(void 0!==t)throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const t of this.inputNames)if(void 0===e[t])throw new Error(`input '${t}' is missing in 'feeds'.`);if(a)for(const e of this.outputNames)r[e]=null;const l=await this.handler.run(e,r,o),d={};for(const e in l)if(Object.hasOwnProperty.call(l,e)){const t=l[e];t instanceof s.Tensor?d[e]=t:d[e]=new s.Tensor(t.type,t.data,t.dims)}return(0,i.TRACE_FUNC_END)(),d}async release(){return this.handler.dispose()}static async create(e,t,n,s){let a;(0,i.TRACE_FUNC_BEGIN)();let l={};if("string"==typeof e){if(a=e,"object"==typeof t&&null!==t)l=t;else if(void 0!==t)throw new TypeError("'options' must be an object.")}else if(e instanceof Uint8Array){if(a=e,"object"==typeof t&&null!==t)l=t;else if(void 0!==t)throw new TypeError("'options' must be an object.")}else{if(!(e instanceof ArrayBuffer||"undefined"!=typeof SharedArrayBuffer&&e instanceof SharedArrayBuffer))throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");{const r=e;let i=0,o=e.byteLength;if("object"==typeof t&&null!==t)l=t;else if("number"==typeof t){if(i=t,!Number.isSafeInteger(i))throw new RangeError("'byteOffset' must be an integer.");if(i<0||i>=r.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${r.byteLength}).`);if(o=e.byteLength-i,"number"==typeof n){if(o=n,!Number.isSafeInteger(o))throw new RangeError("'byteLength' must be an integer.");if(o<=0||i+o>r.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${r.byteLength-i}].`);if("object"==typeof s&&null!==s)l=s;else if(void 0!==s)throw new TypeError("'options' must be an object.")}else if(void 0!==n)throw new TypeError("'byteLength' must be a number.")}else if(void 0!==t)throw new TypeError("'options' must be an object.");a=new Uint8Array(r,i,o)}}const[d,u]=await(0,r.resolveBackendAndExecutionProviders)(l),c=await d.createInferenceSessionHandler(a,u);return(0,i.TRACE_FUNC_END)(),new o(c)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}},"./node_modules/onnxruntime-common/dist/esm/inference-session.js":
/*!***********************************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/inference-session.js ***!
  \***********************************************************************/(e,t,n)=>{n.r(t),n.d(t,{InferenceSession:()=>r});const r=n(/*! ./inference-session-impl.js */"./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js").InferenceSession},"./node_modules/onnxruntime-common/dist/esm/onnx-model.js":
/*!****************************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/onnx-model.js ***!
  \****************************************************************/(e,t,n)=>{n.r(t)},"./node_modules/onnxruntime-common/dist/esm/onnx-value.js":
/*!****************************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/onnx-value.js ***!
  \****************************************************************/(e,t,n)=>{n.r(t)},"./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js":
/*!****************************************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js ***!
  \****************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{tensorToDataURL:()=>r,tensorToImageData:()=>s});const r=(e,t)=>{const n="undefined"!=typeof document?document.createElement("canvas"):new OffscreenCanvas(1,1);n.width=e.dims[3],n.height=e.dims[2];const r=n.getContext("2d");if(null!=r){let s,i;void 0!==t?.tensorLayout&&"NHWC"===t.tensorLayout?(s=e.dims[2],i=e.dims[3]):(s=e.dims[3],i=e.dims[2]);const o=void 0!==t?.format?t.format:"RGB",a=t?.norm;let l,d;void 0===a||void 0===a.mean?l=[255,255,255,255]:"number"==typeof a.mean?l=[a.mean,a.mean,a.mean,a.mean]:(l=[a.mean[0],a.mean[1],a.mean[2],0],void 0!==a.mean[3]&&(l[3]=a.mean[3])),void 0===a||void 0===a.bias?d=[0,0,0,0]:"number"==typeof a.bias?d=[a.bias,a.bias,a.bias,a.bias]:(d=[a.bias[0],a.bias[1],a.bias[2],0],void 0!==a.bias[3]&&(d[3]=a.bias[3]));const u=i*s;let c=0,p=u,h=2*u,m=-1;"RGBA"===o?(c=0,p=u,h=2*u,m=3*u):"RGB"===o?(c=0,p=u,h=2*u):"RBG"===o&&(c=0,h=u,p=2*u);for(let t=0;t<i;t++)for(let n=0;n<s;n++){const s=(e.data[c++]-d[0])*l[0],i=(e.data[p++]-d[1])*l[1],o=(e.data[h++]-d[2])*l[2],a=-1===m?255:(e.data[m++]-d[3])*l[3];r.fillStyle="rgba("+s+","+i+","+o+","+a+")",r.fillRect(n,t,1,1)}if("toDataURL"in n)return n.toDataURL();throw new Error("toDataURL is not supported")}throw new Error("Can not access image data")},s=(e,t)=>{const n="undefined"!=typeof document?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let r;if(null==n)throw new Error("Can not access image data");{let s,i,o;void 0!==t?.tensorLayout&&"NHWC"===t.tensorLayout?(s=e.dims[2],i=e.dims[1],o=e.dims[3]):(s=e.dims[3],i=e.dims[2],o=e.dims[1]);const a=void 0!==t&&void 0!==t.format?t.format:"RGB",l=t?.norm;let d,u;void 0===l||void 0===l.mean?d=[255,255,255,255]:"number"==typeof l.mean?d=[l.mean,l.mean,l.mean,l.mean]:(d=[l.mean[0],l.mean[1],l.mean[2],255],void 0!==l.mean[3]&&(d[3]=l.mean[3])),void 0===l||void 0===l.bias?u=[0,0,0,0]:"number"==typeof l.bias?u=[l.bias,l.bias,l.bias,l.bias]:(u=[l.bias[0],l.bias[1],l.bias[2],0],void 0!==l.bias[3]&&(u[3]=l.bias[3]));const c=i*s;if(void 0!==t&&(void 0!==t.format&&4===o&&"RGBA"!==t.format||3===o&&"RGB"!==t.format&&"BGR"!==t.format))throw new Error("Tensor format doesn't match input tensor dims");const p=4;let h=0,m=1,f=2,g=3,_=0,w=c,b=2*c,y=-1;"RGBA"===a?(_=0,w=c,b=2*c,y=3*c):"RGB"===a?(_=0,w=c,b=2*c):"RBG"===a&&(_=0,b=c,w=2*c),r=n.createImageData(s,i);for(let t=0;t<i*s;h+=p,m+=p,f+=p,g+=p,t++)r.data[h]=(e.data[_++]-u[0])*d[0],r.data[m]=(e.data[w++]-u[1])*d[1],r.data[f]=(e.data[b++]-u[2])*d[2],r.data[g]=-1===y?255:(e.data[y++]-u[3])*d[3]}return r}},"./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js":
/*!***********************************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js ***!
  \***********************************************************************/(e,t,n)=>{n.r(t)},"./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js":
/*!*************************************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js ***!
  \*************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{bufferToTensor:()=>s,tensorFromGpuBuffer:()=>a,tensorFromImage:()=>i,tensorFromPinnedBuffer:()=>l,tensorFromTexture:()=>o});var r=n(/*! ./tensor-impl.js */"./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const s=(e,t)=>{if(void 0===e)throw new Error("Image buffer must be defined");if(void 0===t.height||void 0===t.width)throw new Error("Image height and width must be defined");if("NHWC"===t.tensorLayout)throw new Error("NHWC Tensor layout is not supported yet");const{height:n,width:s}=t,i=t.norm??{mean:255,bias:0};let o,a;o="number"==typeof i.mean?[i.mean,i.mean,i.mean,i.mean]:[i.mean[0],i.mean[1],i.mean[2],i.mean[3]??255],a="number"==typeof i.bias?[i.bias,i.bias,i.bias,i.bias]:[i.bias[0],i.bias[1],i.bias[2],i.bias[3]??0];const l=void 0!==t.format?t.format:"RGBA",d=void 0!==t.tensorFormat&&void 0!==t.tensorFormat?t.tensorFormat:"RGB",u=n*s,c="RGBA"===d?new Float32Array(4*u):new Float32Array(3*u);let p=4,h=0,m=1,f=2,g=3,_=0,w=u,b=2*u,y=-1;"RGB"===l&&(p=3,h=0,m=1,f=2,g=-1),"RGBA"===d?y=3*u:"RBG"===d?(_=0,b=u,w=2*u):"BGR"===d&&(b=0,w=u,_=2*u);for(let t=0;t<u;t++,h+=p,f+=p,m+=p,g+=p)c[_++]=(e[h]+a[0])/o[0],c[w++]=(e[m]+a[1])/o[1],c[b++]=(e[f]+a[2])/o[2],-1!==y&&-1!==g&&(c[y++]=(e[g]+a[3])/o[3]);return"RGBA"===d?new r.Tensor("float32",c,[1,4,n,s]):new r.Tensor("float32",c,[1,3,n,s])},i=async(e,t)=>{const n="undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement,r="undefined"!=typeof ImageData&&e instanceof ImageData,i="undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap,o="string"==typeof e;let a,l=t??{};const d=()=>{if("undefined"!=typeof document)return document.createElement("canvas");if("undefined"!=typeof OffscreenCanvas)return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},u=e=>e instanceof HTMLCanvasElement||e instanceof OffscreenCanvas?e.getContext("2d"):null;if(n){const n=d();n.width=e.width,n.height=e.height;const r=u(n);if(null==r)throw new Error("Can not access image data");{let n=e.height,s=e.width;if(void 0!==t&&void 0!==t.resizedHeight&&void 0!==t.resizedWidth&&(n=t.resizedHeight,s=t.resizedWidth),void 0!==t){if(l=t,void 0!==t.tensorFormat)throw new Error("Image input config format must be RGBA for HTMLImageElement");l.tensorFormat="RGBA",l.height=n,l.width=s}else l.tensorFormat="RGBA",l.height=n,l.width=s;r.drawImage(e,0,0),a=r.getImageData(0,0,s,n).data}}else{if(!r){if(i){if(void 0===t)throw new Error("Please provide image config with format for Imagebitmap");const n=d();n.width=e.width,n.height=e.height;const r=u(n);if(null!=r){const t=e.height,n=e.width;return r.drawImage(e,0,0,n,t),a=r.getImageData(0,0,n,t).data,l.height=t,l.width=n,s(a,l)}throw new Error("Can not access image data")}if(o)return new Promise(((t,n)=>{const r=d(),i=u(r);if(!e||!i)return n();const o=new Image;o.crossOrigin="Anonymous",o.src=e,o.onload=()=>{r.width=o.width,r.height=o.height,i.drawImage(o,0,0,r.width,r.height);const e=i.getImageData(0,0,r.width,r.height);l.height=r.height,l.width=r.width,t(s(e.data,l))}}));throw new Error("Input data provided is not supported - aborted tensor creation")}{let n,r;if(void 0!==t&&void 0!==t.resizedWidth&&void 0!==t.resizedHeight?(n=t.resizedHeight,r=t.resizedWidth):(n=e.height,r=e.width),void 0!==t&&(l=t),l.format="RGBA",l.height=n,l.width=r,void 0!==t){const t=d();t.width=r,t.height=n;const s=u(t);if(null==s)throw new Error("Can not access image data");s.putImageData(e,0,0),a=s.getImageData(0,0,r,n).data}else a=e.data}}if(void 0!==a)return s(a,l);throw new Error("Input data provided is not supported - aborted tensor creation")},o=(e,t)=>{const{width:n,height:s,download:i,dispose:o}=t,a=[1,s,n,4];return new r.Tensor({location:"texture",type:"float32",texture:e,dims:a,download:i,dispose:o})},a=(e,t)=>{const{dataType:n,dims:s,download:i,dispose:o}=t;return new r.Tensor({location:"gpu-buffer",type:n??"float32",gpuBuffer:e,dims:s,download:i,dispose:o})},l=(e,t,n)=>new r.Tensor({location:"cpu-pinned",type:e,data:t,dims:n??[t.length]})},"./node_modules/onnxruntime-common/dist/esm/tensor-factory.js":
/*!********************************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/tensor-factory.js ***!
  \********************************************************************/(e,t,n)=>{n.r(t)},"./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js":
/*!******************************************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js ***!
  \******************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP:()=>s,NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP:()=>r,checkTypedArray:()=>o});const r=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),s=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let i=!1;const o=()=>{if(!i){i=!0;const e="undefined"!=typeof BigInt64Array&&BigInt64Array.from,t="undefined"!=typeof BigUint64Array&&BigUint64Array.from,n="undefined"!=typeof Float16Array&&Float16Array.from;e&&(r.set("int64",BigInt64Array),s.set(BigInt64Array,"int64")),t&&(r.set("uint64",BigUint64Array),s.set(BigUint64Array,"uint64")),n?(r.set("float16",Float16Array),s.set(Float16Array,"float16")):r.set("float16",Uint16Array)}}},"./node_modules/onnxruntime-common/dist/esm/tensor-impl.js":
/*!*****************************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/tensor-impl.js ***!
  \*****************************************************************/(e,t,n)=>{n.r(t),n.d(t,{Tensor:()=>a});var r=n(/*! ./tensor-conversion-impl.js */"./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js"),s=n(/*! ./tensor-factory-impl.js */"./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js"),i=n(/*! ./tensor-impl-type-mapping.js */"./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js"),o=n(/*! ./tensor-utils-impl.js */"./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js");class a{constructor(e,t,n){let r,s;if((0,i.checkTypedArray)(),"object"==typeof e&&"location"in e)switch(this.dataLocation=e.location,r=e.type,s=e.dims,e.location){case"cpu-pinned":{const t=i.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(r);if(!t)throw new TypeError(`unsupported type "${r}" to create tensor from pinned buffer`);if(!(e.data instanceof t))throw new TypeError(`buffer should be of type ${t.name}`);this.cpuData=e.data;break}case"texture":if("float32"!==r)throw new TypeError(`unsupported type "${r}" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break;case"gpu-buffer":if("float32"!==r&&"float16"!==r&&"int32"!==r&&"int64"!==r&&"uint32"!==r&&"uint8"!==r&&"bool"!==r)throw new TypeError(`unsupported type "${r}" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break;default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let o,a;if("string"==typeof e)if(r=e,a=n,"string"===e){if(!Array.isArray(t))throw new TypeError("A string tensor's data must be a string array.");o=t}else{const n=i.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(e);if(void 0===n)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(t)){if("float16"===e&&n===Uint16Array)throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");o="uint64"===e||"int64"===e?n.from(t,BigInt):n.from(t)}else{if(!(t instanceof n))throw new TypeError(`A ${r} tensor's data must be type of ${n}`);o=t}}else if(a=t,Array.isArray(e)){if(0===e.length)throw new TypeError("Tensor type cannot be inferred from an empty array.");const t=typeof e[0];if("string"===t)r="string",o=e;else{if("boolean"!==t)throw new TypeError(`Invalid element type of data array: ${t}.`);r="bool",o=Uint8Array.from(e)}}else{const t=i.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(e.constructor);if(void 0===t)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);r=t,o=e}if(void 0===a)a=[o.length];else if(!Array.isArray(a))throw new TypeError("A tensor's dims must be a number array");s=a,this.cpuData=o,this.dataLocation="cpu"}const a=(0,o.calculateSize)(s);if(this.cpuData&&a!==this.cpuData.length)throw new Error(`Tensor's size(${a}) does not match data length(${this.cpuData.length}).`);this.type=r,this.dims=s,this.size=a}static async fromImage(e,t){return(0,s.tensorFromImage)(e,t)}static fromTexture(e,t){return(0,s.tensorFromTexture)(e,t)}static fromGpuBuffer(e,t){return(0,s.tensorFromGpuBuffer)(e,t)}static fromPinnedBuffer(e,t,n){return(0,s.tensorFromPinnedBuffer)(e,t,n)}toDataURL(e){return(0,r.tensorToDataURL)(this,e)}toImageData(e){return(0,r.tensorToImageData)(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(e){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const t=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=t,e&&this.disposer&&(this.disposer(),this.disposer=void 0),t}finally{this.isDownloading=!1}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if("none"===this.dataLocation)throw new Error("The tensor is disposed.")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return(0,o.tensorReshape)(this,e)}}},"./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js":
/*!***********************************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js ***!
  \***********************************************************************/(e,t,n)=>{n.r(t),n.d(t,{calculateSize:()=>s,tensorReshape:()=>i});var r=n(/*! ./tensor-impl.js */"./node_modules/onnxruntime-common/dist/esm/tensor-impl.js");const s=e=>{let t=1;for(let n=0;n<e.length;n++){const r=e[n];if("number"!=typeof r||!Number.isSafeInteger(r))throw new TypeError(`dims[${n}] must be an integer, got: ${r}`);if(r<0)throw new RangeError(`dims[${n}] must be a non-negative integer, got: ${r}`);t*=r}return t},i=(e,t)=>{switch(e.location){case"cpu":return new r.Tensor(e.type,e.data,t);case"cpu-pinned":return new r.Tensor({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new r.Tensor({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new r.Tensor({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}},"./node_modules/onnxruntime-common/dist/esm/tensor.js":
/*!************************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/tensor.js ***!
  \************************************************************/(e,t,n)=>{n.r(t),n.d(t,{Tensor:()=>r});const r=n(/*! ./tensor-impl.js */"./node_modules/onnxruntime-common/dist/esm/tensor-impl.js").Tensor},"./node_modules/onnxruntime-common/dist/esm/trace.js":
/*!***********************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/trace.js ***!
  \***********************************************************/(e,t,n)=>{n.r(t),n.d(t,{TRACE:()=>s,TRACE_FUNC_BEGIN:()=>o,TRACE_FUNC_END:()=>a});var r=n(/*! ./env-impl.js */"./node_modules/onnxruntime-common/dist/esm/env-impl.js");const s=(e,t)=>{(void 0===r.env.trace?r.env.wasm.trace:r.env.trace)&&console.timeStamp(`${e}::ORT::${t}`)},i=(e,t)=>{const n=(new Error).stack?.split(/\r\n|\r|\n/g)||[];let r=!1;for(let i=0;i<n.length;i++){if(r&&!n[i].includes("TRACE_FUNC")){let r=`FUNC_${e}::${n[i].trim().split(" ")[1]}`;return t&&(r+=`::${t}`),void s("CPU",r)}n[i].includes("TRACE_FUNC")&&(r=!0)}},o=e=>{(void 0===r.env.trace?r.env.wasm.trace:r.env.trace)&&i("BEGIN",e)},a=e=>{(void 0===r.env.trace?r.env.wasm.trace:r.env.trace)&&i("END",e)}},"./node_modules/onnxruntime-common/dist/esm/training-session-impl.js":
/*!***************************************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/training-session-impl.js ***!
  \***************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{TrainingSession:()=>i});var r=n(/*! ./backend-impl.js */"./node_modules/onnxruntime-common/dist/esm/backend-impl.js"),s=n(/*! ./tensor.js */"./node_modules/onnxruntime-common/dist/esm/tensor.js");class i{constructor(e,t,n){this.handler=e,this.hasOptimizerModel=t,this.hasEvalModel=n}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(e,t){const n=e.evalModel||"",s=e.optimizerModel||"",o=t||{},[a,l]=await(0,r.resolveBackendAndExecutionProviders)(o);if(a.createTrainingSessionHandler){const t=await a.createTrainingSessionHandler(e.checkpointState,e.trainModel,n,s,l);return new i(t,!!e.optimizerModel,!!e.evalModel)}throw new Error("Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.")}typeNarrowingForRunStep(e,t,n,r,i){const o={};let a={};if("object"!=typeof n||null===n||n instanceof s.Tensor||Array.isArray(n))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let l=!0;if("object"==typeof r){if(null===r)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof s.Tensor)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(0===r.length)throw new TypeError("'fetches' cannot be an empty array.");l=!1;for(const e of r){if("string"!=typeof e)throw new TypeError("'fetches' must be a string array or an object.");if(-1===t.indexOf(e))throw new RangeError(`'fetches' contains invalid output name: ${e}.`);o[e]=null}if("object"==typeof i&&null!==i)a=i;else if(void 0!==i)throw new TypeError("'options' must be an object.")}else{let e=!1;const n=Object.getOwnPropertyNames(r);for(const i of t)if(-1!==n.indexOf(i)){const t=r[i];(null===t||t instanceof s.Tensor)&&(e=!0,l=!1,o[i]=t)}if(e){if("object"==typeof i&&null!==i)a=i;else if(void 0!==i)throw new TypeError("'options' must be an object.")}else a=r}}else if(void 0!==r)throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const t of e)if(void 0===n[t])throw new Error(`input '${t}' is missing in 'feeds'.`);if(l)for(const e of t)o[e]=null;return[o,a]}convertHandlerReturnTypeToMapOfTensors(e){const t={};for(const n in e)if(Object.hasOwnProperty.call(e,n)){const r=e[n];r instanceof s.Tensor?t[n]=r:t[n]=new s.Tensor(r.type,r.data,r.dims)}return t}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(e,t,n){const[r,s]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,e,t,n),i=await this.handler.runTrainStep(e,r,s);return this.convertHandlerReturnTypeToMapOfTensors(i)}async runOptimizerStep(e){if(!this.hasOptimizerModel)throw new Error("This TrainingSession has no OptimizerModel loaded.");await this.handler.runOptimizerStep(e||{})}async runEvalStep(e,t,n){if(this.hasEvalModel){const[r,s]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,e,t,n),i=await this.handler.runEvalStep(e,r,s);return this.convertHandlerReturnTypeToMapOfTensors(i)}throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(e=!0){return this.handler.getParametersSize(e)}async loadParametersBuffer(e,t=!0){const n=await this.getParametersSize(t);if(e.length!==4*n)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(e,t)}async getContiguousParameters(e=!0){return this.handler.getContiguousParameters(e)}async release(){return this.handler.dispose()}}},"./node_modules/onnxruntime-common/dist/esm/training-session.js":
/*!**********************************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/training-session.js ***!
  \**********************************************************************/(e,t,n)=>{n.r(t),n.d(t,{TrainingSession:()=>r});const r=n(/*! ./training-session-impl.js */"./node_modules/onnxruntime-common/dist/esm/training-session-impl.js").TrainingSession},"./node_modules/onnxruntime-common/dist/esm/version.js":
/*!*************************************************************!*\
  !*** ./node_modules/onnxruntime-common/dist/esm/version.js ***!
  \*************************************************************/(e,t,n)=>{n.r(t),n.d(t,{version:()=>r});const r="1.19.0-esmtest.20240618-d229c160"},"./node_modules/onnxruntime-web/dist/ort.webgpu.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/onnxruntime-web/dist/ort.webgpu.mjs ***!
  \**********************************************************/(e,t,n)=>{n.r(t),n.d(t,{InferenceSession:()=>A,TRACE:()=>S,TRACE_FUNC_BEGIN:()=>P,TRACE_FUNC_END:()=>E,Tensor:()=>$,TrainingSession:()=>z,default:()=>Zd,env:()=>c,registerBackend:()=>i});
/*!
 * ONNX Runtime Web v1.19.0-esmtest.20240618-d229c160
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var r,s,i,o,a,l,d,u,c,p,h,m,f,g,_,w,b,y,v,x,M,T,k,$,S,C,P,E,F,A,I,z,B=Object.defineProperty,O=Object.getOwnPropertyDescriptor,L=Object.getOwnPropertyNames,D=Object.prototype.hasOwnProperty,R=(e=>"undefined"!=typeof require?require:"undefined"!=typeof Proxy?new Proxy(e,{get:(e,t)=>("undefined"!=typeof require?require:e)[t]}):e)((function(e){if("undefined"!=typeof require)return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')})),N=(e,t)=>function(){return e&&(t=(0,e[L(e)[0]])(e=0)),t},V=(e,t)=>{for(var n in t)B(e,n,{get:t[n],enumerable:!0})},j=e=>((e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let s of L(t))D.call(e,s)||s===n||B(e,s,{get:()=>t[s],enumerable:!(r=O(t,s))||r.enumerable});return e})(B({},"__esModule",{value:!0}),e),q=N({"common/dist/esm/backend-impl.js"(){r=new Map,s=[],i=(e,t,n)=>{if(!t||"function"!=typeof t.init||"function"!=typeof t.createInferenceSessionHandler)throw new TypeError("not a valid backend");{const i=r.get(e);if(void 0===i)r.set(e,{backend:t,priority:n});else{if(i.priority>n)return;if(i.priority===n&&i.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${n}`)}if(n>=0){const t=s.indexOf(e);-1!==t&&s.splice(t,1);for(let t=0;t<s.length;t++)if(r.get(s[t]).priority<=n)return void s.splice(t,0,e);s.push(e)}}},o=async e=>{const t=r.get(e);if(!t)return"backend not found.";if(t.initialized)return t.backend;if(t.aborted)return t.error;{const n=!!t.initPromise;try{return n||(t.initPromise=t.backend.init(e)),await t.initPromise,t.initialized=!0,t.backend}catch(e){return n||(t.error=`${e}`,t.aborted=!0),t.error}finally{delete t.initPromise}}},a=async e=>{const t=e.executionProviders||[],n=t.map((e=>"string"==typeof e?e:e.name)),r=0===n.length?s:n;let i;const a=[],l=new Set;for(const e of r){const t=await o(e);"string"==typeof t?a.push({name:e,err:t}):(i||(i=t),i===t&&l.add(e))}if(!i)throw new Error(`no available backend found. ERR: ${a.map((e=>`[${e.name}] ${e.err}`)).join(", ")}`);for(const{name:e,err:t}of a)n.includes(e)&&console.warn(`removing requested execution provider "${e}" from session options because it is not available: ${t}`);const d=t.filter((e=>l.has("string"==typeof e?e:e.name)));return[i,new Proxy(e,{get:(e,t)=>"executionProviders"===t?d:Reflect.get(e,t)})]}}}),G=N({"common/dist/esm/backend.js"(){q()}}),U=N({"common/dist/esm/version.js"(){l="1.19.0-esmtest.20240618-d229c160"}}),W=N({"common/dist/esm/env-impl.js"(){U(),d="warning",u={wasm:{},webgl:{},webgpu:{},versions:{common:l},set logLevel(e){if(void 0!==e){if("string"!=typeof e||-1===["verbose","info","warning","error","fatal"].indexOf(e))throw new Error(`Unsupported logging level: ${e}`);d=e}},get logLevel(){return d}},Object.defineProperty(u,"logLevel",{enumerable:!0})}}),H=N({"common/dist/esm/env.js"(){W(),c=u}}),K=N({"common/dist/esm/tensor-conversion-impl.js"(){p=(e,t)=>{const n="undefined"!=typeof document?document.createElement("canvas"):new OffscreenCanvas(1,1);n.width=e.dims[3],n.height=e.dims[2];const r=n.getContext("2d");if(null!=r){let s,i;void 0!==t?.tensorLayout&&"NHWC"===t.tensorLayout?(s=e.dims[2],i=e.dims[3]):(s=e.dims[3],i=e.dims[2]);const o=void 0!==t?.format?t.format:"RGB",a=t?.norm;let l,d;void 0===a||void 0===a.mean?l=[255,255,255,255]:"number"==typeof a.mean?l=[a.mean,a.mean,a.mean,a.mean]:(l=[a.mean[0],a.mean[1],a.mean[2],0],void 0!==a.mean[3]&&(l[3]=a.mean[3])),void 0===a||void 0===a.bias?d=[0,0,0,0]:"number"==typeof a.bias?d=[a.bias,a.bias,a.bias,a.bias]:(d=[a.bias[0],a.bias[1],a.bias[2],0],void 0!==a.bias[3]&&(d[3]=a.bias[3]));const u=i*s;let c=0,p=u,h=2*u,m=-1;"RGBA"===o?(c=0,p=u,h=2*u,m=3*u):"RGB"===o?(c=0,p=u,h=2*u):"RBG"===o&&(c=0,h=u,p=2*u);for(let t=0;t<i;t++)for(let n=0;n<s;n++){const s=(e.data[c++]-d[0])*l[0],i=(e.data[p++]-d[1])*l[1],o=(e.data[h++]-d[2])*l[2],a=-1===m?255:(e.data[m++]-d[3])*l[3];r.fillStyle="rgba("+s+","+i+","+o+","+a+")",r.fillRect(n,t,1,1)}if("toDataURL"in n)return n.toDataURL();throw new Error("toDataURL is not supported")}throw new Error("Can not access image data")},h=(e,t)=>{const n="undefined"!=typeof document?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let r;if(null==n)throw new Error("Can not access image data");{let s,i,o;void 0!==t?.tensorLayout&&"NHWC"===t.tensorLayout?(s=e.dims[2],i=e.dims[1],o=e.dims[3]):(s=e.dims[3],i=e.dims[2],o=e.dims[1]);const a=void 0!==t&&void 0!==t.format?t.format:"RGB",l=t?.norm;let d,u;void 0===l||void 0===l.mean?d=[255,255,255,255]:"number"==typeof l.mean?d=[l.mean,l.mean,l.mean,l.mean]:(d=[l.mean[0],l.mean[1],l.mean[2],255],void 0!==l.mean[3]&&(d[3]=l.mean[3])),void 0===l||void 0===l.bias?u=[0,0,0,0]:"number"==typeof l.bias?u=[l.bias,l.bias,l.bias,l.bias]:(u=[l.bias[0],l.bias[1],l.bias[2],0],void 0!==l.bias[3]&&(u[3]=l.bias[3]));const c=i*s;if(void 0!==t&&(void 0!==t.format&&4===o&&"RGBA"!==t.format||3===o&&"RGB"!==t.format&&"BGR"!==t.format))throw new Error("Tensor format doesn't match input tensor dims");const p=4;let h=0,m=1,f=2,g=3,_=0,w=c,b=2*c,y=-1;"RGBA"===a?(_=0,w=c,b=2*c,y=3*c):"RGB"===a?(_=0,w=c,b=2*c):"RBG"===a&&(_=0,b=c,w=2*c),r=n.createImageData(s,i);for(let t=0;t<i*s;h+=p,m+=p,f+=p,g+=p,t++)r.data[h]=(e.data[_++]-u[0])*d[0],r.data[m]=(e.data[w++]-u[1])*d[1],r.data[f]=(e.data[b++]-u[2])*d[2],r.data[g]=-1===y?255:(e.data[y++]-u[3])*d[3]}return r}}}),X=N({"common/dist/esm/tensor-factory-impl.js"(){Z(),m=(e,t)=>{if(void 0===e)throw new Error("Image buffer must be defined");if(void 0===t.height||void 0===t.width)throw new Error("Image height and width must be defined");if("NHWC"===t.tensorLayout)throw new Error("NHWC Tensor layout is not supported yet");const{height:n,width:r}=t,s=t.norm??{mean:255,bias:0};let i,o;i="number"==typeof s.mean?[s.mean,s.mean,s.mean,s.mean]:[s.mean[0],s.mean[1],s.mean[2],s.mean[3]??255],o="number"==typeof s.bias?[s.bias,s.bias,s.bias,s.bias]:[s.bias[0],s.bias[1],s.bias[2],s.bias[3]??0];const a=void 0!==t.format?t.format:"RGBA",l=void 0!==t.tensorFormat&&void 0!==t.tensorFormat?t.tensorFormat:"RGB",d=n*r,u="RGBA"===l?new Float32Array(4*d):new Float32Array(3*d);let c=4,p=0,h=1,m=2,f=3,g=0,_=d,w=2*d,b=-1;"RGB"===a&&(c=3,p=0,h=1,m=2,f=-1),"RGBA"===l?b=3*d:"RBG"===l?(g=0,w=d,_=2*d):"BGR"===l&&(w=0,_=d,g=2*d);for(let t=0;t<d;t++,p+=c,m+=c,h+=c,f+=c)u[g++]=(e[p]+o[0])/i[0],u[_++]=(e[h]+o[1])/i[1],u[w++]=(e[m]+o[2])/i[2],-1!==b&&-1!==f&&(u[b++]=(e[f]+o[3])/i[3]);return new k("float32",u,"RGBA"===l?[1,4,n,r]:[1,3,n,r])},f=async(e,t)=>{const n="undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement,r="undefined"!=typeof ImageData&&e instanceof ImageData,s="undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap,i="string"==typeof e;let o,a=t??{};const l=()=>{if("undefined"!=typeof document)return document.createElement("canvas");if("undefined"!=typeof OffscreenCanvas)return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},d=e=>e instanceof HTMLCanvasElement||e instanceof OffscreenCanvas?e.getContext("2d"):null;if(n){const n=l();n.width=e.width,n.height=e.height;const r=d(n);if(null==r)throw new Error("Can not access image data");{let n=e.height,s=e.width;if(void 0!==t&&void 0!==t.resizedHeight&&void 0!==t.resizedWidth&&(n=t.resizedHeight,s=t.resizedWidth),void 0!==t){if(a=t,void 0!==t.tensorFormat)throw new Error("Image input config format must be RGBA for HTMLImageElement");a.tensorFormat="RGBA",a.height=n,a.width=s}else a.tensorFormat="RGBA",a.height=n,a.width=s;r.drawImage(e,0,0),o=r.getImageData(0,0,s,n).data}}else{if(!r){if(s){if(void 0===t)throw new Error("Please provide image config with format for Imagebitmap");const n=l();n.width=e.width,n.height=e.height;const r=d(n);if(null!=r){const t=e.height,n=e.width;return r.drawImage(e,0,0,n,t),o=r.getImageData(0,0,n,t).data,a.height=t,a.width=n,m(o,a)}throw new Error("Can not access image data")}if(i)return new Promise(((t,n)=>{const r=l(),s=d(r);if(!e||!s)return n();const i=new Image;i.crossOrigin="Anonymous",i.src=e,i.onload=()=>{r.width=i.width,r.height=i.height,s.drawImage(i,0,0,r.width,r.height);const e=s.getImageData(0,0,r.width,r.height);a.height=r.height,a.width=r.width,t(m(e.data,a))}}));throw new Error("Input data provided is not supported - aborted tensor creation")}{let n,r;if(void 0!==t&&void 0!==t.resizedWidth&&void 0!==t.resizedHeight?(n=t.resizedHeight,r=t.resizedWidth):(n=e.height,r=e.width),void 0!==t&&(a=t),a.format="RGBA",a.height=n,a.width=r,void 0!==t){const t=l();t.width=r,t.height=n;const s=d(t);if(null==s)throw new Error("Can not access image data");s.putImageData(e,0,0),o=s.getImageData(0,0,r,n).data}else o=e.data}}if(void 0!==o)return m(o,a);throw new Error("Input data provided is not supported - aborted tensor creation")},g=(e,t)=>{const{width:n,height:r,download:s,dispose:i}=t;return new k({location:"texture",type:"float32",texture:e,dims:[1,r,n,4],download:s,dispose:i})},_=(e,t)=>{const{dataType:n,dims:r,download:s,dispose:i}=t;return new k({location:"gpu-buffer",type:n??"float32",gpuBuffer:e,dims:r,download:s,dispose:i})},w=(e,t,n)=>new k({location:"cpu-pinned",type:e,data:t,dims:n??[t.length]})}}),Q=N({"common/dist/esm/tensor-impl-type-mapping.js"(){b=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),y=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),v=!1,x=()=>{if(!v){v=!0;const e="undefined"!=typeof BigInt64Array&&BigInt64Array.from,t="undefined"!=typeof BigUint64Array&&BigUint64Array.from,n="undefined"!=typeof Float16Array&&Float16Array.from;e&&(b.set("int64",BigInt64Array),y.set(BigInt64Array,"int64")),t&&(b.set("uint64",BigUint64Array),y.set(BigUint64Array,"uint64")),n?(b.set("float16",Float16Array),y.set(Float16Array,"float16")):b.set("float16",Uint16Array)}}}}),Y=N({"common/dist/esm/tensor-utils-impl.js"(){Z(),M=e=>{let t=1;for(let n=0;n<e.length;n++){const r=e[n];if("number"!=typeof r||!Number.isSafeInteger(r))throw new TypeError(`dims[${n}] must be an integer, got: ${r}`);if(r<0)throw new RangeError(`dims[${n}] must be a non-negative integer, got: ${r}`);t*=r}return t},T=(e,t)=>{switch(e.location){case"cpu":return new k(e.type,e.data,t);case"cpu-pinned":return new k({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new k({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new k({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}}}),Z=N({"common/dist/esm/tensor-impl.js"(){K(),X(),Q(),Y(),k=class{constructor(e,t,n){let r,s;if(x(),"object"==typeof e&&"location"in e)switch(this.dataLocation=e.location,r=e.type,s=e.dims,e.location){case"cpu-pinned":{const t=b.get(r);if(!t)throw new TypeError(`unsupported type "${r}" to create tensor from pinned buffer`);if(!(e.data instanceof t))throw new TypeError(`buffer should be of type ${t.name}`);this.cpuData=e.data;break}case"texture":if("float32"!==r)throw new TypeError(`unsupported type "${r}" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break;case"gpu-buffer":if("float32"!==r&&"float16"!==r&&"int32"!==r&&"int64"!==r&&"uint32"!==r&&"uint8"!==r&&"bool"!==r)throw new TypeError(`unsupported type "${r}" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break;default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let i,o;if("string"==typeof e)if(r=e,o=n,"string"===e){if(!Array.isArray(t))throw new TypeError("A string tensor's data must be a string array.");i=t}else{const n=b.get(e);if(void 0===n)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(t)){if("float16"===e&&n===Uint16Array)throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");i="uint64"===e||"int64"===e?n.from(t,BigInt):n.from(t)}else{if(!(t instanceof n))throw new TypeError(`A ${r} tensor's data must be type of ${n}`);i=t}}else if(o=t,Array.isArray(e)){if(0===e.length)throw new TypeError("Tensor type cannot be inferred from an empty array.");const t=typeof e[0];if("string"===t)r="string",i=e;else{if("boolean"!==t)throw new TypeError(`Invalid element type of data array: ${t}.`);r="bool",i=Uint8Array.from(e)}}else{const t=y.get(e.constructor);if(void 0===t)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);r=t,i=e}if(void 0===o)o=[i.length];else if(!Array.isArray(o))throw new TypeError("A tensor's dims must be a number array");s=o,this.cpuData=i,this.dataLocation="cpu"}const i=M(s);if(this.cpuData&&i!==this.cpuData.length)throw new Error(`Tensor's size(${i}) does not match data length(${this.cpuData.length}).`);this.type=r,this.dims=s,this.size=i}static async fromImage(e,t){return f(e,t)}static fromTexture(e,t){return g(e,t)}static fromGpuBuffer(e,t){return _(e,t)}static fromPinnedBuffer(e,t,n){return w(e,t,n)}toDataURL(e){return p(this,e)}toImageData(e){return h(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(e){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const t=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=t,e&&this.disposer&&(this.disposer(),this.disposer=void 0),t}finally{this.isDownloading=!1}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if("none"===this.dataLocation)throw new Error("The tensor is disposed.")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return T(this,e)}}}}),J=N({"common/dist/esm/tensor.js"(){Z(),$=k}}),ee=N({"common/dist/esm/trace.js"(){W(),S=(e,t)=>{(void 0===u.trace?u.wasm.trace:u.trace)&&console.timeStamp(`${e}::ORT::${t}`)},C=(e,t)=>{const n=(new Error).stack?.split(/\r\n|\r|\n/g)||[];let r=!1;for(let s=0;s<n.length;s++){if(r&&!n[s].includes("TRACE_FUNC")){let r=`FUNC_${e}::${n[s].trim().split(" ")[1]}`;return t&&(r+=`::${t}`),void S("CPU",r)}n[s].includes("TRACE_FUNC")&&(r=!0)}},P=e=>{(void 0===u.trace?u.wasm.trace:u.trace)&&C("BEGIN",e)},E=e=>{(void 0===u.trace?u.wasm.trace:u.trace)&&C("END",e)}}}),te=N({"common/dist/esm/inference-session-impl.js"(){q(),J(),ee(),F=class e{constructor(e){this.handler=e}async run(e,t,n){P();const r={};let s={};if("object"!=typeof e||null===e||e instanceof $||Array.isArray(e))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let i=!0;if("object"==typeof t){if(null===t)throw new TypeError("Unexpected argument[1]: cannot be null.");if(t instanceof $)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(t)){if(0===t.length)throw new TypeError("'fetches' cannot be an empty array.");i=!1;for(const e of t){if("string"!=typeof e)throw new TypeError("'fetches' must be a string array or an object.");if(-1===this.outputNames.indexOf(e))throw new RangeError(`'fetches' contains invalid output name: ${e}.`);r[e]=null}if("object"==typeof n&&null!==n)s=n;else if(void 0!==n)throw new TypeError("'options' must be an object.")}else{let e=!1;const o=Object.getOwnPropertyNames(t);for(const n of this.outputNames)if(-1!==o.indexOf(n)){const s=t[n];(null===s||s instanceof $)&&(e=!0,i=!1,r[n]=s)}if(e){if("object"==typeof n&&null!==n)s=n;else if(void 0!==n)throw new TypeError("'options' must be an object.")}else s=t}}else if(void 0!==t)throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const t of this.inputNames)if(void 0===e[t])throw new Error(`input '${t}' is missing in 'feeds'.`);if(i)for(const e of this.outputNames)r[e]=null;const o=await this.handler.run(e,r,s),a={};for(const e in o)if(Object.hasOwnProperty.call(o,e)){const t=o[e];a[e]=t instanceof $?t:new $(t.type,t.data,t.dims)}return E(),a}async release(){return this.handler.dispose()}static async create(t,n,r,s){let i;P();let o={};if("string"==typeof t){if(i=t,"object"==typeof n&&null!==n)o=n;else if(void 0!==n)throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(i=t,"object"==typeof n&&null!==n)o=n;else if(void 0!==n)throw new TypeError("'options' must be an object.")}else{if(!(t instanceof ArrayBuffer||"undefined"!=typeof SharedArrayBuffer&&t instanceof SharedArrayBuffer))throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");{const e=t;let a=0,l=t.byteLength;if("object"==typeof n&&null!==n)o=n;else if("number"==typeof n){if(a=n,!Number.isSafeInteger(a))throw new RangeError("'byteOffset' must be an integer.");if(a<0||a>=e.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${e.byteLength}).`);if(l=t.byteLength-a,"number"==typeof r){if(l=r,!Number.isSafeInteger(l))throw new RangeError("'byteLength' must be an integer.");if(l<=0||a+l>e.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${e.byteLength-a}].`);if("object"==typeof s&&null!==s)o=s;else if(void 0!==s)throw new TypeError("'options' must be an object.")}else if(void 0!==r)throw new TypeError("'byteLength' must be a number.")}else if(void 0!==n)throw new TypeError("'options' must be an object.");i=new Uint8Array(e,a,l)}}const[l,d]=await a(o),u=await l.createInferenceSessionHandler(i,d);return E(),new e(u)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}}}),ne=N({"common/dist/esm/inference-session.js"(){te(),A=F}}),re=N({"common/dist/esm/tensor-conversion.js"(){}}),se=N({"common/dist/esm/tensor-factory.js"(){}}),ie=N({"common/dist/esm/onnx-model.js"(){}}),oe=N({"common/dist/esm/onnx-value.js"(){}}),ae=N({"common/dist/esm/training-session-impl.js"(){q(),J(),"Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",I=class e{constructor(e,t,n){this.handler=e,this.hasOptimizerModel=t,this.hasEvalModel=n}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(t,n){const r=t.evalModel||"",s=t.optimizerModel||"",i=n||{},[o,l]=await a(i);if(o.createTrainingSessionHandler){const n=await o.createTrainingSessionHandler(t.checkpointState,t.trainModel,r,s,l);return new e(n,!!t.optimizerModel,!!t.evalModel)}throw new Error("Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.")}typeNarrowingForRunStep(e,t,n,r,s){const i={};let o={};if("object"!=typeof n||null===n||n instanceof $||Array.isArray(n))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let a=!0;if("object"==typeof r){if(null===r)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof $)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(0===r.length)throw new TypeError("'fetches' cannot be an empty array.");a=!1;for(const e of r){if("string"!=typeof e)throw new TypeError("'fetches' must be a string array or an object.");if(-1===t.indexOf(e))throw new RangeError(`'fetches' contains invalid output name: ${e}.`);i[e]=null}if("object"==typeof s&&null!==s)o=s;else if(void 0!==s)throw new TypeError("'options' must be an object.")}else{let e=!1;const n=Object.getOwnPropertyNames(r);for(const s of t)if(-1!==n.indexOf(s)){const t=r[s];(null===t||t instanceof $)&&(e=!0,a=!1,i[s]=t)}if(e){if("object"==typeof s&&null!==s)o=s;else if(void 0!==s)throw new TypeError("'options' must be an object.")}else o=r}}else if(void 0!==r)throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const t of e)if(void 0===n[t])throw new Error(`input '${t}' is missing in 'feeds'.`);if(a)for(const e of t)i[e]=null;return[i,o]}convertHandlerReturnTypeToMapOfTensors(e){const t={};for(const n in e)if(Object.hasOwnProperty.call(e,n)){const r=e[n];t[n]=r instanceof $?r:new $(r.type,r.data,r.dims)}return t}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(e,t,n){const[r,s]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,e,t,n),i=await this.handler.runTrainStep(e,r,s);return this.convertHandlerReturnTypeToMapOfTensors(i)}async runOptimizerStep(e){if(!this.hasOptimizerModel)throw new Error("This TrainingSession has no OptimizerModel loaded.");await this.handler.runOptimizerStep(e||{})}async runEvalStep(e,t,n){if(this.hasEvalModel){const[r,s]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,e,t,n),i=await this.handler.runEvalStep(e,r,s);return this.convertHandlerReturnTypeToMapOfTensors(i)}throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(e=!0){return this.handler.getParametersSize(e)}async loadParametersBuffer(e,t=!0){const n=await this.getParametersSize(t);if(e.length!==4*n)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(e,t)}async getContiguousParameters(e=!0){return this.handler.getContiguousParameters(e)}async release(){return this.handler.dispose()}}}}),le=N({"common/dist/esm/training-session.js"(){ae(),z=I}}),de={};V(de,{InferenceSession:()=>A,TRACE:()=>S,TRACE_FUNC_BEGIN:()=>P,TRACE_FUNC_END:()=>E,Tensor:()=>$,TrainingSession:()=>z,env:()=>c,registerBackend:()=>i});var ue,ce,pe,he,me=N({"common/dist/esm/index.js"(){G(),H(),ne(),J(),re(),se(),ee(),ie(),oe(),le()}}),fe=N({"web/lib/wasm/wasm-utils-env.ts"(){ue=!1}}),ge={};V(ge,{default:()=>he});var _e,we,be,ye,ve,xe,Me,Te,ke,$e,Se,Ce,Pe,Ee,Fe,Ae,Ie,ze,Be,Oe,Le,De,Re,Ne,Ve,je,qe,Ge,Ue,We,He,Ke,Xe,Qe,Ye,Ze,Je,et,tt,nt,rt,st,it,ot,at,lt,dt,ut,ct,pt,ht,mt,ft,gt,_t,wt,bt,yt,vt,xt,Mt,Tt,kt,$t,St,Ct,Pt,Et,Ft,At,It,zt,Bt,Ot,Lt,Dt,Rt,Nt,Vt,jt,qt,Gt,Ut,Wt,Ht,Kt,Xt,Qt,Yt,Zt,Jt,en,tn,nn,rn,sn,on,an,ln,dn,un,cn,pn,hn,mn,fn,gn,_n,wn,bn,yn,vn,xn,Mn,Tn,kn,$n,Sn,Cn,Pn,En,Fn,An,In,zn,Bn,On,Ln,Dn,Rn,Nn,Vn,jn,qn,Gn,Un,Wn,Hn,Kn,Xn,Qn,Yn,Zn,Jn,er,tr,nr,rr,sr,ir,or,ar,lr,dr,ur,cr,pr,hr,mr,fr,gr,_r,wr,br,yr,vr,xr,Mr,Tr,kr,$r,Sr,Cr,Pr,Er,Fr,Ar,Ir,zr,Br,Or,Lr,Dr,Rr,Nr,Vr,jr,qr,Gr,Ur,Wr,Hr,Kr,Xr,Qr,Yr,Zr,Jr,es,ts,ns,rs,ss,is,os,as,ls,ds,us,cs,ps,hs,ms,fs,gs,_s,ws,bs,ys,vs,xs,Ms,Ts,ks,$s,Ss,Cs,Ps,Es,Fs,As,Is,zs,Bs,Os,Ls,Ds,Rs,Ns,Vs,js,qs,Gs,Us,Ws,Hs,Ks,Xs,Qs,Ys,Zs,Js,ei,ti,ni,ri,si,ii,oi,ai,li,di,ui,ci,pi,hi,mi,fi,gi,_i,wi,bi,yi,vi,xi,Mi,Ti,ki,$i,Si,Ci,Pi,Ei,Fi,Ai,Ii,zi,Bi,Oi,Li,Di,Ri,Ni,Vi,ji,qi,Gi,Ui,Wi,Hi,Ki,Xi,Qi,Yi,Zi,Ji,eo,to,no,ro,so,io,oo,ao,lo,uo,co,po,ho,mo,fo,go,_o,wo,bo,yo,vo,xo,Mo,To,ko,$o,So,Co,Po,Eo,Fo,Ao,Io,zo,Bo,Oo,Lo,Do,Ro,No,Vo,jo,qo,Go,Uo,Wo,Ho,Ko,Xo,Qo,Yo,Zo,Jo,ea,ta,na,ra,sa,ia,oa,aa,la,da,ua,ca,pa,ha,ma,fa,ga,_a,wa,ba,ya,va,xa,Ma,Ta,ka,$a,Sa,Ca,Pa,Ea,Fa,Aa,Ia,za,Ba,Oa,La,Da,Ra,Na,Va,ja,qa,Ga,Ua,Wa,Ha,Ka,Xa,Qa,Ya,Za=N({"web/lib/wasm/proxy-worker/main.ts"(){Wd(),el(),Ja(),ce="ort-wasm-proxy-worker",(pe=globalThis.self?.name===ce)&&(self.onmessage=e=>{const{type:t,in:n}=e.data;try{switch(t){case"init-wasm":Ie(n.wasm).then((()=>{ud(n).then((()=>{postMessage({type:t})}),(e=>{postMessage({type:t,err:e})}))}),(e=>{postMessage({type:t,err:e})}));break;case"init-ep":{const{epName:e,env:r}=n;cd(r,e).then((()=>{postMessage({type:t})}),(e=>{postMessage({type:t,err:e})}));break}case"copy-from":{const{buffer:e}=n,r=md(e);postMessage({type:t,out:r});break}case"create":{const{model:e,options:r}=n;fd(e,r).then((e=>{postMessage({type:t,out:e})}),(e=>{postMessage({type:t,err:e})}));break}case"release":gd(n),postMessage({type:t});break;case"run":{const{sessionId:e,inputIndices:r,inputs:s,outputIndices:i,options:o}=n;wd(e,r,s,i,new Array(i.length).fill(null),o).then((e=>{e.some((e=>"cpu"!==e[3]))?postMessage({type:t,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:t,out:e},yd([...s,...e]))}),(e=>{postMessage({type:t,err:e})}));break}case"end-profiling":bd(n),postMessage({type:t})}}catch(e){postMessage({type:t,err:e})}}),he=pe?null:e=>new Worker(e??_e,{type:"module",name:ce})}}),Ja=N({"web/lib/wasm/wasm-utils-import.ts"(){fe(),_e=ue?void 0:"file:///Users/admin/Code/transformers.js/node_modules/onnxruntime-web/dist/ort.webgpu.mjs",we=ue||"undefined"==typeof location?void 0:location.origin,be=(e,t)=>{try{const n=t??_e;return(n?new URL(e,n):new URL(e)).origin===we}catch{return!1}},ye=(e,t)=>{const n=t??_e;try{return(n?new URL(e,n):new URL(e)).href}catch{return}},ve=(e,t)=>`${t??"./"}${e}`,xe=async e=>{const t=await fetch(e,{credentials:"same-origin"}),n=await t.blob();return URL.createObjectURL(n)},Me=async e=>(await import(e)).default,Te=(Za(),j(ge)).default,ke=async()=>{if(!_e)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(be(_e))return[void 0,Te()];const e=await xe(_e);return[e,Te(e)]},void 0,$e=async(e,t,n)=>{{const r="ort-wasm-simd-threaded.jsep.mjs",s=e??ye(r,t),i=!ue&&n&&s&&!be(s,t),o=i?await xe(s):s??ve(r,t);return[i?o:void 0,await Me(o)]}}}}),el=N({"web/lib/wasm/wasm-factory.ts"(){Ja(),Ce=!1,Pe=!1,Ee=!1,Fe=()=>{if("undefined"==typeof SharedArrayBuffer)return!1;try{return"undefined"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch(e){return!1}},Ae=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}},Ie=async e=>{if(Ce)return Promise.resolve();if(Pe)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Ee)throw new Error("previous call to 'initializeWebAssembly()' failed.");Pe=!0;const t=e.initTimeout;let n=e.numThreads;if(!Ae())throw new Error("WebAssembly SIMD is not supported in the current environment.");const r=Fe();n>1&&!r&&("undefined"==typeof self||self.crossOriginIsolated||console.warn("env.wasm.numThreads is set to "+n+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),e.numThreads=n=1);const s=e.wasmPaths,i="string"==typeof s?s:void 0,o=s?.mjs,a=o?.href??o,l=s?.wasm,d=l?.href??l,[u,c]=await $e(a,i,n>1);let p=!1;const h=[];if(t>0&&h.push(new Promise((e=>{setTimeout((()=>{p=!0,e()}),t)}))),h.push(new Promise(((e,t)=>{const r={numThreads:n};(d||i)&&(r.locateFile=(e,t)=>d??(i??t)+e),c(r).then((t=>{Pe=!1,Ce=!0,Se=t,e(),u&&URL.revokeObjectURL(u)}),(e=>{Pe=!1,Ee=!0,t(e)}))}))),await Promise.race(h),p)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},ze=()=>{if(Ce&&Se)return Se;throw new Error("WebAssembly is not initialized yet.")}}}),tl=N({"web/lib/wasm/wasm-utils.ts"(){el(),Be=(e,t)=>{const n=ze(),r=n.lengthBytesUTF8(e)+1,s=n._malloc(r);return n.stringToUTF8(e,s,r),t.push(s),s},Oe=(e,t,n,r)=>{if("object"==typeof e&&null!==e){if(n.has(e))throw new Error("Circular reference in options");n.add(e)}Object.entries(e).forEach((([e,s])=>{const i=t?t+e:e;if("object"==typeof s)Oe(s,i+".",n,r);else if("string"==typeof s||"number"==typeof s)r(i,s.toString());else{if("boolean"!=typeof s)throw new Error("Can't handle extra config type: "+typeof s);r(i,s?"1":"0")}}))},Le=e=>{const t=ze(),n=t.stackSave();try{const n=t.stackAlloc(8);t._OrtGetLastError(n,n+4);const r=t.HEAP32[n/4],s=t.HEAPU32[n/4+1],i=s?t.UTF8ToString(s):"";throw new Error(`${e} ERROR_CODE: ${r}, ERROR_MESSAGE: ${i}`)}finally{t.stackRestore(n)}}}}),nl=N({"web/lib/wasm/run-options.ts"(){el(),tl(),De=e=>{const t=ze();let n=0;const r=[],s=e||{};try{if(void 0===e?.logSeverityLevel)s.logSeverityLevel=2;else if("number"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===e?.logVerbosityLevel)s.logVerbosityLevel=0;else if("number"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===e?.terminate&&(s.terminate=!1);let i=0;return void 0!==e?.tag&&(i=Be(e.tag,r)),n=t._OrtCreateRunOptions(s.logSeverityLevel,s.logVerbosityLevel,!!s.terminate,i),0===n&&Le("Can't create run options."),void 0!==e?.extra&&Oe(e.extra,"",new WeakSet,((e,s)=>{const i=Be(e,r),o=Be(s,r);0!==t._OrtAddRunConfigEntry(n,i,o)&&Le(`Can't set a run config entry: ${e} - ${s}.`)})),[n,r]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),r.forEach((e=>t._free(e))),e}}}}),rl=N({"web/lib/wasm/session-options.ts"(){el(),tl(),Re=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},Ne=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},Ve=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some((e=>"webgpu"===("string"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)},je=(e,t,n)=>{for(const r of t){let t="string"==typeof r?r:r.name;switch(t){case"webnn":if(t="WEBNN","string"!=typeof r){const t=r,s=t?.deviceType,i=t?.numThreads,o=t?.powerPreference;if(s){const t=Be("deviceType",n),r=Be(s,n);0!==ze()._OrtAddSessionConfigEntry(e,t,r)&&Le(`Can't set a session config entry: 'deviceType' - ${s}.`)}if(void 0!==i){const t="number"!=typeof i||!Number.isInteger(i)||i<0?0:i,r=Be("numThreads",n),s=Be(t.toString(),n);0!==ze()._OrtAddSessionConfigEntry(e,r,s)&&Le(`Can't set a session config entry: 'numThreads' - ${i}.`)}if(o){const t=Be("powerPreference",n),r=Be(o,n);0!==ze()._OrtAddSessionConfigEntry(e,t,r)&&Le(`Can't set a session config entry: 'powerPreference' - ${o}.`)}}break;case"webgpu":if(t="JS","string"!=typeof r){const t=r;if(t?.preferredLayout){if("NCHW"!==t.preferredLayout&&"NHWC"!==t.preferredLayout)throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${t.preferredLayout}`);const r=Be("preferredLayout",n),s=Be(t.preferredLayout,n);0!==ze()._OrtAddSessionConfigEntry(e,r,s)&&Le(`Can't set a session config entry: 'preferredLayout' - ${t.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${t}`)}const s=Be(t,n);0!==ze()._OrtAppendExecutionProvider(e,s)&&Le(`Can't append execution provider: ${t}.`)}},qe=e=>{const t=ze();let n=0;const r=[],s=e||{};Ve(s);try{const e=Re(s.graphOptimizationLevel??"all"),i=Ne(s.executionMode??"sequential"),o="string"==typeof s.logId?Be(s.logId,r):0,a=s.logSeverityLevel??2;if(!Number.isInteger(a)||a<0||a>4)throw new Error(`log serverity level is not valid: ${a}`);const l=s.logVerbosityLevel??0;if(!Number.isInteger(l)||l<0||l>4)throw new Error(`log verbosity level is not valid: ${l}`);const d="string"==typeof s.optimizedModelFilePath?Be(s.optimizedModelFilePath,r):0;if(n=t._OrtCreateSessionOptions(e,!!s.enableCpuMemArena,!!s.enableMemPattern,i,!!s.enableProfiling,0,o,a,l,d),0===n&&Le("Can't create session options."),s.executionProviders&&je(n,s.executionProviders,r),void 0!==s.enableGraphCapture){if("boolean"!=typeof s.enableGraphCapture)throw new Error(`enableGraphCapture must be a boolean value: ${s.enableGraphCapture}`);const e=Be("enableGraphCapture",r),i=Be(s.enableGraphCapture.toString(),r);0!==t._OrtAddSessionConfigEntry(n,e,i)&&Le(`Can't set a session config entry: 'enableGraphCapture' - ${s.enableGraphCapture}.`)}if(s.freeDimensionOverrides)for(const[e,i]of Object.entries(s.freeDimensionOverrides)){if("string"!=typeof e)throw new Error(`free dimension override name must be a string: ${e}`);if("number"!=typeof i||!Number.isInteger(i)||i<0)throw new Error(`free dimension override value must be a non-negative integer: ${i}`);const s=Be(e,r);0!==t._OrtAddFreeDimensionOverride(n,s,i)&&Le(`Can't set a free dimension override: ${e} - ${i}.`)}return void 0!==s.extra&&Oe(s.extra,"",new WeakSet,((e,s)=>{const i=Be(e,r),o=Be(s,r);0!==t._OrtAddSessionConfigEntry(n,i,o)&&Le(`Can't set a session config entry: ${e} - ${s}.`)})),[n,r]}catch(e){throw 0!==n&&t._OrtReleaseSessionOptions(n),r.forEach((e=>t._free(e))),e}}}}),sl=N({"web/lib/wasm/wasm-common.ts"(){Ge=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},Ue=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},We=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],He=e=>{switch(e){case"float16":return"undefined"!=typeof Float16Array&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":case"bool":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Ke=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Xe=e=>"float32"===e||"float16"===e||"int32"===e||"int64"===e||"uint32"===e||"uint8"===e||"bool"===e,Qe=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}}}),il=N({"web/lib/wasm/wasm-utils-load-file.ts"(){fe(),Ye=async e=>{if("string"!=typeof e)return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e);if(!ue){const t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);const n=t.headers.get("Content-Length"),r=n?parseInt(n,10):0;if(r<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);const n=t.body.getReader();let s;try{s=new ArrayBuffer(r)}catch(e){if(!(e instanceof RangeError))throw e;{const e=Math.ceil(r/65536);s=new WebAssembly.Memory({initial:e,maximum:e}).buffer}}let i=0;for(;;){const{done:e,value:t}=await n.read();if(e)break;const r=t.byteLength;new Uint8Array(s,i,r).set(t),i+=r}return new Uint8Array(s,0,r)}}try{const{readFile:t}=R("node:fs/promises");return new Uint8Array(await t(e))}catch(t){if("ERR_FS_FILE_TOO_LARGE"===t.code){const{createReadStream:t}=R("node:fs"),n=t(e),r=[];for await(const e of n)r.push(e);return new Uint8Array(Buffer.concat(r))}throw t}}}}),ol=N({"web/lib/wasm/jsep/log.ts"(){sl(),Ze=["V","I","W","E","F"],Je=(e,t)=>{console.log(`[${Ze[e]},${(new Date).toISOString()}]${t}`)},nt=(e,t)=>{et=e,tt=t},rt=(e,t)=>{const n=Ke(e);n>=Ke(et)&&Je(n,"function"==typeof t?t():t)},st=(...e)=>{tt&&rt(...e)}}}),al=N({"web/lib/wasm/jsep/tensor-view.ts"(){sl(),it=(e,t)=>new(He(t))(e)}}),ll=N({"web/lib/wasm/jsep/webgpu/types.ts"(){}}),dl=N({"web/lib/wasm/jsep/webgpu/gpu-data-manager.ts"(){ol(),ll(),ot=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),at=[],lt=e=>16*Math.ceil(e/16),dt=e=>{for(let t=0;t<at.length;t++){const n=at[t];if(e<=n)return n}return 16*Math.ceil(e/16)},ut=1,ct=()=>ut++,pt=async(e,t,n,r)=>{const s=lt(n),i=e.device.createBuffer({size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{const o=e.getCommandEncoder();e.endComputePass(),o.copyBufferToBuffer(t,0,i,0,s),e.flush(),await i.mapAsync(GPUMapMode.READ);const a=i.getMappedRange();if(r){const e=r();return e.set(new Uint8Array(a,0,n)),e}return new Uint8Array(a.slice(0,n))}finally{i.destroy()}},ht=class{constructor(e){this.backend=e,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map,this.capturedPendingBuffers=new Map;for(const[e]of ot)at.push(e),this.freeBuffers.set(e,[]),this.freeUniformBuffers.set(e,[])}upload(e,t){const n=t.buffer,r=t.byteOffset,s=t.byteLength,i=lt(s),o=this.storageCache.get(e);if(!o)throw new Error("gpu data for uploading does not exist");if(o.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${o.originalSize}, data size=${s}`);const a=this.backend.device.createBuffer({mappedAtCreation:!0,size:i,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),l=a.getMappedRange();new Uint8Array(l).set(new Uint8Array(n,r,s)),a.unmap();const d=this.backend.getCommandEncoder();this.backend.endComputePass(),d.copyBufferToBuffer(a,0,o.gpuData.buffer,0,i),st("verbose",(()=>`[WebGPU] GpuDataManager.upload(id=${e})`)),this.buffersForUploadingPending.push(a)}memcpy(e,t){const n=this.storageCache.get(e);if(!n)throw new Error("source gpu data for memcpy does not exist");const r=this.storageCache.get(t);if(!r)throw new Error("destination gpu data for memcpy does not exist");if(n.originalSize!==r.originalSize)throw new Error("inconsistent source and destination gpu data size");const s=lt(n.originalSize),i=this.backend.getCommandEncoder();this.backend.endComputePass(),i.copyBufferToBuffer(n.gpuData.buffer,0,r.gpuData.buffer,0,s)}registerExternalBuffer(e,t,n){let r;if(n){if(r=this.externalBuffers.get(n),void 0===r)throw new Error("previous buffer is not registered");if(e===n)return st("verbose",(()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${r}, buffer is the same, skip.`)),r;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error("Registering a different external buffer under graph capture mode is not supported yet.\n             Please use the previous external buffer!");this.externalBuffers.delete(n)}else r=ct();return this.storageCache.set(r,{gpuData:{id:r,type:0,buffer:e},originalSize:t}),this.externalBuffers.set(e,r),st("verbose",(()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${r}, registered.`)),r}unregisterExternalBuffer(e){const t=this.externalBuffers.get(e);void 0!==t&&(this.storageCache.delete(t),this.externalBuffers.delete(e),st("verbose",(()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${t}`)))}create(e,t=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){const n=dt(e);let r;const s=(t&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,i=(t&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||i){const e=(s?this.freeBuffers:this.freeUniformBuffers).get(n);r=e&&e.length>0?e.pop():this.backend.device.createBuffer({size:n,usage:t})}else r=this.backend.device.createBuffer({size:n,usage:t});const o={id:ct(),type:0,buffer:r};return this.storageCache.set(o.id,{gpuData:o,originalSize:e}),st("verbose",(()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${o.id}`)),o}get(e){return this.storageCache.get(e)?.gpuData}release(e){const t=this.storageCache.get(e);if(!t)throw new Error("releasing data does not exist");return st("verbose",(()=>`[WebGPU] GpuDataManager.release(id=${e}), gpuDataId=${t.gpuData.id}`)),this.storageCache.delete(e),this.buffersPending.push(t.gpuData.buffer),t.originalSize}async download(e,t){const n=this.storageCache.get(e);if(!n)throw new Error("data does not exist");await pt(this.backend,n.gpuData.buffer,n.originalSize,t)}refreshPendingBuffers(){for(const e of this.buffersForUploadingPending)e.destroy();if(this.buffersForUploadingPending=[],0!==this.buffersPending.length)if("default"===this.backend.sessionStatus){for(const e of this.buffersPending){const t=ot.get(e.size);if((e.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){const n=this.freeBuffers.get(e.size)||[];void 0===t||n.length>=t?e.destroy():n.push(e)}else if((e.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){const n=this.freeUniformBuffers.get(e.size)||[];void 0===t||n.length>=t?e.destroy():n.push(e)}else e.destroy()}this.buffersPending=[]}else{let e=this.capturedPendingBuffers.get(this.backend.currentSessionId);e||(e=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,e));for(const t of this.buffersPending)e.push(t);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach((e=>{e.forEach((e=>{e.destroy()}))})),this.freeUniformBuffers.forEach((e=>{e.forEach((e=>{e.destroy()}))})),this.storageCache.forEach((e=>{e.gpuData.buffer.destroy()})),this.capturedPendingBuffers.forEach((e=>{e.forEach((e=>{e.destroy()}))})),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onReleaseSession(e){const t=this.capturedPendingBuffers.get(e);t&&(t.forEach((e=>{e.destroy()})),this.capturedPendingBuffers.delete(e))}},mt=(...e)=>new ht(...e)}}),ul=N({"web/lib/wasm/jsep/webgpu/attribute-with-cache-key.ts"(){ft=class{constructor(e){Object.assign(this,e)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map((e=>`${this[e]}`)).join(";")),this.key}},gt=e=>new ft(e)}}),cl=N({"web/lib/wasm/jsep/util.ts"(){_t=class{static calcMatMulShape(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]]}},wt=class{static calcShape(e,t,n=!1){const r=e.length,s=t.length;if(0===r)return t;if(0===s)return e;const i=Math.max(e.length,t.length),o=new Array(i);if(n){if(r<2||s<2)return;const n=_t.calcMatMulShape([e[r-2],e[r-1]],[t[s-2],t[s-1]]);if(void 0===n)return;[o[i-2],o[i-1]]=n}for(let a=n?3:1;a<=i;a++){const n=r-a<0?1:e[r-a],l=s-a<0?1:t[s-a];if(n!==l&&n>1&&l>1)return;const d=Math.max(n,l);if(n&&l)o[i-a]=Math.max(n,l);else{if(d>1)return;o[i-a]=0}}return o}static isValidBroadcast(e,t){const n=e.length,r=t.length;if(n>r)return!1;for(let s=1;s<=n;s++)if(1!==e[n-s]&&e[n-s]!==t[r-s])return!1;return!0}},bt=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static convertShape(e,t=4){const n=e.length;if(0===n)return[];const r=new Array(n);let s=n-1;for(;s>=0;){if(e[s]%t==0){r[s]=e[s]/t;break}if(t%e[s]!=0)throw new Error("cannot convert shape");r[s]=1,t/=e[s],s--}for(s--;s>=0;s--)r[s]=e[s];return r}static sizeFromDimension(t,n){if(n<0||n>t.length)throw new Error(`invalid dimension of ${n} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,n,t.length)}static sizeToDimension(t,n){if(n<0||n>t.length)throw new Error(`invalid dimension of ${n} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,n)}static getSizeFromDimensionRange(e,t,n){let r=1;for(let s=t;s<n;s++){if(e[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");r*=e[s]}return r}static computeStrides(e){const t=e.length;if(0===t)return[];if(1===t)return[1];const n=new Array(t);n[t-1]=1,n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}static normalizeAxis(e,t){if(e<-t&&e>=t)throw new Error("unsupported axis for this operation.");return e<0?e+t:e}static normalizeAxes(e,t){return e.map((n=>this.normalizeAxis(n,t??e.length)))}static sortBasedOnPerm(e,t){return t?t.map((t=>e[t])):e.slice().reverse()}static padShape(e,t){const n=e.length;return e.map(((e,r)=>e+t[r]+t[r+n]))}static areEqual(e,t){return e.length===t.length&&e.every(((e,n)=>e===t[n]))}},yt=class e{static adjustPoolAttributes(e,t,n,r,s,i){if(!e&&n.length!==t.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(e)for(let e=0;e<t.length-2;e++)e>=n.length?n.push(t[e+2]):n[e]=t[e+2];for(let e=0;e<n.length;e++)if(e<r.length){if(r[e]<0)throw new Error("strides should be greater than or equal to 1")}else r.push(1);for(let e=0;e<n.length;e++)if(e<s.length){if(s[e]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let e=0;e<2*n.length;e++)if(e<i.length){if(i[e]<0)throw new Error("pad should be greater than or equal to 1")}else i.push(0);for(let e=0;e<n.length;e++){if(n[e]<=0)throw new Error("kernel shapes need to be greater than 0");if(i[e]>=n[e]||i[e+n.length]>=n[e])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,n,r,s,i,o,a){if(a){if(i.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(s.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let l=0;l<t.length-2;l++)e.adjustPadAndReturnShape(t[l+(o?1:2)],n[l],r[l],s[l],i,l,l+t.length-2,a)}}static computePoolOutputShape(t,n,r,s,i,o,a){if(n.length<=0)throw new Error("input shape must be of size greater than 0");const l=[n[0],n[1]];return e.computeShapeHelper(t,n,l,r,s,i,o,a),l}static computeConvOutputShape(t,n,r,s,i,o,a){if(t.length<=0||n.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");const l=[t[0],n[0]];return e.computeShapeHelper(!1,t,l,r,s,i,o,a),l}static computeShapeHelper(t,n,r,s,i,o,a,l){if(t)for(let e=0;e<n.length-2;e++)r.push(1);else for(let t=0;t<n.length-2;t++)r.push(e.adjustPadAndReturnShape(n[t+2],s[t],i[t],o[t],a,t,t+n.length-2,l))}static adjustPadAndReturnShape(e,t,n,r,s,i,o,a){const l=n*(r-1)+1;if(!a||"NOTSET"===a)return Math.floor((e+s[i]+s[o]-l)/t+1);switch(a){case"VALID":return s[i]=0,s[o]=0,Math.floor((e-l)/t+1);case"SAME_LOWER":case"SAME_UPPER":if(1!==n)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{const n=((e+t-1)/t-1)*t+r-e;return s[i]="SAME_LOWER"===a?Math.floor((n+1)/2):Math.floor(n/2),s[o]=n-s[i],Math.floor((e+n-r)/t+1)}default:throw new Error("Unsupported AutoPad type")}}},vt=class{static getShapeOfGemmResult(e,t,n,r,s){if(2!==e.length||2!==n.length)throw new Error("shape need to be of size 2");let i,o,a;t?(i=e[1],o=e[0]):(i=e[0],o=e[1]);let l=-1;if(r?(a=n[0],l=1):(a=n[1],l=0),n[l]!==o)throw new Error("dimension mismatch");if(i<=0||a<=0||o<=0)throw new Error("invalid shape specified");if(s&&!wt.isValidBroadcast(s,[i,a]))throw new Error("gemm: invalid bias shape for broadcast");return[i,a,o]}},xt=-34028234663852886e22,Mt=34028234663852886e22}}),pl=N({"web/lib/wasm/jsep/webgpu/ops/common.ts"(){sl(),cl(),Tt=64,kt=(e,t)=>{if(3===t)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(4!==t)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},$t=(e,t=1)=>{const n=kt(e,t);return"string"==typeof n?n:n[0]},St=(e,t=1)=>{const n=kt(e,t);return"string"==typeof n?n:n[1]},Ct=(...e)=>{const t=[];return e.forEach((e=>{0!==e.length&&t.push({type:12,data:e},{type:12,data:bt.computeStrides(e)})})),t},Pt=e=>e%4==0?4:e%2==0?2:1,Et=(e="f32",t,n="0")=>t&&1!==t?`vec${t}<${e}>(${n})`:`${e}(${n})`,Ft=(e,t,n)=>"f32"===e?n:1===t?`f32(${n})`:`vec${t}<f32>(${n})`,At=(e,t)=>4===t?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:2===t?`(${e}.x + ${e}.y)`:3===t?`(${e}.x + ${e}.y + ${e}.z)`:e,It=(e,t,n,r)=>e.startsWith("uniforms.")&&n>4?"string"==typeof t?"f16"===r?`${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]`:`${e}[(${t}) / 4][(${t}) % 4]`:"f16"===r?`${e}[${Math.floor(t/8)}][${Math.floor(t%8/4)}][${t%8%4}]`:`${e}[${Math.floor(t/4)}][${t%4}]`:n>1?`${e}[${t}]`:e,zt=(e,t,n,r,s)=>{const i="number"==typeof n,o=i?n:n.length,a=[...new Array(o).keys()],l=o<2?"u32":o<=4?`vec${o}<u32>`:`array<u32, ${o}>`,d=kt(t,s),u="string"==typeof d?d:d[1],c="string"==typeof d?d:d[0],p={indices:l,value:u,storage:c,tensor:t},h=e=>"string"==typeof e?e:`${e}u`,m={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},f=i?"uniforms.":"",g=`${f}${e}_shape`,_=`${f}${e}_strides`;let w="";for(let e=0;e<o-1;e++)w+=`\n    let dim${e} = current / ${It(_,e,o)};\n    let rest${e} = current % ${It(_,e,o)};\n    indices[${e}] = dim${e};\n    current = rest${e};\n    `;w+=`indices[${o-1}] = current;`;const b=o<2?"":`\n  fn o2i_${e}(offset: u32) -> ${p.indices} {\n    var indices: ${p.indices};\n    var current = offset;\n    ${w}\n    return indices;\n  }`,y=[];if(o>=2)for(let e=o-1;e>=0;e--)y.push(`${It(_,e,o)} * (indices[${e}])`);const v=o<2?"":`\n  fn i2o_${e}(indices: ${p.indices}) -> u32 {\n    return ${y.join("+")};\n  }`,x=(...e)=>0===o?"0u":`${p.indices}(${e.map(h).join(",")})`,M=(e,t)=>o<2?`${e}`:`${It(e,t,o)}`,T={},k=(t,n)=>(()=>{if(p.storage===p.value)return`${e}[${t}]=${n};`;if("vec2<u32>"===p.storage&&"i32"===p.value)return`${e}[${t}]=vec2<u32>(u32(${n}), select(0u, 0xFFFFFFFFu, ${n} < 0));`;if("vec2<u32>"===p.storage&&"u32"===p.value)return`${e}[${t}]=vec2<u32>(u32(${n}), 0u);`;if("u32"===p.storage&&"vec4<bool>"===p.value)return`${e}[${t}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${n}));`;throw new Error(`not supported combination of storage type ${p.storage} and value type ${p.value} yet`)})(),$=t=>(()=>{if(p.storage===p.value)return`${e}[${t}]`;if("vec2<u32>"===p.storage&&"i32"===p.value)return`i32(${e}[${t}].x)`;if("vec2<u32>"===p.storage&&"u32"===p.value)return`u32(${e}[${t}].x)`;if("u32"===p.storage&&"vec4<bool>"===p.value)return`vec4<bool>(bool(${e}[${t}] & 0xFFu), bool(${e}[${t}] & 0xFF00u), bool(${e}[${t}] & 0xFF0000u), bool(${e}[${t}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${p.storage} and value type ${p.value} yet`)})(),S=o<2?"":`\n  fn get_${e}ByIndices(indices: ${p.indices}) -> ${u} {\n    return ${$(`i2o_${e}(indices)`)};\n  }`,C=o<2?"":(()=>{const t=a.map((e=>`d${e}: u32`)).join(", "),n=a.map((e=>`d${e}`)).join(", ");return`\n  fn get_${e}(${t}) -> ${u} {\n    return get_${e}ByIndices(${x(n)});\n  }`})(),P=o<2?"":`\n  fn set_${e}ByIndices(indices: ${p.indices}, value: ${u}) {\n    ${k(`i2o_${e}(indices)`,"value")}\n  }`,E=o<2?"":(()=>{const t=a.map((e=>`d${e}: u32`)).join(", "),n=a.map((e=>`d${e}`)).join(", ");return`\n  fn set_${e}(${t}, value: ${u}) {\n    set_${e}ByIndices(${x(n)}, value);\n  }`})();return{impl:()=>{const e=[];let t=!1;return m.offsetToIndices&&(e.push(b),t=!0),m.indicesToOffset&&(e.push(v),t=!0),m.broadcastedIndicesToOffset&&(Object.values(T).forEach((t=>e.push(t))),t=!0),m.set&&(e.push(E),t=!0),m.setByIndices&&(e.push(P),t=!0),m.get&&(e.push(C),t=!0),m.getByIndices&&(e.push(S),t=!0),!i&&t&&e.unshift(`const ${g} = ${p.indices}(${n.join(",")});`,`const ${_} = ${p.indices}(${bt.computeStrides(n).join(",")});`),e.join("\n")},type:p,offsetToIndices:t=>(m.offsetToIndices=!0,o<2?t:`o2i_${e}(${t})`),indicesToOffset:t=>(m.indicesToOffset=!0,o<2?t:`i2o_${e}(${t})`),broadcastedIndicesToOffset:(t,n)=>{m.broadcastedIndicesToOffset=!0;const r=`${n.name}broadcastedIndicesTo${e}Offset`;if(r in T)return`${r}(${t})`;const s=[];for(let e=o-1;e>=0;e--){const t=n.indicesGet("outputIndices",e+n.rank-o);s.push(`${M(_,e)} * (${t} % ${M(g,e)})`)}return T[r]=`fn ${r}(outputIndices: ${n.type.indices}) -> u32 {\n             return ${s.length>0?s.join("+"):"0u"};\n           }`,`${r}(${t})`},indices:x,indicesGet:M,indicesSet:(e,t,n)=>o<2?`${e}=${n};`:`${It(e,t,o)}=${n};`,set:(...t)=>{if(t.length!==o+1)throw new Error(`indices length must be ${o}`);const n=t[o];if("string"!=typeof n)throw new Error("value must be string");const r=t.slice(0,o).map(h).join(",");return 0===o?k("0u",n):1===o?k(r[0],n):(m.set=!0,m.setByIndices=!0,m.indicesToOffset=!0,`set_${e}(${r}, ${n})`)},setByOffset:k,setByIndices:(t,n)=>o<2?k(t,n):(m.setByIndices=!0,m.indicesToOffset=!0,`set_${e}ByIndices(${t}, ${n});`),get:(...t)=>{if(t.length!==o)throw new Error(`indices length must be ${o}`);const n=t.map(h).join(",");return 0===o?$("0u"):1===o?$(n[0]):(m.get=!0,m.getByIndices=!0,m.indicesToOffset=!0,`get_${e}(${n})`)},getByOffset:$,getByIndices:t=>o<2?$(t):(m.getByIndices=!0,m.indicesToOffset=!0,`get_${e}ByIndices(${t})`),usage:r,name:e,strides:_,shape:g,rank:o}},Bt=(e,t,n,r=1)=>zt(e,t,n,"input",r),Ot=(e,t,n,r=1)=>zt(e,t,n,"output",r),Lt=(e,t,n,r=1)=>zt(e,t,n,"internal",r),Dt=class{constructor(e,t){this.normalizedDispatchGroup=e,this.limits=t,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${"number"==typeof e?`${e}u`:e}) { return; }`}mainStart(e=Tt){const t="number"==typeof e?e:e[0],n="number"==typeof e?1:e[1],r="number"==typeof e?1:e[2];if(t>this.limits.maxComputeWorkgroupSizeX||n>this.limits.maxComputeWorkgroupSizeY||r>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${t}, ${n}, ${r}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(t*n*r>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${t}, ${n}, ${r}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);const s=1===this.normalizedDispatchGroup[1]&&1===this.normalizedDispatchGroup[2];return`@compute @workgroup_size(${t}, ${n}, ${r})\n  fn main(${s?"@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>":"@builtin(global_invocation_id) global_id : vec3<u32>,\n                                             @builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>"}) {\n    ${s?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${t*n*r}u + local_idx;`}\n  `}appendVariableUniforms(e){0!==e.rank&&(e.shape.startsWith("uniforms.")&&this.uniforms.push({name:e.shape.replace("uniforms.",""),type:"u32",length:e.rank}),e.strides.startsWith("uniforms.")&&this.uniforms.push({name:e.strides.replace("uniforms.",""),type:"u32",length:e.rank}))}declareVariable(e,t){if("internal"===e.usage)throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(e),this.appendVariableUniforms(e);const n="input"===e.usage?"read":"read_write",r=e.type.storage;return`@group(0) @binding(${t}) var<storage, ${n}> ${e.name}: array<${r}>;`}declareVariables(...e){return e.map((e=>this.declareVariable(e,this.variableIndex++))).join("\n")}registerInternalVariable(e){if("internal"!==e.usage)throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(e),this.appendVariableUniforms(e)}registerInternalVariables(...e){return e.forEach((e=>this.registerInternalVariable(e))),this}registerUniform(e,t,n=1){return this.uniforms.push({name:e,type:t,length:n}),this}registerUniforms(e){return this.uniforms=this.uniforms.concat(e),this}uniformDeclaration(){if(0===this.uniforms.length)return"";const e=[];for(const{name:t,type:n,length:r}of this.uniforms)if(r&&r>4)"f16"===n?e.push(`@align(16) ${t}:array<mat2x4<${n}>, ${Math.ceil(r/8)}>`):e.push(`${t}:array<vec4<${n}>, ${Math.ceil(r/4)}>`);else{const s=null==r||1===r?n:`vec${r}<${n}>`;e.push(`${t}:${s}`)}return`\n      struct Uniforms { ${e.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map((e=>e.impl())).join("\n")+this.internalVariables.map((e=>e.impl())).join("\n")}get variablesInfo(){if(0===this.uniforms.length)return;return this.uniforms.map((e=>{return[(t=e.type,[12,10,1,6][["u32","f16","f32","i32"].indexOf(t)]),e.length??1];var t}))}},Rt=(e,t)=>new Dt(e,t),Nt=(e,t)=>{const n=e.length,r=[];for(let s=0;s<n;s++){const i=n-1-s,o=e[i]||1;(t[t.length-1-s]||1)>1&&1===o&&r.unshift(i)}return r}}}),hl=N({"web/lib/wasm/jsep/webgpu/ops/transpose.ts"(){sl(),cl(),ul(),pl(),Vt=e=>{if(!e||1!==e.length)throw new Error("Transpose requires 1 input.")},jt=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,qt=(e,t)=>bt.sortBasedOnPerm(e,jt(e.length,t)),Gt=(e,t,n,r)=>{const s=[];s.push(`fn perm(i: ${r.type.indices}) -> ${n.type.indices} {\n    var a: ${n.type.indices};`);for(let r=0;r<t;++r)s.push(n.indicesSet("a",e[r],`i[${r}]`));return s.push("return a;}"),s.join("\n")},Ut=(e,t)=>{const n=e.dataType,r=e.dims.length,s=jt(r,t),i=qt(e.dims,s),o=Ot("output",n,i.length),a=Bt("a",n,r);let l;if(2===s.length&&1===s[0]&&0===s[1]){const e=o.type.value,t=[16,16,1];l=n=>`\n  ${n.registerUniform("output_size","u32").declareVariables(a,o)}\n  var<workgroup> tile : array<array<${e}, ${t[0]+1}>, ${t[0]}>;\n  ${n.mainStart(t)}\n    var x = workgroup_id.x * ${t[0]}u + local_id.x;\n    var y = workgroup_id.y * ${t[0]}u + local_id.y;\n    let width = uniforms.output_shape[0];\n    let height = uniforms.output_shape[1];\n    if (x < width && y < height) {\n      tile[local_id.y][local_id.x] = ${a.getByOffset("y * width + x")};\n    }\n    workgroupBarrier();\n    x = workgroup_id.y * ${t[0]}u + local_id.x;\n    y = workgroup_id.x * ${t[0]}u + local_id.y;\n    if (x < height && y < width) {\n      ${o.setByOffset("y * height + x","tile[local_id.x][local_id.y]")}\n    }\n  }`}else l=e=>`\n  ${e.registerUniform("output_size","u32").declareVariables(a,o)}\n\n  ${Gt(s,r,a,o)}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${o.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${o.setByOffset("global_idx",a.getByIndices("aIndices"))}\n  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:["rank"]},getRunData:e=>{const t=bt.size(i);return{outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(t/64)},programUniforms:[{type:12,data:t},...Ct(e[0].dims,i)]}},getShaderSource:l}},Wt=(e,t)=>{Vt(e.inputs),e.compute(Ut(e.inputs[0],t.perm))},Ht=e=>gt({perm:e.perm})}}),ml=N({"web/lib/wasm/jsep/webgpu/ops/reduce-shared.ts"(){sl(),cl(),pl(),fl(),hl(),Kt={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},Xt={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},Qt={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},Yt={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},Zt=(e,t)=>{const n=[];for(let r=t-e;r<t;++r)n.push(r);return n},Jt=(e,t)=>{const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map((t=>e[t]))]},en=(e,t)=>{const n=e.length+t.length,r=[];let s=0;for(let i=0;i<n;i++)-1===t.indexOf(i)?r.push(e[s++]):r.push(1);return r},tn=(e,t)=>{for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0},nn=(e,t)=>{const n=[];if(!tn(e,t)){for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);e.forEach((e=>n.push(e)))}return n},rn=(e,t,n,r,s,i,o)=>{const a=n[0].dims,l=bt.size(i),d=bt.size(o),u=Bt("_A",n[0].dataType,a),c=Ot("output",s,i);return{name:e,shaderCache:t,getShaderSource:e=>`\n        ${e.registerUniform("reduceSize","u32").declareVariables(u,c)}\n        \n          var<workgroup> aBestValues : array<f32, 32>;\n       \n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${e.mainStart(32)}\n\n          let outputIndex = global_idx / 32;\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = f32(${Qt[r]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + 32) {\n           let candidate = f32(${u.getByOffset("offset + k")});\n           bestValue = ${Kt[r]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, 32u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${Xt[r]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${c.setByOffset("outputIndex",""+("mean"===r?`${c.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${c.type.storage}(${Yt[r]})`))};\n         }\n        }`,getRunData:()=>({outputs:[{dims:i,dataType:s}],dispatchGroup:{x:l},programUniforms:[{type:12,data:d}]})}},sn=(e,t,n,r)=>{const s=1===e.inputs.length?n:bn(e.inputs,n);let i=s.axes;0!==i.length||s.noopWithEmptyAxes||(i=e.inputs[0].dims.map(((e,t)=>t)));const o=bt.normalizeAxes(i,e.inputs[0].dims.length);let a=o,l=e.inputs[0];const d=nn(a,e.inputs[0].dims.length);d.length>0&&(l=e.compute(Ut(e.inputs[0],d),{inputs:[0],outputs:[-1]})[0],a=Zt(a.length,l.dims.length));const[u,c]=Jt(l.dims,a);let p=u;s.keepDims&&(p=en(u,o)),e.compute(rn(t,{hint:s.cacheKey,inputDependencies:["type"]},[l],r,e.inputs[0].dataType,p,c),{inputs:[l]})},on=(e,t)=>{sn(e,"ReduceMeanShared",t,"mean")},an=(e,t)=>{sn(e,"ReduceL1Shared",t,"l1")},ln=(e,t)=>{sn(e,"ReduceL2Shared",t,"l2")},dn=(e,t)=>{sn(e,"ReduceLogSumExpShared",t,"logSumExp")},un=(e,t)=>{sn(e,"ReduceMaxShared",t,"max")},cn=(e,t)=>{sn(e,"ReduceMinShared",t,"min")},pn=(e,t)=>{sn(e,"ReduceProdShared",t,"prod")},hn=(e,t)=>{sn(e,"ReduceSumShared",t,"sum")},mn=(e,t)=>{sn(e,"ReduceSumSquareShared",t,"sumSquare")},fn=(e,t)=>{sn(e,"ReduceLogSumShared",t,"logSum")}}}),fl=N({"web/lib/wasm/jsep/webgpu/ops/reduce.ts"(){sl(),cl(),ul(),pl(),ml(),gn=e=>{if(!e||0===e.length||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(2===e.length&&1!==e[1].dims.length)throw new Error("Invalid axes input dims.")},_n=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],wn=(e,t,n,r,s,i,o=!1,a=!1)=>{const l=[],d=n[0].dims,u=d.length,c=bt.normalizeAxes(s,u),p=!a&&0===c.length;d.forEach(((e,t)=>{p||c.indexOf(t)>=0?o&&l.push(1):l.push(e)}));const h=l.length,m=bt.size(l);return{name:e,shaderCache:t,getShaderSource:e=>{const t=[],s=Bt("_A",n[0].dataType,u),a=Ot("output",i,h),l=r(s,a,c);let m=l[2];for(let e=0,n=0;e<u;e++)p||c.indexOf(e)>=0?(o&&n++,m=`for(var j${e}: u32 = 0; j${e} < ${d[e]}; j${e}++) {\n                  ${l[2].includes("last_index")?`let last_index = j${e};`:""}\n                  ${s.indicesSet("input_indices",e,`j${e}`)}\n                  ${m}\n                }`):(t.push(`${s.indicesSet("input_indices",e,a.indicesGet("output_indices",n))};`),n++);return`\n\n        ${e.registerUniform("output_size","u32").declareVariables(s,a)}\n\n        ${e.mainStart()}\n          ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var input_indices: ${s.type.indices};\n          let output_indices = ${a.offsetToIndices("global_idx")};\n\n          ${t.join("\n")}\n          ${l[0]}       // init ops for reduce max/min\n          ${l[1]}\n          ${m}\n          ${l[3]}\n          ${4===l.length?a.setByOffset("global_idx","value"):l.slice(4).join("\n")}\n        }`},getRunData:()=>({outputs:[{dims:l,dataType:i}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:[{type:12,data:m},...Ct(d,l)]})}},bn=(e,t)=>{const n=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach((e=>n.push(Number(e)))),gt({axes:n,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},yn=(e,t,n,r)=>{const s=e.inputs,i=1===s.length?n:bn(s,n);e.compute(wn(t,{hint:i.cacheKey,inputDependencies:["rank"]},[s[0]],i.noopWithEmptyAxes&&0===i.axes.length?_n:r,i.axes,s[0].dataType,i.keepDims,i.noopWithEmptyAxes),{inputs:[0]})},vn=(e,t)=>{gn(e.inputs);yn(e,"ReduceLogSum",t,((e,t)=>[`var value = ${t.type.storage}(0);`,"",`value += ${e.getByIndices("input_indices")};`,"value = log(value);"]))},xn=(e,t)=>{gn(e.inputs);yn(e,"ReduceL1",t,((e,t)=>[`var value = ${t.type.storage}(0);`,"",`value += abs(${e.getByIndices("input_indices")});`,""]))},Mn=(e,t)=>{gn(e.inputs);yn(e,"ReduceL2",t,((e,t)=>[`var t = ${t.type.value}(0); var value = ${t.type.value}(0);`,"",`t = ${e.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"]))},Tn=(e,t)=>{gn(e.inputs);yn(e,"ReduceLogSumExp",t,((e,t)=>[`var value = ${t.type.storage}(0);`,"",`value += exp(${e.getByIndices("input_indices")});`,"value = log(value);"]))},kn=(e,t)=>{gn(e.inputs);yn(e,"ReduceMax",t,((e,t,n)=>{const r=[];for(let t=0;t<e.rank;t++)(n.indexOf(t)>=0||0===n.length)&&r.push(e.indicesSet("input_indices",t,0));return[`${r.join("\n")}`,`var value = ${e.getByIndices("input_indices")};`,`value = max(value, ${e.getByIndices("input_indices")});`,""]}))},$n=(e,t)=>{gn(e.inputs);yn(e,"ReduceMean",t,((t,n,r)=>{let s=1;for(let n=0;n<t.rank;n++)(r.indexOf(n)>=0||0===r.length)&&(s*=e.inputs[0].dims[n]);return["var sum = f32(0);","",`sum += f32(${t.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${s});`]}))},Sn=(e,t)=>{gn(e.inputs);yn(e,"ReduceMin",t,((e,t,n)=>{const r=[];for(let t=0;t<e.rank;t++)(n.indexOf(t)>=0||0===n.length)&&r.push(`input_indices[${t}] = 0;`);return[`${r.join("\n")}`,`var value = ${e.getByIndices("input_indices")};`,`value = min(value, ${e.getByIndices("input_indices")});`,""]}))},Cn=(e,t)=>{gn(e.inputs);yn(e,"ReduceProd",t,((e,t)=>[`var value = ${t.type.storage}(1);`,"",`value *= ${e.getByIndices("input_indices")};`,""]))},Pn=(e,t)=>{gn(e.inputs);yn(e,"ReduceSum",t,((e,t)=>[`var value = ${t.type.storage}(0);`,"",`value += ${e.getByIndices("input_indices")};`,""]))},En=(e,t)=>{gn(e.inputs);yn(e,"ReduceSumSquare",t,((e,t)=>[`var t = ${t.type.value}(0); var value = ${t.type.value}(0);`,"",`t = ${e.getByIndices("input_indices")}; value += t * t;`,""]))},Fn=(e,t,n)=>{if(0===t.length)return n;let r=1,s=1;for(let n=0;n<t.length;n++)-1===t.indexOf(n)?r*=e[n]:s*=e[n];return s<32&&r>1024},An=(e,t)=>{Fn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?$n(e,t):on(e,t)},In=(e,t)=>{Fn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?xn(e,t):an(e,t)},zn=(e,t)=>{Fn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Mn(e,t):ln(e,t)},Bn=(e,t)=>{Fn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Tn(e,t):dn(e,t)},On=(e,t)=>{Fn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?kn(e,t):un(e,t)},Ln=(e,t)=>{Fn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Sn(e,t):cn(e,t)},Dn=(e,t)=>{Fn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Cn(e,t):pn(e,t)},Rn=(e,t)=>{Fn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Pn(e,t):hn(e,t)},Nn=(e,t)=>{Fn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?En(e,t):mn(e,t)},Vn=(e,t)=>{Fn(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?vn(e,t):fn(e,t)}}}),gl=N({"web/lib/wasm/jsep/webgpu/ops/argminmax.ts"(){sl(),ul(),fl(),jn=e=>{if(!e||0===e.length||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(1!==e[0].dataType)throw new Error("Invalid input type.")},qn=(e,t)=>{jn(e.inputs);e.compute(wn("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],((e,n,r)=>{const s=[];for(let t=0;t<e.rank;t++)(r.indexOf(t)>=0||0===r.length)&&s.push(`input_indices[${t}] = 0;`);return[`${s.join("\n")}`,`var value = ${e.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${e.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {\n         value = ${e.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]}),[t.axis],7,t.keepDims),{inputs:[0]})},Gn=(e,t)=>{jn(e.inputs);e.compute(wn("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],((e,n,r)=>{const s=[];for(let t=0;t<e.rank;t++)(r.indexOf(t)>=0||0===r.length)&&s.push(`input_indices[${t}] = 0;`);return[`${s.join("\n")}`,`var value = ${e.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${e.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {\n         value = ${e.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]}),[t.axis],7,t.keepDims),{inputs:[0]})},Un=e=>gt(e)}}),_l=N({"web/lib/wasm/jsep/webgpu/ops/attention.ts"(){sl(),ll(),pl(),Wn=(e,t)=>{const n=e[0],r=e[1],s=e[2],i=e[3],o=e[4],a=e[5];if(o&&a)throw new Error("Attention cannot have both past and relative_position_bias");if(3!==n.dims.length)throw new Error('Input "input" must have 3 dimensions');const l=n.dims[0],d=n.dims[1],u=n.dims[2];if(1!==s.dims.length)throw new Error('Input "bias" is expected to have 1 dimensions');if(2!==r.dims.length)throw new Error('Input "weights" is expected to have 2 dimensions');if(r.dims[0]!==u)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(s.dims[0]!==r.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let c=s.dims[0]/3,p=c,h=p;if(t.qkvHiddenSizes.length>0){if(3!==t.qkvHiddenSizes.length)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(const e of t.qkvHiddenSizes)if(e%t.numHeads!=0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");c=t.qkvHiddenSizes[0],p=t.qkvHiddenSizes[1],h=t.qkvHiddenSizes[2]}const m=d;if(c!==p)throw new Error("qkv_hidden_sizes first element should be same as the second");if(s.dims[0]!==c+p+h)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let f=0;if(o){if(p!==h)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(5!==o.dims.length)throw new Error('Input "past" must have 5 dimensions');if(2!==o.dims[0])throw new Error('Input "past" first dimension must be 2');if(o.dims[1]!==l)throw new Error('Input "past" second dimension must be batch_size');if(o.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(o.dims[4]!==p/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||(f=o.dims[3])}const g=m+f;if(i)throw new Error("Mask not supported");if(o)throw new Error("past is not supported");return{batchSize:l,sequenceLength:d,pastSequenceLength:f,kvSequenceLength:m,totalSequenceLength:g,maxSequenceLength:-1,inputHiddenSize:u,hiddenSize:c,vHiddenSize:h,headSize:Math.floor(c/t.numHeads),vHeadSize:Math.floor(h/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:0,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Hn=(e,t,n,r)=>{const s=Pt(r);let i=64;const o=r/s;o<i?i=1:o/8<64&&(i=Math.ceil(o/8));const a=Math.ceil(r/s/i),l=[{type:t.dataType,data:1/r},{type:12,data:o},{type:12,data:a}],d=$t(t.dataType,s),u=St(1,s);return{name:"AttentionProbsSoftmax",shaderCache:{hint:`${i};${d};${s}`},getShaderSource:e=>{const n=Ot("x",t.dataType,t.dims,s),r=[{name:"d_inv",type:St(t.dataType)},{name:"d_comp",type:"u32"},{name:"elements_per_thread",type:"u32"}];return`\n  var<workgroup> thread_max: array<f32, ${i}>;\n  var<workgroup> thread_sum: array<f32, ${i}>;\n  ${e.registerUniforms(r).declareVariables(n)}\n  ${e.mainStart([i,1,1])}\n    let local_offset = local_idx * uniforms.elements_per_thread;\n    let offset = workgroup_id.x * uniforms.d_comp + local_offset;\n\n    var thread_max_vector = ${u}(-3.402823e+38f);\n    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {\n      thread_max_vector = max(${u}(x[offset + i]), thread_max_vector);\n    }\n    thread_max[local_idx] = ${(()=>{switch(s){case 1:return"thread_max_vector";case 2:return"max(thread_max_vector.x, thread_max_vector.y)";case 4:return"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";default:throw new Error(`Unsupported components: ${s}`)}})()};\n    workgroupBarrier();\n\n    var max_value =  f32(-3.402823e+38f);\n    for (var i = 0u; i < ${i}; i++) {\n      max_value = max(thread_max[i], max_value);\n    }\n\n    var sum_vector = ${u}(0);\n    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {\n      sum_vector += exp(${u}(x[offset + i]) - max_value);\n    }\n    thread_sum[local_idx] = ${(()=>{switch(s){case 1:return"sum_vector";case 2:return"sum_vector.x + sum_vector.y";case 4:return"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";default:throw new Error(`Unsupported components: ${s}`)}})()};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${i}; i++) {\n      sum += thread_sum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {\n        x[offset + i] = ${n.type.value}(uniforms.d_inv);\n      }\n    } else {\n      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {\n        var f32input = ${u}(x[offset + i]);\n        x[offset + i] = ${n.type.value}(exp(f32input - max_value) / sum);\n      }\n    }\n  }`},getRunData:()=>({outputs:[],dispatchGroup:{x:n},programUniforms:l})}},Kn=(e,t,n,r,s,i,o,a)=>{const l=a+i.kvSequenceLength,d=[i.batchSize,i.numHeads,i.sequenceLength,l],u=void 0===i.kvNumHeads&&e.outputCount>1,c=u?[i.batchSize,i.numHeads,l,i.headSize]:void 0,p=0===o.scale?1/Math.sqrt(i.headSize):o.scale,h=Pt(i.headSize),m=i.headSize/h,f=12,g={x:Math.ceil(l/f),y:Math.ceil(i.sequenceLength/f),z:i.batchSize*i.numHeads},_=[{type:12,data:i.sequenceLength},{type:12,data:m},{type:12,data:l},{type:12,data:i.numHeads},{type:1,data:p},{type:12,data:a},{type:12,data:i.kvSequenceLength}],w=["type","type"];r&&w.push("type"),s&&w.push("type");const b=[{dims:d,dataType:t.dataType,gpuDataType:0}];u&&b.push({dims:c,dataType:t.dataType,gpuDataType:0});return{name:"AttentionProbs",shaderCache:{hint:`${h};${void 0!==s};${void 0!==r};${e.outputCount}`,inputDependencies:w},getRunData:()=>({outputs:b,dispatchGroup:g,programUniforms:_}),getShaderSource:e=>{const i=Bt("q",t.dataType,t.dims,h),o=[i,Bt("key",n.dataType,n.dims,h)];if(r){const e=Bt("past_key",r.dataType,r.dims,h);o.push(e)}s&&o.push(Bt("relative_position_bias",s.dataType,s.dims));const a=Ot("output",t.dataType,d),l=[a];u&&l.push(Ot("present_key",t.dataType,c,h));const p=St(1,h);return`\n  const TILE_SIZE = 12u;\n\n  var<workgroup> tileQ: array<${i.type.storage}, 144>;\n  var<workgroup> tileK: array<${i.type.storage}, 144>;\n  ${e.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"alpha",type:"f32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"}]).declareVariables(...o,...l)}\n  ${e.mainStart([f,f,1])}\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;\n    ${r&&u?"\n    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx;\n    let pastKeyOffset = uniforms.past_sequence_length * uniforms.K * headIdx;":"\n    let kOffset = uniforms.N * uniforms.K * headIdx + n * uniforms.K;"}\n    ${u?"let presentKeyOffset = headIdx * uniforms.N * uniforms.K;":""}\n    var value = ${p}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\n        var idx = TILE_SIZE * local_id.y + local_id.x;\n      ${r&&u?"\n              if (n + local_id.y < uniforms.past_sequence_length) {\n                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];\n              } else {\n                tileK[idx] =\n                         key[kOffset + (n + local_id.y - uniforms.past_sequence_length) * uniforms.K + w + local_id.x];\n              }":"tileK[idx] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];"}\n      ${u?"present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];":""}\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {\n        value += ${p}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * uniforms.M * uniforms.N;\n    if (global_id.y < uniforms.M && global_id.x < uniforms.N) {\n      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;\n      var sum: f32 = ${(()=>{switch(h){case 1:return"value";case 2:return"value.x + value.y";case 4:return"value.x + value.y + value.z + value.w";default:throw new Error(`Unsupported components: ${h}`)}})()};\n        output[outputIdx] = ${a.type.value} (sum * uniforms.alpha) + ${s?"relative_position_bias[outputIdx]":"0.0"};\n    }\n  }`}}},Xn=(e,t,n,r,s,i)=>{const o=i+s.kvSequenceLength,a=s.nReps?s.nReps:1,l=s.vHiddenSize*a,d=null==s.kvNumHeads&&e.outputCount>1,u=d?[s.batchSize,s.numHeads,o,s.headSize]:void 0,c=[s.batchSize,s.sequenceLength,l],p=12,h={x:Math.ceil(s.vHeadSize/p),y:Math.ceil(s.sequenceLength/p),z:s.batchSize*s.numHeads},m=[{type:12,data:s.sequenceLength},{type:12,data:o},{type:12,data:s.vHeadSize},{type:12,data:s.numHeads},{type:12,data:l},{type:12,data:i},{type:12,data:s.kvSequenceLength}],f=r?["type","type","type"]:["type","type"],g=[{dims:c,dataType:t.dataType,gpuDataType:0}];d&&g.push({dims:u,dataType:t.dataType,gpuDataType:0});return{name:"AttentionScore",shaderCache:{hint:`${void 0!==r};${e.outputCount}`,inputDependencies:f},getRunData:()=>({outputs:g,dispatchGroup:h,programUniforms:m}),getShaderSource:e=>{const s=Bt("probs",t.dataType,t.dims),i=[s,Bt("v",n.dataType,n.dims)];r&&i.push(Bt("past_value",r.dataType,r.dims));const o=[Ot("output",t.dataType,c)];d&&o.push(Ot("present_value",t.dataType,u));return`\n  const TILE_SIZE = 12u;\n  var<workgroup> tileQ: array<${s.type.value}, 144>;\n  var<workgroup> tileK: array<${s.type.value}, 144>;\n  ${e.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"}]).declareVariables(...i,...o)}\n  ${e.mainStart([p,p,1])}\n   let headIdx = workgroup_id.z;\n   let m = global_id.y;\n   let n = global_id.x;\n\n   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;\n   ${r&&d?"\n    let pastValueOffset = headIdx * uniforms.N * uniforms.past_sequence_length + n;\n    let vOffset = headIdx * uniforms.N * uniforms.kv_sequence_length + n;\n      ":"\n   let offsetB = headIdx * uniforms.N * uniforms.K + n;\n            "}\n    ${d?"let presentValueOffset = headIdx * uniforms.N * uniforms.K + n;":""}\n   var value = ${s.type.storage}(0);\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        var idx = TILE_SIZE * local_id.y + local_id.x;\n        ${r&&d?"\n        if (w + local_id.y < uniforms.past_sequence_length) {\n          tileK[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];\n        } else {\n          tileK[idx] = v[vOffset + (w + local_id.y - uniforms.past_sequence_length) * uniforms.N];\n        }\n      ":"\n        tileK[idx] = v[offsetB + (w + local_id.y) * uniforms.N];\n      "}\n        ${d?"present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileK[idx];":""}\n      }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\n   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;\n   if (m < uniforms.M && n < uniforms.N) {\n     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size\n       + currentBatchHeadNumber * uniforms.N + n;\n     output[outputIdx] = value;\n   }\n  }`}}},Qn=(e,t,n,r,s,i,o,a,l,d,u)=>{const c=e.outputCount,p=void 0!==d.kvNumHeads||c>1?d.pastSequenceLength:0,h=p+d.kvSequenceLength,m=void 0===d.kvNumHeads&&c>1&&o?[t,n,o]:[t,n];l&&m.push(l);const f=e.compute(Kn(e,t,n,c>1?o:void 0,l,d,u,p),{inputs:m,outputs:void 0===d.kvNumHeads&&c>1?[-1,1]:[-1]})[0];e.compute(Hn(0,f,d.batchSize*d.numHeads*d.sequenceLength,h),{inputs:[f],outputs:[]});const g=void 0===d.kvNumHeads&&c>1&&a?[f,r,a]:[f,r];e.compute(Xn(e,f,r,c>1&&a?a:void 0,d,p),{inputs:g,outputs:void 0===d.kvNumHeads&&c>1?[0,2]:[0]})},Yn=(e,t)=>{const n=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],r=t.sequenceLength,s=t.inputHiddenSize,i=t.headSize,o=12,a={x:Math.ceil(t.headSize/o),y:Math.ceil(t.sequenceLength/o),z:t.batchSize*t.numHeads},l=[e.inputs[0],e.inputs[1],e.inputs[2]],d=[{type:12,data:r},{type:12,data:s},{type:12,data:i},{type:12,data:t.numHeads},{type:12,data:t.headSize},{type:12,data:t.hiddenSize},{type:12,data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}];return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:n,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:n,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:n,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:a,programUniforms:d}),getShaderSource:e=>{const t=Ot("output_q",l[0].dataType,n),r=Ot("output_k",l[0].dataType,n),s=Ot("output_v",l[0].dataType,n),i=Bt("input",l[0].dataType,l[0].dims),a=Bt("weight",l[1].dataType,l[1].dims),d=Bt("bias",l[2].dataType,l[2].dims),u=i.type.storage;return`\n  const TILE_SIZE = 12u;\n  var<workgroup> tileInput: array<${u}, 144>;\n  var<workgroup> tileWeightQ: array<${u}, 144>;\n  var<workgroup> tileWeightK: array<${u}, 144>;\n  var<workgroup> tileWeightV: array<${u}, 144>;\n  ${e.registerUniforms([{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}]).declareVariables(i,a,d,t,r,s)}\n  ${e.mainStart([o,o,1])}\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\n    let headNumber = workgroup_id.z % uniforms.num_heads;\n    let m = global_id.y;\n    let n = global_id.x;\n\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\n    let biasOffsetQ = headNumber * uniforms.head_size;\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\n\n    var valueQ = ${u}(0);\n    var valueK = ${u}(0);\n    var valueV = ${u}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        let offset = n + (w + local_id.y) * uniforms.ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\n    if (m < uniforms.M && n < uniforms.N) {\n      let outputIdx = offset + m * uniforms.N + n;\n      output_q[outputIdx] = valueQ;\n      output_k[outputIdx] = valueK;\n      output_v[outputIdx] = valueV;\n    }\n  }`}},{inputs:l,outputs:[-1,-1,-1]})},Zn=(e,t)=>{const n=Wn(e.inputs,t),[r,s,i]=Yn(e,n);return Qn(e,r,s,i,e.inputs[4],void 0,void 0,void 0,e.inputs[5],n,t)}}}),wl=N({"web/lib/wasm/jsep/webgpu/ops/batch-norm.ts"(){me(),sl(),cl(),ul(),pl(),Jn=(e,t)=>{if(!e||5!==e.length)throw new Error("BatchNormalization requires 5 inputs");const n=(e,t,n)=>{const r=t.length;if(r!==e.length)throw new Error(`${n}: num dimensions != ${r}`);t.forEach(((t,r)=>{if(t!==e[r])throw new Error(`${n}: dim[${r}] do not match`)}))};if(e[0].dims.length>1){const r="NHWC"===t.format?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);n(e[1].dims,r,"Invalid input scale"),n(e[2].dims,r,"Invalid input B"),n(e[3].dims,r,"Invalid input mean"),n(e[4].dims,r,"Invalid input var")}else n(e[1].dims,[1],"Invalid input scale"),n(e[2].dims,[1],"Invalid input B"),n(e[3].dims,[1],"Invalid input mean"),n(e[4].dims,[1],"Invalid input var")},er=(e,t)=>{const{epsilon:n,spatial:r,format:s}=t,i=e[0].dims,o=r?Pt(i[i.length-1]):1,a="NHWC"===s&&i.length>1?o:1,l=bt.size(i)/o,d=r,u=d?i.length:i,c=Bt("x",e[0].dataType,e[0].dims,o),p=Bt("scale",e[1].dataType,e[1].dims,a),h=Bt("bias",e[2].dataType,e[2].dims,a),m=Bt("inputMean",e[3].dataType,e[3].dims,a),f=Bt("inputVar",e[4].dataType,e[4].dims,a),g=Ot("y",e[0].dataType,u,o);return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${r}_${o}`,inputDependencies:d?["rank","type","type","type","type"]:void 0},getShaderSource:e=>`\n  const epsilon = ${n};\n  ${e.registerUniform("outputSize","u32").declareVariables(c,p,h,m,f,g)}\n  ${e.mainStart()}\n  ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${g.offsetToIndices(`global_idx * ${o}`)};\n    ${(()=>{let e="";if(r)e=`let cOffset = ${1===i.length?"0u":"NHWC"===s?`outputIndices[${i.length-1}] / ${o}`:"outputIndices[1]"};`;else if("NCHW"===s)e=`\n            ${g.indicesSet("outputIndices","0","0")}\n            let cOffset = ${g.indicesToOffset("outputIndices")};`;else{e=`var cIndices = ${p.type.indices}(0);\n                       cIndices[0] = outputIndices[${i.length-1}];`;for(let t=1;t<p.rank;t++)e+=`cIndices[${t}] = outputIndices[${t}];`;e+=`let cOffset = ${p.indicesToOffset("cIndices")};`}return e})()}\n    let scale = ${p.getByOffset("cOffset")};\n    let bias = ${h.getByOffset("cOffset")};\n    let inputMean = ${m.getByOffset("cOffset")};\n    let inputVar = ${f.getByOffset("cOffset")};\n    let x = ${c.getByOffset("global_idx")};\n    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;\n    ${g.setByOffset("global_idx","value")}\n  }`,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:d?[{type:12,data:l},...Ct(i)]:[{type:12,data:l}]})}},tr=e=>gt(e),nr=(e,t)=>{const{inputs:n,outputCount:r}=e,s=tr({...t,outputCount:r});if(c.webgpu.validateInputContent&&Jn(n,s),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(er(n,s))}}}),bl=N({"web/lib/wasm/jsep/webgpu/ops/bias-add.ts"(){cl(),pl(),rr=e=>{if(3!==e[0].dims.length)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(1!==e[1].dims.length)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},sr=e=>{const t=e[0].dims,n=e[0].dims[2],r=bt.size(t)/4,s=e[0].dataType,i=Bt("input",s,t,4),o=Bt("bias",s,[n],4),a=Bt("residual",s,t,4),l=Ot("output",s,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(r/64)}}),getShaderSource:e=>`\n  const channels = ${n}u / 4;\n  ${e.declareVariables(i,o,a,l)}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(r)}\n    let value = ${i.getByOffset("global_idx")}\n      + ${o.getByOffset("global_idx % channels")} + ${a.getByOffset("global_idx")};\n    ${l.setByOffset("global_idx","value")}\n  }`}},ir=e=>{rr(e.inputs),e.compute(sr(e.inputs))}}}),yl=N({"web/lib/wasm/jsep/webgpu/ops/unary-op.ts"(){sl(),cl(),ul(),pl(),or=(e,t,n,r,s,i)=>{const o=Math.ceil(t/4);let a="";a="string"==typeof s?`${s}(a)`:s("a");const l=Bt("inputData",n,[o],4),d=Ot("outputData",r,[o],4);return`\n      ${e.registerUniform("vec_size","u32").declareVariables(l,d)}\n\n  ${i??""}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${l.getByOffset("global_idx")};\n    ${d.setByOffset("global_idx",a)}\n  }`},ar=(e,t,n,r,s,i=e.dataType)=>({name:t,shaderCache:{hint:s,inputDependencies:["type"]},getShaderSource:t=>or(t,bt.size(e.dims),e.dataType,i,n,r),getRunData:t=>({outputs:[{dims:e.dims,dataType:i}],dispatchGroup:{x:Math.ceil(bt.size(t[0].dims)/64/4)},programUniforms:[{type:12,data:Math.ceil(bt.size(e.dims)/4)}]})}),lr=e=>{e.compute(ar(e.inputs[0],"Abs","abs"))},dr=e=>{e.compute(ar(e.inputs[0],"Acos","acos"))},ur=e=>{e.compute(ar(e.inputs[0],"Acosh","acosh"))},cr=e=>{e.compute(ar(e.inputs[0],"Asin","asin"))},pr=e=>{e.compute(ar(e.inputs[0],"Asinh","asinh"))},hr=e=>{e.compute(ar(e.inputs[0],"Atan","atan"))},mr=e=>{e.compute(ar(e.inputs[0],"Atanh","atanh"))},fr=e=>gt(e),gr=(e,t)=>{let n;switch(t.to){case 10:n="vec4<f16>";break;case 1:n="vec4<f32>";break;case 12:n="vec4<u32>";break;case 6:n="vec4<i32>";break;case 9:n="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(ar(e.inputs[0],"Cast",n,void 0,t.cacheKey,t.to))},_r=e=>{const t=e.length>=2&&0!==e[1].data?e[1].getFloat32Array()[0]:xt,n=e.length>=3&&0!==e[2].data?e[2].getFloat32Array()[0]:Mt;return gt({min:t,max:n})},wr=(e,t)=>{const n=1===e.inputs.length?t:_r(e.inputs),r=St(e.inputs[0].dataType);e.compute(ar(e.inputs[0],"Clip",(e=>`clamp(${e}, clip_min_, clip_max_)`),`\n    const clip_min_: vec4<${r}> = vec4(${r}(${n.min}));\n    const clip_max_: vec4<${r}> = vec4(${r}(${n.max}));\n`,n.cacheKey),{inputs:[0]})},br=e=>{e.compute(ar(e.inputs[0],"Ceil","ceil"))},yr=e=>{e.compute(ar(e.inputs[0],"Cos","cos"))},vr=e=>{e.compute(ar(e.inputs[0],"Cosh","cosh"))},xr=e=>gt(e),Mr=(e,t)=>{const n=St(e.inputs[0].dataType);e.compute(ar(e.inputs[0],"Elu",(e=>`elu_vf32(${e})`),`\n  const elu_alpha_ = ${n}(${t.alpha});\n\n  fn elu_f32(a: ${n}) -> ${n} {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<${n}>) -> vec4<${n}> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,t.cacheKey))},Tr=(e="f32")=>`\nconst r0: ${e} = 0.3275911;\nconst r1: ${e} = 0.254829592;\nconst r2: ${e} = -0.284496736;\nconst r3: ${e} = 1.421413741;\nconst r4: ${e} = -1.453152027;\nconst r5: ${e} = 1.061405429;\n\nfn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,kr=e=>{const t=St(e.inputs[0].dataType);e.compute(ar(e.inputs[0],"Erf",(e=>`erf_vf32(${e})`),Tr(t)))},$r=e=>{e.compute(ar(e.inputs[0],"Exp","exp"))},Sr=e=>{e.compute(ar(e.inputs[0],"Floor","floor"))},Cr=e=>{const t=St(e.inputs[0].dataType);e.compute(ar(e.inputs[0],"Gelu",(e=>`0.5 * ${e} * (1.0 + erf_vf32(${e} * 0.7071067811865475))`),Tr(t)))},Pr=(e,t)=>{const n=St(e.inputs[0].dataType);e.compute(ar(e.inputs[0],"LeakyRelu",(e=>`select(leaky_relu_alpha_ * ${e}, ${e}, ${e} >= vec4<${n}>(0.0))`),`const leaky_relu_alpha_ = ${n}(${t.alpha});`,t.cacheKey))},Er=e=>{e.compute(ar(e.inputs[0],"Not",(e=>`!${e}`)))},Fr=e=>{e.compute(ar(e.inputs[0],"Neg",(e=>`-${e}`)))},Ar=e=>{e.compute(ar(e.inputs[0],"Reciprocal",(e=>`1.0/${e}`)))},Ir=e=>{const t=St(e.inputs[0].dataType);e.compute(ar(e.inputs[0],"Relu",(e=>`select(vec4<${t}>(0.0), ${e}, ${e} > vec4<${t}>(0.0))`)))},zr=e=>{e.compute(ar(e.inputs[0],"Sigmoid",(e=>`(1.0 / (1.0 + exp(-${e})))`)))},Br=e=>gt(e),Or=(e,t)=>{const n=St(e.inputs[0].dataType);e.compute(ar(e.inputs[0],"HardSigmoid",(e=>`max(vec4<${n}>(0.0), min(vec4<${n}>(1.0), ${t.alpha} * ${e} + vec4<${n}>(${t.beta})))`),void 0,t.cacheKey))},Lr=e=>{e.compute(ar(e.inputs[0],"Sin","sin"))},Dr=e=>{e.compute(ar(e.inputs[0],"Sinh","sinh"))},Rr=e=>{e.compute(ar(e.inputs[0],"Sqrt","sqrt"))},Nr=e=>{e.compute(ar(e.inputs[0],"Tan","tan"))},Vr=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,jr=e=>{e.compute(ar(e.inputs[0],"Tanh",Vr))},qr=(e="f32")=>`\nconst fast_gelu_a: ${e} = 0.5;\nconst fast_gelu_b: ${e} = 0.7978845608028654;\nconst fast_gelu_c: ${e} = 0.035677408136300125;\n\nfn tanh_v(v: vec4<${e}>) -> vec4<${e}> {\n  return ${Vr("v")};\n}\n`,Gr=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,Ur=e=>{const t=St(e.inputs[0].dataType);e.compute(ar(e.inputs[0],"FastGelu",Gr,qr(t),void 0,e.inputs[0].dataType))},Wr=(e,t)=>{const n=St(e.inputs[0].dataType);return e.compute(ar(e.inputs[0],"ThresholdedRelu",(e=>`select(vec4<${n}>(0.0), ${e}, ${e} > thresholded_relu_alpha_)`),`const thresholded_relu_alpha_ = vec4<${n}>(${t.alpha});`,t.cacheKey)),0},Hr=e=>{e.compute(ar(e.inputs[0],"Log","log"))}}}),vl=N({"web/lib/wasm/jsep/webgpu/ops/bias-split-gelu.ts"(){cl(),pl(),yl(),Kr=e=>{if(3!==e[0].dims.length)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(1!==e[1].dims.length)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Xr=e=>{const t=e[0].dims.slice();t[2]=t[2]/2;const n=Bt("input",e[0].dataType,e[0].dims,4),r=Bt("bias",e[0].dataType,[e[0].dims[2]],4),s=Ot("output",e[0].dataType,t,4),i=bt.size(t)/4,o=$t(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)}}),getShaderSource:t=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${t.declareVariables(n,r,s)}\n\n  ${Tr(o)}\n\n  ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes(i)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${s.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},Qr=e=>{Kr(e.inputs),e.compute(Xr(e.inputs))}}}),xl=N({"web/lib/wasm/jsep/webgpu/ops/binary-op.ts"(){sl(),cl(),pl(),Yr=(e,t,n,r,s,i,o,a,l,d,u,c)=>{let p,h;"string"==typeof a?p=h=(e,t)=>`${a}((${e}),(${t}))`:"function"==typeof a?p=h=a:(p=a.scalar,h=a.vector);const m=Ot("outputData",u,r.length,4),f=Bt("aData",l,t.length,4),g=Bt("bData",d,n.length,4);let _;if(s)if(i){const e=1===bt.size(t),r=1===bt.size(n),s=t.length>0&&t[t.length-1]%4==0,i=n.length>0&&n[n.length-1]%4==0;_=e||r?m.setByOffset("global_idx",h(e?`${f.type.value}(${f.getByOffset("0")}.x)`:f.getByOffset("global_idx"),r?`${g.type.value}(${g.getByOffset("0")}.x)`:g.getByOffset("global_idx"))):`\n            let outputIndices = ${m.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${f.broadcastedIndicesToOffset("outputIndices",m)};\n            let offsetB = ${g.broadcastedIndicesToOffset("outputIndices",m)};\n            ${m.setByOffset("global_idx",h(o||s?f.getByOffset("offsetA / 4u"):`${f.type.value}(${f.getByOffset("offsetA / 4u")}[offsetA % 4u])`,o||i?g.getByOffset("offsetB / 4u"):`${g.type.value}(${g.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}\n          `}else _=m.setByOffset("global_idx",h(f.getByOffset("global_idx"),g.getByOffset("global_idx")));else{if(!i)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");const e=(e,t,n="")=>{const r=`aData[indexA${t}][componentA${t}]`,s=`bData[indexB${t}][componentB${t}]`;return`\n            let outputIndices${t} = ${m.offsetToIndices(`global_idx * 4u + ${t}u`)};\n            let offsetA${t} = ${f.broadcastedIndicesToOffset(`outputIndices${t}`,m)};\n            let offsetB${t} = ${g.broadcastedIndicesToOffset(`outputIndices${t}`,m)};\n            let indexA${t} = offsetA${t} / 4u;\n            let indexB${t} = offsetB${t} / 4u;\n            let componentA${t} = offsetA${t} % 4u;\n            let componentB${t} = offsetB${t} % 4u;\n            ${e}[${t}] = ${n}(${p(r,s)});\n          `};_=9===u?`\n            var data = vec4<u32>(0);\n            ${e("data",0,"u32")}\n            ${e("data",1,"u32")}\n            ${e("data",2,"u32")}\n            ${e("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:`\n            ${e("outputData[global_idx]",0)}\n            ${e("outputData[global_idx]",1)}\n            ${e("outputData[global_idx]",2)}\n            ${e("outputData[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(f,g,m)}\n\n        ${c??""}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${_}\n      }`},Zr=(e,t,n,r,s,i,o=n.dataType)=>{const a=!bt.areEqual(n.dims,r.dims);let l=n.dims,d=bt.size(n.dims),u=!1,c=!1;const p=[a];if(a){const e=wt.calcShape(n.dims,r.dims,!1);if(!e)throw new Error("Can't perform binary op on the given tensors");l=e,d=bt.size(l);const t=1===bt.size(n.dims),s=1===bt.size(r.dims),i=n.dims.length>0&&n.dims[n.dims.length-1]%4==0,o=r.dims.length>0&&r.dims[r.dims.length-1]%4==0;p.push(t),p.push(s),p.push(i),p.push(o);let a=1;for(let e=1;e<l.length;e++){const t=n.dims[n.dims.length-e]??1;if(t!==(r.dims[r.dims.length-e]??1))break;a*=t}a%4==0?(c=!0,u=!0):(t||s||i||o)&&(u=!0)}else u=!0;return p.push(u),{name:e,shaderCache:{hint:t+p.map((e=>e.toString())).join("_"),inputDependencies:["rank","rank"]},getShaderSource:e=>Yr(e,n.dims,r.dims,l,u,a,c,s,n.dataType,r.dataType,o,i),getRunData:()=>({outputs:[{dims:l,dataType:o}],dispatchGroup:{x:Math.ceil(d/64/4)},programUniforms:[{type:12,data:Math.ceil(bt.size(l)/4)},...Ct(n.dims,r.dims,l)]})}},Jr=(e,t,n,r,s,i)=>{e.compute(Zr(t,s??"",e.inputs[0],e.inputs[1],n,r,i))},es=e=>{Jr(e,"Add",((e,t)=>`${e}+${t}`))},ts=e=>{Jr(e,"Div",((e,t)=>`${e}/${t}`))},ns=e=>{Jr(e,"Equal",{scalar:(e,t)=>`u32(${e}==${t})`,vector:(e,t)=>`vec4<u32>(${e}==${t})`},void 0,void 0,9)},rs=e=>{Jr(e,"Mul",((e,t)=>`${e}*${t}`))},ss=e=>{const t=Bt("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;Jr(e,"Pow",{scalar:(e,t)=>`pow_custom(${e},${t})`,vector:(e,t)=>`pow_vector_custom(${e},${t})`},`\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${"i32"===t?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},is=e=>{Jr(e,"Sub",((e,t)=>`${e}-${t}`))},os=e=>{Jr(e,"Greater",{scalar:(e,t)=>`u32(${e}>${t})`,vector:(e,t)=>`vec4<u32>(${e}>${t})`},void 0,void 0,9)},as=e=>{Jr(e,"Less",{scalar:(e,t)=>`u32(${e}<${t})`,vector:(e,t)=>`vec4<u32>(${e}<${t})`},void 0,void 0,9)},ls=e=>{Jr(e,"GreaterOrEqual",{scalar:(e,t)=>`u32(${e}>=${t})`,vector:(e,t)=>`vec4<u32>(${e}>=${t})`},void 0,void 0,9)},ds=e=>{Jr(e,"LessOrEqual",{scalar:(e,t)=>`u32(${e}<=${t})`,vector:(e,t)=>`vec4<u32>(${e}<=${t})`},void 0,void 0,9)}}}),Ml=N({"web/lib/wasm/jsep/webgpu/ops/concat.ts"(){sl(),cl(),ul(),pl(),us=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");const n=e[0],r=n.dataType,s=n.dims.length;e.forEach(((e,i)=>{if(0!==i){if(e.dataType!==r)throw new Error("input tensors should be one type");if(e.dims.length!==s)throw new Error("input tensors should have the same shape");e.dims.forEach(((e,r)=>{if(r!==t&&e!==n.dims[r])throw new Error("non concat dimensions must match")}))}}))},cs=(e,t)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${t});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,ps=(e,t)=>{const n=e.length,r=[];for(let s=0;s<n;++s){const i=t.setByOffset("global_idx",e[s].getByIndices("indices"));1===n?r.push(i):0===s?r.push(`if (inputIndex == ${s}u) { ${i} }`):s===n-1?r.push(`else { ${i} }`):r.push(`else if (inputIndex == ${s}) { ${i} }`)}return r.join("\n")},hs=(e,t,n,r)=>{const s=bt.size(n),i=new Array(e.length),o=new Array(e.length);let a=0;const l=[],d=[],u=[{type:12,data:s}];for(let n=0;n<e.length;++n)a+=e[n].dims[t],i[n]=a,d.push(e[n].dims.length),o[n]=Bt(`input${n}`,r,d[n]),l.push("rank"),u.push({type:12,data:i[n]});for(let t=0;t<e.length;++t)u.push(...Ct(e[t].dims));u.push(...Ct(n));const c=Ot("output",r,n.length),p=c.indicesGet("indices",t),h=Array.from(Array(i.length).keys()).map((e=>`uniforms.sizeInConcatAxis${e}`)).join(",");return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:n,dataType:r}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:u}),getShaderSource:t=>`\n\n  ${(()=>{t.registerUniform("outputSize","u32");for(let n=0;n<e.length;n++)t.registerUniform(`sizeInConcatAxis${n}`,"u32");return t.declareVariables(...o,c)})()}\n\n  ${cs(i.length,h)}\n\n  ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${c.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${p});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${i.length}u>(${h});\n      ${p} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${ps(o,c)}\n  }`}},ms=(e,t)=>{const n=e.inputs,r=n[0].dims,s=bt.normalizeAxis(t.axis,r.length);us(n,s);const i=r.slice();i[s]=n.reduce(((e,t)=>e+(t.dims.length>s?t.dims[s]:0)),0);const o=n.filter((e=>bt.size(e.dims)>0));e.compute(hs(o,s,i,n[0].dataType),{inputs:o})},fs=e=>gt({axis:e.axis})}}),Tl=N({"web/lib/wasm/jsep/webgpu/ops/fuse-utils.ts"(){sl(),cl(),gs=(e,t,n="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${t}(0.0));`;case"Sigmoid":return`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${t}(${n}(uniforms.clip_min)), ${t}(${n}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${t}(0.0), min(${t}(1.0), ${n}(uniforms.alpha) * value + ${n}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${n}(uniforms.alpha) * value, value, value >= ${t}(0.0));`;case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},_s=(e,t)=>{"Clip"===e.activation?t.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):"HardSigmoid"===e.activation?t.push({type:1,data:e.alpha},{type:1,data:e.beta}):"LeakyRelu"===e.activation&&t.push({type:1,data:e.alpha})},ws=(e,t)=>{"Clip"===e.activation?t.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):"HardSigmoid"===e.activation?t.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):"LeakyRelu"===e.activation&&t.push({name:"alpha",type:"f32"})},bs=e=>{const t=e?.activation||"";if("HardSigmoid"===t){const[n,r]=e?.activation_params||[.2,.5];return{activation:t,alpha:n,beta:r}}if("Clip"===t){const[n,r]=e?.activation_params||[xt,Mt];return{activation:t,clipMax:r,clipMin:n}}if("LeakyRelu"===t){const[n]=e?.activation_params||[.01];return{activation:t,alpha:n}}return{activation:t}}}}),kl=N({"web/lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts"(){ys=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},vs=e=>`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      `}}),$l=N({"web/lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts"(){xs=e=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`}}),Sl=N({"web/lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts"(){sl(),cl(),pl(),Tl(),kl(),Ms=(e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `,Ts=(e,t)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${3===t?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${3===t?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${3===t?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,ks=(e,t,n="f32",r,s=!1,i=32,o=!1,a=32)=>{const l=t[1]*e[1],d=t[0]*e[0],u=s?l:i,c=s?i:l,p=u/t[0],h=i/t[1];if((!s||4!==p||4!==e[1])&&(s||3!==p&&4!==p)||u%t[0]!=0||i%t[1]!=0||4!==e[0])throw new Error(`If transposeA ${s} is true, innerElementSize ${p} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${p} must be 3 or 4.\n  tileAWidth ${u} must be divisible by workgroupSize[0]${t[0]}. tileInner ${i} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${p}<${n}>, ${u/p}>, ${c}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${n}>, ${d/e[0]}>, ${i}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${p};\nconst tileInner = ${i};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${o?"0":"i32(globalId.z)"};\n  ${r?`let batchIndices = ${r.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${l};\n\n  let num_tiles = ${o?`${Math.ceil(a/i)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};\n  var kStart = ${o?`i32(globalId.z) * ${a}`:"0"};\n\n  var acc: array<vec4<${n}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${h};\n  for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${Ms(s,r)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${h}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${r?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${3===p?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${Ts(s,p)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},$s=(e,t)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t?", batchIndices":""});\n            `,Ss=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",Cs=(e,t,n="f32",r,s=!1,i=32,o=!1,a=32,l=!1)=>{const d=e[1]*t[1],u=e[0]*t[0],c=s?d:i,p=s?i:d;if(p%t[1]!=0||c%t[0]!=0||i%t[1]!=0)throw new Error(`tileAHight ${p} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${c} must be divisible by workgroupSize[0]${t[0]}, tileInner ${i} must be divisible by workgroupSize[1]${t[1]}`);const h=p/t[1],m=c/t[0],f=i/t[1],g=l?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${d};\n    let globalColStart = i32(workgroupId.x) * ${u};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${p}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${t[0]}) {\n          ${$s(s,r)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${i}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${u}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${r?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${n}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${s?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${d};\n\nlet tileRowA = i32(localId.y) * ${h};\nlet tileColA = i32(localId.x) * ${m};\nlet tileRowB = i32(localId.y) * ${f};\n// Loop over shared dimension.\nfor (var t = 0; t < num_tiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${h}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${m}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${$s(s,r)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${f}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${r?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${n}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${Ss(s)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${n}, ${c}>, ${p}>;\n  var<workgroup> mm_Bsub : array<array<${n}, ${u}>, ${i}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${i};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${o?"0":"i32(globalId.z)"};\n    ${r?`let batchIndices = ${r.offsetToIndices("u32(batch)")};`:""}\n    let num_tiles = ${o?`${Math.ceil(a/i)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};\n    var kStart = ${o?`i32(globalId.z) * ${a}`:"0"};\n\n    var acc : array<array<${n}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${g}\n  }\n`},Ps=(e,t,n,r,s,i=!1)=>{const[o,a,l]=s,[d,u,c,p]=r,h=Nt(o,l),m=Nt(a,l),f=$t(r[0].type.tensor);return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${d.type.indices}) -> ${ys(e,f)} {\n      var value = ${ys(e,f)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)\n      {\n        ${(()=>{const e=u.rank,t=d.rank;let n=`var aIndices: ${u.type.indices};`;for(let r=e-2-1,s=t-1;r>=0;r--,s--)n+=`\naIndices[${r}] = ${t>1?`batchIndices[${s}]`:"batchIndices"};`;return h.forEach((e=>{n+=`\naIndices[${e}] = 0;`})),n+=`\naIndices[${e-2}] = u32(row);\n                   aIndices[${e-1}] = u32(colIn);`,n})()}\n        value = ${u.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${d.type.indices}) -> ${ys(e,f)} {\n      var value = ${ys(e,f)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)\n      {\n        ${(()=>{const e=c.rank,t=d.rank;let n=`var bIndices: ${c.type.indices};`;for(let r=e-2-1,s=t-1;r>=0;r--,s--)n+=`\nbIndices[${r}] = ${t>1?`batchIndices[${s}]`:"batchIndices"};`;return m.forEach((e=>{n+=`\nbIndices[${e}] = 0;`})),n+=`\nbIndices[${e-2}] = u32(row);\n                   bIndices[${e-1}] = u32(colIn);`,n})()}\n        value = ${c.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${ys(e,f)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t?`value = value + ${i?"bias[colIn]":`${ys(e,f)}(bias[row])`};`:""}\n        ${n}\n        ${p.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},Es=(e,t,n,r,s=!1)=>{const i=e[0].dims,o=e[1].dims,a=i.slice(0,-2),l=o.slice(0,-2),d=r?r.slice(0,-2):n.slice(0,-2),u=bt.size(d),c=i[i.length-2],p=i[i.length-1],h=o[o.length-1],m=p%4==0&&h%4==0,f=c<=8?[4,1,1]:[4,4,1],g=[8,8,1],_=[Math.ceil(h/g[0]/f[0]),Math.ceil(c/g[1]/f[1]),Math.ceil(u/g[2]/f[2])],w=m?4:1,b=[...a,c,p/w],y=b.length,v=[...l,p,h/w],x=v.length,M=[u,c,h/w],T=[{type:6,data:c},{type:6,data:h},{type:6,data:p}];_s(t,T),T.push(...Ct(d,b,v));const k=["rank","rank"],$=e.length>2;$&&(T.push(...Ct(e[2].dims)),k.push("rank")),T.push(...Ct(M));return{name:"MatMul",shaderCache:{hint:`${f};${t.activation};${m};${s}`,inputDependencies:k},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:_[0],y:_[1],z:_[2]},programUniforms:T}),getShaderSource:n=>{const r=d.length,i=Lt("batchDims",e[0].dataType,r,1),o=$t(e[0].dataType),u=Bt("a",e[0].dataType,y,w),c=Bt("b",e[1].dataType,x,w),p=Ot("result",e[0].dataType,M.length,w),h=[u,c];if($){const t=s?w:1;h.push(Bt("bias",e[2].dataType,e[2].dims.length,t))}const _=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];ws(t,_);const b=$t(p.type.tensor),v=gs(t,p.type.value,b),T=Ps(w,$,v,[i,u,c,p],[a,l,d],s);return`\n  ${n.registerUniforms(_).registerInternalVariables(i).declareVariables(...h,p)}\n  ${T}\n  ${m?ks(f,g,o,i):Cs(f,g,o,i)}\n                   `}}}}}),Cl=N({"web/lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts"(){sl(),ol(),pl(),Tl(),kl(),$l(),Sl(),Fs=(e,t,n,r,s=!1,i,o=4,a=4,l=4,d="f32")=>{const u=e?"\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    ":"\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    ",c=e?"\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ":"\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    ",p=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",h=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",m=e?"row":"col",f=e?"col":"row",g=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n    let outRow = ${m} / outWidth;\n    let outCol = ${m} % outWidth;\n\n    let WRow = ${f} / (i32(uniforms.w_shape[1]) * inChannels);\n    let WCol = ${f} / inChannels % i32(uniforms.w_shape[1]);\n    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];\n    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];\n    let xCh = ${f} % inChannels;\n    var resData = ${ys(o,d)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${p} && xCol >= 0 && xCol < ${h}) {\n      ${u}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${(e=>{switch(e){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${d}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(o)}\n    }\n    return resData;`,_=e?t&&r?`\n    let col = colIn * ${o};\n    ${g}`:`\n    let col = colIn * ${o};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n      ${g}\n    }\n    return ${ys(o,d)}(0.0);`:r&&n?`\n    let col = colIn * ${o};\n    ${g}`:`\n    let col = colIn * ${o};\n    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n      ${g}\n    }\n    return ${ys(o,d)}(0.0);`,w=`${(e=>{switch(e){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${e} is not supported.`)}})(a)}`,b=ys(l,d),y=ys(e?o:a,d),v=ys(e?a:o,d),x=gs(i,b,d);return`\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${y} {\n      ${e?_:w}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${v} {\n      ${e?w:_}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${b}) {\n      let col = colIn * ${l};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)\n      {\n      var value = valueIn;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${c}\n      ${vs(s)}\n      ${x}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},As=(e,t,n,r,s,i,o,a)=>{const l="NHWC"===t.format,d=l?e[0].dims[3]:e[0].dims[1],u=n[0],c=l?n[2]:n[3],p=l?n[1]:n[2],h=l?n[3]:n[1],m=l&&(d%4==0||d%3==0)&&h%4==0,f=l?h:c*p,g=l?c*p:h,_=[8,8,1],w=r<=8?[4,1,1]:[4,4,1],b=[Math.ceil(f/_[0]/w[0]),Math.ceil(g/_[1]/w[1]),Math.ceil(u/_[2]/w[2])];st("verbose",(()=>`[conv2d_mm_webgpu] dispatch = ${b}`));const y=m?l&&d%4!=0?3:4:1,v=_[1]*w[1],x=_[0]*w[0],M=Math.max(_[0]*y,_[1]),T=r%v==0,k=s%x==0,$=i%M==0,S=m?[y,4,4]:[1,1,1],C=[{type:6,data:r},{type:6,data:s},{type:6,data:i},{type:6,data:[t.pads[0],t.pads[1]]},{type:6,data:t.strides},{type:6,data:t.dilations}];_s(t,C),C.push(...Ct(e[0].dims,e[1].dims));const P=["rank","rank"];o&&(C.push(...Ct(e[2].dims)),P.push("rank")),C.push(...Ct(n));return{name:"Conv2DMatMul",shaderCache:{hint:`${t.cacheKey};${y};${m};${T};${k};${$};${v};${x};${M}`,inputDependencies:P},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:b[0],y:b[1],z:b[2]},programUniforms:C}),getShaderSource:r=>{const s=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];ws(t,s);const i=m?4:1,d=$t(e[0].dataType);let u=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${m?`vec4<${d}>`:d}) {\n        result[flatIndex] = ${m?`vec4<${d}>`:d}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${m?`vec4<${d}>`:d}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${m?"/ 4":""}, value);\n      }`;const c=[Bt("x",e[0].dataType,e[0].dims.length,3===y?1:y),Bt("w",e[1].dataType,e[1].dims.length,i)],p=Ot("result",e[0].dataType,n.length,i);if(o){const t=Bt("bias",e[2].dataType,e[2].dims.length,i);c.push(t),u+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${m?`vec4<${d}>`:d} {\n          return bias[coords.${l?"w":"y"}${m?"/ 4":""}];\n        }`}return`\n        ${xs("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${r.registerUniforms(s).declareVariables(...c,p)}\n        ${u}\n        ${Fs(l,T,k,$,o,t,S[0],S[1],S[2],d)}\n        ${m?ks(w,_,d,void 0,!l,M):Cs(w,_,d,void 0,!l,M,!1,void 0,a)}`}}}}}),Pl=N({"web/lib/wasm/jsep/webgpu/ops/conv-grouped.ts"(){sl(),cl(),pl(),Fl(),Tl(),Is=(e,t,n)=>{const r=e.length>2,s=r?"value += b[output_channel];":"",i=e[0].dims,o=e[1].dims,a=o[0]/t.group,l="NHWC"===t.format,d=Ds(i,o,t.dilations,t.pads,t.strides,l),u=bt.size(d),c=[{type:12,data:u},{type:12,data:t.dilations},{type:12,data:[t.strides[0],t.strides[1]]},{type:12,data:[t.pads[0],t.pads[1]]},{type:12,data:a}];_s(t,c),c.push(...Ct(i,o));const p=["rank","rank"];r&&(c.push(...Ct(e[2].dims)),p.push("rank")),c.push(...Ct(d));return{name:"GroupedConv",shaderCache:{hint:t.cacheKey,inputDependencies:p},getRunData:()=>({outputs:[{dims:n?n(d):d,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:c}),getShaderSource:n=>{const a=Ot("output",e[0].dataType,d.length),u=$t(a.type.tensor),c=gs(t,a.type.value,u),p=Bt("x",e[0].dataType,i.length),h=Bt("w",e[1].dataType,o.length),m=[p,h];r&&m.push(Bt("b",e[2].dataType,e[2].dims.length));const f=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:t.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];return ws(t,f),`\n  ${n.registerUniforms(f).declareVariables(...m,a)}\n\n  ${n.mainStart()}\n    ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let outputIndices = ${a.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${l?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${l?1:2}], outputIndices[${l?2:3}]) * uniforms.strides - uniforms.pads;\n    let group_id: u32 = output_channel / uniforms.output_channels_per_group;\n\n    var value: ${a.type.value} = ${a.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {\n      let input_channel = group_id * uniforms.w_shape[1] + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\n\n        if (xHeight < 0u || xHeight >= uniforms.x_shape[${l?1:2}]) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\n          if (xWidth < 0u || xWidth >= uniforms.x_shape[${l?2:3}]) {\n            continue;\n          }\n\n          let xVal = ${l?p.get("batch","xHeight","xWidth","input_channel"):p.get("batch","input_channel","xHeight","xWidth")};\n          let wVal = ${h.get("output_channel","wInChannel","wHeight","wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${s}\n    ${c}\n    ${a.setByOffset("global_idx","value")}\n  }`}}},zs=(e,t,n)=>{const r=e.length>2,s=Pt(n[3]),i=Pt(n[2]),o=bt.size(n)/s/i,a=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/s],l=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/s],d=[n[0],n[1],n[2],n[3]/s],u=[{type:12,data:o},{type:6,data:[t.strides[0],t.strides[1]]},{type:6,data:[t.pads[0],t.pads[1]]}];_s(t,u),u.push(...Ct(a,l,d));const c=(i-1)*t.strides[1]+l[1];return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${t.cacheKey};${s};${i};${c};${l[0]};${l[1]}`,inputDependencies:r?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:u}),getShaderSource:n=>{const o=Ot("output",e[0].dataType,d.length,s),u=$t(o.type.tensor),p=gs(t,o.type.value,u),h=Bt("x",e[0].dataType,a.length,s),m=Bt("w",e[1].dataType,l.length,s),f=[h,m];r&&f.push(Bt("b",e[2].dataType,e[2].dims,s));const g=r?"value += b[output_channel];":"",_=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return ws(t,_),`\n  ${n.registerUniforms(_).declareVariables(...f,o)}\n  ${n.mainStart()}\n    ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let width0 = uniforms.output_shape[3];\n    let output_channel = global_idx % width0;\n    var index1 = global_idx / width0;\n    let width1 = uniforms.output_shape[2] / ${i}u;\n    let col = (index1 % width1) * ${i}u;\n    index1 = index1 / width1;\n    let row = index1 % uniforms.output_shape[1];\n    let batch = index1 / uniforms.output_shape[1];\n\n    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;\n\n    var x_vals: array<${h.type.value}, ${c}>;\n    var values: array<${o.type.value}, ${i}>;\n    let input_channel = output_channel;\n    // Use constant instead of uniform can give better performance for w's height/width.\n    for (var w_height: u32 = 0u; w_height < ${l[0]}; w_height++) {\n      let x_height = x_corner.x + i32(w_height);\n      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {\n        for (var i = 0; i < ${c}; i++) {\n          let x_width = x_corner.y + i;\n          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {\n            x_vals[i] = ${h.get("batch","u32(x_height)","u32(x_width)","input_channel")};\n          } else {\n            x_vals[i] = ${h.type.value}(0);\n          }\n        }\n        for (var w_width: u32 = 0u; w_width < ${l[1]}; w_width++) {\n          let w_val = ${m.get("w_height","w_width","0","output_channel")};\n          for (var i = 0u; i < ${i}u; i++) {\n            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);\n          }\n        }\n      }\n    }\n\n    for (var i = 0u; i < ${i}u; i++) {\n      var value = values[i];\n      ${g}\n      ${p}\n      ${o.set("batch","row","col + i","output_channel","value")};\n    }\n  }`}}}}}),El=N({"web/lib/wasm/jsep/webgpu/ops/matmul.ts"(){sl(),cl(),Sl(),pl(),Tl(),Bs=(e,t,n,r,s=!1)=>{const i=e[0].dims,o=e[1].dims,a=i[i.length-2],l=o[o.length-1],d=i[i.length-1],u=Pt(l),c=Pt(d),p=Pt(a),h=bt.size(n)/u/p,m=e.length>2,f=r?r.slice(0,-2):n.slice(0,-2),g=[bt.size(f),a,l],_=[{type:12,data:h},{type:12,data:a},{type:12,data:l},{type:12,data:d}];_s(t,_),_.push(...Ct(f,i,o)),m&&_.push(...Ct(e[2].dims)),_.push(...Ct(g));return{name:"MatMulNaive",shaderCache:{hint:`${t.activation};${u};${c};${p};${s}`,inputDependencies:m?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:_}),getShaderSource:r=>{const a=Lt("batch_dims",e[0].dataType,f.length),l=Bt("a",e[0].dataType,i.length,c),d=Bt("b",e[1].dataType,o.length,u),h=Ot("output",e[0].dataType,g.length,u),_=$t(h.type.tensor),w=gs(t,h.type.value,_),b=[l,d];let y="";if(m){const t=s?u:1;b.push(Bt("bias",e[2].dataType,e[2].dims.length,t)),y=""+(s?`value += bias[col / ${t}];`:`value += ${h.type.value}(bias[row + i]);`)}const v=i.slice(0,-2),x=o.slice(0,-2),M=Nt(v,f),T=Nt(x,f),k=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];ws(t,k);const $=(e,t)=>{const n=e.rank,r=e.name;if(2===n)return`var ${r}_indices = ${e.type.indices}(0u, 0u);`;const s=a.rank;let i=`var ${r}_indices: ${e.type.indices};`;for(let e=n-2-1,t=s-1;e>=0;e--,t--)i+=`\n${r}_indices[${e}] = ${s>1?`batch_indices[${t}]`:"batch_indices"};`;return t.forEach((e=>{i+=`\n${r}_indices[${e}] = 0;`})),i+=`${r}_indices[${n-2}] = 0u;\n                     ${r}_indices[${n-1}] = 0u;`,i};return`\n  ${r.registerUniforms(k).registerInternalVariables(a).declareVariables(...b,h)}\n  ${r.mainStart()}\n    ${r.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let col = (global_idx % (uniforms.N / ${u})) * ${u};\n    var index1 = global_idx / (uniforms.N / ${u});\n    let stride1 = uniforms.M / ${p};\n    let row = (index1 % stride1) * ${p};\n    let batch = index1 / stride1;\n\n    ${2===n.length?"":`let batch_indices = ${a.offsetToIndices("batch")};`}\n    ${$(l,M)}\n    let a_offset = ${l.indicesToOffset("a_indices")};\n    ${$(d,T)}\n    let b_offset = ${d.indicesToOffset("b_indices")};\n    var values: array<${h.type.value}, ${p}>;\n    for (var k: u32 = 0u; k < uniforms.K; k = k + ${c}) {\n      ${(()=>{let e=`var a_data: ${l.type.value};`;for(let t=0;t<c;t++)e+=`\n              let b_data${t} = b[(b_offset + (k + ${t}) * uniforms.N + col) / ${u}];`;for(let t=0;t<p;t++){e+=`a_data = a[(a_offset + (row + ${t}) * uniforms.K + k) / ${c}];`;for(let n=0;n<c;n++)e+=`\n            values[${t}] = fma(${d.type.value}(a_data${1===c?"":`[${n}]`}), b_data${n}, values[${t}]);\n`}return e})()}\n    }\n    for (var i = 0u; i < ${p}u; i++) {\n      var value = values[i];\n      ${y}\n      ${w}\n      let cur_indices = ${h.type.indices}(batch, row + i, col);\n      let offset = ${h.indicesToOffset("cur_indices")};\n      ${h.setByOffset(`offset / ${u}`,"value")};\n    }\n  }\n  `}}},Os=e=>{if(!e||2!==e.length)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Ls=e=>{Os(e.inputs);const t=wt.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");const n=t[t.length-1],r=e.inputs[0].dims[e.inputs[0].dims.length-1];n<8&&r<8?e.compute(Bs(e.inputs,{activation:""},t)):e.compute(Es(e.inputs,{activation:""},t))}}}),Fl=N({"web/lib/wasm/jsep/webgpu/ops/conv.ts"(){cl(),Cl(),Sl(),Pl(),Tl(),El(),hl(),Ds=(e,t,n,r,s,i)=>{const o=e[0],a=e.slice(i?1:2,i?3:4),l=a.length,d=t[0],u=t.slice(2).map(((e,t)=>e+(e-1)*(n[t]-1))),c=a.map(((e,t)=>e+r[t]+r[t+l])).map(((e,t)=>Math.floor((e-u[t]+s[t])/s[t])));return c.splice(0,0,o),c.splice(i?3:1,0,d),c},Rs=[2,3,1,0],Ns=(e,t)=>{if(!e||2!==e.length&&3!==e.length)throw new Error("Conv requires 2 or 3 inputs");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");if(e[0].dims["NHWC"===t.format?e[0].dims.length-1:1]!==e[1].dims[1]*t.group)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(3===e.length&&(1!==e[2].dims.length||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");const n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==2*n)throw new Error(`pads should be ${2*n}D`);if(0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Vs=(e,t)=>{const n=e.kernelShape.slice();for(let e=2;e<t[1].dims.length;++e)0===n[e-2]&&(n[e-2]=t[1].dims[e]);const r=e.pads.slice();yt.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,n,r,"NHWC"===e.format,e.autoPad);const s=Object.assign({},e);return Object.assign(s,{kernelShape:n,pads:r}),s},js=e=>{const t=bs(e),n=e.format;return{autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],format:n,dilations:e.dilations,group:e.group,kernelShape:e.kernel_shape,pads:e.pads,strides:e.strides,wIsConst:e.w_is_const(),...t,cacheKey:`${e.format};${t.activation};`}},qs=(e,t,n)=>{const r=Vs(n,t),s="NHWC"===n.format;if(1!==n.group){if(!e.adapterInfo.isArchitecture("ampere")&&s&&t[1].dims[0]===n.group&&1===t[1].dims[1]&&1===n.dilations[0]&&1===n.dilations[1]){const i=Ds(t[0].dims,t[1].dims,n.dilations,r.pads,n.strides,s),o=e.kernelCustomData.wT??e.compute(Ut(t[1],Rs),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];n.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=o);const a=[t[0],o];3===t.length&&a.push(t[2]),e.compute(zs(a,r,i),{inputs:a})}else e.compute(Is(t,r));return}const i=3===t.length,o=t[0].dims[s?1:2],a=t[0].dims[s?2:3],l=t[0].dims[s?3:1],d=t[1].dims[2],u=t[1].dims[3],c=Ds(t[0].dims,t[1].dims,n.dilations,r.pads,n.strides,s),p=c[s?1:2],h=c[s?2:3],m=c[s?3:1],f=s&&d===o&&u===a&&0===n.pads[0]&&0===n.pads[1];if(f||1===d&&1===u&&1===n.dilations[0]&&1===n.dilations[1]&&1===n.strides[0]&&1===n.strides[1]&&0===n.pads[0]&&0===n.pads[1]){const d=c[0];let u,g,_;const w=[];if(s){const r=e.kernelCustomData.wT??e.compute(Ut(t[1],Rs),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];if(n.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=r),f){const e=o*a*l;u=t[0].reshape([1,d,e]),g=r.reshape([1,e,m]),_=[1,d,m]}else u=t[0].reshape([d,o*a,l]),g=r.reshape([1,l,m]),_=[d,p*h,m];w.push(u),w.push(g)}else u=t[0].reshape([d,l,o*a]),g=t[1].reshape([1,m,l]),_=[d,m,p*h],w.push(g),w.push(u);i&&w.push(t[2]);const b=_[2],y=w[0].dims[w[0].dims.length-1];return void(b<8&&y<8?e.compute(Bs(w,r,c,_,s),{inputs:w}):e.compute(Es(w,r,c,_,s),{inputs:w}))}const g=e.kernelCustomData.wT??e.compute(Ut(t[1],Rs),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];n.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=g);const _=[t[0],g];i&&_.push(t[2]);const w=s?p*h:m,b=s?m:p*h,y=d*u*l;e.compute(As(_,r,c,w,b,y,i,!0),{inputs:_})},Gs=(e,t)=>{const n="NHWC"===t.format,r=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===e.inputs.length&&r.push(e.inputs[2]);const s=[0,t.pads[0],0,t.pads[1]],i=[1].concat(t.strides),o=[1].concat(t.dilations),a=[1].concat(t.kernelShape),l=Vs({...t,pads:s,strides:i,dilations:o,kernelShape:a},r);e.compute(Is(r,l,(e=>n?[e[0],e[2],e[3]]:[])))},Us=(e,t)=>{Ns(e.inputs,t),3===e.inputs[0].dims.length?Gs(e,t):qs(e,e.inputs,t)}}}),Al=N({"web/lib/wasm/jsep/webgpu/ops/3rd-party/conv_backprop_mm_webgpu.ts"(){sl(),ol(),pl(),Tl(),kl(),$l(),Sl(),Ws=(e,t=!1,n,r,s=4)=>{const i=e?"\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ":"\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    ",o=e?"row":"col",a=e?"col":"row",l=`\n      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      let outRow = ${o} / outWidth;\n      let outCol = ${o} % outWidth;\n\n      let WRow = ${a} / (uniforms.filter_dims[1] * inChannels);\n      let WCol = ${a} / inChannels % uniforms.filter_dims[1];\n      let xR = f32(outRow - uniforms.pads[0] + uniforms.dilations[0] * WRow) / f32(uniforms.strides[0]);\n      let xC = f32(outCol - uniforms.pads[1] + uniforms.dilations[1] * WCol) / f32(uniforms.strides[1]);\n      if (xR < 0.0 || xR >= f32(${e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])"}) || fract(xR) > 0.0) {\n        return ${r}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])"}) || fract(xC) > 0.0) {\n        return ${r}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${a} % inChannels;\n      ${e?"\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      ":"\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      "}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${s}];`,d=e?`\n      let col = colIn * ${s};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n        ${l}\n      }\n      return ${r}(0.0);`:`\n      let col = colIn * ${s};\n      if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n        ${l}\n      }\n      return ${r}(0.0);`,u=`\n      let col = colIn * ${s};\n      let inChannels = ${e?"i32(uniforms.x_shape[3])":"i32(uniforms.x_shape[1])"};\n      let coordX = uniforms.filter_dims[0] - 1 - row / (uniforms.filter_dims[1] * inChannels);\n      let coordY = uniforms.filter_dims[1] - 1 - (row / inChannels) % uniforms.filter_dims[1];\n      if (${e?"row < uniforms.dim_inner && col < uniforms.dim_b_outer":"row < uniforms.dim_inner && col < uniforms.dim_a_outer"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${(e=>{switch(e){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return ${r}(v0, v1, v2, v3);\n            `;default:throw new Error(`innerElementSize ${e} is not supported.`)}})(s)}\n      }\n      return ${r}(0.0);\n      `,c=gs(n,r);return`\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${r} {\n    ${e?d:u}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${r} {\n    ${e?u:d}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${r}) {\n    let col = colIn * ${s};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n      var value = valueInput;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${i}\n      ${vs(t)}\n      ${c}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${s}] = value;\n    }\n  }`},Hs=(e,t,n,r,s,i,o,a)=>{const l="NHWC"===t.format,d=l?e[0].dims[3]:e[0].dims[1],u=n[0],c=l?n[2]:n[3],p=l?n[1]:n[2],h=l?n[3]:n[1],m=l&&d%4==0&&d%3&&h%4==0,f=l?h:c*p,g=l?c*p:h,_=[8,8,1],w=r<=8?[4,1,1]:[4,4,1],b=[Math.ceil(f/_[0]/w[0]),Math.ceil(g/_[1]/w[1]),Math.ceil(u/_[2]/w[2])];st("verbose",(()=>`[conv_backprop_mm_webgpu] dispatch = ${b}`));const y=m?4:1,v=Math.max(_[0]*y,_[1]),x=m?4:1,M=[t.kernelShape[l?1:2],t.kernelShape[l?2:3]],T=[M[0]+(t.dilations[0]<=1?0:(M[0]-1)*(t.dilations[0]-1)),M[1]+(t.dilations[1]<=1?0:(M[1]-1)*(t.dilations[1]-1))],k=[T[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),T[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],$=[{type:6,data:r},{type:6,data:s},{type:6,data:i},{type:6,data:t.strides},{type:6,data:t.dilations},{type:6,data:M},{type:6,data:k}];_s(t,$),$.push(...Ct(e[0].dims,e[1].dims));const S=["rank","rank"];o&&($.push(...Ct(e[2].dims)),S.push("rank")),$.push(...Ct(n));return{name:"Conv2DTransposeMatMul",shaderCache:{hint:`${t.cacheKey};${w};${_};${m}`,inputDependencies:S},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:b[0],y:b[1],z:b[2]},programUniforms:$}),getShaderSource:r=>{const s=Bt("x",e[0].dataType,e[0].dims.length,x),i=Bt("w",e[1].dataType,e[1].dims.length,1),d=Ot("result",e[0].dataType,n.length,x),u=[s,i];let c="";if(o){const t=Bt("bias",e[2].dataType,e[2].dims.length,x);u.push(t),c+=`\n          fn getBiasByOutputCoords(coords : vec4<i32>) -> ${t.type.value} {\n            return bias[coords.${l?"w":"y"}${m?"/ 4":""}];\n          }`}const p=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"strides",type:"i32",length:2},{name:"dilations",type:"i32",length:2},{name:"filter_dims",type:"i32",length:M.length},{name:"pads",type:"i32",length:k.length}];ws(t,p);const h=$t(e[0].dataType,1);if("f16"!==h&&"f32"!==h)throw new Error(`elemType ${h} is not supported.`);return`\n        ${xs("uniforms.result_strides")}\n        ${r.registerUniforms(p).declareVariables(...u,d)};\n        ${c}\n        ${Ws(l,o,t,s.type.value,y)}\n        ${m?ks(w,_,h,void 0,!l,v):Cs(w,_,h,void 0,!l,v,!1,void 0,a)}`}}}}}),Il=N({"web/lib/wasm/jsep/webgpu/ops/3rd-party/conv_backprop_webgpu.ts"(){sl(),ol(),cl(),pl(),Ks=(e,t,n,r,s,i=!1,o,a,l=!1)=>{const d=l?1:2,u=l?2:3,c=l?3:1,p=i?2:1;let h=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${i?`vec4<${o}>`:o}) {\n    result[flatIndex] = ${i?`vec4<${o}>`:o}(value);\n  }`;r&&(h+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${i?`vec4<${o}>`:o} {\n      return bias[coords.${l?"w":"y"}${i?"/ 4":""}];\n    }`);const m=i?4:1,f=Bt("W",t[1].dataType,t[1].dims.length,m),g=Bt("Dy",t[0].dataType,t[0].dims.length,m),_=[g,f];r&&_.push(Bt("bias",t[2].dataType,[n[c]].length,m));const w=Ot("result",t[0].dataType,n.length,m),b=`{\n        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / uniforms.result_shape[1];\n        let r = ${s?"global_id.z":"workgroup_id.z"} % uniforms.result_shape[1];\n        let c = ${s?"global_id.y":"workgroup_id.y"} * ${p};\n        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(uniforms.pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${o}>, ${p}>;\n        for (var i = 0; i < ${p}; i++) {\n          dotProd[i] = vec4<${o}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < uniforms.filter_dims[0]; wR = wR + 1) {\n          var dyR = (${o}(dyCorner.x) + ${o}(wR)) / ${o}(uniforms.strides.x);\n          let wRPerm = uniforms.filter_dims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${o}(uniforms.Dy_shape[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < uniforms.filter_dims[1]; wC = wC + 1) {\n            let dyC = (${o}(dyCorner.y) + ${o}(wC)) / ${o}(uniforms.strides.y);\n            let dyC2 = (${o}(dyCorner.y) + 1.0 + ${o}(wC)) / ${o}(uniforms.strides.y);\n            let wCPerm = uniforms.filter_dims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${o}(uniforms.Dy_shape[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${o}(uniforms.Dy_shape[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = uniforms.Dy_shape[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${f.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${f.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${f.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${f.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${g.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${o}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${g.get("batch","idyR","idyC2","d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${o}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = uniforms.Dy_shape[${c}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${f.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${f.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${f.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${f.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${g.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${o}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = uniforms.Dy_shape[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${f.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${f.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${f.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${f.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${g.get("batch","idyR","idyC2","d2")};\n                let tmpval = vec4<${o}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${p}; i = i + 1) {\n          let value = dotProd[i] + ${r?"bias[c+i]":`vec4<${o}>(0.0)`};\n          ${w.set("batch","r","c + i","d1","value")};\n        }\n      }`,y=`\n          let outputIndices = ${w.offsetToIndices("global_idx")};\n          let batch = ${w.indicesGet("outputIndices",0)};\n          let d1 = ${w.indicesGet("outputIndices",c)};\n          let r = ${w.indicesGet("outputIndices",d)};\n          let c = ${w.indicesGet("outputIndices",u)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / uniforms.output_channels_per_group;\n          let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = ${o}(0.0);\n          for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {\n            if (wR % uniforms.dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${o}(dyRCorner) + ${o}(wR)) / ${o}(uniforms.strides[0]);\n            let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;\n            if (dyR < 0.0 || dyR >= ${o}(uniforms.Dy_shape[${d}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {\n              if (wC % uniforms.dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${o}(dyCCorner) + ${o}(wC)) / ${o}(uniforms.strides.y);\n              let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;\n              if (dyC < 0.0 || dyC >= ${o}(uniforms.Dy_shape[${u}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * uniforms.input_channels_per_group;\n              for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + 1) {\n                let xValue = ${l?g.get("batch","idyR","idyC","inputChannel"):g.get("batch","inputChannel","idyR","idyC")};\n                let wValue = ${f.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${r?"bias[d1]":`${o}(0.0)`};\n          ${w.setByOffset("global_idx","value")};\n        `;return`\n  ${e.registerUniforms(a).declareVariables(..._,w)}\n  ${h}\n\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};\n  ${i?b:y}}`},Xs=(e,t,n)=>{const r=e.length>2,s=t.outputShape,i=bt.size(s),o=[Math.ceil(i/64),1,1];st("verbose",(()=>`[conv2d_backprop_webgpu] dispatch = ${o}`));const a="NHWC"===t.format,l=["rank","rank"],d=[t.strides[0],t.strides[1]],u=[t.kernelShape[a?1:2],t.kernelShape[a?2:3]],c=[t.dilations[0],t.dilations[1]],p=[u[0]+(t.dilations[0]<=1?0:(t.kernelShape[a?1:2]-1)*(t.dilations[0]-1)),u[1]+(t.dilations[1]<=1?0:(t.kernelShape[a?2:3]-1)*(t.dilations[1]-1))],h=[p[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),p[1]-1-Math.floor(t.pads[1]+t.pads[3])/2],m=t.group,f=e[1].dims,g=f[0]/m,_=f[1],w=[{type:12,data:i},{type:12,data:d},{type:12,data:u},{type:12,data:c},{type:12,data:p},{type:6,data:h},{type:12,data:g},{type:12,data:_},...Ct(e[0].dims,e[1].dims)];r&&(w.push(...Ct(e[2].dims)),l.push("rank")),w.push(...Ct(s));const b=1===o[1]&&1===o[2];return{name:"ConvTranspose2D",shaderCache:{hint:`${t.cacheKey};`,inputDependencies:l},getRunData:()=>({dispatchGroup:{x:o[0],y:o[1],z:o[2]},outputs:[{dims:n?n(s):s,dataType:e[0].dataType}],programUniforms:w}),getShaderSource:t=>{const n=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:d.length},{name:"filter_dims",type:"u32",length:u.length},{name:"dilations",type:"u32",length:u.length},{name:"effective_filter_dims",type:"u32",length:p.length},{name:"pads",type:"i32",length:h.length},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],i=$t(e[0].dataType);return`${Ks(t,e,s,r,b,false,i,n,a)}`}}}}}),zl=N({"web/lib/wasm/jsep/webgpu/ops/conv-transpose.ts"(){Al(),Il(),Tl(),hl(),Qs=(e,t,n,r,s,i)=>(e-1)*t+n+(r-1)*s+1-i,Ys=(e,t,n,r,s)=>{const i=Math.floor(e/2);"SAME_UPPER"===t?(n[r]=i,n[s]=e-i):"SAME_LOWER"===t&&(n[r]=e-i,n[s]=i)},Zs=(e,t,n,r,s,i,o,a,l,d)=>{const u=e.length-2,c=0===d.length;if(0===l.length)for(let e=0;e<u;++e)l.push(0);const p=e[0],h=t[a?3:1]*s;for(let s=0,p=e.length-u-(a?1:0);s<u;++s,++p){const a=e[p],h=c?a*o[s]:d[s],m=Qs(a,o[s],i[s],t[p],n[s],h);Ys(m,r,i,s,s+u),c&&d.push(o[s]*(a-1)+l[s]+(t[p]-1)*n[s]+1-i[s]-i[s+u])}d.splice(0,0,p),d.splice(a?3:1,0,h)},Js=(e,t)=>{const n=e.kernelShape.slice();if(0===e.kernelShape.length||0===e.kernelShape.reduce(((e,t)=>e*t),1)){n.length=0;for(let e=2;e<t[1].dims.length;++e)n.push(t[1].dims[e])}const r="NHWC"===e.format;n.splice(0,0,t[1].dims[0]),n.splice(r?3:1,0,t[1].dims[1]);const s=e.pads.slice(),i=e.outputShape.slice(),o=e.outputPadding.slice(),a=t[0].dims;let l=e.dilations.slice();if(0===l.reduce(((e,t)=>e+t),0)){const e=t[0].dims.length-2;l=new Array(e).fill(1)}let d=e.strides.slice();if(0===d.reduce(((e,t)=>e+t),0)){const e=t[0].dims.length-2;d=new Array(e).fill(1)}Zs(a,n,l,e.autoPad,e.group,s,d,r,o,i);const u=Object.assign({},e);return Object.assign(u,{kernelShape:n,pads:s,outputPadding:o,outputShape:i,dilations:l,strides:d}),u},ei=e=>{const t=bs(e),n=e.format,r=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][void 0===e.autoPad?0:e.autoPad],s=e.dilations,i=e.group,o=e.kernelShape,a=e.pads,l=e.strides,d=e.wIsConst();return{autoPad:r,format:n,dilations:s,group:i,kernelShape:o,outputPadding:e.outputPadding,outputShape:e.outputShape,pads:a,strides:l,wIsConst:d,...t,cacheKey:`${e.format};${t.activation};`}},ti=(e,t)=>{if(!e||2!==e.length&&3!==e.length)throw new Error("Conv requires 2 or 3 inputs");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");if(e[0].dims["NHWC"===t.format?e[0].dims.length-1:1]!==e[1].dims[0])throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");const n=e[1].dims[1]*t.group;if(3===e.length&&(1!==e[2].dims.length||e[2].dims[0]!==n))throw new Error("invalid bias");const r=e[0].dims.length-2;if(t.dilations.reduce(((e,t)=>e+t),0)>0&&t.dilations.length!==r)throw new Error(`dilations should be ${r}D`);if(t.strides.reduce(((e,t)=>e+t),0)>0&&t.strides.length!==r)throw new Error(`strides should be ${r}D`);if(t.pads.reduce(((e,t)=>e+t),0)>0&&t.pads.length!==2*r)throw new Error(`pads should be ${2*r}D`);if(t.outputPadding.length!==r&&0!==t.outputPadding.length)throw new Error(`output_padding should be ${r}D`);if(t.kernelShape.reduce(((e,t)=>e+t),0)>0&&0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(0!==t.outputShape.length&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},ni=[2,3,1,0],ri=(e,t,n)=>{const r=Js(n,t),s="NHWC"===n.format,i=r.outputShape,o=i[s?3:1],a=t[0].dims[s?3:1];if(1!==r.group||1===o&&1===a)return void e.compute(Xs(t,r));const l=i[s?1:2],d=i[s?2:3],u=s?l*d:o,c=s?o:l*d,p=t[1].dims[2]*t[1].dims[3]*a,h=e.kernelCustomData.wT??e.compute(Ut(t[1],ni),{inputs:[1],outputs:[n.wIsConst?-2:-1]})[0];n.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=h);const m=[t[0],h],f=3===t.length;f&&(s||1!==t[2].dims.length?m.push(t[2]):m.push(t[2].reshape([t[2].dims[0],1,1]))),e.compute(Hs(m,r,i,u,c,p,f,!0),{inputs:m})},si=(e,t)=>{const n="NHWC"===t.format,r=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===e.inputs.length&&r.push(e.inputs[2]);let s=t.kernelShape;0!==s.length&&0!==s[0]||(s=[e.inputs[1].dims[2]]);let i=t.dilations;0!==i.length&&0!==i[0]||(i=[1]);let o=t.strides;0!==o.length&&0!==o[0]||(o=[1]);let a=t.pads;0===a.length&&(a=[0,0]),a=[0,a[0],0,a[1]],o=[1].concat(o),i=[1].concat(i),s=[1].concat(s);const l=Js({...t,pads:a,strides:o,dilations:i,kernelShape:s},r);e.compute(Xs(r,l,(e=>n?[e[0],e[2],e[3]]:[e[0],e[1],e[3]])))},ii=(e,t)=>{ti(e.inputs,t),3===e.inputs[0].dims.length?si(e,t):ri(e,e.inputs,t)}}}),Bl=N({"web/lib/wasm/jsep/webgpu/ops/cumsum.ts"(){sl(),cl(),ul(),pl(),oi=(e,t,n,r)=>{const s=bt.size(t),i=t.length,o=Bt("input",e,i),a=Ot("output",e,i),l=6===n.dataType?n.getInt32Array()[0]:Number(n.getBigInt64Array()[0]),d=bt.normalizeAxis(l,i);return{name:"CumSum",shaderCache:{hint:r.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:[{type:12,data:s},{type:12,data:d},...Ct(t,t)]}),getShaderSource:e=>{const t=` i32(${o.indicesGet("inputIndices","uniforms.axis")}) `,n=It("uniforms.input_shape","uniforms.axis",i),s=r.reverse?t+(r.exclusive?" + 1":""):"0",l=r.reverse?n:t+(r.exclusive?"":" + 1");return`\n                ${e.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(o,a)}\n                ${e.mainStart()}\n                  ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n                  var inputIndices = ${a.offsetToIndices("global_idx")};\n                  var sum = ${a.type.value}(0);\n                  let first : i32 = ${s};\n                  let last : i32 = ${l};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${o.indicesSet("inputIndices","uniforms.axis","u32(i)")};\n                    sum = sum + ${o.getByIndices("inputIndices")};\n                  }\n                  ${a.setByOffset("global_idx","sum")};\n                }`}}},ai=(e,t)=>{const n=e.inputs[0].dims,r=e.inputs[0].dataType,s=e.inputs[1];e.compute(oi(r,n,s,t),{inputs:[0]})},li=e=>{const t=1===e.exclusive,n=1===e.reverse;return gt({exclusive:t,reverse:n})}}}),Ol=N({"web/lib/wasm/jsep/webgpu/ops/depth-to-space.ts"(){sl(),cl(),ul(),pl(),di=e=>{if(!e||1!==e.length)throw new Error("DepthToSpace requires 1 input.");if(4!==e[0].dims.length)throw new Error("DepthToSpace requires 4D input.")},ui=(e,t,n,r)=>{const s=[];s.push(`fn perm(i: ${r.type.indices}) -> ${n.type.indices} {\n    var a: ${n.type.indices};`);for(let r=0;r<t;++r)s.push(n.indicesSet("a",e[r],`i[${r}]`));return s.push("return a;}"),s.join("\n")},ci=(e,t)=>{let n,r,s,i,o,a;const l="NHWC"===t.format,d=t.blocksize,u="DCR"===t.mode;l?([n,r,s,i]=e.dims,o=u?[n,r,s,d,d,i/d**2]:[n,r,s,i/d**2,d,d],a=u?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([n,r,s,i]=[e.dims[0],e.dims[2],e.dims[3],e.dims[1]],o=u?[n,d,d,i/d**2,r,s]:[n,i/d**2,d,d,r,s],a=u?[0,3,4,1,5,2]:[0,1,4,2,5,3]);const c=e.reshape(o),p=c.dims.length,h=e.dataType,m=Bt("a",h,p),f=Ot("output",h,p);return{name:"DepthToSpace",shaderCache:{hint:`${e.dims};${t.blocksize};${t.mode}`,inputDependencies:["rank"]},getRunData:e=>{const t=l?[n,r*d,s*d,i/d**2]:[n,i/d**2,r*d,s*d],o=bt.size(t),u=c.dims,p=bt.sortBasedOnPerm(u,a);return{outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:[{type:12,data:o},...Ct(u,p)]}},getShaderSource:e=>`\n  ${e.registerUniform("output_size","u32").declareVariables(m,f)}\n\n  ${ui(a,p,m,f)}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${f.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${f.setByOffset("global_idx",m.getByIndices("aIndices"))}\n  }`}},pi=(e,t)=>{di(e.inputs),e.compute(ci(e.inputs[0],t))},hi=e=>gt({blocksize:e.blocksize,mode:e.mode,format:e.format})}}),Ll=N({"web/lib/wasm/jsep/webgpu/ops/einsum.ts"(){sl(),cl(),ul(),pl(),gi="^"+(fi="("+(mi="[a-zA-Z]|\\.\\.\\.")+")+")+"$",_i="^"+("("+fi+",)*"+fi)+"$",wi=class{constructor(e=-1){this.symbolToIndices=new Map,this.inputIndex=e}addSymbol(e,t){let n=this.symbolToIndices.get(e);void 0===n?n=[t]:n.push(t),this.symbolToIndices.set(e,n)}},bi=class{constructor(e,t){this.equation=t,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[n,r]=t.includes("->")?t.split("->",2):[t,""];if(!n.match(RegExp(_i)))throw new Error("Invalid LHS term");if(n.split(",").forEach(((t,n)=>{const r=e[n].dims.slice();if(!t.match(RegExp(gi)))throw new Error("Invalid LHS term");const s=this.processTerm(t,!0,r,n);this.lhs.push(s)})),""===r)r+=[...this.symbolToInfo.entries()].filter((([e,t])=>1===t.count||"..."===e)).map((([e])=>e)).join("");else if(!r.match(RegExp(fi)))throw new Error("Invalid RHS");const s=r.match(RegExp(mi,"g"));s?.forEach((e=>{if("..."===e)this.outputDims=this.outputDims.concat(this.ellipsisDims);else{const t=this.symbolToInfo.get(e);if(void 0===t)throw new Error("Invalid RHS symbol");this.outputDims.push(t.dimValue)}})),this.rhs=this.processTerm(r,!1,this.outputDims)}addSymbol(e,t,n){let r=this.symbolToInfo.get(e);if(void 0!==r){if(r.dimValue!==t&&1!==r.count)throw new Error("Dimension mismatch");r.count++,r.inputIndices.push(n)}else r={count:1,dimValue:t,inputIndices:[n]};this.symbolToInfo.set(e,r)}processTerm(e,t,n,r=-1){const s=n.length;let i=!1,o=[],a=0;if(!e.match(RegExp(gi))&&!t&&""!==e)throw new Error("Invalid LHS term");const l=e.match(RegExp(mi,"g")),d=new wi(r);return l?.forEach(((e,u)=>{if("..."===e){if(i)throw new Error("Only one ellipsis is allowed per input term");i=!0;const e=s-l.length+1;if(e<0)throw new Error("Ellipsis out of bounds");if(o=n.slice(a,a+e),this.hasEllipsis){if(this.ellipsisDims.length!==o.length||this.ellipsisDims.toString()!==o.toString())throw new Error("Ellipsis dimensions mismatch")}else{if(!t)throw new Error("Ellipsis must be specified in the LHS");this.hasEllipsis=!0,this.ellipsisDims=o}for(let e=0;e<o.length;e++){const t=String.fromCharCode("0".charCodeAt(0)+e);d.addSymbol(t,u+e),this.addSymbol(t,n[a++],r)}}else d.addSymbol(e,u+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(e,n[a++],r)})),d}},yi=e=>e+"_max",vi=(e,t,n,r)=>{const s=e.map((e=>e.length)).map(((e,n)=>Bt(`input${n}`,t,e))),i=bt.size(r),o=Ot("output",t,r.length),a=[...n.symbolToInfo.keys()].filter((e=>!n.rhs.symbolToIndices.has(e)));return{name:"Einsum",shaderCache:{hint:n.equation,inputDependencies:e.map((()=>"rank"))},getRunData:()=>{const s=a.filter((e=>n.symbolToInfo.has(e))).map((e=>({type:12,data:n.symbolToInfo.get(e)?.dimValue||0})));s.push({type:12,data:i});const o=e.map(((e,t)=>[...Ct(e)])).reduce(((e,t)=>e.concat(t)),s);return o.push(...Ct(r)),{outputs:[{dims:r,dataType:t}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:o}},getShaderSource:e=>{const t=[],r=[],i=[],l=[],d=[],u=n.symbolToInfo.size===n.rhs.symbolToIndices.size;n.symbolToInfo.forEach(((e,a)=>{if(n.rhs.symbolToIndices.has(a)){const r=n.rhs.symbolToIndices.get(a)?.[0];void 0!==r&&n.lhs.forEach(((n,i)=>{if(e.inputIndices.includes(i)){const e=n.symbolToIndices.get(a);if(void 0===e)throw new Error("Invalid symbol error");e.forEach((e=>{t.push(`${s[i].indicesSet(`input${i}Indices`,e,o.indicesGet("outputIndices",r))}`)}))}}))}else n.lhs.forEach(((t,n)=>{if(e.inputIndices.includes(n)){const e=t.symbolToIndices.get(a);if(void 0===e)throw new Error("Invalid symbol error");e.forEach((e=>{r.push(`${s[n].indicesSet(`input${n}Indices`,e,`${a}`)}`)})),d.push(`prod *= ${s[n].getByIndices(`input${n}Indices`)};`)}})),i.push(`for(var ${a}: u32 = 0; ${a} < uniforms.${yi(a)}; ${a}++) {`),l.push("}")}));const c=u?[...t,`let sum = ${s.map(((e,t)=>e.getByIndices(`input${t}Indices`))).join(" * ")};`]:[...t,"var sum = 0.0;",...i,...r,"var prod = 1.0;",...d,"sum += prod;",...l];return`\n            ${e.registerUniforms(a.map((e=>({name:`${yi(e)}`,type:"u32"})))).registerUniform("outputSize","u32").declareVariables(...s,o)}\n\n            ${e.mainStart()}\n            ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n            var outputIndices = ${o.offsetToIndices("global_idx")};\n            ${s.map(((e,t)=>`var input${t}Indices: ${s[t].type.indices};`)).join("\n")}\n            ${c.join("\n")};\n            ${o.setByOffset("global_idx","sum")};\n          }`}}},xi=(e,t)=>{const n=new bi(e.inputs,t.equation),r=n.outputDims,s=e.inputs.map(((e,t)=>e.dims));e.compute(vi(s,e.inputs[0].dataType,n,r))},Mi=e=>{const t=e.equation.replace(/\s+/g,"");return gt({equation:t})}}}),Dl=N({"web/lib/wasm/jsep/webgpu/ops/expand.ts"(){sl(),cl(),pl(),Ti=e=>{if(!e||2!==e.length)throw new Error("Expand requires 2 input.");const t=e[0].dims,n=Array.from(e[1].getBigInt64Array(),Number);let r=n.length<t.length?0:n.length-t.length,s=t.length<n.length?0:t.length-n.length;for(;r<n.length&&s<t.length;++r,++s)if(n[r]!==t[s]&&1!==n[r]&&1!==t[s])throw new Error("Expand requires shape to be broadcastable to input")},ki=(e,t)=>{const n=e.length-t.length,r=[];for(let t=0;t<n;++t)r.push(e[t]);for(let s=0;s<t.length;++s)r.push(1===t[s]?e[s+n]:t[s]);return r},$i=(e,t)=>e.length>t.length?ki(e,t):ki(t,e),Si=e=>{const t=e[0].dims,n=Array.from(e[1].getBigInt64Array(),Number),r=$i(t,n),s=e[0].dataType,i=9===s?4:1,o=Math.ceil(bt.size(r)/i),a=[{type:12,data:o},...Ct(t,r)];return{name:"Expand",shaderCache:{hint:`${r.length}`,inputDependencies:["rank"]},getShaderSource:e=>{const n=Bt("input",s,t.length,i),o=Ot("output",s,r.length,i);let a;if(9===s){const e=(e,t,r="")=>`\n          let outputIndices${t} = ${o.offsetToIndices(`outputOffset + ${t}u`)};\n          let offset${t} = ${n.broadcastedIndicesToOffset(`outputIndices${t}`,o)};\n          let index${t} = offset${t} / 4u;\n          let component${t} = offset${t} % 4u;\n          ${e}[${t}] = ${r}(${n.getByOffset(`index${t}`)}[component${t}]);\n        `;a=`\n        let outputOffset = global_idx * ${i};\n        var data = vec4<u32>(0);\n        ${e("data",0,"u32")}\n        ${e("data",1,"u32")}\n        ${e("data",2,"u32")}\n        ${e("data",3,"u32")}\n        ${o.setByOffset("global_idx","data")}\n      }`}else a=`\n        let outputIndices = ${o.offsetToIndices("global_idx")};\n        let inputOffset = ${n.broadcastedIndicesToOffset("outputIndices",o)};\n        ${o.setByOffset("global_idx",n.getByOffset("inputOffset"))}\n      }`;return`\n    ${e.registerUniform("vec_size","u32").declareVariables(n,o)}\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    ${a}`},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:a})}},Ci=e=>{Ti(e.inputs),e.compute(Si(e.inputs),{inputs:[0]})}}}),Rl=N({"web/lib/wasm/jsep/webgpu/ops/fast-gelu.ts"(){sl(),cl(),pl(),yl(),Pi=e=>{const t=e[0].dataType,n=bt.size(e[0].dims),r=bt.size(e[1].dims),s=r%4==0;return{name:"FastGeluWithBias",shaderCache:{hint:`${s}`,inputDependencies:["type","type"]},getShaderSource:e=>{const n=Bt("x",t,[1],4),r=Bt("bias",t,[1],4),i=Ot("y",t,[1],4),o=e=>`\n      let bias${e}_offset: u32 = (global_idx * 4 + ${e}) % uniforms.bias_size;\n      let bias${e} = ${r.getByOffset(`bias${e}_offset / 4`)}[bias${e}_offset % 4];`,a=s?`\n      let bias = ${r.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${o(0)}${o(1)}${o(2)}${o(3)}\n      let bias = ${n.type.value}(bias0, bias1, bias2, bias3);`;return`${e.registerUniforms([{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}]).declareVariables(n,r,i)}\n\n    ${qr(St(t))}\n\n    ${e.mainStart(Tt)}\n      ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}\n\n      let x = ${n.getByOffset("global_idx")};\n      ${a}\n      let x_in = x + bias;\n      ${i.setByOffset("global_idx",Gr("x_in"))}\n    }`},getRunData:e=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],programUniforms:[{type:12,data:Math.ceil(n/4)},{type:12,data:r}],dispatchGroup:{x:Math.ceil(n/Tt/4)}})}},Ei=e=>{e.inputs.length<2||0===bt.size(e.inputs[1].dims)?Ur(e):e.compute(Pi(e.inputs))}}}),Nl=N({"web/lib/wasm/jsep/webgpu/ops/gather.ts"(){sl(),cl(),ul(),pl(),Fi=e=>{if(!e||2!==e.length)throw new Error("Gather requires 2 inputs.")},Ai=(e,t)=>{const n=e[0].dims,r=e[1].dims,s=n.length,i=bt.normalizeAxis(t.axis,s),o=n.slice(0);o.splice(i,1,...r);const a=n[i],l=9===e[0].dataType?4:1,d=Math.ceil(bt.size(o)/l),u=[{type:12,data:d},{type:6,data:a},{type:12,data:i},...Ct(e[0].dims,e[1].dims,o)];return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:u}),getShaderSource:t=>{const n=Bt("data",e[0].dataType,e[0].dims.length,l),a=Bt("inputIndices",e[1].dataType,e[1].dims.length),d=Ot("output",e[0].dataType,o.length,l),u=e=>{const t=r.length;let l=`var indicesIndices${e}  = ${a.type.indices}(0);`;for(let n=0;n<t;n++)l+=`${t>1?`indicesIndices${e}[${n}]`:`indicesIndices${e}`} = ${o.length>1?`outputIndices${e}[uniforms.axis + ${n}]`:`outputIndices${e}`};`;l+=`\n          var idx${e} = ${a.getByIndices(`indicesIndices${e}`)};\n          if (idx${e} < 0) {\n            idx${e} = idx${e} + uniforms.axisDimLimit;\n          }\n          var dataIndices${e} : ${n.type.indices};\n        `;for(let n=0,r=0;n<s;n++)n===i?(l+=`${s>1?`dataIndices${e}[${n}]`:`dataIndices${e}`} = u32(idx${e});`,r+=t):(l+=`${s>1?`dataIndices${e}[${n}]`:`dataIndices${e}`} = ${o.length>1?`outputIndices${e}[${r}]`:`outputIndices${e}`};`,r++);return l};let c;if(9===e[0].dataType){const e=(e,t,r="")=>`\n          let outputIndices${t} = ${d.offsetToIndices(`outputOffset + ${t}u`)};\n          ${u(t)};\n          let offset${t} = ${n.indicesToOffset(`dataIndices${t}`)};\n          let index${t} = offset${t} / 4u;\n          let component${t} = offset${t} % 4u;\n          ${e}[${t}] = ${r}(${n.getByOffset(`index${t}`)}[component${t}]);\n        `;c=`\n        let outputOffset = global_idx * ${l};\n        var value = vec4<u32>(0);\n        ${e("value",0,"u32")}\n        ${e("value",1,"u32")}\n        ${e("value",2,"u32")}\n        ${e("value",3,"u32")}\n        ${d.setByOffset("global_idx","value")}\n      `}else c=`\n      let outputIndices = ${d.offsetToIndices("global_idx")};\n      ${u("")};\n      let value = ${n.getByIndices("dataIndices")};\n      ${d.setByOffset("global_idx","value")};\n      `;return`\n      ${t.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(n,a,d)}\n      ${t.mainStart()}\n        ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        ${c}\n      }`}}},Ii=e=>gt({axis:e.axis}),zi=(e,t)=>{const n=e.inputs;Fi(n),e.compute(Ai(e.inputs,t))}}}),Vl=N({"web/lib/wasm/jsep/webgpu/ops/gather-elements.ts"(){sl(),cl(),ul(),pl(),Bi=e=>{if(!e||2!==e.length)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error("GatherElements requires that the data input and\n                     indices input tensors be of same rank.")},Oi=(e,t)=>{const n=e[0].dims,r=e[0].dataType,s=n.length,i=e[1].dims,o=e[1].dataType,a=bt.normalizeAxis(t.axis,s),l=n[a],d=i.slice(0),u=bt.size(d),c=Bt("input",r,s),p=Bt("indicesInput",o,i.length),h=Ot("output",r,d.length),m=[{type:12,data:u},{type:6,data:l},{type:12,data:a}];m.push(...Ct(n,i,d));return{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:d,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:m}),getShaderSource:e=>`\n      ${e.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(c,p,h)}\n      ${e.mainStart()}\n      ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n      let outputIndices = ${h.offsetToIndices("global_idx")};\n\n      var idx = ${p.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${c.type.indices}(outputIndices);\n      ${c.indicesSet("inputIndices","uniforms.axis","u32(idx)")};\n      let value = ${c.getByIndices("inputIndices")};\n\n      ${h.setByOffset("global_idx","value")};\n  }`}},Li=e=>gt({axis:e.axis}),Di=(e,t)=>{const n=e.inputs;Bi(n),e.compute(Oi(e.inputs,t))}}}),jl=N({"web/lib/wasm/jsep/webgpu/ops/gemm.ts"(){sl(),cl(),pl(),Ri=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(3===e.length&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||3===e.length&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Ni=(e,t)=>{const n=e[0].dims.slice(),r=e[1].dims.slice(),[s,i,o]=vt.getShapeOfGemmResult(n,t.transA,r,t.transB,3===e.length?e[2].dims:void 0),a=[s,i];if(!a)throw new Error("Can't use gemm on the given tensors");const l=bt.size(a),d=[{type:12,data:l},{type:12,data:s},{type:12,data:i},{type:12,data:o},{type:1,data:t.alpha},{type:1,data:t.beta}],u=["type","type"];3===e.length&&(d.push(...Ct(e[2].dims)),u.push("rank")),d.push(...Ct(a));return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:u},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:d}),getShaderSource:n=>{let r="";t.transA&&t.transB?r="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?r="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?r="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":t.transA||t.transB||(r="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");const s=1===t.alpha?"":"value *= uniforms.alpha;",i=Bt("a",e[0].dataType,e[0].dims),o=Bt("b",e[1].dataType,e[1].dims),l=i.type.value;let d=null;const u=[i,o];3===e.length&&(d=Bt("c",e[2].dataType,e[2].dims.length),u.push(d));const c=Ot("output",e[0].dataType,a.length);u.push(c);return`\n  ${n.registerUniforms([{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}]).declareVariables(...u)}\n\n  ${n.mainStart()}\n    ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let m = global_idx / uniforms.N;\n    let n = global_idx % uniforms.N;\n\n    var value = ${l}(0);\n    for (var k: u32 = 0u; k < uniforms.K; k++) {\n      ${r}\n    }\n\n    ${s}\n    ${null!=d?`let cOffset = ${d.broadcastedIndicesToOffset("vec2(m, n)",c)}; value += ${l}(uniforms.beta) * ${d.getByOffset("cOffset")};`:""}\n    output[global_idx] = value;\n  }`}}},Vi=e=>({transA:e.transA,transB:e.transB,alpha:e.alpha,beta:e.beta,cacheKey:`${e.transA};${e.transB};${1===e.alpha}`}),ji=(e,t)=>{Ri(e.inputs),e.compute(Ni(e.inputs,t))}}}),ql=N({"web/lib/wasm/jsep/webgpu/ops/multihead-attention.ts"(){sl(),cl(),ul(),ll(),_l(),pl(),hl(),qi=(e,t)=>e.length>t&&e[t].dims.length>0&&bt.size(e[t].dims)>0?e[t]:void 0,Gi=(e,t)=>{const n=e[0],r=qi(e,1),s=qi(e,2),i=qi(e,3),o=qi(e,4),a=qi(e,5),l=qi(e,6),d=qi(e,7);if(3!==n.dims.length&&5!==n.dims.length)throw new Error("Input query is expected to have 3 or 5 dimensions");const u=n.dims[0],c=n.dims[1],p=3===n.dims.length?n.dims[2]:t.numHeads*n.dims[4];let h=c,m=0,f=0;const g=Math.floor(p/t.numHeads);if(l&&d){if(4!==l.dims.length)throw new Error('Input "past_key" is expected to have 4 dimensions');if(l.dims[0]!==u||l.dims[1]!==t.numHeads||l.dims[3]!==g)throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');if(d.dims[0]!==u||d.dims[1]!==t.numHeads||d.dims[3]!==g)throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');if(l.dims[2]!==d.dims[2])throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');if(4!==d.dims.length)throw new Error('Input "past_value" is expected to have 4 dimensions');m=l.dims[2],f=l.dims[2]}else if(l||d)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let _;if(r){if(3!==n.dims.length)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(r.dims.length<3||r.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(n.dims[0]!==r.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(3===r.dims.length){if(r.dims[2]!==n.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');_=2,h=r.dims[1]}else if(5===r.dims.length){if(r.dims[2]!==t.numHeads||2!==r.dims[3]||r.dims[4]!==g)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(s)throw new Error('Expect "value" be none when "key" has packed kv format.');_=5,h=r.dims[1]}else{if(r.dims[1]!==t.numHeads||r.dims[3]!==g)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');_=0,h=r.dims[2]}}else{if(3!==n.dims.length&&5!==n.dims.length)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(5===n.dims.length&&(n.dims[2]!==t.numHeads||3!==n.dims[3]))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');_=3}if(i){if(1!==i.dims.length)throw new Error('Input "bias" is expected to have 1 dimension');if(s&&5===n.dims.length&&2===n.dims[3])throw new Error("bias is not allowed for packed kv.")}let w=0;if(o){w=8;const e=o.dims;if(1===e.length?e[0]===u?w=1:e[0]===3*u+2&&(w=3):2===e.length&&e[0]===u&&e[1]===h&&(w=5),8===w)throw new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)');throw new Error("Mask not supported")}let b=!1,y=p;if(s){if(3!==s.dims.length&&4!==s.dims.length)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(n.dims[0]!==s.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(3===s.dims.length){if(h!==s.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');y=s.dims[2]}else{if(h!==s.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');y=s.dims[1]*s.dims[3],b=!0}}const v=m+h;if(o)throw new Error("Key padding mask is not supported");if(a){if(4!==a.dims.length)throw new Error('Input "relative_position_bias" is expected to have 4 dimensions');if(a.dims[0]!==u&&1!==a.dims[0]||a.dims[1]!==t.numHeads||a.dims[2]!==c||a.dims[3]!==v)throw new Error('Input "relative_position_bias" shape (batch_size, 1, sequence_length, kv_sequence_length)')}return{batchSize:u,sequenceLength:c,pastSequenceLength:m,kvSequenceLength:h,totalSequenceLength:v,maxSequenceLength:f,inputHiddenSize:0,hiddenSize:p,vHiddenSize:y,headSize:g,vHeadSize:Math.floor(y/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:w,scale:t.scale,broadcastResPosBias:!1,passPastInKv:b,qkvFormat:_}},Ui=e=>gt({...e}),Wi=gt({perm:[0,2,1,3]}),Hi=(e,t,n,r,s,i,o)=>{const a=[r,s,i],l=bt.size(a),d=[{type:12,data:l},{type:12,data:o},{type:12,data:i}];return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:a,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:d}),getShaderSource:e=>{const r=Ot("qkv_with_bias",t.dataType,a),s=Bt("qkv",t.dataType,a),i=Bt("bias",n.dataType,a);return`\n  ${e.registerUniforms([{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}]).declareVariables(s,i,r)}\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\n  }`}},{inputs:[t,n],outputs:[-1]})[0]},Ki=(e,t,n,r,s,i,o,a)=>{let l=i;if(o){if(1===r)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return l=Hi(e,i,o,t,r,n*s,a),l=l.reshape([t,r,n,s]),e.compute(Ut(l,Wi.perm),{inputs:[l],outputs:[-1]})[0]}return 3===i.dims.length&&(l=i.reshape([t,r,n,s])),e.compute(Ut(l,Wi.perm),{inputs:[l],outputs:[-1]})[0]},Xi=(e,t)=>{const n=Gi(e.inputs,t),r=e.inputs[0],s=qi(e.inputs,1),i=qi(e.inputs,2),o=qi(e.inputs,3),a=qi(e.inputs,4),l=qi(e.inputs,5),d=qi(e.inputs,6),u=qi(e.inputs,7);if(5===r.dims.length)throw new Error("Packed QKV is not implemented");if(5===s?.dims.length)throw new Error("Packed KV is not implemented");const c=s&&i&&4===s.dims.length&&4===i.dims.length,p=Ki(e,n.batchSize,n.numHeads,n.sequenceLength,n.headSize,r,o,0);if(c)return Qn(e,p,s,i,a,void 0,d,u,l,n,t);if(!s||!i)throw new Error("key and value must be provided");const h=Ki(e,n.batchSize,n.numHeads,n.kvSequenceLength,n.headSize,s,o,n.hiddenSize),m=Ki(e,n.batchSize,n.numHeads,n.kvSequenceLength,n.vHeadSize,i,o,2*n.hiddenSize);Qn(e,p,h,m,a,void 0,d,u,l,n,t)}}}),Gl=N({"web/lib/wasm/jsep/webgpu/ops/tile.ts"(){sl(),cl(),pl(),Qi=e=>Array.from(e.getBigInt64Array(),Number),Yi=e=>{if(!e||2!==e.length)throw new Error("Tile requires 2 inputs.");if(1!==e[0].dataType&&10!==e[0].dataType&&6!==e[0].dataType&&12!==e[0].dataType)throw new Error("Tile only support float, float16, int32, and uint32 data types");if(7!==e[1].dataType)throw new Error("Tile `repeats` input should be of int64 data type");if(1!==e[1].dims.length)throw new Error("Tile `repeats` input should be 1-D");if(Qi(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Zi=(e,t)=>{const n=[];for(let r=0;r<e.length;++r)n.push(e[r]*t[r]);return n},Ji=(e,t)=>{const n=e[0].dims,r=null==t?Qi(e[1]):t,s=Zi(n,r),i=bt.size(s),o=e[0].dataType,a=Bt("input",o,n.length),l=Ot("output",o,s.length);return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:[{type:12,data:i},...Ct(e[0].dims,s)]}),getShaderSource:e=>`\n      const inputShape = ${a.indices(...n)};\n      ${e.registerUniform("output_size","u32").declareVariables(a,l)}\n      ${e.mainStart()}\n      ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n      let output_indices = ${l.offsetToIndices("global_idx")};\n      var input_indices: ${a.type.indices};\n      for (var i = 0; i < ${n.length}; i++) {\n        let input_dim_i = ${a.indicesGet("uniforms.input_shape","i")};\n        let input_dim_value = ${l.indicesGet("output_indices","i")}  % input_dim_i;\n\n        ${a.indicesSet("input_indices","i","input_dim_value")}\n      }\n      ${l.setByOffset("global_idx",a.getByIndices("input_indices"))}\n    }`}},eo=e=>{Yi(e.inputs),e.compute(Ji(e.inputs),{inputs:[0]})}}}),Ul=N({"web/lib/wasm/jsep/webgpu/ops/group-query-attention.ts"(){sl(),cl(),ul(),_l(),pl(),ql(),Gl(),hl(),to=(e,t)=>{const n=e[0],r=e[1],s=e[2],i=e[3],o=e[4];if(3!==n.dims.length&&5!==n.dims.length)throw new Error("Input query is expected to have 3 or 5 dimensions");const a=n.dims[0],l=n.dims[1],d=3===n.dims.length?n.dims[2]:t.numHeads*n.dims[4];let u=l,c=0,p=0;const h=Math.floor(d/t.numHeads),m=i&&0!==i.dims.length,f=o&&0!==o.dims.length;if(m&&f){if(4!==i.dims.length)throw new Error('Input "past_key" is expected to have 4 dimensions');if(4!==o.dims.length)throw new Error('Input "past_value" is expected to have 4 dimensions');c=i.dims[1],p=i.dims[1]}else if(m||f)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let g;if(r){if(3!==n.dims.length)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(r.dims.length<3||r.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(n.dims[0]!==r.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(3===r.dims.length){if(n.dims[2]%r.dims[2]!=0)throw new Error('Dimension 2 of "query" should be a multiple of "key"');g=2,u=r.dims[1]}else if(5===r.dims.length){if(r.dims[2]!==t.numHeads||2!==r.dims[3]||r.dims[4]!==h)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(s)throw new Error('Expect "value" be none when "key" has packed kv format.');g=5,u=r.dims[1]}else{if(r.dims[1]!==t.numHeads||r.dims[3]!==h)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');g=0,u=r.dims[2]}}else{if(3!==n.dims.length&&5!==n.dims.length)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(5===n.dims.length&&(n.dims[2]!==t.numHeads||3!==n.dims[3]))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');g=3}let _=!1,w=d;if(s){if(3!==s.dims.length&&4!==s.dims.length)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(n.dims[0]!==s.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(3===s.dims.length){if(u!==s.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');w=s.dims[2]}else{if(u!==s.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');w=s.dims[1]*s.dims[3],_=!0}}return{batchSize:a,sequenceLength:l,pastSequenceLength:c,kvSequenceLength:u,totalSequenceLength:c+u,maxSequenceLength:p,inputHiddenSize:0,hiddenSize:d,vHiddenSize:w,headSize:h,vHeadSize:Math.floor(w/t.kvNumHeads),numHeads:t.numHeads,kvNumHeads:t.kvNumHeads,nReps:t.numHeads/t.kvNumHeads,pastPresentShareBuffer:!1,maskType:0,scale:t.scale,broadcastResPosBias:!1,passPastInKv:_,qkvFormat:g,isPastkvBSNH:true}},no=(e,t,n,r)=>{const s=[r.batchSize,r.totalSequenceLength,r.kvNumHeads,r.headSize],i=bt.size(s)/4,o=r.totalSequenceLength,a=Ot("present_kv",n,s.length,4),l=Bt("new_kv",e.dataType,e.dims.length,4),d=t?Bt("past_kv",t.dataType,t.dims.length,4):void 0,u=Math.ceil(r.headSize/4),c={x:o,y:e.dims[0],z:1},p=t?["rank","rank"]:["rank"],h=[{type:12,data:i},{type:12,data:r.pastSequenceLength},{type:12,data:r.kvSequenceLength},{type:12,data:r.totalSequenceLength}],m=[l];d?(h.push(...Ct(e.dims),...Ct(t.dims),...Ct(s)),m.push(d)):h.push(...Ct(e.dims),...Ct(s));const f=[{name:"output_size",type:"u32"},{name:"past_seqlen",type:"u32"},{name:"new_seqlen",type:"u32"},{name:"present_seqlen",type:"u32"}],g="      let new_batch_stride = uniforms.new_seqlen * num_heads * H;\n        let new_row_stride = num_heads * H;\n        let new_head_stride = H;\n        let in_offset = b * new_batch_stride + (s - past_seqlen) * new_row_stride + n * new_head_stride + h;\n        present_kv[out_offset] = new_kv[in_offset];",_=t?`if (s < past_seqlen) {\n              let past_batch_stride = uniforms.past_seqlen * num_heads * H;\n        var past_head_stride = uniforms.past_seqlen * H;\n        if (is_bsnh) {\n          past_head_stride = H;\n        }\n        let in_offset = b * past_batch_stride + s * row_stride + n * past_head_stride + h;\n        present_kv[out_offset] = past_kv[in_offset];\n        } else if (s < past_seqlen + uniforms.new_seqlen) {\n        ${g}\n        }`:`if (s < past_seqlen + uniforms.new_seqlen) {\n          ${g}\n        }`;return{name:"ConcatPastNew",shaderCache:{hint:`${r.kvNumHeads}${u}${!!t}`,inputDependencies:p},getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:c,programUniforms:h}),getShaderSource:e=>`\n\n  ${e.registerUniforms(f).declareVariables(...m,a)}\n  ${e.mainStart([u,r.kvNumHeads,1])}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    var indices = ${a.offsetToIndices("global_idx")};\n    let h = local_id.x;\n    let n = local_id.y;\n    let s = workgroup_id.x;\n    let b = workgroup_id.y;\n    let num_heads = ${r.kvNumHeads}u;\n    let H = ${u}u;\n\n    let present_seqlen = uniforms.present_seqlen;\n    let present_batch_stride = present_seqlen * num_heads * H;\n    var row_stride = H;\n    let is_bsnh = ${r.isPastkvBSNH};\n\n    if (is_bsnh) {\n      row_stride = num_heads * H;\n    }\n    var present_head_stride = present_seqlen * H;\n    if (is_bsnh) {\n      present_head_stride = H;\n    }\n\n    let past_seqlen = uniforms.past_seqlen;\n\n    let out_offset = b * present_batch_stride + s * row_stride + n * present_head_stride + h;\n    ${_}\n  }`}},ro=e=>gt({...e}),so=gt({perm:[0,2,1,3]}),io=(e,t,n,r,s)=>{let i=t;const o=r.kvNumHeads,a=r.nReps;return 3===t.dims.length&&0!==r.kvSequenceLength&&(i=t.reshape([r.batchSize,r.kvSequenceLength,o,r.headSize])),i=n?e.compute(no(i,n,i.dataType,r),{inputs:[i,n],outputs:[r.isPastkvBSNH?s:-1]})[0]:e.compute(no(i,void 0,i.dataType,r),{inputs:[i],outputs:[r.isPastkvBSNH?s:-1]})[0],1!==a&&(i=e.compute(Ji([i],[1,1,1,a]),{inputs:[i],outputs:[-1]})[0],i=i.reshape([r.batchSize,r.totalSequenceLength,o*a,r.headSize])),e.compute(Ut(i,so.perm),{inputs:[i],outputs:[-1]})[0]},oo=(e,t)=>{const n=to(e.inputs,t);if(5===e.inputs[0].dims.length)throw new Error("Packed QKV is not implemented");if(5===e.inputs[1]?.dims.length)throw new Error("Packed KV is not implemented");const r=Ki(e,n.batchSize,n.numHeads,n.sequenceLength,n.headSize,e.inputs[0],void 0,0),s=e.inputs[3]&&0!==e.inputs[3].dims.length?e.inputs[3]:void 0,i=e.inputs[4]&&0!==e.inputs[4].dims.length?e.inputs[4]:void 0,o=io(e,e.inputs[1],s,n,1),a=io(e,e.inputs[2],i,n,2);Qn(e,r,o,a,void 0,void 0,void 0,void 0,void 0,n,t)}}}),Wl=N({"web/lib/wasm/jsep/webgpu/ops/instance-norm.ts"(){sl(),cl(),pl(),ao=(e,t)=>{const n=e[0].dims,r=n,s=bt.sizeToDimension(n,2),i=bt.sizeFromDimension(n,2),o=Pt(i),a=i/o,l=[n[0],n[1],a],d=[{type:12,data:i},{type:12,data:a}];d.push(...Ct(l,l));return{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${o}`,inputDependencies:["rank","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:s},programUniforms:d}),getShaderSource:n=>{const r=Bt("x",e[0].dataType,l.length,o),s=Bt("scale",e[1].dataType,e[1].dims),i=Bt("bias",e[2].dataType,e[2].dims),a=Ot("output",e[0].dataType,l.length,o),d=[r,s,i,a],u=r.type.value,c=1===o?"f32":`vec${o}<f32>`;return`\n  var<workgroup> meanShared : f32;\n  var<workgroup> squaredNormShared : f32;\n  var<workgroup> workgroupShared : array<${c}, 64>;\n  const workgroupSize = 64u;\n  ${n.registerUniforms([{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}]).declareVariables(...d)}\n  ${n.mainStart(64)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / uniforms.x_shape[1];\n    let channel = norm % uniforms.x_shape[1];\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial = ${c}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      initial = initial + ${c}(${r.get("batch","channel","h")});\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = ${At("workgroupShared[0]",o)} / f32(uniforms.normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = ${c}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let deviation =  ${c}(${r.get("batch","channel","h")}) - ${c}(meanShared);\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = ${At("workgroupShared[0]",o)};\n    }\n    workgroupBarrier();\n\n    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));\n    let channelScale = invStdDev * f32(${s.getByOffset("channel")});\n    let channelShift = f32(${i.getByOffset("channel")}) - meanShared * channelScale;\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let value = ${r.get("batch","channel","h")} * ${u}(${c}(channelScale)) + ${u}(${c}(channelShift));\n      ${a.set("batch","channel","h","value")};\n    }\n  }`}}},lo=(e,t,n,r,s,i,o,a)=>{const l=Pt(o),d=64,u=1===l?"vec2f":`mat2x${l}f`,c=1===l?"f32":`vec${l}f`,p=(e,t)=>`${u}(${e}, ${t})`,h=s*o/l,m=[{type:12,data:Math.ceil(i/d)},{type:12,data:i},{type:12,data:Math.floor(o/l)},{type:12,data:Math.floor(i*o/l)}],f=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${l}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:[s,o,d,2],dataType:1}],dispatchGroup:{x:s*o/l},programUniforms:m}),getShaderSource:e=>{const n=Bt("input",t.dataType,t.dims,l);return`\n  ${e.declareVariables(n)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${u}>;\n  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};\n  @group(0) @binding(2) var<uniform> uniforms: Uniforms;\n\n  ${e.mainStart(d)}\n    let currentImageNumber = global_idx / 64 / uniforms.C;\n    let currentChannelNumber = (global_idx / 64) % uniforms.C;\n    let wgOffset = local_id.x * uniforms.wg_size;\n    if (wgOffset >= uniforms.H) {\n        return;\n    }\n    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);\n\n    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;\n    var sum = ${Et("f32",l)};\n    var squaredSum = ${Et("f32",l)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${c}(input[offset + i * uniforms.C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${p("sum","squaredSum")};\n  }`}},{inputs:[t],outputs:[-1]})[0],g=[{type:12,data:h},{type:12,data:i},{type:12,data:Math.floor(o/l)},{type:12,data:Math.floor(d*o/l)}];return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${l};${a}`,inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:[s,o,2],dataType:1}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:g}),getShaderSource:e=>{const t=Bt("scale",n.dataType,n.dims,l),s=Bt("bias",r.dataType,r.dims,l);return`\n  @group(0) @binding(0) var<storage, read> input : array<${u}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${t.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${s.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${u}>;\n  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};\n  @group(0) @binding(4) var<uniform> uniforms: Uniforms;\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}\n    let currentImageNumber = global_idx / uniforms.C;\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let offset = currentImageNumber * uniforms.image_size;\n    var sum = ${Et("f32",l)};\n    var squaredSum = ${Et("f32",l)};\n    for (var i: u32 = 0; i < min(64, uniforms.H); i++) {\n        let value = input[offset + i + currentChannelNumber * 64];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(uniforms.H);\n    squaredSum = squaredSum / f32(uniforms.H);\n    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${a}));\n    let channelScale = invStdDev * ${c}(scale[currentChannelNumber]);\n    let channelShift = ${c}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${p("channelScale","channelShift")};\n  }`}},{inputs:[f,n,r],outputs:[-1]})[0]},uo=(e,t,n)=>{const r=t[0].dims,s=r,i=r[0],o=r[r.length-1],a=bt.sizeFromDimension(r,1)/o,l=Pt(o),d=bt.size(s)/l,u=[{type:12,data:a},{type:12,data:Math.floor(o/l)}],c=lo(e,t[0],t[1],t[2],i,a,o,n.epsilon);e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${l}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:s,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:u}),getShaderSource:e=>{const n=$t(t[0].dataType),r=1===l?"vec2f":`mat2x${l}f`,i=1===l?n:`vec${l}<${n}>`,o=Bt("input",t[0].dataType,t[0].dims,l),a=Ot("output",t[0].dataType,s,l);return`\n  @group(0) @binding(0) var<storage, read> input : array<${o.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${r}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${a.type.storage}>;\n  struct Uniforms {H: u32, C : u32};\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\n\n  ${e.mainStart()}\n    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${i}(scale[0]), ${i}(scale[1]));\n  }`}},{inputs:[t[0],c]})},co=(e,t)=>{"NHWC"===t.format?uo(e,e.inputs,t):e.compute(ao(e.inputs,t))}}}),Hl=N({"web/lib/wasm/jsep/webgpu/ops/layer-norm.ts"(){sl(),cl(),pl(),po=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},ho=(e,t,n)=>{const r=t.simplified,s=e[0].dims,i=e[1],o=!r&&e[2],a=s,l=bt.normalizeAxis(t.axis,s.length),d=bt.sizeToDimension(s,l),u=bt.sizeFromDimension(s,l),c=bt.size(i.dims),p=o?bt.size(o.dims):0;if(c!==u||o&&p!==u)throw new Error(`Size of X.shape()[axis:] == ${u}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${c} and bias size of ${p}`);const h=[];for(let e=0;e<s.length;++e)e<l?h.push(s[e]):h.push(1);const m=Pt(u),f=["type","type"],g=[{type:12,data:d},{type:1,data:u},{type:12,data:Math.floor(u/m)},{type:1,data:t.epsilon}];o&&f.push("type");const _=n>1,w=n>2,b=[{dims:a,dataType:e[0].dataType}];return _&&b.push({dims:h,dataType:1}),w&&b.push({dims:h,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${m};${n};${r}`,inputDependencies:f},getRunData:()=>({outputs:b,dispatchGroup:{x:Math.ceil(d/64)},programUniforms:g}),getShaderSource:t=>{const n=$t(e[0].dataType),s=[Bt("x",e[0].dataType,e[0].dims,m),Bt("scale",i.dataType,i.dims,m)];o&&s.push(Bt("bias",o.dataType,o.dims,m)),s.push(Ot("output",e[0].dataType,a,m)),_&&s.push(Ot("mean_data_output",1,h)),w&&s.push(Ot("inv_std_output",1,h));return`\n  ${t.registerUniforms([{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}]).declareVariables(...s)}\n  ${t.mainStart()}\n    ${t.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}\n    let offset = global_idx * uniforms.norm_size_vectorized;\n    var mean_vector = ${Et("f32",m)};\n    var mean_square_vector = ${Et("f32",m)};\n\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\n      let value = ${Ft(n,m,"x[h + offset]")};\n      mean_vector += value;\n      mean_square_vector += value * value;\n    }\n    let mean = ${At("mean_vector",m)} / uniforms.norm_size;\n    let inv_std_dev = inverseSqrt(${At("mean_square_vector",m)} / uniforms.norm_size ${r?"":"- mean * mean"} + uniforms.epsilon);\n\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\n      let f32input = ${Ft(n,m,"x[j + offset]")};\n      let f32scale = ${Ft(n,m,"scale[j]")};\n      output[j + offset] = ${s[0].type.value}((f32input ${r?"":"- mean"}) * inv_std_dev * f32scale\n        ${o?`+ ${Ft(n,m,"bias[j]")}`:""}\n      );\n    }\n\n    ${_?"mean_data_output[global_idx] = mean":""};\n    ${w?"inv_std_output[global_idx] = inv_std_dev":""};\n  }`}}},mo=(e,t)=>{po(e.inputs),e.compute(ho(e.inputs,t,e.outputCount))}}}),Kl=N({"web/lib/wasm/jsep/webgpu/ops/matmulnbits.ts"(){sl(),cl(),ul(),pl(),fo=(e,t)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");const n=e[0],r=n.dims.length;if(n.dims[r-1]!==t.k)throw new Error("The last dim of input shape does not match the k value");const s=Math.floor((t.k+t.blockSize-1)/t.blockSize),i=t.blockSize/8*t.bits,o=e[1];if(!bt.areEqual(o.dims,[t.n,s,i]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");const a=e[2].dims;if(bt.size(a)!==t.n*s)throw new Error("scales input size error.");if(4===e.length){const n=e[3].dims,r=t.bits>4?t.n*s:t.n*Math.floor((s+1)/2);if(bt.size(n)!==r)throw new Error("zeroPoints input size error.")}},go=(e,t,n,r)=>{const s=e[0].dims,i=s.length,o=Math.floor((t.k+t.blockSize-1)/t.blockSize),a=s[i-2],l=t.k,d=t.n,u=s.slice(0,i-2),c=bt.size(u),p=t.blockSize/8*t.bits/4,h=e[0].dataType,m=Pt(a),f=Pt(t.k),g=Pt(p),_=We(h),w=a*o*_,b=Math.floor(r/w),y=o<=n[0]&&b>0,v=!y||b>=4?Pt(d):b>=2&&Pt(d)>=2?2:1,x=u.concat([a,d]),M=bt.size(x)/v/m,T=y?[]:[{type:12,data:M},{type:12,data:t.blockSize}],k=[c,a,l/f],$=bt.convertShape(e[1].dims).slice();$.splice(-1,1,p/g),T.push(...Ct(k)),T.push(...Ct($)),T.push(...Ct(e[2].dims)),4===e.length&&T.push(...Ct(bt.convertShape(e[3].dims)));const S=[c,a,d/v];T.push(...Ct(S));return{name:y?"BlockwiseMatMulNBits":"MatMulNBits",shaderCache:{hint:`${t.cacheKey};${a};${h};${e.length}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:x,dataType:h}],name:y?"BlockwiseMatMulNBits":"MatMulNBits",dispatchGroup:y?{x:1,y:Math.ceil(d/v),z:c}:{x:Math.ceil(M/64)},programUniforms:T}),getShaderSource:n=>{const r=k.length,s=Bt("a",e[0].dataType,r,f),i=Bt("b",12,$.length,g),l=Bt("scales",e[2].dataType,e[2].dims.length),u=[s,i,l],c=4===e.length?Bt("zero_points",12,e[3].dims.length):void 0;c&&u.push(c);const h=S.length,_=Ot("output",e[0].dataType,h,v),w=$t(e[0].dataType),b=(()=>{switch(f){case 1:return`array<${w}, 8>`;case 2:return`mat4x2<${w}>`;case 4:return`mat2x4<${w}>`;default:throw new Error(`${f}-component is not supported.`)}})(),x=`\n        for (var word: u32 = 0; word < ${p}; word += ${g}) {\n          ${i.indicesSet("b_indices","2","word")};\n          let b_data = ${i.getByIndices("b_indices")};\n          for (var i: u32 = 0; i < ${g}; i++) {\n            let b_value: u32 = ${1===g?"b_data":"b_data[word + i]"};\n            let b_mask: u32 = 0x0F0F0F0Fu;\n            let b_value_lower: vec4<u32> = unpack4xU8(b_value & b_mask);\n            let b_value_upper: vec4<u32> = unpack4xU8((b_value >> 4) & b_mask);\n            let b_quantized_values = ${b}(${Array.from({length:4},((e,t)=>`${w}(b_value_lower[${t}]), ${w}(b_value_upper[${t}])`)).join(", ")});\n            let b_dequantized_values = ${1===f?`${b}(${Array.from({length:8},((e,t)=>`(b_quantized_values[${t}] - zero_point) * scale`)).join(", ")});`:`(b_quantized_values - ${b}(${Array(8).fill("zero_point").join(",")})) * scale;`};\n            // Number of B elements per 32-bit word is 32/bits = 32/4 = 8\n            for (var m: u32 = 0; m < ${y?a:m}u; m++) {\n              ${s.indicesSet("a_indices",r-2,y?"m":`row * ${m} + m`)};\n              ${s.indicesSet("a_indices",r-1,"word_offset")};\n              var input_offset = ${s.indicesToOffset("a_indices")};\n              var a_data: ${b};\n              for (var j: u32 = 0; j < ${8/f}; j++) {\n                a_data[j] = ${s.getByOffset("input_offset")};\n                input_offset++;\n              }\n              ${y?"workgroup_shared[workgroup_shared_offset + m]":"output_values[m]"}${v>1?"[c]":""} += ${Array.from({length:8/f},((e,t)=>""+(1===f?`a_data[${t}] * b_dequantized_values[${t}]`:`dot(a_data[${t}], b_dequantized_values[${t}])`))).join(" + ")};\n            }\n            word_offset += ${8/f};\n          }\n        }`,M=c?`\n          zero_point_offset += 4;\n          if (zero_point_offset == 32) {\n            zero_point_offset = 0;\n            zero_point_index++;\n            zero_point_word = ${c.getByOffset("zero_point_index")};\n          }`:"";return y?`\n        var<workgroup> workgroup_shared: array<${_.type.value}, ${a*o}>;\n        ${n.declareVariables(...u,_)}\n        ${n.mainStart([o,1,1])}\n          var a_indices: ${s.type.indices};\n          var block = local_id.x;\n          var col = workgroup_id.y;\n          var batch = workgroup_id.z;\n          ${s.indicesSet("a_indices","0","batch")};\n          // Two zero points are packed into one byte when uniforms.bits is 4.\n          for (var c: u32 = 0; c < ${v}; c++) {\n            let col_times_components_plus_c = col * ${v} + c;\n              ${c?`\n            var zero_point_bytes_per_col: u32 = (${o} + 1) / 2;\n            var zero_point_byte_count: u32 = col_times_components_plus_c * zero_point_bytes_per_col + (block >> 0x1u);\n            var zero_point_word_index: u32 = zero_point_byte_count >> 0x2u;\n            var zero_point_byte_offset: u32 = zero_point_byte_count & 0x3u;\n            var zero_point_nibble_offset: u32 = block & 0x1u;\n            var zero_point_bits_offset: u32 = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);\n            var zero_point_word: u32 = ${c.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;`:""}\n            var b_indices: ${i.type.indices};\n            ${i.indicesSet("b_indices","0","col_times_components_plus_c")};\n            // The scale and zero points are computed per block.\n            var scales_index = col_times_components_plus_c * ${o} + block;\n            let scale = ${l.getByOffset("scales_index")};\n            // The default zero point is 8 for unsigned 4-bit quantization.\n            let zero_point = ${w}(${c?"(zero_point_word) & 0xFu":8});\n            ${i.indicesSet("b_indices","1","block")};\n            var word_offset: u32 = block * ${t.blockSize/f};\n            var workgroup_shared_offset: u32 = block * ${a};\n            ${x}\n          }\n          workgroupBarrier();\n          var output_indices: ${_.type.indices};\n          var elements_per_thread: u32 = ${Math.ceil(a/o)};\n          ${_.indicesSet("output_indices","0","batch")};\n          ${_.indicesSet("output_indices",h-1,"col")};\n          ${_.indicesSet("output_indices",h-2,"local_id.x * elements_per_thread")};\n          var output_offset = ${_.indicesToOffset("output_indices")};\n          for (var m: u32 = 0u; m < elements_per_thread; m++) {\n            var row = m + local_id.x * elements_per_thread;\n            if (row < ${a}) {\n              var output_value: ${_.type.value} = ${_.type.value}(0);\n              var workgroup_shared_offset: u32 = row;\n              for (var b: u32 = 0u; b < ${o}u; b++) {\n                output_value += workgroup_shared[workgroup_shared_offset];\n                workgroup_shared_offset += ${a};\n              }\n              ${_.setByOffset("output_offset","output_value")};\n              output_offset += ${d/v};\n            }\n          }\n        }`:`\n        ${n.registerUniforms([{name:"output_size",type:"u32"},{name:"block_size",type:"u32"}]).declareVariables(...u,_)}\n        ${n.mainStart()}\n          ${n.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var output_values: array<${_.type.value}, ${m}>;\n          var output_indices = ${_.offsetToIndices("global_idx")};\n          var col = ${_.indicesGet("output_indices",h-1)};\n          var row = ${_.indicesGet("output_indices",h-2)};\n          var a_indices: ${s.type.indices} = output_indices;\n          // Two zero points are packed into one byte because uniforms.bits <= 4.\n          // zero_point_offset is either 0 or 4. It is bit offset within one byte.\n          // TODO support zero_point_offset for bits > 4\n          ${c?`\n          var zero_point_abs_offset = col * ${v} * ((${o} + 1) / 2);\n          var zero_point_index: u32 = zero_point_abs_offset / 4;\n          var zero_point_word: u32 = ${c.getByOffset("zero_point_index")};\n          var zero_point_offset: u32 = (zero_point_abs_offset % 4) * 8;`:""}\n          var scale_index = col * ${o*v};\n          var b_indices: ${i.type.indices};\n          for (var c: u32 = 0; c < ${v}; c++) {\n            ${i.indicesSet("b_indices","0",`col * ${v} + c`)};\n            var block_offset: u32 = 0;\n            for (var block: u32 = 0; block < ${o}; block++) {\n              // The scale and zero points are computed per block.\n              let scale = ${l.getByOffset("scale_index")};\n              // The default zero point is 8 for unsigned 4-bit quantization.\n              let zero_point = ${w}(${c?"extractBits(zero_point_word, zero_point_offset, 4)":8});\n              ${i.indicesSet("b_indices","1","block")};\n              var word_offset: u32 = block_offset;\n              ${x}\n              scale_index++;\n              ${M}\n              block_offset += uniforms.block_size / ${f};\n            }\n            // Drop the trailing 4 bits if the zero_poit_offset is not a byte boundary to align with the next byte.\n            ${c?`if (zero_point_offset % 8 > 0) {\n                ${M}\n              }`:""}\n            }\n            for (var k: u32 = 0u; k < ${m}u; k++) {\n              ${_.indicesSet("output_indices",h-2,`${m} * row + k`)};\n              ${_.setByIndices("output_indices","output_values[k]")}\n            }\n        }`}}},_o=(e,t)=>{fo(e.inputs,t);const n=e.getMaxComputeWorkgroupSizes(),r=e.getMaxComputeWorkgroupStoragesize();e.compute(go(e.inputs,t,n,r))},wo=e=>gt(e)}}),Xl=N({"web/lib/wasm/jsep/webgpu/ops/pad.ts"(){sl(),cl(),pl(),bo=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(1!==e[0].dataType&&10!==e[0].dataType)throw new Error("Input type must be float or float16.");if(e.length>=2){let t=2*e[0].dims.length===e[1].dims[0];if(4===e.length&&(t=2*e[3].dims[0]===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},yo=(e,t,n)=>{let r="";for(let s=t-1;s>=0;--s)r+=`\n            k = i32(${e.indicesGet("indices",s)}) - ${It("uniforms.pads",s,n)};\n            if (k < 0) {\n              break;\n            }\n            if (k >= i32(${It("uniforms.x_shape",s,t)})) {\n              break;\n            }\n            offset += k * i32(${It("uniforms.x_strides",s,t)});\n        `;return`\n          value = ${e.type.value}(uniforms.constant_value);\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${r}\n            value = x[offset];\n          }\n      `},vo=(e,t,n)=>{let r="";for(let s=t-1;s>=0;--s)r+=`\n                k = i32(${e.indicesGet("indices",s)}) - ${It("uniforms.pads",s,n)};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = 2 * (i32(${It("uniforms.x_shape",s,t)}) - 1);\n                  k = k % _2n_1;\n                  if(k >= i32(${It("uniforms.x_shape",s,t)})) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * i32(${It("uniforms.x_strides",s,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${r}\n              value = x[offset];\n          `},xo=(e,t,n)=>{let r="";for(let s=t-1;s>=0;--s)r+=`\n                k = i32(${e.indicesGet("indices",s)}) - ${It("uniforms.pads",s,n)};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= i32(${It("uniforms.x_shape",s,t)})) {\n                  k = i32(${It("uniforms.x_shape",s,t)}) - 1;\n                }\n                offset += k * i32(${It("uniforms.x_strides",s,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${r}\n              value = x[offset];\n          `},Mo=(e,t,n)=>{let r="";for(let s=t-1;s>=0;--s)r+=`\n                k = i32(${e.indicesGet("indices",s)}) - ${It("uniforms.pads",s,n)};\n                if (k < 0)  {\n                  k += i32(${It("uniforms.x_shape",s,t)}]);\n                }\n                if (k >= i32(${It("uniforms.x_shape",s,t)})) {\n                  k -= i32(${It("uniforms.x_shape",s,t)});\n                }\n                offset += k * i32(${It("uniforms.x_strides",s,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${r}\n              value = x[offset];\n          `},To=(e,t,n)=>{switch(n.mode){case 0:return yo(e,t,n.pads.length);case 1:return vo(e,t,n.pads.length);case 2:return xo(e,t,n.pads.length);case 3:return Mo(e,t,n.pads.length);default:throw new Error("Invalid mode")}},ko=(e,t)=>{const n=bt.padShape(e[0].dims.slice(),t.pads),r=e[0].dims,s=[{type:12,data:bt.size(n)},{type:6,data:t.pads}];0===t.mode&&s.push({type:e[0].dataType,data:t.value}),s.push(...Ct(e[0].dims,n));return{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(bt.size(n)/64)},programUniforms:s}),getShaderSource:s=>{const i=Ot("output",e[0].dataType,n.length),o=Bt("x",e[0].dataType,r.length),a=o.type.value,l=To(i,r.length,t),d=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return 0===t.mode&&d.push({name:"constant_value",type:a}),`\n            ${s.registerUniforms(d).declareVariables(o,i)}\n            ${s.mainStart()}\n            ${s.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n            let indices = ${i.offsetToIndices("global_idx")};\n\n            var value = ${a}(0);\n            ${l}\n            output[global_idx] = value;\n        }`}}},$o=(e,t)=>{if(e.length>1){const n=e[1].getBigInt64Array(),r=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,s=e[0].dims.length,i=new Int32Array(2*s).fill(0);if(e.length>=4){const t=e[3].getBigInt64Array();for(let e=0;e<t.length;e++)i[Number(t[e])]=Number(n[e]),i[Number(t[e])+s]=Number(n[e+t.length])}else n.forEach(((e,t)=>i[Number(t)]=Number(e)));const o=[];return i.forEach((e=>o.push(e))),{mode:t.mode,value:r,pads:o}}return t},So=(e,t)=>{bo(e.inputs);const n=$o(e.inputs,t);e.compute(ko(e.inputs,n),{inputs:[0]})}}}),Ql=N({"web/lib/wasm/jsep/webgpu/ops/pool.ts"(){me(),sl(),cl(),pl(),Co=e=>{if(c.webgpu.validateInputContent&&(!e||1!==e.length))throw new Error("Pool ops requires 1 input.")},Po=(e,t,n)=>{const r="NHWC"===t.format,s=e.dims.slice();r&&s.splice(1,0,s.pop());const i=Object.hasOwnProperty.call(t,"dilations"),o=t.kernelShape.slice(),a=t.strides.slice(),l=i?t.dilations.slice():[],d=t.pads.slice();yt.adjustPoolAttributes(n,s,o,a,l,d);const u=yt.computePoolOutputShape(n,s,a,l,o,d,t.autoPad),c=Object.assign({},t);i?Object.assign(c,{kernelShape:o,strides:a,pads:d,dilations:l,cacheKey:t.cacheKey}):Object.assign(c,{kernelShape:o,strides:a,pads:d,cacheKey:t.cacheKey});const p=u.slice();return p.push(p.splice(1,1)[0]),[c,r?p:u]},Eo=(e,t)=>{const n="NHWC"===t.format,r=[{type:12,data:bt.size(e)},{type:12,data:bt.size(t.kernelShape)}],s=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){const e=t.kernelShape[t.kernelShape.length-1],n=t.strides[t.strides.length-1],i=t.pads[t.pads.length/2-1],o=t.pads[t.pads.length-1],a=!!(i+o);r.push({type:12,data:e},{type:12,data:n},{type:12,data:i},{type:12,data:o}),s.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let l=!1;if(2===t.kernelShape.length){const e=t.kernelShape[t.kernelShape.length-2],n=t.strides[t.strides.length-2],i=t.pads[t.pads.length/2-2],o=t.pads[t.pads.length-2];l=!!(i+o),r.push({type:12,data:e},{type:12,data:n},{type:12,data:i},{type:12,data:o}),s.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[r,s,!0,a,l]}{if(n)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");const e=bt.computeStrides(t.kernelShape);r.push({type:12,data:e},{type:12,data:t.pads},{type:12,data:t.strides}),s.push({name:"kernelStrides",type:"u32",length:e.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});return[r,s,!!t.pads.reduce(((e,t)=>e+t)),!1,!1]}},Fo=(e,t,n,r,s,i,o,a,l,d,u,c)=>{const p="NHWC"===s.format,h=t.type.value,m=Ot("output",t.type.tensor,r);if(s.kernelShape.length<=2){let r="",d="",f="";const g=n-(p?2:1);if(r=u?`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${g}] = indices[${g}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${g}] < 0 || xIndices[${g}]\n                      >= uniforms.x_shape[${g}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${i}\n                }`:`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${g}] = indices[${g}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${i}\n                }`,2===s.kernelShape.length){const e=n-(p?3:2);d=c?`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${e}] = indices[${e}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${e}] < 0 || xIndices[${e}] >= uniforms.x_shape[${e}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `:`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${e}] = indices[${e}] * uniforms.sh - uniforms.phStart + j;\n                `,f="\n              }\n            "}return`\n            ${e.registerUniforms(l).declareVariables(t,m)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n              let indices = ${m.offsetToIndices("global_idx")};\n              var xIndices = ${m.offsetToIndices("global_idx")};\n\n              var value = ${h}(${a});\n              var pad = 0;\n              ${d}\n              ${r}\n              ${f}\n              ${o}\n\n              output[global_idx] = value;\n            }`}{if(p)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");const r=s.kernelShape.length,u=s.pads.length;let c="";c=d?`\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset("xIndices")}];\n                ${i}\n              }`:`\n              }\n              let x_val = x[${t.indicesToOffset("xIndices")}];\n              ${i}\n            `;return`\n            ${e.registerUniforms(l).declareVariables(t,m)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n              let indices = ${m.offsetToIndices("global_idx")};\n              var xIndices = ${m.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${r}>;\n\n              var value = ${h}(${a});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${r-1}u; j++) {\n                  offsets[j] = offset / ${It("uniforms.kernelStrides","j",r)};\n                  offset -= offsets[j] * ${It("uniforms.kernelStrides","j",r)};\n                }\n                offsets[${r-1}] = offset;\n\n                isPad = false;\n                for (var j = ${n-r}u; j < ${n}u; j++) {\n                  xIndices[j] = indices[j] * ${It("uniforms.strides",`j - ${n-r}u`,r)}\n                    + offsets[j - ${n-r}u] - ${It("uniforms.pads","j - 2u",u)};\n                  ${c}\n              }\n              ${o}\n\n              output[global_idx] = value;\n            }`}},Ao=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,Io=e=>`${Ao(e)};${e.countIncludePad}`,zo=e=>`${Ao(e)};${e.storageOrder};${e.dilations}`,Bo=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Oo=(e,t,n,r)=>{const[s,i]=Po(t,r,n),o=Bt("x",t.dataType,t.dims.length),a=o.type.value;let l="";s.countIncludePad?l+=`value /= ${a}(uniforms.kernelSize);`:l+=`value /= ${a}(i32(uniforms.kernelSize) - pad);`;const[d,u,c,p,h]=Eo(i,s);d.push(...Ct(t.dims,i));return{name:e,shaderCache:{hint:`${r.cacheKey};${c};${p};${h}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:i,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(bt.size(i)/64)},programUniforms:d}),getShaderSource:e=>Fo(e,o,t.dims.length,i.length,s,"value += x_val;",l,0,u,c,p,h)}},Lo=e=>{const t=0!==e.count_include_pad,n=Bo(e);if(0!==n.ceilMode)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");const r={countIncludePad:t,...n,cacheKey:""};return{...r,cacheKey:Io(r)}},Do=(e,t)=>{Co(e.inputs),e.compute(Oo("AveragePool",e.inputs[0],!1,t))},Ro={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},No=e=>{const t=e.format;return{format:t,...Ro,cacheKey:t}},Vo=(e,t)=>{Co(e.inputs),e.compute(Oo("GlobalAveragePool",e.inputs[0],!0,t))},jo=(e,t,n,r)=>{const[s,i]=Po(t,r,n),o=Bt("x",t.dataType,t.dims.length),[a,l,d,u,c]=Eo(i,s);return a.push(...Ct(t.dims,i)),{name:e,shaderCache:{hint:`${r.cacheKey};${d};${u};${c}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:i,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(bt.size(i)/64)},programUniforms:a}),getShaderSource:e=>Fo(e,o,t.dims.length,i.length,s,"\n      value = max(x_val, value);\n    ","",10===t.dataType?-65504:-1e5,l,d,u,c)}},qo=(e,t)=>{Co(e.inputs),e.compute(jo("MaxPool",e.inputs[0],!1,t))},Go=e=>{const t=e.storage_order,n=e.dilations,r=Bo(e);if(0!==t)throw new Error("column major storage order is not yet supported for MaxPool");if(0!==r.ceilMode)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");const s={storageOrder:t,dilations:n,...r,cacheKey:""};return{...s,cacheKey:zo(s)}},Uo=e=>{const t=e.format;return{format:t,...Ro,cacheKey:t}},Wo=(e,t)=>{Co(e.inputs),e.compute(jo("GlobalMaxPool",e.inputs[0],!0,t))}}}),Yl=N({"web/lib/wasm/jsep/webgpu/ops/range.ts"(){me(),sl(),pl(),Ho=(e,t,n)=>{if(e===t||e<t&&n<0||e>t&&n>0)throw new Error("Range these inputs' contents are invalid.")},Ko=(e,t,n,r)=>{const s=Math.abs(Math.ceil((t-e)/n)),i=[s],o=s,a=[{type:12,data:o},{type:r,data:e},{type:r,data:n},...Ct(i)];return{name:"Range",shaderCache:{hint:`${r}`},getShaderSource:e=>{const t=Ot("output",r,i.length),n=t.type.value,s=[{name:"outputSize",type:"u32"},{name:"start",type:n},{name:"delta",type:n}];return`\n        ${e.registerUniforms(s).declareVariables(t)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        output[global_idx] = uniforms.start + ${n}(global_idx) * uniforms.delta;\n      }`},getRunData:()=>({outputs:[{dims:i,dataType:r}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:a})}},Xo=e=>{let t=0,n=0,r=0;6===e.inputs[0].dataType?(t=e.inputs[0].getInt32Array()[0],n=e.inputs[1].getInt32Array()[0],r=e.inputs[2].getInt32Array()[0]):1===e.inputs[0].dataType&&(t=e.inputs[0].getFloat32Array()[0],n=e.inputs[1].getFloat32Array()[0],r=e.inputs[2].getFloat32Array()[0]),c.webgpu.validateInputContent&&Ho(t,n,r),e.compute(Ko(t,n,r,e.inputs[0].dataType),{inputs:[]})}}}),Zl=N({"web/lib/wasm/jsep/webgpu/ops/resize.ts"(){sl(),cl(),ul(),pl(),Qo=(e,t)=>{if(e.every((e=>e>0||(()=>{throw new Error("Resize requires scales input values to be positive")}))),e.length>0)if("linear"===t.mode){if(!(2===e.length||3===e.length||4===e.length&&1===e[0]&&1===e[1]||4===e.length&&1===e[0]&&1===e[3]||5===e.length&&1===e[0]&&1===e[1]))throw new Error("For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1")}else if("cubic"===t.mode&&!(2===e.length||4===e.length&&1===e[0]&&1===e[1]||4===e.length&&1===e[0]&&1===e[3]))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")},Yo=(e,t,n)=>{t.every((e=>e>=0&&e<n||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")})));const r=new Array(n).fill(1);return t.forEach(((t,n)=>r[t]=e[n])),r},Zo=(e,t,n,r,s,i)=>{const[o,a,l]=n>10?[1,2,3]:[-1,e.length>1?1:-1,-1],d=e[0].dims.length;if(o>0&&e.length>o&&e[o].dims.length>0)e[o].getFloat32Array().forEach((e=>i.push(e)));else if("tf_crop_and_resize"===t.coordinateTransformMode)throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(a>0&&e.length>a&&e[a].dims.length>0){if(e[a].getFloat32Array().forEach((e=>r.push(e))),0!==r.length&&r.length!==d&&n>=18&&r.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");Qo(r,t),t.axes.length>0&&Yo(r,t.axes,d).forEach(((e,t)=>r[t]=e))}if(l>0&&e.length>l&&(e[l].getBigInt64Array().forEach((e=>s.push(Number(e)))),s.length!==d||n>=18&&s.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(r.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(s.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(void 0!==r&&void 0!==s&&r.length>0&&s.length>d)throw new Error("Resize requires only of scales or sizes to be specified")},Jo=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,\n     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {\n                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;\n                  } else {\n                    return 0.0;\n                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {\n                    return 0.0;\n                  } else {\n                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating\n                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\n                    // offset-by-one error later in floor().\n                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));\n                    let fract =\n                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);\n                    return whole + fract;\n                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {\n                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +\n                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /\n                        ${t}(lengthResized - 1);\n                  } else {\n                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);\n                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);\n                  const adjustment = ${t}(lengthResized) / outputWidth;\n                  const center = ${t}(lengthOriginal) / 2;\n                  const offset = center * (1 - adjustment);\n                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",ea=(e,t,n)=>`fn getNearestPixelFromOriginal(xOriginal: ${n}, isDownSample: bool) -> ${n} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",ta=(e,t,n)=>{const r=new Array(n).fill(0).concat(new Array(n).fill(1)),s=0===e.length?r:e.slice();return t.length>0?(t.forEach(((e,i)=>{r[e]=s[i],r[i+n]=s[t.length+i]})),r):s},na=(e,t,n,r)=>{let s=[];if(n.length>0)if(r.length>0){if(e.forEach((e=>s.push(e))),Math.max(...r)>e.length)throw new Error("axes is out of bound");r.forEach(((e,t)=>s[e]=n[t]))}else n.forEach((e=>s.push(e)));else{if(0===t.length)throw new Error("Resize requires either scales or sizes.");s=e.map(((e,n)=>Math.round(e*t[n])))}return s},ra=(e,t,n)=>{const r=(()=>{switch(n.keepAspectRatioPolicy){case"not_larger":return n.axes.length>0?Math.min(...n.axes.map((e=>t[e])),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return n.axes.length>0?Math.max(...n.axes.map((e=>t[e])),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${n.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);const s=e.slice();return n.axes.length>0?(n.axes.forEach((e=>t[e]=r)),n.axes.forEach((n=>s[n]=Math.round(e[n]*t[n])))):(t.fill(r,0,t.length),s.forEach(((e,n)=>s[n]=Math.round(e*t[n])))),s},sa=(e,t,n,r,s)=>`\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${n.length}> {\n      var original_indices: array<${e.type.value}, ${n.length}>;\n      for (var i:u32 = 0; i < ${n.length}; i++) {\n        var output_index = ${e.indicesGet("output_indices","i")};\n        var scale = ${It("uniforms.scales","i",r)};\n        var roi_low = ${It("uniforms.roi","i",s)};\n        var roi_hi = ${It("uniforms.roi",`i + ${t.length}`,s)};\n        if (scale == 1.0) {\n          original_indices[i] = ${e.type.value}(output_index);\n        } else {\n          var input_shape_i = ${It("uniforms.input_shape","i",t.length)};\n          var output_shape_i = ${It("uniforms.output_shape","i",n.length)};\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`,ia=(e,t,n,r,s,i,o)=>`\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n      var input_indices: ${e.type.indices};\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var output_index = ${t.indicesGet("output_indices","i")};\n        var input_index: u32;\n        var scale = ${It("uniforms.scales","i",s)};\n        if (scale == 1.0) {\n          input_index = output_index;\n        } else {\n          var roi_low = ${It("uniforms.roi","i",i)};\n          var roi_hi = ${It("uniforms.roi",`i + ${n.length}`,i)};\n          var input_shape_i = ${It("uniforms.input_shape","i",n.length)};\n          var output_shape_i = ${It("uniforms.output_shape","i",r.length)};\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${o} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {\n              input_index = input_shape_i - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${e.indicesSet("input_indices","i"," input_index")}\n      }\n      return input_indices;\n    }`,oa=(e,t)=>`\n    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var input_index = ${e.indicesGet("input_indices","i")};\n        if (input_index < 0 || input_index >= ${It("uniforms.input_shape","i",t.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`,aa=(e,t,n,r)=>e.rank>r?`\n    ${e.indicesSet("input_indices",t,"channel")};\n    ${e.indicesSet("input_indices",n,"batch")};\n`:"",la=(e,t,n,r,s)=>{const[i,o,a,l]=2===n.length?[-1,0,1,-1]:[0,2,3,1],d=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${d} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",o,`max(0, min(row, ${n[o]} - 1))`)};\n      ${e.indicesSet("input_indices",a,`max(0, min(col, ${n[a]} - 1))`)};\n      ${aa(e,l,i,2)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${d} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${d} = originalIndices[${o}];\n      var col:${d} = originalIndices[${a}];\n      ${r?`if (row < 0 || row > (${n[o]} - 1) || col < 0 || col > (${n[a]} - 1)) {\n        return ${s};\n      }`:""};\n      row = max(0, min(row, ${n[o]} - 1));\n      col = max(0, min(col, ${n[a]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = ${n.length>2?`u32(originalIndices[${l}])`:"0"};\n      var batch: u32 =  ${n.length>2?`u32(originalIndices[${i}])`:"0"};\n      var x11: ${d} = getInputValue(batch, channel, row1, col1);\n      var x12: ${d} = getInputValue(batch, channel, row1, col2);\n      var x21: ${d} = getInputValue(batch, channel, row2, col1);\n      var x22: ${d} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${d} = abs(row - ${d}(row1));\n      var dx2: ${d} = abs(${d}(row2) - row);\n      var dy1: ${d} = abs(col - ${d}(col1));\n      var dy2: ${d} = abs(${d}(col2) - col);\n      if (row1 == row2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (col1 == col2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},da=(e,t,n,r,s,i,o,a,l,d)=>{const u=2===n.length,[c,p]=u?[0,1]:[2,3],h=e.type.value,m=o=>{const u=o===c?"row":"col";return`\n      fn ${u}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${h} {\n        var output_index = ${t.indicesGet("output_indices",o)};\n        var originalIdx: ${h} = getOriginalCoordinateFromResizedCoordinate(output_index, ${s[o]},\n        ${r[o]}, ${n[o]}, ${i[o]}, ${i[o]} + ${n.length});\n        var fractOriginalIdx: ${h} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${a} && (originalIdx < 0 || originalIdx > (${n[o]} - 1))) {\n          return ${l};\n        }\n        var data: array<${h}, 4> = array<${h}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${u}: ${h} = originalIdx + ${h}(i);\n          if (${u} < 0 || ${u} >= ${n[o]}) {\n            ${d?"coefs[i + 1] = 0.0;\n                        continue;":a?`return ${l};`:`${u} = max(0, min(${u}, ${n[o]} - 1));`};\n          }\n        var input_indices_copy: ${e.type.indices} = input_indices;\n          ${e.indicesSet("input_indices_copy",o,`u32(${u})`)};\n          data[i + 1] = ${o===c?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${m(c)};\n    ${m(p)};\n  fn getCubicInterpolationCoefs(s: ${h}) -> array<${h}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${h}, 4> = array<${h}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${h} = 1.0 - absS;\n    var twoMinusAbsS: ${h} = 2.0 - absS;\n    var onePlusAbsS: ${h} = 1.0 + absS;\n    coeffs[0] = ((${o} * onePlusAbsS - 5 * ${o}) * onePlusAbsS + 8 * ${o}) * onePlusAbsS - 4 * ${o};\n    coeffs[1] = ((${o} + 2) * absS - (${o} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${o} + 2) * oneMinusAbsS - (${o} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${o} * twoMinusAbsS - 5 * ${o}) * twoMinusAbsS + 8 * ${o}) * twoMinusAbsS - 4 * ${o};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${h}, 4>, coefs: array<${h}, 4>) -> ${h} {\n    var coefsSum: ${h} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${h} {\n    var input_indices: ${e.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `},ua=(e,t,n,r,s)=>{const[i,o,a,l,d]=3===n.length?[-1,0,1,2,-1]:[0,2,3,4,1],u=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${u} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",o,`max(0, min(depth, ${n[o]} - 1))`)};\n      ${e.indicesSet("input_indices",a,`max(0, min(height, ${n[a]} - 1))`)};\n      ${e.indicesSet("input_indices",l,`max(0, min(width, ${n[l]} - 1))`)};\n      ${aa(e,d,i,3)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${u} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var depth:${u} = originalIndices[${o}];\n      var height:${u} = originalIndices[${a}];\n      var width:${u} = originalIndices[${l}];\n      ${r?`if (depth < 0 || depth > (${n[o]} - 1) || height < 0 || height > (${n[a]} - 1) || width < 0 || (width > ${n[l]} - 1)) {\n      return ${s};\n        }`:""};\n\n    depth = max(0, min(depth, ${n[o]} - 1));\n      height = max(0, min(height, ${n[a]} - 1));\n      width = max(0, min(width, ${n[l]} - 1));\n      var depth1: u32 = u32(depth);\n      var height1: u32 = u32(height);\n      var width1: u32 = u32(width);\n      var depth2: u32 = u32(depth + 1);\n      var height2: u32 = u32(height + 1);\n      var width2: u32 = u32(width + 1);\n      var channel: u32 = ${n.length>3?`u32(originalIndices[${d}])`:"0"};\n      var batch: u32 =  ${n.length>3?`u32(originalIndices[${i}])`:"0"};\n\n      var x111: ${u} = getInputValue(batch, channel, depth1, height1, width1);\n      var x112: ${u} = getInputValue(batch, channel, depth1, height1, width2);\n      var x121: ${u} = getInputValue(batch, channel, depth1, height2, width1);\n      var x122: ${u} = getInputValue(batch, channel, depth1, height2, width2);\n      var x211: ${u} = getInputValue(batch, channel, depth2, height1, width1);\n      var x212: ${u} = getInputValue(batch, channel, depth2, height1, width2);\n      var x221: ${u} = getInputValue(batch, channel, depth2, height2, width1);\n      var x222: ${u} = getInputValue(batch, channel, depth2, height2, width2);\n      var dx1: ${u} = abs(depth - ${u}(depth1));\n      var dx2: ${u} = abs(${u}(depth2) - depth);\n      var dy1: ${u} = abs(height - ${u}(height1));\n      var dy2: ${u} = abs(${u}(height2) - height);\n      var dz1: ${u} = abs(width - ${u}(width1));\n      var dz2: ${u} = abs(${u}(width2) - width);\n      if (depth1 == depth2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (height1 == height2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      if (width1 == width2) {\n        dz1 = 0.5;\n        dz2 = 0.5;\n      }\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\n    }`},ca=(e,t,n,r,s,i)=>{const o=e.dims,a=ta(i,t.axes,o.length);let l=na(o,r,s,t.axes),d=r.slice();0===r.length&&(d=o.map(((e,t)=>0===e?1:l[t]/e)),"stretch"!==t.keepAspectRatioPolicy&&(l=ra(o,d,t)));const u=Ot("output",e.dataType,l.length),c=Bt("input",e.dataType,o.length),p=bt.size(l),h=o.length===l.length&&o.every(((e,t)=>e===l[t])),m="tf_crop_and_resize"===t.coordinateTransformMode,f=t.extrapolationValue,g=c.type.value;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${n}|${d.length>0?d:""}|${s.length>0?s:""}|${a.length>0?a:""}|${h}|${o}`,inputDependencies:["rank"]},getShaderSource:e=>`\n      ${h?"":`\n      ${Jo(t.coordinateTransformMode,g)};\n      ${(()=>{switch(t.mode){case"nearest":return`\n              ${oa(c,o)};\n              ${ea(t.nearestMode,n,g)};\n              ${ia(c,u,o,l,d.length,a.length,m)};\n              `;case"linear":return`\n              ${sa(u,o,l,d.length,a.length)};\n              ${(()=>{if(2===o.length||4===o.length)return`${la(c,u,o,m,f)}`;if(3===o.length||5===o.length)return`${ua(c,u,o,m,f)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};\n            `;case"cubic":return`\n            ${(()=>{if(2===o.length||4===o.length)return`${da(c,u,o,l,d,a,t.cubicCoeffA,m,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${e.registerUniform("output_size","u32").registerUniform("scales","f32",d.length).registerUniform("roi","f32",a.length).declareVariables(c,u)}\n      ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n        ${h?"output[global_idx] = input[global_idx];":`\n        let output_indices = ${u.offsetToIndices("global_idx")};\n        var input_indices: ${c.type.indices};\n        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${c.getByIndices("input_indices")};\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;case"linear":return`output[global_idx] = ${2===o.length||4===o.length?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};\n`}\n      }`,getRunData:()=>({outputs:[{dims:l,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:[{type:12,data:p},{type:1,data:d},{type:1,data:a},...Ct(o,l)]})}},pa=e=>{const t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},ha=(e,t)=>{const n=[],r=[],s=[],i=pa(e);if(0!==t.antialias)throw Error("Only default value (0) for Antialias attribute is supported");Zo(e.inputs,t,i,n,r,s),e.compute(ca(e.inputs[0],t,i,n,r,s),{inputs:[0]})},ma=e=>{const t=e.antialias,n=e.axes,r=e.coordinateTransformMode,s=e.cubicCoeffA,i=0!==e.excludeOutside,o=e.extrapolationValue,a=e.keepAspectRatioPolicy,l=e.mode,d=""===e.nearestMode?"simple":e.nearestMode;return gt({antialias:t,axes:n,coordinateTransformMode:r,cubicCoeffA:s,excludeOutside:i,extrapolationValue:o,keepAspectRatioPolicy:a,mode:l,nearestMode:d})}}}),Jl=N({"web/lib/wasm/jsep/webgpu/ops/rotary-embedding.ts"(){sl(),cl(),ul(),pl(),fa=(e,t)=>{const[n,r,s,i]=e,{numHeads:o,rotaryEmbeddingDim:a}=t;if(3!==n.dims.length&&4!==n.dims.length)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${n.dims.length}`);if(!bt.areEqual(r.dims,[])&&!bt.areEqual(r.dims,[1])&&2!==r.dims.length)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${r.dims.length}`);if(2!==s.dims.length)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${s.dims.length}`);if(2!==i.dims.length)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${i.dims.length}`);if(!bt.areEqual(s.dims,i.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(a>0&&0===o)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");const l=n.dims[0],d=n.dims[n.dims.length-2],u=s.dims[0],c=bt.sizeFromDimension(n.dims,1)/d,p=0===a?2*s.dims[1]:c/o;if(a>p)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(2===r.dims.length){if(l!==r.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${r.dims[0]}`);if(d!==r.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${r.dims[1]}`)}if(p/2!==s.dims[1]&&a/2!==s.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${s.dims[1]}`);if(d>u)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},ga=(e,t)=>{const{interleaved:n,numHeads:r,rotaryEmbeddingDim:s,scale:i}=t,o=e[0].dims[0],a=bt.sizeFromDimension(e[0].dims,1),l=e[0].dims[e[0].dims.length-2],d=a/l,u=e[2].dims[1],c=0===s?2*u:d/r,p=new Array(o,l,d/c,c-u),h=bt.computeStrides(p),m=[{type:1,data:i},{type:12,data:p},{type:12,data:h},...3===e[0].dims.length?new Array({type:12,data:[a,d,c,1]}):[],...4===e[0].dims.length?new Array({type:12,data:[a,c,l*c,1]}):[],...Ct(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)];return{name:"RotaryEmbedding",shaderCache:{hint:gt({interleaved:n}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:t=>{const r=Bt("input",e[0].dataType,e[0].dims.length),s=Bt("position_ids",e[1].dataType,e[1].dims.length),i=Bt("cos_cache",e[2].dataType,e[2].dims.length),o=Bt("sin_cache",e[3].dataType,e[3].dims.length),a=Ot("output",e[0].dataType,e[0].dims.length);return t.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:p.length},{name:"global_strides",type:"u32",length:h.length},{name:"input_output_strides",type:"u32",length:h.length}]),`\n        ${t.declareVariables(r,s,i,o,a)}\n\n        ${t.mainStart(Tt)}\n          let half_rotary_emb_dim = uniforms.${i.name}_shape[1];\n          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;\n          let size = uniforms.global_shape[0] * uniforms.global_strides[0];\n          ${t.guardAgainstOutOfBoundsWorkgroupSizes("size")}\n\n          if (bsnh[3] < half_rotary_emb_dim) {\n            let position_ids_idx =\n                ${s.broadcastedIndicesToOffset("bsnh.xy",Ot("",s.type.tensor,2))};\n            let position_id =\n                u32(${s.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);\n            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${n});\n            let j = i + select(half_rotary_emb_dim, 1, ${n});\n            let re = ${r.getByOffset("i")} * ${i.get("position_id","bsnh[3]")} -\n                ${r.getByOffset("j")} * ${o.get("position_id","bsnh[3]")};\n            ${a.setByOffset("i","re")}\n            let im = ${r.getByOffset("i")} * ${o.get("position_id","bsnh[3]")} +\n                ${r.getByOffset("j")} * ${i.get("position_id","bsnh[3]")};\n            ${a.setByOffset("j","im")}\n          } else {\n            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;\n            ${a.setByOffset("k",r.getByOffset("k"))}\n          }\n        }`},getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(bt.size(p)/Tt)},programUniforms:m})}},_a=(e,t)=>{fa(e.inputs,t),e.compute(ga(e.inputs,t))}}}),ed=N({"web/lib/wasm/jsep/webgpu/ops/skip-layer-norm.ts"(){sl(),cl(),pl(),wa=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");const t=e[0],n=e[1],r=e[2];if(t.dataType!==n.dataType||t.dataType!==r.dataType)throw new Error("All inputs must have the same data type");if(3!==t.dims.length&&2!==t.dims.length)throw new Error("Input must be 2D or 3D");if(3!==n.dims.length&&2!==n.dims.length)throw new Error("Skip must be 2D or 3D");const s=t.dims[t.dims.length-1],i=t.dims[t.dims.length-2];if(n.dims[n.dims.length-1]!==s)throw new Error("Skip must have the same hidden size as input");if(n.dims[n.dims.length-2]!==i)throw new Error("Skip must have the same sequence length as input");if(1!==r.dims.length)throw new Error("Gamma must be 1D");if(r.dims[r.dims.length-1]!==s)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){const t=e[3];if(1!==t.dims.length)throw new Error("Beta must be 1D");if(t.dims[t.dims.length-1]!==s)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){const t=e[4];if(1!==t.dims.length)throw new Error("Bias must be 1D");if(t.dims[t.dims.length-1]!==s)throw new Error("Bias must have the same hidden size as input")}},ba=(e,t,n,r)=>{const s=t.simplified,i=e[0].dims,o=bt.size(i),a=i,l=o,d=i.slice(-1)[0],u=r?i.slice(0,-1).concat(1):[],c=!s&&e.length>3,p=e.length>4,h=r&&n>1,m=r&&n>2,f=n>3,g=64,_=Pt(d),w=[{type:12,data:l},{type:12,data:_},{type:12,data:d},{type:1,data:t.epsilon}],b=[{dims:a,dataType:e[0].dataType}];return n>1&&b.push({dims:u,dataType:1}),n>2&&b.push({dims:u,dataType:1}),n>3&&b.push({dims:i,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${_};${h};${m};${f}`,inputDependencies:e.map(((e,t)=>"type"))},getShaderSource:t=>{const n=[Bt("x",e[0].dataType,e[0].dims,_),Bt("skip",e[1].dataType,e[1].dims,_),Bt("gamma",e[2].dataType,e[2].dims,_)];c&&n.push(Bt("beta",e[3].dataType,e[3].dims,_)),p&&n.push(Bt("bias",e[4].dataType,e[4].dims,_)),n.push(Ot("output",e[0].dataType,a,_)),h&&n.push(Ot("mean_output",1,u)),m&&n.push(Ot("inv_std_output",1,u)),f&&n.push(Ot("input_skip_bias_sum",e[0].dataType,a,_));const r=$t(e[0].dataType),i=$t(1,_);return`\n\n      ${t.registerUniforms([{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}]).declareVariables(...n)}\n      var<workgroup> sum_shared : array<${i}, 64>;\n      var<workgroup> sum_squared_shared : array<${i}, 64>;\n\n      ${t.mainStart([g,1,1])}\n        let ix = local_id.x;\n        let iy = global_id.x / 64;\n\n        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;\n        var stride = hidden_size_vectorized / 64;\n        let offset = ix * stride + iy * hidden_size_vectorized;\n        let offset1d = stride * ix;\n        if (ix == 63) {\n          stride = hidden_size_vectorized - stride * ix;\n        }\n        for (var i: u32 = 0; i < stride; i++) {\n          let skip_value = skip[offset + i];\n          let bias_value = ${p?"bias[offset1d + i]":r+"(0.0)"};\n          let input_value = x[offset + i];\n          let value = input_value + skip_value + bias_value;\n          ${f?"input_skip_bias_sum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32_value = ${Ft(r,_,"value")};\n          sum_shared[ix] += f32_value;\n          sum_squared_shared[ix] += f32_value * f32_value;\n        }\n        workgroupBarrier();\n\n        var reduce_size : u32 = 64;\n        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {\n          reduce_size = curr_size + (reduce_size & 1);\n          if (ix < curr_size) {\n            sum_shared[ix] += sum_shared[ix + reduce_size];\n            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];\n          }\n          workgroupBarrier();\n        }\n\n        let sum = sum_shared[0];\n        let square_sum = sum_squared_shared[0];\n        let mean = ${At("sum",_)} / f32(uniforms.hidden_size);\n        let inv_std_dev = inverseSqrt(${At("square_sum",_)} / f32(uniforms.hidden_size) ${s?"":"- mean * mean"} + uniforms.epsilon);\n        ${h?"mean_output[global_idx] = mean;":""}\n        ${m?"inv_std_output[global_idx] = inv_std_dev;":""}\n\n        for (var i: u32 = 0; i < stride; i++) {\n          output[offset + i] = (output[offset + i] ${s?"":`- ${r}(mean)`}) *\n            ${r}(inv_std_dev) * gamma[offset1d + i]\n            ${c?"+ beta[offset1d + i]":""};\n        }\n      }`},getRunData:()=>({outputs:b,dispatchGroup:{x:Math.ceil(l/d)},programUniforms:w})}},ya=(e,t)=>{const n=!1;wa(e.inputs);const r=[0];e.outputCount>1&&r.push(-3),e.outputCount>2&&r.push(-3),e.outputCount>3&&r.push(3),e.compute(ba(e.inputs,t,e.outputCount,n),{outputs:r})}}}),td=N({"web/lib/wasm/jsep/webgpu/ops/slice.ts"(){sl(),cl(),ul(),pl(),va=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(0!==t.axes.length){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach(((t,n)=>{if(6!==e[n+1].dataType&&7!==e[n+1].dataType)throw new Error(`Input ${n} must be an array of int32 or int64`)}))},xa=(e,t)=>{const n=[];if(e.length>t)if(7===e[t].dataType)e[t].getBigInt64Array().forEach((e=>n.push(Number(e))));else{if(6!==e[t].dataType)throw new Error(`Input ${t} must be an array of int32 or int64`);e[t].getInt32Array().forEach((e=>n.push(Number(e))))}return n},Ma=(e,t)=>{if(e.length>1){const t=xa(e,1),n=xa(e,2);let r=xa(e,3);return 0===r.length&&(r=[...Array(e[0].dims.length).keys()]),gt({starts:t,ends:n,axes:r})}return t},Ta=(e,t,n,r,s)=>{let i=e;return e<0&&(i+=n[r[t]]),s[t]<0?Math.max(0,Math.min(i,n[r[t]]-1)):Math.max(0,Math.min(i,n[r[t]]))},ka=(e,t,n)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n          var input_indices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${n.length}; i >= 0; i--) {\n            let input_shape_i = ${It("uniforms.input_shape","i",n.length)};\n            let steps_i = ${It("uniforms.steps","i",n.length)};\n            let signs_i = ${It("uniforms.signs","i",n.length)};\n            let starts_i = ${It("uniforms.starts","i",n.length)};\n            var output_index = ${t.indicesGet("output_indices","i")};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${e.indicesSet("input_indices","i","input_index")};\n          }\n          return input_indices;\n      }`,$a=(e,t)=>{const n=e[0].dims,r=bt.size(n),s=t.axes.length>0?bt.normalizeAxes(t.axes,n.length):[...Array(n.length).keys()];let i=xa(e,4);i.forEach((e=>0!==e||(()=>{throw new Error("step cannot be 0")}))),0===i.length&&(i=Array(s.length).fill(1));const o=t.starts.map(((e,t)=>Ta(e,t,n,s,i))),a=t.ends.map(((e,t)=>Ta(e,t,n,s,i)));if(s.length!==o.length||s.length!==a.length)throw new Error("start, ends and axes should have the same number of elements");if(s.length!==n.length)for(let e=0;e<n.length;++e)s.includes(e)||(o.splice(e,0,0),a.splice(e,0,n[e]),i.splice(e,0,1));const l=i.map((e=>Math.sign(e)));i.forEach(((e,t,n)=>{if(e<0){const r=(a[t]-o[t])/e,s=o[t],l=s+r*i[t];o[t]=l,a[t]=s,n[t]=-e}}));const d=n.slice(0);s.forEach(((e,t)=>{d[e]=Math.ceil((a[e]-o[e])/i[e])}));const u={dims:d,dataType:e[0].dataType},c=Ot("output",e[0].dataType,d.length),p=Bt("input",e[0].dataType,e[0].dims.length),h=bt.size(d),m=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:o.length},{name:"signs",type:"i32",length:l.length},{name:"steps",type:"u32",length:i.length}],f=[{type:12,data:h},{type:12,data:o},{type:6,data:l},{type:12,data:i},...Ct(e[0].dims,d)];return{name:"Slice",shaderCache:{hint:`${l.length}_${o.length}_${i.length}`,inputDependencies:["rank"]},getShaderSource:e=>`\n      ${e.registerUniforms(m).declareVariables(p,c)}\n        ${ka(p,c,n)}\n        ${e.mainStart()}\n          ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let output_indices = ${c.offsetToIndices("global_idx")};\n          let input_indices = calculateInputIndices(output_indices);\n          ${c.setByOffset("global_idx",p.getByIndices("input_indices"))}\n      }`,getRunData:()=>({outputs:[u],dispatchGroup:{x:Math.ceil(r/64)},programUniforms:f})}},Sa=(e,t)=>{va(e.inputs,t);const n=Ma(e.inputs,t);e.compute($a(e.inputs,n),{inputs:[0]})},Ca=e=>{const t=e.starts,n=e.ends,r=e.axes;return gt({starts:t,ends:n,axes:r})}}}),nd=N({"web/lib/wasm/jsep/webgpu/ops/softmax.ts"(){sl(),cl(),ul(),pl(),Pa=e=>{if(!e||1!==e.length)throw new Error("Softmax op requires 1 input.")},Ea=(e,t)=>{const n=e.dims,r=bt.size(n);let s=t.axis;if(s<0&&(s=n.length+s),s<n.length-1)throw new Error("softmax only supports last axis for now.");const i=n[s],o=r/i,a=Pt(i),l=i/a,d=Bt("x",e.dataType,e.dims,a),u=Ot("result",e.dataType,e.dims,a),c=d.type.value,p="f32"===$t(e.dataType)?`var threadMax = ${c}(-3.402823e+38f);`:`var threadMax = ${c}(-65504.0h);`;return{name:"Softmax",shaderCache:{hint:`${a}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:n,dataType:e.dataType}],dispatchGroup:{x:o},programUniforms:[{type:6,data:l}]}),getShaderSource:e=>{return`\n      var<workgroup> rowMaxShared : ${c};\n      var<workgroup> rowSumShared : ${c};\n      var<workgroup> threadShared : array<${c}, 64>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${c} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${c}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${e.registerUniform("packedCols","i32").declareVariables(d,u)}\n      ${e.mainStart()}\n        let gindex = i32(global_idx);\n        let lindex = i32(local_idx);\n        const wg = 64;\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${p}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${c}(${t="threadShared[0]",n=a,4===n?`max(max(${t}.x, ${t}.y), max(${t}.z, ${t}.w))`:2===n?`max(${t}.x, ${t}.y)`:3===n?`max(max(${t}.x, ${t}.y), ${t}.z)`:t});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${c}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${c}(${At("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;var t,n}}},Fa=(e,t)=>{Pa(e.inputs),e.compute(Ea(e.inputs[0],t))},Aa=e=>gt({axis:e.axis})}}),rd=N({"web/lib/wasm/jsep/webgpu/ops/split.ts"(){sl(),cl(),ul(),pl(),Ia=e=>{if(!e||e.length<1)throw new Error("too few inputs")},za=(e,t)=>{const n=[];let r=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach((e=>n.push(Number(e)))),r=n.length),gt({numOutputs:r,axis:t.axis,splitSizes:n})},Ba=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < ${It("uniforms.size_in_split_axis","i",e)}) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,Oa=e=>{const t=e.length,n=[];for(let r=0;r<t;++r){const s=e[r].setByIndices("indices","input[global_idx]");1===t?n.push(s):0===r?n.push(`if (output_number == ${r}u) { ${s} }`):r===t-1?n.push(`else { ${s} }`):n.push(`else if (output_number == ${r}) { ${s} }`)}return`\n      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${n.join("\n")}\n      }`},La=(e,t)=>{const n=e[0].dims,r=bt.size(n),s=e[0].dataType,i=bt.normalizeAxis(t.axis,n.length),o=new Array(t.numOutputs),a=Bt("input",s,n.length),l=new Array(t.numOutputs),d=[],u=[];let c=0;const p=[{type:12,data:r}];for(let r=0;r<t.numOutputs;r++){c+=t.splitSizes[r],l[r]=c;const i=n.slice();i[t.axis]=t.splitSizes[r],u.push(i),o[r]=Ot(`output${r}`,s,i.length),d.push({dims:u[r],dataType:e[0].dataType})}p.push({type:12,data:l},...Ct(n,...u));return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:e=>`\n  ${e.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",l.length).declareVariables(a,...o)}\n  ${Ba(l.length)}\n  ${Oa(o)}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}\n\n    var indices = ${a.offsetToIndices("global_idx")};\n    var index = ${a.indicesGet("indices",i)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${It("uniforms.size_in_split_axis","output_number - 1u",l.length)};\n      ${a.indicesSet("indices",i,"index")};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`,getRunData:()=>({outputs:d,dispatchGroup:{x:Math.ceil(r/64)},programUniforms:p})}},Da=(e,t)=>{Ia(e.inputs);const n=1===e.inputs.length?t:za(e.inputs,t);e.compute(La(e.inputs,n),{inputs:[0]})},Ra=e=>{const t=e.axis,n=e.splitSizes,r=e.numOutputs<0?n.length:e.numOutputs;if(r!==n.length)throw new Error("numOutputs and splitSizes lengh must be equal");return gt({axis:t,numOutputs:r,splitSizes:n})}}}),sd=N({"web/lib/wasm/jsep/webgpu/ops/where.ts"(){sl(),cl(),pl(),Na=(e,t,n,r,s)=>{const i=Ot("output_data",s,n.length,4),o=Bt("a_data",t[1].dataType,t[1].dims.length,4),a=Bt("b_data",t[2].dataType,t[2].dims.length,4),l=Bt("c_data",t[0].dataType,t[0].dims.length,4);let d;const u=(e,t,n)=>`select(${t}, ${e}, ${n})`;if(r){const e=(e,t,n="")=>{const r=`a_data[index_a${t}][component_a${t}]`,s=`b_data[index_b${t}][component_b${t}]`,d=`bool(c_data[index_c${t}] & (0xffu << (component_c${t} * 8)))`;return`\n            let output_indices${t} = ${i.offsetToIndices(`global_idx * 4u + ${t}u`)};\n            let offset_a${t} = ${o.broadcastedIndicesToOffset(`output_indices${t}`,i)};\n            let offset_b${t} = ${a.broadcastedIndicesToOffset(`output_indices${t}`,i)};\n            let offset_c${t} = ${l.broadcastedIndicesToOffset(`output_indices${t}`,i)};\n            let index_a${t} = offset_a${t} / 4u;\n            let index_b${t} = offset_b${t} / 4u;\n            let index_c${t} = offset_c${t} / 4u;\n            let component_a${t} = offset_a${t} % 4u;\n            let component_b${t} = offset_b${t} % 4u;\n            let component_c${t} = offset_c${t} % 4u;\n            ${e}[${t}] = ${n}(${u(r,s,d)});\n          `};d=9===s?`\n            var data = vec4<u32>(0);\n            ${e("data",0,"u32")}\n            ${e("data",1,"u32")}\n            ${e("data",2,"u32")}\n            ${e("data",3,"u32")}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:`\n            ${e("output_data[global_idx]",0)}\n            ${e("output_data[global_idx]",1)}\n            ${e("output_data[global_idx]",2)}\n            ${e("output_data[global_idx]",3)}\n          `}else d=i.setByOffset("global_idx",u(o.getByOffset("global_idx"),a.getByOffset("global_idx"),l.getByOffset("global_idx")));return`\n        ${e.registerUniform("vec_size","u32").declareVariables(l,o,a,i)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${d}\n      }`},Va=e=>{const t=e[1].dims,n=e[2].dims,r=e[0].dims,s=e[1].dataType,i=!(bt.areEqual(t,n)&&bt.areEqual(n,r));let o=t,a=bt.size(t);if(i){const e=wt.calcShape(wt.calcShape(t,n,!1),r,!1);if(!e)throw new Error("Can't perform where op on the given tensors");o=e,a=bt.size(o)}const l=Math.ceil(a/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:t=>Na(t,e,o,i,s),getRunData:()=>({outputs:[{dims:o,dataType:s}],dispatchGroup:{x:Math.ceil(a/64/4)},programUniforms:[{type:12,data:l},...Ct(r,t,n,o)]})}},ja=e=>{e.compute(Va(e.inputs))}}}),id=N({"web/lib/wasm/jsep/webgpu/op-resolve-rules.ts"(){gl(),_l(),wl(),bl(),vl(),xl(),Ml(),Fl(),zl(),Bl(),Ol(),Ll(),Dl(),Rl(),Nl(),Vl(),jl(),Ul(),Wl(),Hl(),El(),Kl(),ql(),Xl(),Ql(),Yl(),fl(),Zl(),Jl(),ed(),td(),nd(),rd(),Gl(),hl(),yl(),sd(),qa=new Map([["Abs",[lr]],["Acos",[dr]],["Acosh",[ur]],["Add",[es]],["ArgMax",[Gn,Un]],["ArgMin",[qn,Un]],["Asin",[cr]],["Asinh",[pr]],["Atan",[hr]],["Atanh",[mr]],["Attention",[Zn]],["AveragePool",[Do,Lo]],["BatchNormalization",[nr]],["BiasAdd",[ir]],["BiasSplitGelu",[Qr]],["Cast",[gr,fr]],["Ceil",[br]],["Clip",[wr]],["Concat",[ms,fs]],["Conv",[Us,js]],["ConvTranspose",[ii,ei]],["Cos",[yr]],["Cosh",[vr]],["CumSum",[ai,li]],["DepthToSpace",[pi,hi]],["Div",[ts]],["Einsum",[xi,Mi]],["Elu",[Mr,xr]],["Equal",[ns]],["Erf",[kr]],["Exp",[$r]],["Expand",[Ci]],["FastGelu",[Ei]],["Floor",[Sr]],["FusedConv",[Us,js]],["Gather",[zi,Ii]],["GatherElements",[Di,Li]],["Gelu",[Cr]],["Gemm",[ji,Vi]],["GlobalAveragePool",[Vo,No]],["GlobalMaxPool",[Wo,Uo]],["Greater",[os]],["GreaterOrEqual",[ls]],["GroupQueryAttention",[oo,ro]],["HardSigmoid",[Or,Br]],["InstanceNormalization",[co]],["LayerNormalization",[mo]],["LeakyRelu",[Pr,xr]],["Less",[as]],["LessOrEqual",[ds]],["Log",[Hr]],["MatMul",[Ls]],["MatMulNBits",[_o,wo]],["MaxPool",[qo,Go]],["Mul",[rs]],["MultiHeadAttention",[Xi,Ui]],["Neg",[Fr]],["Not",[Er]],["Pad",[So]],["Pow",[ss]],["Range",[Xo]],["Reciprocal",[Ar]],["ReduceMin",[Ln]],["ReduceMean",[An]],["ReduceMax",[On]],["ReduceSum",[Rn]],["ReduceProd",[Dn]],["ReduceL1",[In]],["ReduceL2",[zn]],["ReduceLogSum",[Vn]],["ReduceLogSumExp",[Bn]],["ReduceSumSquare",[Nn]],["Relu",[Ir]],["Resize",[ha,ma]],["RotaryEmbedding",[_a]],["Sigmoid",[zr]],["Sin",[Lr]],["Sinh",[Dr]],["Slice",[Sa,Ca]],["SkipLayerNormalization",[ya]],["Split",[Da,Ra]],["Sqrt",[Rr]],["Softmax",[Fa,Aa]],["Sub",[is]],["Tan",[Nr]],["Tanh",[jr]],["ThresholdedRelu",[Wr,xr]],["Tile",[eo]],["Transpose",[Wt,Ht]],["Where",[ja]]])}}),od=N({"web/lib/wasm/jsep/webgpu/program-manager.ts"(){me(),ol(),pl(),Ga=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,t){this.repo.set(e,t)}run(e,t,n,r,s){P(e.programInfo.name);const i=this.backend.device,o=this.backend.getComputePassEncoder();this.backend.writeTimestamp(2*this.backend.pendingDispatchNumber);const a=[];for(const e of t)a.push({binding:a.length,resource:{buffer:e.buffer}});for(const e of n)a.push({binding:a.length,resource:{buffer:e.buffer}});s&&a.push({binding:a.length,resource:s});const l=i.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:a,label:e.programInfo.name});if("capturing"===this.backend.sessionStatus){const t={kernelId:this.backend.currentKernelId,computePipeline:e.computePipeline,bindGroup:l,dispatchGroup:r};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(t)}o.setPipeline(e.computePipeline),o.setBindGroup(0,l),o.dispatchWorkgroups(...r),this.backend.writeTimestamp(2*this.backend.pendingDispatchNumber+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||"at-passes"===this.backend.queryType)&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),E(e.programInfo.name)}dispose(){}build(e,t){P(e.name);const n=this.backend.device,r=[];n.features.has("shader-f16")&&r.push("enable f16;");const s=Rt(t,this.backend.device.limits),i=e.getShaderSource(s),o=`${r.join("\n")}\n${s.additionalImplementations}\n${i}`,a=n.createShaderModule({code:o,label:e.name});st("verbose",(()=>`[WebGPU] ${e.name} shader code: ${o}`));const l=n.createComputePipeline({compute:{module:a,entryPoint:"main"},layout:"auto",label:e.name});return E(e.name),{programInfo:e,computePipeline:l,uniformVariablesInfo:s.variablesInfo}}normalizeDispatchGroupSize(e){const t="number"==typeof e?e:e.x,n="number"==typeof e?1:e.y||1,r="number"==typeof e?1:e.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(t<=s&&n<=s&&r<=s)return[t,n,r];const i=t*n*r;let o=Math.ceil(Math.sqrt(i));if(o>s){if(o=Math.ceil(Math.cbrt(i)),o>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[o,o,o]}return[o,o,1]}}}}),ad=N({"web/lib/wasm/jsep/backend-webgpu.ts"(){me(),sl(),ol(),al(),dl(),id(),od(),Ua=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);const n=[];for(let r=0;r<e.length;++r){const s=e[r].dataType;switch(t[r]){case"none":n.push("");break;case"type":n.push(`${s}`);break;case"rank":{const t=e[r].dims.length;n.push(`${s};${t}`);break}case"dims":{const t=e[r].dims.join(",");n.push(`${s};${t}`);break}default:throw new Error(`unsupported input dependency: ${t[r]}`)}}return n.join("|")},Wa=(e,t,n)=>{let r=e.name;return e.shaderCache?.hint&&(r+="["+e.shaderCache.hint+"]"),r+=":"+n+`:${Ua(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,r},Ha=class{constructor(e){e&&(this.architecture=e.architecture,this.vendor=e.vendor)}isArchitecture(e){return this.architecture===e}isVendor(e){return this.vendor===e}},Ka=class{constructor(){this.currentSessionId=null,this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionStatus="default",this.capturedCommandList=new Map,this.capturedPendingKernels=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(null===this.currentKernelId)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e,t){this.env=e;const n=[],r={requiredLimits:{maxComputeWorkgroupStorageSize:t.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.limits.maxStorageBufferBindingSize,maxBufferSize:t.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:t.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:t.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:t.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:t.limits.maxComputeWorkgroupSizeZ},requiredFeatures:n};t.features.has("chromium-experimental-timestamp-query-inside-passes")?n.push("chromium-experimental-timestamp-query-inside-passes"):t.features.has("timestamp-query")&&n.push("timestamp-query"),t.features.has("shader-f16")&&n.push("shader-f16"),this.device=await t.requestDevice(r),this.adapterInfo=new Ha(await t.requestAdapterInfo()),this.gpuDataManager=mt(this),this.programManager=new Ga(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,nt(e.logLevel,!!e.debug),this.device.onuncapturederror=e=>{e.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${e.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:t,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){void 0!==this.querySet&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){const e=this.getCommandEncoder(),t={};"at-passes"===this.queryType&&(t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:2*this.pendingDispatchNumber,endOfPassWriteIndex:2*this.pendingDispatchNumber+1}),this.computePassEncoder=e.beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;let e;P(),this.endComputePass(),"none"!==this.queryType&&(this.commandEncoder.resolveQuerySet(this.querySet,0,2*this.pendingDispatchNumber,this.queryResolveBuffer,0),e=this.device.createBuffer({size:2*this.pendingDispatchNumber*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(e,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,2*this.pendingDispatchNumber*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,"none"!==this.queryType&&e.mapAsync(GPUMapMode.READ).then((()=>{const t=new BigUint64Array(e.getMappedRange()),n=this.pendingQueries.get(e);for(let e=0;e<t.length/2;e++){const r=n[e],s=r.kernelId,i=this.kernels.get(s),o=i.kernelType,a=i.kernelName,l=r.programName,d=r.inputTensorViews,u=r.outputTensorViews,c=t[2*e],p=t[2*e+1];void 0===this.queryTimeBase&&(this.queryTimeBase=c);const h=Number(c-this.queryTimeBase),m=Number(p-this.queryTimeBase);if(!Number.isSafeInteger(h)||!Number.isSafeInteger(m))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:d.map((e=>({dims:e.dims,dataType:Ue(e.dataType)}))),outputsMetadata:u.map((e=>({dims:e.dims,dataType:Ue(e.dataType)}))),kernelId:s,kernelType:o,kernelName:a,programName:l,startTime:h,endTime:m});else{let e="";d.forEach(((t,n)=>{e+=`input[${n}]: [${t.dims}] | ${Ue(t.dataType)}, `}));let t="";u.forEach(((e,n)=>{t+=`output[${n}]: [${e.dims}] | ${Ue(e.dataType)}, `})),console.log(`[profiling] kernel "${s}|${o}|${a}|${l}" ${e}${t}execution time: ${m-h} ns`)}S("GPU",`${l}::${c}::${p}`)}e.unmap(),this.pendingQueries.delete(e)})),E()}run(e,t,n,r,s,i){P(e.name);const o=[];for(let e=0;e<t.length;++e){const n=t[e].data;if(0===n)continue;const r=this.gpuDataManager.get(n);if(!r)throw new Error(`no GPU data for input: ${n}`);o.push(r)}const{outputs:a,dispatchGroup:l,programUniforms:d}=e.getRunData(t),u=0===n.length?a.map(((e,t)=>t)):n;if(u.length!==a.length)throw new Error(`Output size ${u.length} must be equal to ${a.length}.`);const c=[],p=[];for(let e=0;e<a.length;++e){if(!Number.isInteger(u[e])||u[e]<-3||u[e]>=i)throw new Error(`Invalid output index: ${u[e]}`);if(-3===u[e])continue;const t=-1===u[e],n=-2===u[e],o=t||n?s(a[e].dataType,a[e].dims):r(u[e],a[e].dataType,a[e].dims);if(c.push(o),0===o.data)continue;const l=this.gpuDataManager.get(o.data);if(!l)throw new Error(`no GPU data for output: ${o.data}`);if(t&&this.temporaryData.push(l),n){let e=this.kernelPersistentData.get(this.currentKernelId);e||(e=[],this.kernelPersistentData.set(this.currentKernelId,e)),e.push(l)}p.push(l)}if(o.length!==t.length||p.length!==c.length){if(0===p.length)return E(e.name),c;throw new Error(`Program ${e.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let h;if(d){let e=0;const t=[];d.forEach((n=>{const r="number"==typeof n.data?[n.data]:n.data;if(0===r.length)return;const s=10===n.type?2:4;let i,o;10===n.type?(o=r.length>4?16:r.length>2?8:r.length*s,i=r.length>4?16:s*r.length):(o=r.length<=2?r.length*s:16,i=16),e=Math.ceil(e/o)*o,t.push(e);const a=10===n.type?8:4;e+=r.length>4?Math.ceil(r.length/a)*i:r.length*s}));const n=16;e=Math.ceil(e/n)*n;const r=new ArrayBuffer(e);d.forEach(((e,n)=>{const s=t[n],i="number"==typeof e.data?[e.data]:e.data;if(6===e.type)new Int32Array(r,s,i.length).set(i);else if(12===e.type)new Uint32Array(r,s,i.length).set(i);else if(10===e.type)new Uint16Array(r,s,i.length).set(i);else{if(1!==e.type)throw new Error(`Unsupported uniform type: ${Ue(e.type)}`);new Float32Array(r,s,i.length).set(i)}}));const s=this.gpuDataManager.create(e,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(s.buffer,0,r,0,e),this.gpuDataManager.release(s.id),h={offset:0,size:e,buffer:s.buffer}}const m=this.programManager.normalizeDispatchGroupSize(l),f=1===m[1]&&1===m[2],g=Wa(e,t,f);let _=this.programManager.getArtifact(g);if(_||(_=this.programManager.build(e,m),this.programManager.setArtifact(g,_),st("info",(()=>`[artifact] key: ${g}, programName: ${e.name}`))),d&&_.uniformVariablesInfo){if(d.length!==_.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${_.uniformVariablesInfo.length}, got ${d.length} in program "${_.programInfo.name}".`);for(let e=0;e<d.length;e++){const t=d[e],n=t.type,r="number"==typeof t.data?1:t.data.length,[s,i]=_.uniformVariablesInfo[e];if(n!==s||r!==i)throw new Error(`Uniform variable ${e} mismatch: expect type ${s} with size ${i}, got type ${n} with size ${r} in program "${_.programInfo.name}".`)}}if(st("info",(()=>`[ProgramManager] run "${e.name}" (key=${g}) with ${m[0]}x${m[1]}x${m[2]}`)),"none"!==this.queryType||"capturing"===this.sessionStatus){const e={kernelId:this.currentKernelId,programName:_.programInfo.name,inputTensorViews:t,outputTensorViews:c};if(this.pendingKernels.push(e),"capturing"===this.sessionStatus){this.capturedPendingKernels.get(this.currentSessionId).push(e)}}return this.programManager.run(_,o,p,m,h),E(e.name),c}upload(e,t){this.gpuDataManager.upload(e,t)}memcpy(e,t){this.gpuDataManager.memcpy(e,t)}async download(e,t){await this.gpuDataManager.download(e,t)}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,t,n,r){const s=qa.get(e);if(!s)throw new Error(`kernel not implemented: ${e}`);const i={kernelType:e,kernelName:r,kernelEntry:s[0],attributes:[s[1],n]};this.kernels.set(t,i)}releaseKernel(e){const t=this.kernelPersistentData.get(e);if(t){for(const e of t)this.gpuDataManager.release(e.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,t,n){const r=this.kernels.get(e);if(!r)throw new Error(`kernel not created: ${e}`);const s=r.kernelType,i=r.kernelName,o=r.kernelEntry,a=r.attributes;if(null!==this.currentKernelId)throw new Error(`kernel "[${s}] ${i}" is not allowed to be called recursively`);this.currentKernelId=e,a[0]&&(a[1]=a[0](a[1]),a[0]=void 0),st("info",(()=>`[WebGPU] Start to run kernel "[${s}] ${i}"...`));const l=this.env.debug;this.temporaryData=[];try{return l&&this.device.pushErrorScope("validation"),o(t,a[1]),0}catch(e){return n.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${i}" failed. ${e}`)),1}finally{l&&n.push(this.device.popErrorScope().then((e=>e?`GPU validation error for kernel "[${s}] ${i}": ${e.message}`:null)));for(const e of this.temporaryData)this.gpuDataManager.release(e.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(e,t,n,r){let s=this.sessionExternalDataMapping.get(e);s||(s=new Map,this.sessionExternalDataMapping.set(e,s));const i=s.get(t),o=this.gpuDataManager.registerExternalBuffer(n,r,i?.[1]);return s.set(t,[o,n]),o}unregisterBuffers(e){const t=this.sessionExternalDataMapping.get(e);t&&(t.forEach((e=>this.gpuDataManager.unregisterExternalBuffer(e[1]))),this.sessionExternalDataMapping.delete(e))}getBuffer(e){const t=this.gpuDataManager.get(e);if(!t)throw new Error(`no GPU data for buffer: ${e}`);return t.buffer}createDownloader(e,t,n){return async()=>{const r=await pt(this,e,t);return it(r.buffer,n)}}writeTimestamp(e){"inside-passes"===this.queryType&&this.computePassEncoder.writeTimestamp(this.querySet,e)}setQueryType(){this.queryType="none",("default"===this.env.webgpu.profiling?.mode||(void 0===this.env.trace?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),"none"!==this.queryType&&void 0===this.querySet&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:2*this.maxDispatchNumber}),this.queryResolveBuffer=this.device.createBuffer({size:2*this.maxDispatchNumber*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){st("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){st("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){st("info","replay"),this.sessionStatus="replaying";const e=this.capturedCommandList.get(this.currentSessionId),t=this.capturedPendingKernels.get(this.currentSessionId),n=e.length;this.pendingKernels=[];for(let r=0;r<n;r++){const n=this.getComputePassEncoder(),s=e[r];this.writeTimestamp(2*this.pendingDispatchNumber),n.setPipeline(s.computePipeline),n.setBindGroup(0,s.bindGroup),n.dispatchWorkgroups(...s.dispatchGroup),this.writeTimestamp(2*this.pendingDispatchNumber+1),this.pendingDispatchNumber++,"none"!==this.queryType&&this.pendingKernels.push(t[r]),(this.pendingDispatchNumber>=this.maxDispatchNumber||"at-passes"===this.queryType)&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onReleaseSession(e){this.unregisterBuffers(e),this.capturedCommandList.has(e)&&this.capturedCommandList.delete(e),this.capturedPendingKernels.has(e)&&this.capturedPendingKernels.delete(e),this.gpuDataManager.onReleaseSession(e)}onRunStart(e){this.currentSessionId=e,this.setQueryType()}}}}),ld={};V(ld,{init:()=>Ya});var dd,ud,cd,pd,hd,md,fd,gd,_d,wd,bd,yd,vd,xd,Md,Td,kd,$d,Sd,Cd,Pd,Ed,Fd,Ad,Id,zd,Bd,Od,Ld,Dd,Rd,Nd,Vd,jd,qd,Gd,Ud=N({"web/lib/wasm/jsep/init.ts"(){sl(),ad(),ol(),cl(),Xa=class e{constructor(e,t,n,r){this.module=e,this.dataType=t,this.data=n,this.dims=r}getFloat32Array(){if(1!==this.dataType)throw new Error("Invalid data type");const e=bt.size(this.dims);return 0===e?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,e)}getBigInt64Array(){if(7!==this.dataType)throw new Error("Invalid data type");const e=bt.size(this.dims);return 0===e?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,e)}getInt32Array(){if(6!==this.dataType)throw new Error("Invalid data type");const e=bt.size(this.dims);return 0===e?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,e)}reshape(t){if(bt.size(t)!==bt.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},Qa=class{constructor(e,t,n){this.module=e,this.backend=t,this.customDataOffset=0,this.customDataSize=0,this.adapterInfo=t.adapterInfo;const r=e.HEAPU32;let s=n>>>2;this.opKernelContext=r[s++];const i=r[s++];this.outputCount=r[s++],this.customDataOffset=r[s++],this.customDataSize=r[s++];const o=[];for(let t=0;t<i;t++){const t=r[s++],n=r[s++],i=r[s++],a=[];for(let e=0;e<i;e++)a.push(r[s++]);o.push(new Xa(e,t,n,a))}this.inputs=o}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}getMaxComputeWorkgroupSizes(){return[this.backend.device.limits.maxComputeWorkgroupSizeX,this.backend.device.limits.maxComputeWorkgroupSizeY,this.backend.device.limits.maxComputeWorkgroupSizeZ]}getMaxComputeWorkgroupStoragesize(){return this.backend.device.limits.maxComputeWorkgroupStorageSize}compute(e,t){const n=t?.inputs?.map((e=>"number"==typeof e?this.inputs[e]:e))??this.inputs,r=t?.outputs??[];return this.backend.run(e,n,r,((e,t,n)=>new Xa(this.module,t,this.output(e,n),n)),((e,t)=>{const n=We(e);if(!n)throw new Error(`Unsupported data type: ${e}`);const r=n*bt.size(t),s=r>0?this.backend.gpuDataManager.create(r).id:0;return new Xa(this.module,e,s,t)}),this.outputCount)}output(e,t){const n=this.module.stackSave();try{const n=this.module.stackAlloc(4*(1+t.length));let r=n>>2;this.module.HEAPU32[r++]=t.length;for(let e=0;e<t.length;e++)this.module.HEAPU32[r++]=t[e];return this.module._JsepOutput(this.opKernelContext,e,n)}catch(n){throw new Error(`Failed to generate kernel's output[${e}] with dims [${t}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(n)}}},Ya=async(e,t,n,r)=>{const s=t.jsepInit;if(!s)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if("webgpu"===e){const e=new Ka;await e.initialize(n,r),s("webgpu",[e,t=>e.alloc(t),t=>e.free(t),(n,r,s,i=!1)=>{if(i)st("verbose",(()=>`[WebGPU] jsepCopyGpuToGpu: src=${n}, dst=${r}, size=${s}`)),e.memcpy(n,r);else{st("verbose",(()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${n}, gpuDataId=${r}, size=${s}`));const i=t.HEAPU8.subarray(n>>>0,(n>>>0)+s);e.upload(r,i)}},async(n,r,s)=>{st("verbose",(()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${n}, dataOffset=${r}, size=${s}`)),await e.download(n,(()=>t.HEAPU8.subarray(r>>>0,(r>>>0)+s)))},(n,r,s)=>e.createKernel(n,r,s,t.UTF8ToString(t._JsepGetNodeName(r))),t=>e.releaseKernel(t),(n,r,s,i)=>{st("verbose",(()=>`[WebGPU] jsepRun: sessionHandle=${s}, kernel=${n}, contextDataOffset=${r}`));const o=new Qa(t,e,r);return e.computeKernel(n,o,i)},()=>e.captureBegin(),()=>e.captureEnd(),()=>e.replay()])}else s("webnn")}}}),Wd=N({"web/lib/wasm/wasm-core-impl.ts"(){nl(),rl(),sl(),el(),tl(),il(),dd=(e,t)=>{0!==ze()._OrtInit(e,t)&&Le("Can't initialize onnxruntime.")},ud=async e=>{dd(e.wasm.numThreads,Ke(e.logLevel))},cd=async(e,t)=>{{const n=(Ud(),j(ld)).init;if("webgpu"===t){if("undefined"==typeof navigator||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let t=e.webgpu.adapter;if(t){if("object"!=typeof t.limits||"object"!=typeof t.features||"function"!=typeof t.requestDevice)throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{const n=e.webgpu.powerPreference;if(void 0!==n&&"low-power"!==n&&"high-performance"!==n)throw new Error(`Invalid powerPreference setting: "${n}"`);const r=e.webgpu.forceFallbackAdapter;if(void 0!==r&&"boolean"!=typeof r)throw new Error(`Invalid forceFallbackAdapter setting: "${r}"`);if(t=await navigator.gpu.requestAdapter({powerPreference:n,forceFallbackAdapter:r}),!t)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}await n("webgpu",ze(),e,t)}if("webnn"===t){if("undefined"==typeof navigator||!navigator.ml)throw new Error("WebNN is not supported in current environment");await n("webnn",ze(),e)}}},pd=new Map,hd=e=>{const t=ze(),n=t.stackSave();try{const n=t.stackAlloc(8);return 0!==t._OrtGetInputOutputCount(e,n,n+4)&&Le("Can't get session input/output count."),[t.HEAP32[n/4],t.HEAP32[n/4+1]]}finally{t.stackRestore(n)}},md=e=>{const t=ze(),n=t._malloc(e.byteLength);if(0===n)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,n),[n,e.byteLength]},fd=async(e,t)=>{let n,r;const s=ze();Array.isArray(e)?[n,r]=e:e.buffer===s.HEAPU8.buffer?[n,r]=[e.byteOffset,e.byteLength]:[n,r]=md(e);let i=0,o=0,a=0,l=[];const d=[],u=[];try{if([o,l]=qe(t),t?.externalData&&s.mountExternalData){const e=[];for(const n of t.externalData){const t="string"==typeof n?n:n.path;e.push(Ye("string"==typeof n?n:n.data).then((e=>{s.mountExternalData(t,e)})))}await Promise.all(e)}i=await s._OrtCreateSession(n,r,o),0===i&&Le("Can't create a session.");const[e,c]=hd(i),p=!!t?.enableGraphCapture,h=[],m=[],f=[];for(let t=0;t<e;t++){const e=s._OrtGetInputName(i,t);0===e&&Le("Can't get an input name."),d.push(e),h.push(s.UTF8ToString(e))}for(let e=0;e<c;e++){const n=s._OrtGetOutputName(i,e);0===n&&Le("Can't get an output name."),u.push(n);const r=s.UTF8ToString(n);m.push(r);{if(p&&void 0===t?.preferredOutputLocation){f.push("gpu-buffer");continue}const e="string"==typeof t?.preferredOutputLocation?t.preferredOutputLocation:t?.preferredOutputLocation?.[r]??"cpu";if("cpu"!==e&&"cpu-pinned"!==e&&"gpu-buffer"!==e)throw new Error(`Not supported preferred output location: ${e}.`);if(p&&"gpu-buffer"!==e)throw new Error(`Not supported preferred output location: ${e}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);f.push(e)}}let g=null;return f.some((e=>"gpu-buffer"===e))&&(a=s._OrtCreateBinding(i),0===a&&Le("Can't create IO binding."),g={handle:a,outputPreferredLocations:f,outputPreferredLocationsEncoded:f.map((e=>Qe(e)))}),pd.set(i,[i,d,u,g,p,!1]),[i,h,m]}catch(e){throw d.forEach((e=>s._OrtFree(e))),u.forEach((e=>s._OrtFree(e))),0!==a&&s._OrtReleaseBinding(a),0!==i&&s._OrtReleaseSession(i),e}finally{s._free(n),0!==o&&s._OrtReleaseSessionOptions(o),l.forEach((e=>s._free(e))),s.unmountExternalData?.()}},gd=e=>{const t=ze(),n=pd.get(e);if(!n)throw new Error(`cannot release session. invalid session id: ${e}`);const[r,s,i,o,a]=n;o&&(a&&t._OrtClearBoundOutputs(o.handle),t._OrtReleaseBinding(o.handle)),t.jsepOnReleaseSession?.(e),s.forEach((e=>t._OrtFree(e))),i.forEach((e=>t._OrtFree(e))),t._OrtReleaseSession(r),pd.delete(e)},_d=(e,t,n,r,s,i=!1)=>{if(!e)return void t.push(0);const o=ze(),a=e[0],l=e[1],d=e[3];let u,c;if("string"===a&&"gpu-buffer"===d)throw new Error("String tensor is not supported on GPU.");if(i&&"gpu-buffer"!==d)throw new Error(`External buffer must be provided for input/output index ${s} when enableGraphCapture is true.`);if("gpu-buffer"===d){const t=e[2].gpuBuffer,n=We(Ge(a));c=l.reduce(((e,t)=>e*t),1)*n;const i=o.jsepRegisterBuffer;if(!i)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');u=i(r,s,t,c)}else{const t=e[2];if(Array.isArray(t)){c=4*t.length,u=o._malloc(c),n.push(u);let e=u/4;for(let r=0;r<t.length;r++){if("string"!=typeof t[r])throw new TypeError(`tensor data at index ${r} is not a string`);o.HEAPU32[e++]=Be(t[r],n)}}else c=t.byteLength,u=o._malloc(c),n.push(u),o.HEAPU8.set(new Uint8Array(t.buffer,t.byteOffset,c),u)}const p=o.stackSave(),h=o.stackAlloc(4*l.length);try{let e=h/4;l.forEach((t=>o.HEAP32[e++]=t));const n=o._OrtCreateTensor(Ge(a),u,c,h,l.length,Qe(d));0===n&&Le(`Can't create tensor for input/output. session=${r}, index=${s}.`),t.push(n)}finally{o.stackRestore(p)}},wd=async(e,t,n,r,s,i)=>{const o=ze(),a=pd.get(e);if(!a)throw new Error(`cannot run inference. invalid session id: ${e}`);const l=a[0],d=a[1],u=a[2],c=a[3],p=a[4],h=a[5],m=t.length,f=r.length;let g=0,_=[];const w=[],b=[],y=[],v=o.stackSave(),x=o.stackAlloc(4*m),M=o.stackAlloc(4*m),T=o.stackAlloc(4*f),k=o.stackAlloc(4*f);try{[g,_]=De(i);for(let r=0;r<m;r++)_d(n[r],w,y,e,t[r],p);for(let t=0;t<f;t++)_d(s[t],b,y,e,m+r[t],p);let a,v=x/4,$=M/4,S=T/4,C=k/4;for(let e=0;e<m;e++)o.HEAPU32[v++]=w[e],o.HEAPU32[$++]=d[t[e]];for(let e=0;e<f;e++)o.HEAPU32[S++]=b[e],o.HEAPU32[C++]=u[r[e]];if(c&&!h){const{handle:n,outputPreferredLocations:i,outputPreferredLocationsEncoded:a}=c;if(d.length!==m)throw new Error(`input count from feeds (${m}) is expected to be always equal to model's input count (${d.length}).`);for(let r=0;r<m;r++){const s=t[r];0!==await o._OrtBindInput(n,d[s],w[r])&&Le(`Can't bind input[${r}] for session=${e}.`)}for(let t=0;t<f;t++){const l=r[t],d=s[t]?.[3];if(d){0!==o._OrtBindOutput(n,u[l],b[t],0)&&Le(`Can't bind pre-allocated output[${t}] for session=${e}.`)}else{0!==o._OrtBindOutput(n,u[l],0,a[l])&&Le(`Can't bind output[${t}] to ${i[t]} for session=${e}.`)}}pd.set(e,[l,d,u,c,p,!0])}o.jsepOnRunStart?.(l),a=c?await o._OrtRunWithBinding(l,c.handle,f,T,g):await o._OrtRun(l,M,x,m,k,f,T,g),0!==a&&Le("failed to call OrtRun().");const P=[];for(let e=0;e<f;e++){const t=o.HEAPU32[T/4+e];if(t===b[e]){P.push(s[e]);continue}const n=o.stackSave(),i=o.stackAlloc(16);let a,l=!1,d=0;try{0!==o._OrtGetTensorData(t,i,i+4,i+8,i+12)&&Le(`Can't access output tensor data on index ${e}.`);let n=i/4;const s=o.HEAPU32[n++];d=o.HEAPU32[n++];const u=o.HEAPU32[n++],p=o.HEAPU32[n++],h=[];for(let e=0;e<p;e++)h.push(o.HEAPU32[u/4+e]);o._OrtFree(u);const m=h.reduce(((e,t)=>e*t),1);a=Ue(s);const f=c?.outputPreferredLocations[r[e]];if("string"===a){if("gpu-buffer"===f)throw new Error("String tensor is not supported on GPU.");const e=[];let t=d/4;for(let n=0;n<m;n++){const r=o.HEAPU32[t++],s=n===m-1?void 0:o.HEAPU32[t]-r;e.push(o.UTF8ToString(r,s))}P.push([a,h,e,"cpu"])}else if("gpu-buffer"===f&&m>0){const e=o.jsepGetBuffer;if(!e)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');const n=e(d),r=We(s);if(void 0===r||!Xe(a))throw new Error(`Unsupported data type: ${a}`);l=!0,P.push([a,h,{gpuBuffer:n,download:o.jsepCreateDownloader(n,m*r,a),dispose:()=>{o._OrtReleaseTensor(t)}},"gpu-buffer"])}else{const e=new(He(a))(m);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(o.HEAPU8.subarray(d,d+e.byteLength)),P.push([a,h,e,"cpu"])}}finally{o.stackRestore(n),"string"===a&&d&&o._free(d),l||o._OrtReleaseTensor(t)}}return c&&!p&&(o._OrtClearBoundOutputs(c.handle),pd.set(e,[l,d,u,c,p,!1])),P}finally{o.stackRestore(v),w.forEach((e=>o._OrtReleaseTensor(e))),b.forEach((e=>o._OrtReleaseTensor(e))),y.forEach((e=>o._free(e))),0!==g&&o._OrtReleaseRunOptions(g),_.forEach((e=>o._free(e)))}},bd=e=>{const t=ze(),n=pd.get(e);if(!n)throw new Error("invalid session id");const r=n[0],s=t._OrtEndProfiling(r);0===s&&Le("Can't get an profile file name."),t._OrtFree(s)},yd=e=>{const t=[];for(const n of e){const e=n[2];!Array.isArray(e)&&"buffer"in e&&t.push(e.buffer)}return t}}}),Hd=N({"web/lib/wasm/proxy-wrapper.ts"(){me(),Wd(),el(),Ja(),vd=()=>!!c.wasm.proxy&&"undefined"!=typeof document,Md=!1,Td=!1,kd=!1,Cd=new Map,Pd=(e,t)=>{const n=Cd.get(e);n?n.push(t):Cd.set(e,[t])},Ed=()=>{if(Md||!Td||kd||!xd)throw new Error("worker not ready")},Fd=e=>{switch(e.data.type){case"init-wasm":Md=!1,e.data.err?(kd=!0,Sd[1](e.data.err)):(Td=!0,Sd[0]()),$d&&(URL.revokeObjectURL($d),$d=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{const t=Cd.get(e.data.type);e.data.err?t.shift()[1](e.data.err):t.shift()[0](e.data.out);break}}},Ad=async()=>{if(!Td){if(Md)throw new Error("multiple calls to 'initWasm()' detected.");if(kd)throw new Error("previous call to 'initWasm()' failed.");if(Md=!0,vd())return new Promise(((e,t)=>{xd?.terminate(),ke().then((([n,r])=>{try{(xd=r).onerror=e=>t(e),xd.onmessage=Fd,Sd=[e,t];const s={type:"init-wasm",in:c};xd.postMessage(s),$d=n}catch(e){t(e)}}),t)}));try{await Ie(c.wasm),await ud(c),Td=!0}catch(e){throw kd=!0,e}finally{Md=!1}}},Id=async e=>{if(vd())return Ed(),new Promise(((t,n)=>{Pd("init-ep",[t,n]);const r={type:"init-ep",in:{epName:e,env:c}};xd.postMessage(r)}));await cd(c,e)},zd=async e=>vd()?(Ed(),new Promise(((t,n)=>{Pd("copy-from",[t,n]);const r={type:"copy-from",in:{buffer:e}};xd.postMessage(r,[e.buffer])}))):md(e),Bd=async(e,t)=>{if(vd()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return Ed(),new Promise(((n,r)=>{Pd("create",[n,r]);const s={type:"create",in:{model:e,options:{...t}}},i=[];e instanceof Uint8Array&&i.push(e.buffer),xd.postMessage(s,i)}))}return fd(e,t)},Od=async e=>{if(vd())return Ed(),new Promise(((t,n)=>{Pd("release",[t,n]);const r={type:"release",in:e};xd.postMessage(r)}));gd(e)},Ld=async(e,t,n,r,s,i)=>{if(vd()){if(n.some((e=>"cpu"!==e[3])))throw new Error("input tensor on GPU is not supported for proxy.");if(s.some((e=>e)))throw new Error("pre-allocated output tensor is not supported for proxy.");return Ed(),new Promise(((s,o)=>{Pd("run",[s,o]);const a=n,l={type:"run",in:{sessionId:e,inputIndices:t,inputs:a,outputIndices:r,options:i}};xd.postMessage(l,yd(a))}))}return wd(e,t,n,r,s,i)},Dd=async e=>{if(vd())return Ed(),new Promise(((t,n)=>{Pd("end-profiling",[t,n]);const r={type:"end-profiling",in:e};xd.postMessage(r)}));bd(e)}}}),Kd=N({"web/lib/wasm/session-handler-inference.ts"(){me(),Hd(),sl(),fe(),il(),Rd=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},Nd=e=>{switch(e[3]){case"cpu":return new $(e[0],e[2],e[1]);case"gpu-buffer":{const t=e[0];if(!Xe(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);const{gpuBuffer:n,download:r,dispose:s}=e[2];return $.fromGpuBuffer(n,{dataType:t,dims:e[1],download:r,dispose:s})}default:throw new Error(`invalid data location: ${e[3]}`)}},Vd=class{async fetchModelAndCopyToWasmMemory(e){return zd(await Ye(e))}async loadModel(e,t){let n;P(),n="string"==typeof e?ue?await Ye(e):await this.fetchModelAndCopyToWasmMemory(e):e,[this.sessionId,this.inputNames,this.outputNames]=await Bd(n,t),E()}async dispose(){return Od(this.sessionId)}async run(e,t,n){P();const r=[],s=[];Object.entries(e).forEach((e=>{const t=e[0],n=e[1],i=this.inputNames.indexOf(t);if(-1===i)throw new Error(`invalid input '${t}'`);r.push(n),s.push(i)}));const i=[],o=[];Object.entries(t).forEach((e=>{const t=e[0],n=e[1],r=this.outputNames.indexOf(t);if(-1===r)throw new Error(`invalid output '${t}'`);i.push(n),o.push(r)}));const a=r.map(((e,t)=>Rd(e,(()=>`input "${this.inputNames[s[t]]}"`)))),l=i.map(((e,t)=>e?Rd(e,(()=>`output "${this.outputNames[o[t]]}"`)):null)),d=await Ld(this.sessionId,s,a,o,l,n),u={};for(let e=0;e<d.length;e++)u[this.outputNames[o[e]]]=i[e]??Nd(d[e]);return E(),u}startProfiling(){}endProfiling(){Dd(this.sessionId)}}}}),Xd=N({"web/lib/backend-wasm.ts"(){me(),Hd(),Kd(),Ja(),jd=()=>{if(("number"!=typeof c.wasm.initTimeout||c.wasm.initTimeout<0)&&(c.wasm.initTimeout=0),!1===c.wasm.simd&&console.warn('Deprecated property "env.wasm.simd" is set to false. non-SIMD build is no longer provided, and this setting will be ignored.'),"boolean"!=typeof c.wasm.proxy&&(c.wasm.proxy=!1),"boolean"!=typeof c.wasm.trace&&(c.wasm.trace=!1),"number"!=typeof c.wasm.numThreads||!Number.isInteger(c.wasm.numThreads)||c.wasm.numThreads<=0)if("undefined"==typeof self||self.crossOriginIsolated){const e="undefined"==typeof navigator?R("node:os").cpus().length:navigator.hardwareConcurrency;c.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}else c.wasm.numThreads=1;void 0===c.wasm.wasmPaths&&_e&&0!==_e.indexOf("blob:")&&(c.wasm.wasmPaths=_e.substring(0,_e.lastIndexOf("/")+1))},qd=class{async init(e){jd(),await Ad(),await Id(e)}async createInferenceSessionHandler(e,t){const n=new Vd;return await n.loadModel(e,t),Promise.resolve(n)}}}}),Qd={};V(Qd,{wasmBackend:()=>Gd});var Yd=N({"web/lib/backend-wasm-inference.ts"(){Xd(),Gd=new qd}});me(),me(),me();var Zd=de;{const e=(Yd(),j(Qd)).wasmBackend;i("webgpu",e,5),i("webnn",e,5),i("cpu",e,10),i("wasm",e,10)}Object.defineProperty(c.versions,"web",{value:"1.19.0-esmtest.20240618-d229c160",enumerable:!0})}
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */,"./src/backends/onnx.js":
/*!******************************!*\
  !*** ./src/backends/onnx.js ***!
  \******************************/(e,t,n)=>{var r;n.r(t),n.d(t,{Tensor:()=>a.Tensor,createInferenceSession:()=>h,deviceToExecutionProviders:()=>p,isONNXProxy:()=>g,isONNXTensor:()=>m});var s=n(/*! ../env.js */"./src/env.js"),i=n(/*! onnxruntime-node */"?2ce3"),o=n(/*! onnxruntime-web/webgpu */"./node_modules/onnxruntime-web/dist/ort.webgpu.mjs"),a=n(/*! onnxruntime-common */"./node_modules/onnxruntime-common/dist/esm/index.js");const l=[];let d,u;s.apis.IS_NODE_ENV?(u=i??(r||(r=n.t(i,2))),l.push("cpu"),d=["cpu"]):(u=o,s.apis.IS_WEBGPU_AVAILABLE&&l.push("webgpu"),l.push("wasm"),d=["wasm"]);const c=u.InferenceSession;function p(e){let t=d;if(e){if(!l.includes(e))throw new Error(`Unsupported device: "${e}". Should be one of: ${l.join(", ")}.`);t=[e]}return t}async function h(e,t){return await c.create(e,t)}function m(e){return e instanceof u.Tensor}const f=u?.env;if(f?.wasm){f.wasm.wasmPaths="https://cdn.jsdelivr.net/npm/onnxruntime-web@1.18.0/dist/",f.wasm.proxy=!s.apis.IS_WEBWORKER_ENV,"undefined"!=typeof crossOriginIsolated&&crossOriginIsolated||(f.wasm.numThreads=1);"undefined"!=typeof navigator&&/iP(hone|od|ad).+16_4.+AppleWebKit/.test(navigator.userAgent)&&(f.wasm.simd=!1)}function g(){return f?.wasm?.proxy}s.env.backends.onnx=f},"./src/configs.js":
/*!************************!*\
  !*** ./src/configs.js ***!
  \************************/(e,t,n)=>{n.r(t),n.d(t,{AutoConfig:()=>l,PretrainedConfig:()=>a,getKeyValueShapes:()=>o});var r=n(/*! ./utils/core.js */"./src/utils/core.js"),s=n(/*! ./utils/hub.js */"./src/utils/hub.js");function i(e){const t={};let n={};switch(e.model_type){case"llava":case"paligemma":case"florence2":n=i(e.text_config);break;case"moondream1":n=i(e.phi_config);break;case"musicgen":n=i(e.decoder);break;case"gpt2":case"gptj":case"codegen":case"gpt_bigcode":t.num_heads="n_head",t.num_layers="n_layer",t.hidden_size="n_embd";break;case"gpt_neox":case"stablelm":case"opt":case"phi":case"phi3":case"falcon":t.num_heads="num_attention_heads",t.num_layers="num_hidden_layers",t.hidden_size="hidden_size";break;case"llama":case"cohere":case"mistral":case"starcoder2":case"qwen2":t.num_heads="num_key_value_heads",t.num_layers="num_hidden_layers",t.hidden_size="hidden_size",t.num_attention_heads="num_attention_heads";break;case"gemma":t.num_heads="num_key_value_heads",t.num_layers="num_hidden_layers",t.dim_kv="head_dim";break;case"openelm":t.num_heads="num_kv_heads",t.num_layers="num_transformer_layers",t.dim_kv="head_dim";break;case"gpt_neo":case"donut-swin":t.num_heads="num_heads",t.num_layers="num_layers",t.hidden_size="hidden_size";break;case"bloom":t.num_heads="n_head",t.num_layers="n_layer",t.hidden_size="hidden_size";break;case"mpt":t.num_heads="n_heads",t.num_layers="n_layers",t.hidden_size="d_model";break;case"t5":case"mt5":case"longt5":t.num_decoder_layers="num_decoder_layers",t.num_decoder_heads="num_heads",t.decoder_dim_kv="d_kv",t.num_encoder_layers="num_layers",t.num_encoder_heads="num_heads",t.encoder_dim_kv="d_kv";break;case"bart":case"mbart":case"marian":case"whisper":case"m2m_100":case"blenderbot":case"blenderbot-small":case"florence2_language":t.num_decoder_layers="decoder_layers",t.num_decoder_heads="decoder_attention_heads",t.decoder_hidden_size="d_model",t.num_encoder_layers="encoder_layers",t.num_encoder_heads="encoder_attention_heads",t.encoder_hidden_size="d_model";break;case"speecht5":t.num_decoder_layers="decoder_layers",t.num_decoder_heads="decoder_attention_heads",t.decoder_hidden_size="hidden_size",t.num_encoder_layers="encoder_layers",t.num_encoder_heads="encoder_attention_heads",t.encoder_hidden_size="hidden_size";break;case"trocr":t.num_encoder_layers=t.num_decoder_layers="decoder_layers",t.num_encoder_heads=t.num_decoder_heads="decoder_attention_heads",t.encoder_hidden_size=t.decoder_hidden_size="d_model";break;case"musicgen_decoder":t.num_encoder_layers=t.num_decoder_layers="num_hidden_layers",t.num_encoder_heads=t.num_decoder_heads="num_attention_heads",t.encoder_hidden_size=t.decoder_hidden_size="hidden_size";break;case"vision-encoder-decoder":const s=i(e.decoder),o="num_decoder_layers"in s,a=(0,r.pick)(e,["model_type","is_encoder_decoder"]);return o?(a.num_decoder_layers=s.num_decoder_layers,a.num_decoder_heads=s.num_decoder_heads,a.decoder_hidden_size=s.decoder_hidden_size,a.num_encoder_layers=s.num_encoder_layers,a.num_encoder_heads=s.num_encoder_heads,a.encoder_hidden_size=s.encoder_hidden_size):(a.num_layers=s.num_layers,a.num_heads=s.num_heads,a.hidden_size=s.hidden_size),a}const s={...n,...(0,r.pick)(e,["model_type","multi_query","is_encoder_decoder"])};for(const n in t)s[n]=e[t[n]];return s}function o(e,{prefix:t="past_key_values"}={}){const n={},r=e.normalized_config;if(r.is_encoder_decoder&&"num_encoder_heads"in r&&"num_decoder_heads"in r){const e=r.encoder_dim_kv??r.encoder_hidden_size/r.num_encoder_heads,s=r.decoder_dim_kv??r.decoder_hidden_size/r.num_decoder_heads,i=[1,r.num_encoder_heads,0,e],o=[1,r.num_decoder_heads,0,s];for(let e=0;e<r.num_decoder_layers;++e)n[`${t}.${e}.encoder.key`]=i,n[`${t}.${e}.encoder.value`]=i,n[`${t}.${e}.decoder.key`]=o,n[`${t}.${e}.decoder.value`]=o}else{const e=r.num_heads,s=r.num_layers,i=r.dim_kv??r.hidden_size/(r.num_attention_heads??e);if("falcon"===r.model_type){const r=[1*e,0,i];for(let e=0;e<s;++e)n[`${t}.${e}.key`]=r,n[`${t}.${e}.value`]=r}else if(r.multi_query){const r=[1*e,0,2*i];for(let e=0;e<s;++e)n[`${t}.${e}.key_value`]=r}else if("bloom"===r.model_type){const r=[1*e,i,0],o=[1*e,0,i];for(let e=0;e<s;++e)n[`${t}.${e}.key`]=r,n[`${t}.${e}.value`]=o}else if("openelm"===r.model_type)for(let r=0;r<s;++r){const s=[1,e[r],0,i];n[`${t}.${r}.key`]=s,n[`${t}.${r}.value`]=s}else{const r=[1,e,0,i];for(let e=0;e<s;++e)n[`${t}.${e}.key`]=r,n[`${t}.${e}.value`]=r}}return n}class a{max_position_embeddings;constructor(e){this.model_type=null,this.is_encoder_decoder=!1,Object.assign(this,e),this.normalized_config=i(this)}static async from_pretrained(e,{progress_callback:t=null,config:n=null,cache_dir:r=null,local_files_only:i=!1,revision:o="main"}={}){!n||n instanceof a||(n=new a(n));const l=n??await async function(e,t){return await(0,s.getModelJSON)(e,"config.json",!0,t)}(e,{progress_callback:t,config:n,cache_dir:r,local_files_only:i,revision:o});return new this(l)}}class l{static async from_pretrained(...e){return a.from_pretrained(...e)}}},"./src/env.js":
/*!********************!*\
  !*** ./src/env.js ***!
  \********************/(e,t,n)=>{n.r(t),n.d(t,{apis:()=>m,env:()=>b});var r=n(/*! fs */"?569f"),s=n(/*! path */"?3f59"),i=n(/*! url */"?154a");const o="undefined"!=typeof self,a=o&&"DedicatedWorkerGlobalScope"===self.constructor.name,l=o&&"caches"in self,d="undefined"!=typeof navigator&&"gpu"in navigator,u="undefined"!=typeof process,c=u&&"node"===process?.release?.name,p=!y(r),h=!y(s),m=Object.freeze({IS_BROWSER_ENV:o,IS_WEBWORKER_ENV:a,IS_WEB_CACHE_AVAILABLE:l,IS_WEBGPU_AVAILABLE:d,IS_PROCESS_AVAILABLE:u,IS_NODE_ENV:c,IS_FS_AVAILABLE:p,IS_PATH_AVAILABLE:h}),f=p&&h,g=f?s.dirname(s.dirname(i.fileURLToPath("file:///Users/admin/Code/transformers.js/src/env.js"))):"./",_=f?s.join(g,"/.cache/"):null,w="/models/",b={version:"3.0.0-alpha.0",backends:{onnx:{},tfjs:{}},allowRemoteModels:!0,remoteHost:"https://huggingface.co/",remotePathTemplate:"{model}/resolve/{revision}/",allowLocalModels:!o,localModelPath:f?s.join(g,w):w,useFS:p,useBrowserCache:l,useFSCache:p,cacheDir:_,useCustomCache:!1,customCache:null};function y(e){return 0===Object.keys(e).length}},"./src/generation/configuration_utils.js":
/*!***********************************************!*\
  !*** ./src/generation/configuration_utils.js ***!
  \***********************************************/(e,t,n)=>{n.r(t),n.d(t,{GenerationConfig:()=>s});var r=n(/*! ../utils/core.js */"./src/utils/core.js");class s{max_length=20;max_new_tokens=null;min_length=0;min_new_tokens=null;early_stopping=!1;max_time=null;do_sample=!1;num_beams=1;num_beam_groups=1;penalty_alpha=null;use_cache=!0;temperature=1;top_k=50;top_p=1;typical_p=1;epsilon_cutoff=0;eta_cutoff=0;diversity_penalty=0;repetition_penalty=1;encoder_repetition_penalty=1;length_penalty=1;no_repeat_ngram_size=0;bad_words_ids=null;force_words_ids=null;renormalize_logits=!1;constraints=null;forced_bos_token_id=null;forced_eos_token_id=null;remove_invalid_values=!1;exponential_decay_length_penalty=null;suppress_tokens=null;begin_suppress_tokens=null;forced_decoder_ids=null;guidance_scale=null;num_return_sequences=1;output_attentions=!1;output_hidden_states=!1;output_scores=!1;return_dict_in_generate=!1;pad_token_id=null;bos_token_id=null;eos_token_id=null;encoder_no_repeat_ngram_size=0;decoder_start_token_id=null;generation_kwargs={};constructor(e){Object.assign(this,(0,r.pick)(e,Object.getOwnPropertyNames(this)))}}},"./src/generation/logits_process.js":
/*!******************************************!*\
  !*** ./src/generation/logits_process.js ***!
  \******************************************/(e,t,n)=>{n.r(t),n.d(t,{ClassifierFreeGuidanceLogitsProcessor:()=>_,ForcedBOSTokenLogitsProcessor:()=>l,ForcedEOSTokenLogitsProcessor:()=>d,LogitsProcessor:()=>i,LogitsProcessorList:()=>a,LogitsWarper:()=>o,MinLengthLogitsProcessor:()=>m,MinNewTokensLengthLogitsProcessor:()=>f,NoBadWordsLogitsProcessor:()=>g,NoRepeatNGramLogitsProcessor:()=>p,RepetitionPenaltyLogitsProcessor:()=>h,SuppressTokensAtBeginLogitsProcessor:()=>u,TemperatureLogitsWarper:()=>w,TopKLogitsWarper:()=>y,TopPLogitsWarper:()=>b,WhisperTimeStampLogitsProcessor:()=>c});var r=n(/*! ../utils/generic.js */"./src/utils/generic.js"),s=(n(/*! ../utils/tensor.js */"./src/utils/tensor.js"),n(/*! ../utils/maths.js */"./src/utils/maths.js"));class i extends r.Callable{_call(e,t){throw Error("`_call` should be implemented in a subclass")}}class o extends r.Callable{_call(e,t){throw Error("`_call` should be implemented in a subclass")}}class a extends r.Callable{constructor(){super(),this.processors=[]}push(e){this.processors.push(e)}extend(e){this.processors.push(...e)}_call(e,t){let n=t;for(const t of this.processors)n=t(e,n);return n}[Symbol.iterator](){return this.processors.values()}}class l extends i{constructor(e){super(),this.bos_token_id=e}_call(e,t){for(let n=0;n<e.length;++n)if(1===e[n].length){const e=t[n];e.data.fill(-1/0),e.data[this.bos_token_id]=0}return t}}class d extends i{constructor(e,t){super(),this.max_length=e,this.eos_token_id=Array.isArray(t)?t:[t]}_call(e,t){for(let n=0;n<e.length;++n)if(e[n].length===this.max_length-1){const e=t[n];e.data.fill(-1/0);for(const t of this.eos_token_id)e.data[t]=0}return t}}class u extends i{constructor(e,t){super(),this.begin_suppress_tokens=e,this.begin_index=t}_call(e,t){for(let n=0;n<e.length;++n)if(e[n].length===this.begin_index){const e=t[n];for(const t of this.begin_suppress_tokens)e.data[t]=-1/0}return t}}class c extends i{constructor(e,t){super(),this.eos_token_id=Array.isArray(e.eos_token_id)?e.eos_token_id[0]:e.eos_token_id,this.no_timestamps_token_id=e.no_timestamps_token_id,this.timestamp_begin=this.no_timestamps_token_id+1,this.begin_index=t.length,t.at(-1)===this.no_timestamps_token_id&&(this.begin_index-=1),this.max_initial_timestamp_index=e.max_initial_timestamp_index}_call(e,t){for(let n=0;n<e.length;++n){const r=t[n].data;if(r[this.no_timestamps_token_id]=-1/0,e[n].length===this.begin_index-1){r.fill(-1/0),r[this.timestamp_begin]=0;continue}const i=e[n].slice(this.begin_index),o=i.length>=1&&i[i.length-1]>=this.timestamp_begin,a=i.length<2||i[i.length-2]>=this.timestamp_begin;if(o&&(a?r.subarray(this.timestamp_begin).fill(-1/0):r.subarray(0,this.eos_token_id).fill(-1/0)),e[n].length===this.begin_index&&null!==this.max_initial_timestamp_index){const e=this.timestamp_begin+this.max_initial_timestamp_index;r.subarray(e+1).fill(-1/0)}const l=(0,s.log_softmax)(r);Math.log(l.subarray(this.timestamp_begin).map(Math.exp).reduce(((e,t)=>e+t)))>(0,s.max)(l.subarray(0,this.timestamp_begin))[0]&&r.subarray(0,this.timestamp_begin).fill(-1/0)}return t}}class p extends i{constructor(e){super(),this.no_repeat_ngram_size=e}getNgrams(e){const t=e.length,n=[];for(let r=0;r<t+1-this.no_repeat_ngram_size;++r){const t=[];for(let n=0;n<this.no_repeat_ngram_size;++n)t.push(e[r+n]);n.push(t.map(Number))}const r=new Map;for(const e of n){const t=e.slice(0,e.length-1),n=JSON.stringify(t),s=r.get(n)??[];s.push(e[e.length-1]),r.set(n,s)}return r}getGeneratedNgrams(e,t){const n=t.slice(t.length+1-this.no_repeat_ngram_size,t.length);return e.get(JSON.stringify(n.map(Number)))??[]}calcBannedNgramTokens(e){const t=[];if(e.length+1<this.no_repeat_ngram_size)return t;{const t=this.getNgrams(e);return this.getGeneratedNgrams(t,e)}}_call(e,t){for(let n=0;n<e.length;++n){const r=t[n],s=this.calcBannedNgramTokens(e[n]);for(const e of s)r.data[e]=-1/0}return t}}class h extends i{constructor(e){super(),this.penalty=e}_call(e,t){for(let n=0;n<e.length;++n){const r=t[n];for(const t of e[n])r.data[t]<0?r.data[t]*=this.penalty:r.data[t]/=this.penalty}return t}}class m extends i{constructor(e,t){super(),this.min_length=e,this.eos_token_id=Array.isArray(t)?t:[t]}_call(e,t){for(let n=0;n<e.length;++n)if(e[n].length<this.min_length){const e=t[n];for(const t of this.eos_token_id)e.data[t]=-1/0}return t}}class f extends i{constructor(e,t,n){super(),this.prompt_length_to_skip=e,this.min_new_tokens=t,this.eos_token_id=Array.isArray(n)?n:[n]}_call(e,t){for(let n=0;n<e.length;++n){if(e[n].length-this.prompt_length_to_skip<this.min_new_tokens){const e=t[n];for(const t of this.eos_token_id)e[t]=-1/0}}return t}}class g extends i{constructor(e,t){super(),this.bad_words_ids=e,this.eos_token_id=Array.isArray(t)?t:[t]}_call(e,t){for(let n=0;n<e.length;++n){const r=t[n];for(const t of this.bad_words_ids){let n=!0;for(let r=1;r<=t.length-1&&t.length<e[r].length;++r)if(t.at(-r-1)!==Number(e[r].at(-r))){n=!1;break}n&&(r[t.at(-1)]=-1/0)}}return t}}class _ extends i{constructor(e){if(super(),e<=1)throw new Error(`Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${e}.`);this.guidance_scale=e}_call(e,t){if(t.dims[0]!==2*e.length)throw new Error(`Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${t.dims[0]} for the logits and ${e.length} for the input ids.`);const n=e.length,r=t.slice([0,n],null),s=t.slice([n,t.dims[0]],null);for(let e=0;e<s.data.length;++e)s.data[e]+=(r.data[e]-s.data[e])*this.guidance_scale;return s}}class w extends o{constructor(e){if(super(),"number"!=typeof e||e<=0){let t=`\`temperature\` (=${e}) must be a strictly positive float, otherwise your next token scores will be invalid.`;0===e&&(t+=" If you're looking for greedy decoding strategies, set `do_sample=false`.")}this.temperature=e}_call(e,t){const n=t.data;for(let e=0;e<n.length;++e)n[e]/=this.temperature;return t}}class b extends o{constructor(e,{filter_value:t=-1/0,min_tokens_to_keep:n=1}={}){if(super(),e<0||e>1)throw new Error(`\`top_p\` must be a float > 0 and < 1, but is ${e}`);if(!Number.isInteger(n)||n<1)throw new Error(`\`min_tokens_to_keep\` must be a positive integer, but is ${n}`);this.top_p=e,this.filter_value=t,this.min_tokens_to_keep=n}}class y extends o{constructor(e,{filter_value:t=-1/0,min_tokens_to_keep:n=1}={}){if(super(),!Number.isInteger(e)||e<0)throw new Error(`\`top_k\` must be a positive integer, but is ${e}`);this.top_k=Math.max(e,n),this.filter_value=t}}},"./src/generation/logits_sampler.js":
/*!******************************************!*\
  !*** ./src/generation/logits_sampler.js ***!
  \******************************************/(e,t,n)=>{n.r(t),n.d(t,{LogitsSampler:()=>o});var r=n(/*! ../utils/generic.js */"./src/utils/generic.js"),s=n(/*! ../utils/tensor.js */"./src/utils/tensor.js"),i=n(/*! ../utils/maths.js */"./src/utils/maths.js");n(/*! ../generation/configuration_utils.js */"./src/generation/configuration_utils.js");class o extends r.Callable{constructor(e){super(),this.generation_config=e}async _call(e){return this.sample(e)}async sample(e){throw Error("sample should be implemented in subclasses.")}getLogits(e,t){let n=e.dims.at(-1),r=e.data;if(-1===t)r=r.slice(-n);else{let e=t*n;r=r.slice(e,e+n)}return r}randomSelect(e){let t=0;for(let n=0;n<e.length;++n)t+=e[n];let n=Math.random()*t;for(let t=0;t<e.length;++t)if(n-=e[t],n<=0)return t;return 0}static getSampler(e){if(e.do_sample)return new l(e);if(e.num_beams>1)return new d(e);if(e.num_return_sequences>1)throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${e.num_return_sequences}.`);return new a(e)}}class a extends o{async sample(e){const t=(0,i.max)(e.data)[1];return[[BigInt(t),0]]}}class l extends o{async sample(e){let t=e.dims.at(-1);this.generation_config.top_k>0&&(t=Math.min(this.generation_config.top_k,t));const[n,r]=await(0,s.topk)(e,t),o=(0,i.softmax)(n.data);return Array.from({length:this.generation_config.num_beams},(()=>{const e=this.randomSelect(o);return[r.data[e],Math.log(o[e])]}))}}class d extends o{async sample(e){let t=e.dims.at(-1);this.generation_config.top_k>0&&(t=Math.min(this.generation_config.top_k,t));const[n,r]=await(0,s.topk)(e,t),o=(0,i.softmax)(n.data);return Array.from({length:this.generation_config.num_beams},((e,t)=>[r.data[t],Math.log(o[t])]))}}},"./src/generation/stopping_criteria.js":
/*!*********************************************!*\
  !*** ./src/generation/stopping_criteria.js ***!
  \*********************************************/(e,t,n)=>{n.r(t),n.d(t,{EosTokenCriteria:()=>a,InterruptableStoppingCriteria:()=>l,MaxLengthCriteria:()=>o,StoppingCriteria:()=>s,StoppingCriteriaList:()=>i});var r=n(/*! ../utils/generic.js */"./src/utils/generic.js");class s extends r.Callable{_call(e,t){throw Error("StoppingCriteria needs to be subclassed")}}class i extends r.Callable{constructor(){super(),this.criteria=[]}push(e){this.criteria.push(e)}extend(e){e instanceof i?e=e.criteria:e instanceof s&&(e=[e]),this.criteria.push(...e)}_call(e,t){const n=new Array(e.length).fill(!1);for(const r of this.criteria){const s=r(e,t);for(let e=0;e<n.length;++e)n[e]||=s[e]}return n}[Symbol.iterator](){return this.criteria.values()}}class o extends s{constructor(e,t=null){super(),this.max_length=e,this.max_position_embeddings=t}_call(e){return e.map((e=>e.length>=this.max_length))}}class a extends s{constructor(e){super(),Array.isArray(e)||(e=[e]),this.eos_token_id=e}_call(e,t){return e.map((e=>{const t=e.at(-1);return this.eos_token_id.some((e=>t==e))}))}}class l extends s{constructor(){super(),this.interrupted=!1}interrupt(){this.interrupted=!0}reset(){this.interrupted=!1}_call(e,t){return new Array(e.length).fill(this.interrupted)}}},"./src/generation/streamers.js":
/*!*************************************!*\
  !*** ./src/generation/streamers.js ***!
  \*************************************/(e,t,n)=>{n.r(t),n.d(t,{BaseStreamer:()=>o,TextStreamer:()=>l,WhisperTextStreamer:()=>d});var r=n(/*! ../utils/core.js */"./src/utils/core.js"),s=n(/*! ../tokenizers.js */"./src/tokenizers.js"),i=n(/*! ../env.js */"./src/env.js");class o{put(e){throw Error("Not implemented")}end(){throw Error("Not implemented")}}const a=i.apis.IS_PROCESS_AVAILABLE?e=>process.stdout.write(e):e=>console.log(e);class l extends o{constructor(e,{skip_prompt:t=!1,callback_function:n=null,token_callback_function:r=null,decode_kwargs:s={},...i}={}){super(),this.tokenizer=e,this.skip_prompt=t,this.callback_function=n??a,this.token_callback_function=r,this.decode_kwargs={...s,...i},this.token_cache=[],this.print_len=0,this.next_tokens_are_prompt=!0}put(e){if(e.length>1)throw Error("TextStreamer only supports batch size of 1");const t=e[0];if(this.token_callback_function?.(t),this.skip_prompt&&this.next_tokens_are_prompt)return void(this.next_tokens_are_prompt=!1);this.token_cache=(0,r.mergeArrays)(this.token_cache,t);const n=this.tokenizer.decode(this.token_cache,this.decode_kwargs);let i;n.endsWith("\n")?(i=n.slice(this.print_len),this.token_cache=[],this.print_len=0):n.length>0&&(0,s.is_chinese_char)(n.charCodeAt(n.length-1))?(i=n.slice(this.print_len),this.print_len+=i.length):(i=n.slice(this.print_len,n.lastIndexOf(" ")+1),this.print_len+=i.length),this.on_finalized_text(i,!1)}end(){let e;if(this.token_cache.length>0){e=this.tokenizer.decode(this.token_cache,this.decode_kwargs).slice(this.print_len),this.token_cache=[],this.print_len=0}else e="";this.next_tokens_are_prompt=!0,this.on_finalized_text(e,!0)}on_finalized_text(e,t){e.length>0&&this.callback_function?.(e),t&&this.callback_function===a&&i.apis.IS_PROCESS_AVAILABLE&&this.callback_function?.("\n")}}class d extends l{constructor(e,{skip_prompt:t=!1,callback_function:n=null,token_callback_function:r=null,on_chunk_start:s=null,on_chunk_end:i=null,on_finalize:o=null,time_precision:a=.02,skip_special_tokens:l=!0,decode_kwargs:d={}}={}){super(e,{skip_prompt:t,callback_function:n,token_callback_function:r,decode_kwargs:{skip_special_tokens:l,...d}}),this.timestamp_begin=e.timestamp_begin,this.on_chunk_start=s,this.on_chunk_end=i,this.on_finalize=o,this.time_precision=a,this.waiting_for_timestamp=!1}put(e){if(e.length>1)throw Error("WhisperTextStreamer only supports batch size of 1");const t=e[0];if(1===t.length){const n=Number(t[0])-this.timestamp_begin;if(n>=0){const t=n*this.time_precision;this.waiting_for_timestamp?this.on_chunk_end?.(t):this.on_chunk_start?.(t),this.waiting_for_timestamp=!this.waiting_for_timestamp,e=[[]]}}return super.put(e)}end(){super.end(),this.on_finalize?.()}}},"./src/models.js":
/*!***********************!*\
  !*** ./src/models.js ***!
  \***********************/(e,t,n)=>{n.r(t),n.d(t,{ASTForAudioClassification:()=>nn,ASTModel:()=>tn,ASTPreTrainedModel:()=>en,AlbertForMaskedLM:()=>ct,AlbertForQuestionAnswering:()=>ut,AlbertForSequenceClassification:()=>dt,AlbertModel:()=>lt,AlbertPreTrainedModel:()=>at,AutoModel:()=>Ko,AutoModelForAudioClassification:()=>pa,AutoModelForAudioFrameClassification:()=>ma,AutoModelForCTC:()=>ca,AutoModelForCausalLM:()=>ta,AutoModelForDepthEstimation:()=>wa,AutoModelForDocumentQuestionAnswering:()=>fa,AutoModelForImageClassification:()=>ia,AutoModelForImageFeatureExtraction:()=>ba,AutoModelForImageMatting:()=>ga,AutoModelForImageSegmentation:()=>oa,AutoModelForImageToImage:()=>_a,AutoModelForMaskGeneration:()=>ua,AutoModelForMaskedLM:()=>na,AutoModelForObjectDetection:()=>la,AutoModelForQuestionAnswering:()=>ra,AutoModelForSemanticSegmentation:()=>aa,AutoModelForSeq2SeqLM:()=>Yo,AutoModelForSequenceClassification:()=>Xo,AutoModelForSpeechSeq2Seq:()=>Zo,AutoModelForTextToSpectrogram:()=>Jo,AutoModelForTextToWaveform:()=>ea,AutoModelForTokenClassification:()=>Qo,AutoModelForVision2Seq:()=>sa,AutoModelForXVector:()=>ha,AutoModelForZeroShotObjectDetection:()=>da,BartForConditionalGeneration:()=>Mt,BartForSequenceClassification:()=>Tt,BartModel:()=>xt,BartPretrainedModel:()=>vt,BaseModelOutput:()=>q,BeitForImageClassification:()=>jr,BeitModel:()=>Vr,BeitPreTrainedModel:()=>Nr,BertForMaskedLM:()=>W,BertForQuestionAnswering:()=>X,BertForSequenceClassification:()=>H,BertForTokenClassification:()=>K,BertModel:()=>U,BertPreTrainedModel:()=>G,BlenderbotForConditionalGeneration:()=>At,BlenderbotModel:()=>Ft,BlenderbotPreTrainedModel:()=>Et,BlenderbotSmallForConditionalGeneration:()=>Bt,BlenderbotSmallModel:()=>zt,BlenderbotSmallPreTrainedModel:()=>It,BloomForCausalLM:()=>hr,BloomModel:()=>pr,BloomPreTrainedModel:()=>cr,CLIPModel:()=>mn,CLIPPreTrainedModel:()=>hn,CLIPSegForImageSegmentation:()=>kn,CLIPSegModel:()=>Tn,CLIPSegPreTrainedModel:()=>Mn,CLIPTextModelWithProjection:()=>fn,CLIPVisionModelWithProjection:()=>gn,CamembertForMaskedLM:()=>we,CamembertForQuestionAnswering:()=>ve,CamembertForSequenceClassification:()=>be,CamembertForTokenClassification:()=>ye,CamembertModel:()=>_e,CamembertPreTrainedModel:()=>ge,CausalLMOutput:()=>$a,CausalLMOutputWithPast:()=>Sa,ChineseCLIPModel:()=>xn,ChineseCLIPPreTrainedModel:()=>vn,ClapAudioModelWithProjection:()=>Ni,ClapModel:()=>Di,ClapPreTrainedModel:()=>Li,ClapTextModelWithProjection:()=>Ri,CodeGenForCausalLM:()=>qn,CodeGenModel:()=>jn,CodeGenPreTrainedModel:()=>Vn,CohereForCausalLM:()=>Xn,CohereModel:()=>Kn,CoherePreTrainedModel:()=>Hn,ConvBertForMaskedLM:()=>oe,ConvBertForQuestionAnswering:()=>de,ConvBertForSequenceClassification:()=>ae,ConvBertForTokenClassification:()=>le,ConvBertModel:()=>ie,ConvBertPreTrainedModel:()=>se,ConvNextForImageClassification:()=>Ss,ConvNextModel:()=>$s,ConvNextPreTrainedModel:()=>ks,ConvNextV2ForImageClassification:()=>Es,ConvNextV2Model:()=>Ps,ConvNextV2PreTrainedModel:()=>Cs,DPTForDepthEstimation:()=>_s,DPTModel:()=>gs,DPTPreTrainedModel:()=>fs,DebertaForMaskedLM:()=>Te,DebertaForQuestionAnswering:()=>Se,DebertaForSequenceClassification:()=>ke,DebertaForTokenClassification:()=>$e,DebertaModel:()=>Me,DebertaPreTrainedModel:()=>xe,DebertaV2ForMaskedLM:()=>Ee,DebertaV2ForQuestionAnswering:()=>Ie,DebertaV2ForSequenceClassification:()=>Fe,DebertaV2ForTokenClassification:()=>Ae,DebertaV2Model:()=>Pe,DebertaV2PreTrainedModel:()=>Ce,DeiTForImageClassification:()=>is,DeiTModel:()=>ss,DeiTPreTrainedModel:()=>rs,DepthAnythingForDepthEstimation:()=>bs,DepthAnythingPreTrainedModel:()=>ws,DetrForObjectDetection:()=>Ur,DetrForSegmentation:()=>Wr,DetrModel:()=>Gr,DetrObjectDetectionOutput:()=>Hr,DetrPreTrainedModel:()=>qr,DetrSegmentationOutput:()=>Kr,Dinov2ForImageClassification:()=>Is,Dinov2Model:()=>As,Dinov2PreTrainedModel:()=>Fs,DistilBertForMaskedLM:()=>Re,DistilBertForQuestionAnswering:()=>De,DistilBertForSequenceClassification:()=>Oe,DistilBertForTokenClassification:()=>Le,DistilBertModel:()=>Be,DistilBertPreTrainedModel:()=>ze,DonutSwinModel:()=>Ts,DonutSwinPreTrainedModel:()=>Ms,EfficientNetForImageClassification:()=>Zi,EfficientNetModel:()=>Yi,EfficientNetPreTrainedModel:()=>Qi,ElectraForMaskedLM:()=>pe,ElectraForQuestionAnswering:()=>fe,ElectraForSequenceClassification:()=>he,ElectraForTokenClassification:()=>me,ElectraModel:()=>ce,ElectraPreTrainedModel:()=>ue,EsmForMaskedLM:()=>je,EsmForSequenceClassification:()=>qe,EsmForTokenClassification:()=>Ge,EsmModel:()=>Ve,EsmPreTrainedModel:()=>Ne,FalconForCausalLM:()=>Oi,FalconModel:()=>Bi,FalconPreTrainedModel:()=>zi,FastViTForImageClassification:()=>kr,FastViTModel:()=>Tr,FastViTPreTrainedModel:()=>Mr,Florence2ForConditionalGeneration:()=>pn,Florence2PreTrainedModel:()=>cn,GLPNForDepthEstimation:()=>xs,GLPNModel:()=>vs,GLPNPreTrainedModel:()=>ys,GPT2LMHeadModel:()=>Cn,GPT2Model:()=>Sn,GPT2PreTrainedModel:()=>$n,GPTBigCodeForCausalLM:()=>Nn,GPTBigCodeModel:()=>Rn,GPTBigCodePreTrainedModel:()=>Dn,GPTJForCausalLM:()=>Ln,GPTJModel:()=>On,GPTJPreTrainedModel:()=>Bn,GPTNeoForCausalLM:()=>Fn,GPTNeoModel:()=>En,GPTNeoPreTrainedModel:()=>Pn,GPTNeoXForCausalLM:()=>zn,GPTNeoXModel:()=>In,GPTNeoXPreTrainedModel:()=>An,GemmaForCausalLM:()=>Zn,GemmaModel:()=>Yn,GemmaPreTrainedModel:()=>Qn,HubertForCTC:()=>hi,HubertForSequenceClassification:()=>mi,HubertModel:()=>pi,HubertPreTrainedModel:()=>ci,ImageMattingOutput:()=>Ca,LlamaForCausalLM:()=>Wn,LlamaModel:()=>Un,LlamaPreTrainedModel:()=>Gn,LlavaForConditionalGeneration:()=>dn,LlavaPreTrainedModel:()=>ln,LongT5ForConditionalGeneration:()=>_t,LongT5Model:()=>gt,LongT5PreTrainedModel:()=>ft,M2M100ForConditionalGeneration:()=>Ws,M2M100Model:()=>Us,M2M100PreTrainedModel:()=>Gs,MBartForCausalLM:()=>Pt,MBartForConditionalGeneration:()=>St,MBartForSequenceClassification:()=>Ct,MBartModel:()=>$t,MBartPreTrainedModel:()=>kt,MPNetForMaskedLM:()=>Ze,MPNetForQuestionAnswering:()=>tt,MPNetForSequenceClassification:()=>Je,MPNetForTokenClassification:()=>et,MPNetModel:()=>Ye,MPNetPreTrainedModel:()=>Qe,MT5ForConditionalGeneration:()=>yt,MT5Model:()=>bt,MT5PreTrainedModel:()=>wt,MarianMTModel:()=>qs,MarianModel:()=>js,MarianPreTrainedModel:()=>Vs,MaskedLMOutput:()=>Ta,MistralForCausalLM:()=>Ei,MistralModel:()=>Pi,MistralPreTrainedModel:()=>Ci,MobileBertForMaskedLM:()=>He,MobileBertForQuestionAnswering:()=>Xe,MobileBertForSequenceClassification:()=>Ke,MobileBertModel:()=>We,MobileBertPreTrainedModel:()=>Ue,MobileNetV1ForImageClassification:()=>io,MobileNetV1Model:()=>so,MobileNetV1PreTrainedModel:()=>ro,MobileNetV2ForImageClassification:()=>lo,MobileNetV2Model:()=>ao,MobileNetV2PreTrainedModel:()=>oo,MobileNetV3ForImageClassification:()=>po,MobileNetV3Model:()=>co,MobileNetV3PreTrainedModel:()=>uo,MobileNetV4ForImageClassification:()=>fo,MobileNetV4Model:()=>mo,MobileNetV4PreTrainedModel:()=>ho,MobileViTForImageClassification:()=>Er,MobileViTModel:()=>Pr,MobileViTPreTrainedModel:()=>Cr,MobileViTV2ForImageClassification:()=>Ir,MobileViTV2Model:()=>Ar,MobileViTV2PreTrainedModel:()=>Fr,ModelOutput:()=>j,Moondream1ForConditionalGeneration:()=>un,MptForCausalLM:()=>gr,MptModel:()=>fr,MptPreTrainedModel:()=>mr,MusicgenForCausalLM:()=>to,MusicgenForConditionalGeneration:()=>no,MusicgenModel:()=>eo,MusicgenPreTrainedModel:()=>Ji,NomicBertModel:()=>Y,NomicBertPreTrainedModel:()=>Q,OPTForCausalLM:()=>br,OPTModel:()=>wr,OPTPreTrainedModel:()=>_r,OpenELMForCausalLM:()=>tr,OpenELMModel:()=>er,OpenELMPreTrainedModel:()=>Jn,OwlViTForObjectDetection:()=>Or,OwlViTModel:()=>Br,OwlViTPreTrainedModel:()=>zr,Owlv2ForObjectDetection:()=>Rr,Owlv2Model:()=>Dr,Owlv2PreTrainedModel:()=>Lr,Phi3ForCausalLM:()=>ur,Phi3Model:()=>dr,Phi3PreTrainedModel:()=>lr,PhiForCausalLM:()=>ar,PhiModel:()=>or,PhiPreTrainedModel:()=>ir,PreTrainedModel:()=>V,PretrainedMixin:()=>go,QuestionAnsweringModelOutput:()=>ka,Qwen2ForCausalLM:()=>sr,Qwen2Model:()=>rr,Qwen2PreTrainedModel:()=>nr,RTDetrForObjectDetection:()=>Yr,RTDetrModel:()=>Qr,RTDetrObjectDetectionOutput:()=>Zr,RTDetrPreTrainedModel:()=>Xr,ResNetForImageClassification:()=>ls,ResNetModel:()=>as,ResNetPreTrainedModel:()=>os,RoFormerForMaskedLM:()=>ee,RoFormerForQuestionAnswering:()=>re,RoFormerForSequenceClassification:()=>te,RoFormerForTokenClassification:()=>ne,RoFormerModel:()=>J,RoFormerPreTrainedModel:()=>Z,RobertaForMaskedLM:()=>Dt,RobertaForQuestionAnswering:()=>Vt,RobertaForSequenceClassification:()=>Rt,RobertaForTokenClassification:()=>Nt,RobertaModel:()=>Lt,RobertaPreTrainedModel:()=>Ot,SamImageSegmentationOutput:()=>Ns,SamModel:()=>Rs,SamPreTrainedModel:()=>Ds,SegformerForImageClassification:()=>Ui,SegformerForSemanticSegmentation:()=>Wi,SegformerModel:()=>Gi,SegformerPreTrainedModel:()=>qi,Seq2SeqLMOutput:()=>ya,SequenceClassifierOutput:()=>va,SiglipModel:()=>wn,SiglipPreTrainedModel:()=>_n,SiglipTextModel:()=>bn,SiglipVisionModel:()=>yn,SpeechT5ForSpeechToText:()=>Mi,SpeechT5ForTextToSpeech:()=>Ti,SpeechT5HifiGan:()=>ki,SpeechT5Model:()=>xi,SpeechT5PreTrainedModel:()=>vi,SqueezeBertForMaskedLM:()=>st,SqueezeBertForQuestionAnswering:()=>ot,SqueezeBertForSequenceClassification:()=>it,SqueezeBertModel:()=>rt,SqueezeBertPreTrainedModel:()=>nt,StableLmForCausalLM:()=>Xi,StableLmModel:()=>Ki,StableLmPreTrainedModel:()=>Hi,Starcoder2ForCausalLM:()=>Ii,Starcoder2Model:()=>Ai,Starcoder2PreTrainedModel:()=>Fi,Swin2SRForImageSuperResolution:()=>ms,Swin2SRModel:()=>hs,Swin2SRPreTrainedModel:()=>ps,SwinForImageClassification:()=>cs,SwinModel:()=>us,SwinPreTrainedModel:()=>ds,T5ForConditionalGeneration:()=>mt,T5Model:()=>ht,T5PreTrainedModel:()=>pt,TableTransformerForObjectDetection:()=>ts,TableTransformerModel:()=>es,TableTransformerObjectDetectionOutput:()=>ns,TableTransformerPreTrainedModel:()=>Jr,TokenClassifierOutput:()=>Ma,TrOCRForCausalLM:()=>Si,TrOCRPreTrainedModel:()=>$i,UniSpeechForCTC:()=>ei,UniSpeechForSequenceClassification:()=>ti,UniSpeechModel:()=>Js,UniSpeechPreTrainedModel:()=>Zs,UniSpeechSatForAudioFrameClassification:()=>oi,UniSpeechSatForCTC:()=>si,UniSpeechSatForSequenceClassification:()=>ii,UniSpeechSatModel:()=>ri,UniSpeechSatPreTrainedModel:()=>ni,ViTForImageClassification:()=>xr,ViTModel:()=>vr,ViTPreTrainedModel:()=>yr,VisionEncoderDecoderModel:()=>an,VitMatteForImageMatting:()=>Sr,VitMattePreTrainedModel:()=>$r,VitsModel:()=>ji,VitsModelOutput:()=>Pa,VitsPreTrainedModel:()=>Vi,Wav2Vec2BertForCTC:()=>di,Wav2Vec2BertForSequenceClassification:()=>ui,Wav2Vec2BertModel:()=>li,Wav2Vec2BertPreTrainedModel:()=>ai,Wav2Vec2ForAudioFrameClassification:()=>Ys,Wav2Vec2ForCTC:()=>Xs,Wav2Vec2ForSequenceClassification:()=>Qs,Wav2Vec2Model:()=>Ks,Wav2Vec2PreTrainedModel:()=>Hs,WavLMForAudioFrameClassification:()=>yi,WavLMForCTC:()=>_i,WavLMForSequenceClassification:()=>wi,WavLMForXVector:()=>bi,WavLMModel:()=>gi,WavLMPreTrainedModel:()=>fi,WhisperForConditionalGeneration:()=>on,WhisperModel:()=>sn,WhisperPreTrainedModel:()=>rn,XLMForQuestionAnswering:()=>Ht,XLMForSequenceClassification:()=>Ut,XLMForTokenClassification:()=>Wt,XLMModel:()=>qt,XLMPreTrainedModel:()=>jt,XLMRobertaForMaskedLM:()=>Qt,XLMRobertaForQuestionAnswering:()=>Jt,XLMRobertaForSequenceClassification:()=>Yt,XLMRobertaForTokenClassification:()=>Zt,XLMRobertaModel:()=>Xt,XLMRobertaPreTrainedModel:()=>Kt,XLMWithLMHeadModel:()=>Gt,XVectorOutput:()=>xa,YolosForObjectDetection:()=>Os,YolosModel:()=>Bs,YolosObjectDetectionOutput:()=>Ls,YolosPreTrainedModel:()=>zs});var r=n(/*! ./configs.js */"./src/configs.js"),s=n(/*! ./backends/onnx.js */"./src/backends/onnx.js"),i=n(/*! ./utils/dtypes.js */"./src/utils/dtypes.js"),o=n(/*! ./utils/generic.js */"./src/utils/generic.js"),a=n(/*! ./utils/core.js */"./src/utils/core.js"),l=n(/*! ./utils/hub.js */"./src/utils/hub.js"),d=n(/*! ./generation/logits_process.js */"./src/generation/logits_process.js"),u=n(/*! ./generation/configuration_utils.js */"./src/generation/configuration_utils.js"),c=n(/*! ./utils/tensor.js */"./src/utils/tensor.js"),p=n(/*! ./utils/maths.js */"./src/utils/maths.js"),h=n(/*! ./generation/stopping_criteria.js */"./src/generation/stopping_criteria.js"),m=n(/*! ./generation/logits_sampler.js */"./src/generation/logits_sampler.js"),f=n(/*! ./env.js */"./src/env.js"),g=n(/*! ./models/whisper/generation_whisper.js */"./src/models/whisper/generation_whisper.js"),_=n(/*! ./models/whisper/common_whisper.js */"./src/models/whisper/common_whisper.js");const w=0,b=1,y=2,v=3,x=4,M=5,T=6,k=7,$=new Map,S=new Map,C=new Map;async function P(e,t,n){const o=Object.keys(t),a=await Promise.all(o.map((async o=>async function(e,t,n){let o=n.device;o&&"string"!=typeof o&&(o.hasOwnProperty(t)?o=o[t]:(console.warn(`device not specified for "${t}". Using the default device.`),o=null));const a=(0,s.deviceToExecutionProviders)(o);let d=n.dtype;if("string"!=typeof d&&(d&&d.hasOwnProperty(t)?d=d[t]:(d=i.DEFAULT_DEVICE_DTYPE_MAPPING[a[0]],console.warn(`dtype not specified for "${t}". Using the default dtype for this device (${d}).`))),!i.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(d))throw new Error(`Invalid dtype: ${d}. Should be one of: ${Object.keys(i.DATA_TYPES).join(", ")}`);if(d===i.DATA_TYPES.fp16&&!await(0,i.isFp16Supported)())throw new Error("The device does not support fp16.");const u=i.DEFAULT_DTYPE_SUFFIX_MAPPING[d],c=`${n.subfolder??""}/${t}${u}.onnx`,p={...n.session_options}??{};p.executionProviders??=a;const h=(0,l.getModelFile)(e,c,!0,n);let m=[];if(n.use_external_data_format&&(!0===n.use_external_data_format||"object"==typeof n.use_external_data_format&&n.use_external_data_format.hasOwnProperty(t)&&!0===n.use_external_data_format[t])){if(f.apis.IS_NODE_ENV)throw new Error("External data format is not yet supported in Node.js");const r=`${t}${u}.onnx_data`,s=`${n.subfolder??""}/${r}`;m.push(new Promise((async(t,i)=>{const o=await(0,l.getModelFile)(e,s,!0,n);t({path:r,data:o})})))}else void 0!==p.externalData&&(m=p.externalData.map((async t=>{if("string"==typeof t.data){const r=await(0,l.getModelFile)(e,t.data,!0,n);return{...t,data:r}}return t})));if(m.length>0&&(p.externalData=await Promise.all(m)),"webgpu"===o){const e=(0,r.getKeyValueShapes)(n.config,{prefix:"present"});if(Object.keys(e).length>0){const t={};for(const n in e)t[n]="gpu-buffer";p.preferredOutputLocation=t}}return{buffer:await h,session_options:p}}(e,t[o],n)))),d={};for(let e=0;e<o.length;++e){const{buffer:t,session_options:n}=a[e],r=await(0,s.createInferenceSession)(t,n);d[o[e]]=r}return d}async function E(e,t){const n=function(e,t){const n=Object.create(null),r=[];for(const i of e.inputNames){const e=t[i];e instanceof c.Tensor?n[i]=(0,s.isONNXProxy)()?e.clone():e:r.push(i)}if(r.length>0)throw new Error(`An error occurred during model execution: "Missing the following inputs: ${r.join(", ")}.`);const i=Object.keys(t).length,o=e.inputNames.length;if(i>o){let n=Object.keys(t).filter((t=>!e.inputNames.includes(t)));console.warn(`WARNING: Too many inputs were provided (${i} > ${o}). The following inputs will be ignored: "${n.join(", ")}".`)}return n}(e,t);try{const t=Object.fromEntries(Object.entries(n).map((([e,t])=>[e,t.ort_tensor])));let r=await e.run(t);return r=F(r),r}catch(e){throw console.error(`An error occurred during model execution: "${e}".`),console.error("Inputs given to model:",n),e}}function F(e){for(let t in e)(0,s.isONNXTensor)(e[t])?e[t]=new c.Tensor(e[t]):"object"==typeof e[t]&&F(e[t]);return e}function A(e){if(e instanceof c.Tensor)return e;if(0===e.length)throw Error("items must be non-empty");if(Array.isArray(e[0])){if(e.some((t=>t.length!==e[0].length)))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");return new c.Tensor("int64",BigInt64Array.from(e.flat().map((e=>BigInt(e)))),[e.length,e[0].length])}return new c.Tensor("int64",BigInt64Array.from(e.map((e=>BigInt(e)))),[1,e.length])}function I(e){return new c.Tensor("bool",[e],[1])}async function z(e,t){let{encoder_outputs:n,past_key_values:r}=t;if(!n){const r=(0,a.pick)(t,e.sessions.model.inputNames);n=(await B(e,r)).last_hidden_state}const{input_ids:s,decoder_input_ids:i,...o}=t;o.input_ids=i,o.encoder_hidden_states=n,e.sessions.decoder_model_merged.inputNames.includes("encoder_attention_mask")&&(o.encoder_attention_mask=t.attention_mask);return await O(e,o,!0)}async function B(e,t){const n=e.sessions.model,r=(0,a.pick)(t,n.inputNames);if(n.inputNames.includes("inputs_embeds")&&!r.inputs_embeds){if(!t.input_ids)throw new Error("Both `input_ids` and `inputs_embeds` are missing in the model inputs.");r.inputs_embeds=await e.encode_text({input_ids:t.input_ids})}return n.inputNames.includes("token_type_ids")&&!r.token_type_ids&&(r.token_type_ids=new c.Tensor("int64",new BigInt64Array(r.input_ids.data.length),r.input_ids.dims)),await E(n,r)}async function O(e,t,n=!1){const r=e.sessions[n?"decoder_model_merged":"model"],{past_key_values:s,...i}=t;r.inputNames.includes("use_cache_branch")&&(i.use_cache_branch=I(!!s)),r.inputNames.includes("position_ids")&&i.attention_mask&&!i.position_ids&&(i.position_ids=function(e,t=null){const{input_ids:n,inputs_embeds:r,attention_mask:s}=e,[i,o]=s.dims,a=new BigInt64Array(s.data.length);for(let e=0;e<i;++e){const t=e*o;let n=BigInt(0);for(let e=0;e<o;++e){const r=t+e;0n===s.data[r]?a[r]=BigInt(1):(a[r]=n,n+=s.data[r])}}let l=new c.Tensor("int64",a,s.dims);if(t){const e=-(n??r).dims.at(1);l=l.slice(null,[e,null])}return l}(i,s)),e.addPastKeyValues(i,s);const o=(0,a.pick)(i,r.inputNames);return await E(r,o)}async function L(e,{input_ids:t=null,attention_mask:n=null,pixel_values:r=null,position_ids:s=null,inputs_embeds:i=null,past_key_values:o=null,generation_config:a=null,logits_processor:l=null,...d}){if(!i)if(i=await e.encode_text({input_ids:t}),r&&1!==t.dims[1]){const s=await e.encode_image({pixel_values:r});({inputs_embeds:i,attention_mask:n}=e._merge_input_ids_with_image_features({image_features:s,inputs_embeds:i,input_ids:t,attention_mask:n}))}else if(o&&r&&1===t.dims[1]){const e=t.dims[1],r=Object.values(o)[0].dims.at(-2);n=(0,c.cat)([(0,c.ones)([t.dims[0],r]),n.slice(null,[n.dims[1]-e,n.dims[1]])],1)}return await O(e,{inputs_embeds:i,past_key_values:o,attention_mask:n,position_ids:s,generation_config:a,logits_processor:l},!0)}function D(e,t,n,r){if(n.past_key_values){const t=Object.values(n.past_key_values)[0].dims.at(-2),{input_ids:r,attention_mask:s}=n;if(s&&s.dims[1]>r.dims[1]);else if(t<r.dims[1])n.input_ids=r.slice(null,[t,null]);else if(null!=e.config.image_token_index&&r.data.some((t=>t==e.config.image_token_index))){const s=e.config.num_image_tokens;if(!s)throw new Error("`num_image_tokens` is missing in the model configuration.");const i=r.dims[1]-(t-s);n.input_ids=r.slice(null,[-i,null]),n.attention_mask=(0,c.ones)([1,t+i])}}return n}function R(e,t,n,r){const{...s}=n;return n.past_key_values&&(t=t.map((e=>[e.at(-1)]))),s.decoder_input_ids=A(t),s}function N(e,...t){return e.config.is_encoder_decoder?R(e,...t):D(e,...t)}class V extends o.Callable{main_input_name="input_ids";forward_params=["input_ids","attention_mask"];constructor(e,t){super(),this.config=e,this.sessions=t;const n=C.get(this.constructor),r=$.get(n);switch(this.can_generate=!1,this._forward=null,this._prepare_inputs_for_generation=null,r){case x:this.can_generate=!0,this._forward=O,this._prepare_inputs_for_generation=D;break;case y:case v:case k:this.can_generate=!0,this._forward=z,this._prepare_inputs_for_generation=R;break;case b:this._forward=z;break;case T:this.can_generate=!0,this._forward=L,this._prepare_inputs_for_generation=N;break;default:this._forward=B}this.can_generate&&this.forward_params.push("past_key_values"),this.custom_config=this.config["transformers.js_config"]??{}}async dispose(){const e=[];for(const t of Object.values(this.sessions))t?.handler?.dispose&&e.push(t.handler.dispose());return await Promise.all(e)}static async from_pretrained(e,{progress_callback:t=null,config:n=null,cache_dir:s=null,local_files_only:i=!1,revision:o="main",model_file_name:a=null,subfolder:d="onnx",device:u=null,dtype:c=null,use_external_data_format:p=null,session_options:h={}}={}){let m={progress_callback:t,config:n,cache_dir:s,local_files_only:i,revision:o,model_file_name:a,subfolder:d,device:u,dtype:c,use_external_data_format:p,session_options:h};const f=C.get(this),g=$.get(f);let _;if(n=m.config=await r.AutoConfig.from_pretrained(e,m),g===x)_=await Promise.all([P(e,{model:m.model_file_name??"model"},m),(0,l.getModelJSON)(e,"generation_config.json",!1,m)]);else if(g===y||g===v)_=await Promise.all([P(e,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},m),(0,l.getModelJSON)(e,"generation_config.json",!1,m)]);else if(g===M)_=await Promise.all([P(e,{model:"vision_encoder",prompt_encoder_mask_decoder:"prompt_encoder_mask_decoder"},m)]);else if(g===b)_=await Promise.all([P(e,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},m)]);else if(g===T){const t={embed_tokens:"embed_tokens",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};n.is_encoder_decoder&&(t.model="encoder_model"),_=await Promise.all([P(e,t,m),(0,l.getModelJSON)(e,"generation_config.json",!1,m)])}else g===k?_=await Promise.all([P(e,{model:"text_encoder",decoder_model_merged:"decoder_model_merged",encodec_decode:"encodec_decode"},m),(0,l.getModelJSON)(e,"generation_config.json",!1,m)]):(g!==w&&console.warn(`Model type for '${f??n?.model_type}' not found, assuming encoder-only architecture. Please report this at https://github.com/xenova/transformers.js/issues/new/choose.`),_=await Promise.all([P(e,{model:m.model_file_name??"model"},m)]));return new this(n,..._)}async _call(e){return await this.forward(e)}async forward(e){return await this._forward(this,e)}_get_logits_warper(e){const t=new d.LogitsProcessorList;return null!==e.temperature&&1!==e.temperature&&t.push(new d.TemperatureLogitsWarper(e.temperature)),null!==e.top_k&&0!==e.top_k&&t.push(new d.TopKLogitsWarper(e.top_k)),null!==e.top_p&&e.top_p<1&&t.push(new d.TopPLogitsWarper(e.top_p)),t}_get_logits_processor(e,t,n=null){const r=new d.LogitsProcessorList;if(null!==e.repetition_penalty&&1!==e.repetition_penalty&&r.push(new d.RepetitionPenaltyLogitsProcessor(e.repetition_penalty)),null!==e.no_repeat_ngram_size&&e.no_repeat_ngram_size>0&&r.push(new d.NoRepeatNGramLogitsProcessor(e.no_repeat_ngram_size)),null!==e.bad_words_ids&&r.push(new d.NoBadWordsLogitsProcessor(e.bad_words_ids,e.eos_token_id)),null!==e.min_length&&null!==e.eos_token_id&&e.min_length>0&&r.push(new d.MinLengthLogitsProcessor(e.min_length,e.eos_token_id)),null!==e.min_new_tokens&&null!==e.eos_token_id&&e.min_new_tokens>0&&r.push(new d.MinNewTokensLengthLogitsProcessor(t,e.min_new_tokens,e.eos_token_id)),null!==e.forced_bos_token_id&&r.push(new d.ForcedBOSTokenLogitsProcessor(e.forced_bos_token_id)),null!==e.forced_eos_token_id&&r.push(new d.ForcedEOSTokenLogitsProcessor(e.max_length,e.forced_eos_token_id)),null!==e.begin_suppress_tokens){const n=t>1||null===e.forced_bos_token_id?t:t+1;r.push(new d.SuppressTokensAtBeginLogitsProcessor(e.begin_suppress_tokens,n))}return null!==e.guidance_scale&&e.guidance_scale>1&&r.push(new d.ClassifierFreeGuidanceLogitsProcessor(e.guidance_scale)),null!==n&&r.extend(n),r}_prepare_generation_config(e,t,n=u.GenerationConfig){const r={...this.config};for(const e of["decoder","generator","text_config"])e in r&&Object.assign(r,r[e]);const s=new n(r);return"generation_config"in this&&Object.assign(s,this.generation_config),e&&Object.assign(s,e),t&&Object.assign(s,(0,a.pick)(t,Object.getOwnPropertyNames(s))),s}_get_stopping_criteria(e,t=null){const n=new h.StoppingCriteriaList;return null!==e.max_length&&n.push(new h.MaxLengthCriteria(e.max_length,this.config.max_position_embeddings??null)),null!==e.eos_token_id&&n.push(new h.EosTokenCriteria(e.eos_token_id)),t&&n.extend(t),n}_validate_model_class(){if(!this.can_generate){const e=[$o,Po,ko,yo],t=C.get(this.constructor),n=new Set,r=this.config.model_type;for(const t of e){const e=t.get(r);e&&n.add(e[0])}let s=`The current model class (${t}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;throw n.size>0&&(s+=` Please use the following class instead: ${[...n].join(", ")}`),Error(s)}}prepare_inputs_for_generation(...e){return this._prepare_inputs_for_generation(this,...e)}_update_model_kwargs_for_generation({generated_input_ids:e,outputs:t,model_inputs:n,is_encoder_decoder:r}){return n.past_key_values=this.getPastKeyValues(t,n.past_key_values),n.input_ids=new c.Tensor("int64",e.flat(),[e.length,1]),r||(n.attention_mask=(0,c.cat)([n.attention_mask,(0,c.ones)([n.attention_mask.dims[0],1])],1)),n.position_ids=null,n}_prepare_model_inputs({inputs:e,bos_token_id:t,model_kwargs:n}){const r=(0,a.pick)(n,this.forward_params),s=this.main_input_name;if(s in r){if(e)throw new Error("`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=...")}else r[s]=e;return{inputs_tensor:r[s],model_inputs:r,model_input_name:s}}async _prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:e,model_inputs:t,model_input_name:n,generation_config:r}){if(this.sessions.model.inputNames.includes("inputs_embeds")&&!t.inputs_embeds&&"_prepare_inputs_embeds"in this){const{input_ids:e,pixel_values:n,attention_mask:r,...s}=t,i=await this._prepare_inputs_embeds(t);t={...s,...(0,a.pick)(i,["inputs_embeds","attention_mask"])}}let{last_hidden_state:s}=await B(this,t);return null!==r.guidance_scale&&r.guidance_scale>1&&(s=(0,c.cat)([s,(0,c.full_like)(s,0)],0),"attention_mask"in t&&(t.attention_mask=(0,c.cat)([t.attention_mask,(0,c.zeros_like)(t.attention_mask)],0))),t.encoder_outputs=s,t}_prepare_decoder_input_ids_for_generation({batch_size:e,model_input_name:t,model_kwargs:n,decoder_start_token_id:r,bos_token_id:s,generation_config:i}){let{decoder_input_ids:o,...a}=n;if(o)Array.isArray(o[0])||(o=Array.from({length:e},(()=>o)));else if(r??=s,"musicgen"===this.config.model_type)o=Array.from({length:e*this.config.decoder.num_codebooks},(()=>[r]));else if(Array.isArray(r)){if(r.length!==e)throw new Error(`\`decoder_start_token_id\` expcted to have length ${e} but got ${r.length}`);o=r}else o=Array.from({length:e},(()=>[r]));return o=A(o),n.decoder_attention_mask=(0,c.ones_like)(o),{input_ids:o,model_inputs:a}}async generate({inputs:e=null,generation_config:t=null,logits_processor:n=null,stopping_criteria:r=null,streamer:s=null,...i}){this._validate_model_class(),t=this._prepare_generation_config(t,i);let{inputs_tensor:o,model_inputs:a,model_input_name:l}=this._prepare_model_inputs({inputs:e,model_kwargs:i});const d=this.config.is_encoder_decoder;let u;d&&("encoder_outputs"in a||(a=await this._prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:o,model_inputs:a,model_input_name:l,generation_config:t}))),d?({input_ids:u,model_inputs:a}=this._prepare_decoder_input_ids_for_generation({batch_size:a[l].dims.at(0),model_input_name:l,model_kwargs:a,decoder_start_token_id:t.decoder_start_token_id,bos_token_id:t.bos_token_id,generation_config:t})):u=a[l];let p=u.dims.at(-1);null!==t.max_new_tokens&&(t.max_length=p+t.max_new_tokens);const h=this._get_logits_processor(t,p,n),f=this._get_stopping_criteria(t,r),g=a[l].dims.at(0),_=m.LogitsSampler.getSampler(t),w=new Array(g).fill(0),b=u.tolist();s&&s.put(b);let y=null,v={};for(;;){a=this.prepare_inputs_for_generation(b,a,t);const e=await this.forward(a);if(t.output_attentions&&t.return_dict_in_generate){const t=this.getAttentions(e);for(const e in t)e in v||(v[e]=[]),v[e].push(t[e])}const n=h(b,e.logits.slice(null,-1,null)),r=[];for(let e=0;e<n.dims.at(0);++e){const t=n[e],s=await _(t);for(const[t,n]of s){const s=BigInt(t);w[e]+=n,b[e].push(s),r.push([s]);break}}s&&s.put(r);if(f(b).every((e=>e))){t.return_dict_in_generate&&(y=this.getPastKeyValues(e,a.past_key_values,!1));break}a=this._update_model_kwargs_for_generation({generated_input_ids:r,outputs:e,model_inputs:a,is_encoder_decoder:d})}s&&s.end();const x=new c.Tensor("int64",b.flat(),[b.length,b[0].length]);return t.return_dict_in_generate?{sequences:x,past_key_values:y,...v}:x}getPastKeyValues(e,t,n=!0){const r=Object.create(null);for(const s in e)if(s.startsWith("present")){const i=s.replace("present","past_key_values");if(t&&s.includes("encoder"))r[i]=t[i];else{if(n&&t){const e=t[i];"gpu-buffer"===e.location&&e.dispose()}r[i]=e[s]}}return r}getAttentions(e){const t={};for(const n of["cross_attentions","encoder_attentions","decoder_attentions"])for(const r in e)r.startsWith(n)&&(n in t||(t[n]=[]),t[n].push(e[r]));return t}addPastKeyValues(e,t){if(t)Object.assign(e,t);else{const t=this.custom_config.kv_cache_dtype??"float32",n="float16"===t?new Uint16Array:[],s=(0,r.getKeyValueShapes)(this.config);for(const r in s)e[r]=new c.Tensor(t,n,s[r])}}async encode_image({pixel_values:e}){const t=(await E(this.sessions.vision_encoder,{pixel_values:e})).image_features;return this.config.num_image_tokens||(console.warn(`The number of image tokens was not set in the model configuration. Setting it to the number of features detected by the vision encoder (${t.dims[1]}).`),this.config.num_image_tokens=t.dims[1]),t}async encode_text({input_ids:e}){return(await E(this.sessions.embed_tokens,{input_ids:e})).inputs_embeds}}class j{}class q extends j{constructor({last_hidden_state:e,hidden_states:t=null,attentions:n=null}){super(),this.last_hidden_state=e,this.hidden_states=t,this.attentions=n}}class G extends V{}class U extends G{}class W extends G{async _call(e){return new Ta(await super._call(e))}}class H extends G{async _call(e){return new va(await super._call(e))}}class K extends G{async _call(e){return new Ma(await super._call(e))}}class X extends G{async _call(e){return new ka(await super._call(e))}}class Q extends V{}class Y extends Q{}class Z extends V{}class J extends Z{}class ee extends Z{async _call(e){return new Ta(await super._call(e))}}class te extends Z{async _call(e){return new va(await super._call(e))}}class ne extends Z{async _call(e){return new Ma(await super._call(e))}}class re extends Z{async _call(e){return new ka(await super._call(e))}}class se extends V{}class ie extends se{}class oe extends se{async _call(e){return new Ta(await super._call(e))}}class ae extends se{async _call(e){return new va(await super._call(e))}}class le extends se{async _call(e){return new Ma(await super._call(e))}}class de extends se{async _call(e){return new ka(await super._call(e))}}class ue extends V{}class ce extends ue{}class pe extends ue{async _call(e){return new Ta(await super._call(e))}}class he extends ue{async _call(e){return new va(await super._call(e))}}class me extends ue{async _call(e){return new Ma(await super._call(e))}}class fe extends ue{async _call(e){return new ka(await super._call(e))}}class ge extends V{}class _e extends ge{}class we extends ge{async _call(e){return new Ta(await super._call(e))}}class be extends ge{async _call(e){return new va(await super._call(e))}}class ye extends ge{async _call(e){return new Ma(await super._call(e))}}class ve extends ge{async _call(e){return new ka(await super._call(e))}}class xe extends V{}class Me extends xe{}class Te extends xe{async _call(e){return new Ta(await super._call(e))}}class ke extends xe{async _call(e){return new va(await super._call(e))}}class $e extends xe{async _call(e){return new Ma(await super._call(e))}}class Se extends xe{async _call(e){return new ka(await super._call(e))}}class Ce extends V{}class Pe extends Ce{}class Ee extends Ce{async _call(e){return new Ta(await super._call(e))}}class Fe extends Ce{async _call(e){return new va(await super._call(e))}}class Ae extends Ce{async _call(e){return new Ma(await super._call(e))}}class Ie extends Ce{async _call(e){return new ka(await super._call(e))}}class ze extends V{}class Be extends ze{}class Oe extends ze{async _call(e){return new va(await super._call(e))}}class Le extends ze{async _call(e){return new Ma(await super._call(e))}}class De extends ze{async _call(e){return new ka(await super._call(e))}}class Re extends ze{async _call(e){return new Ta(await super._call(e))}}class Ne extends V{}class Ve extends Ne{}class je extends Ne{async _call(e){return new Ta(await super._call(e))}}class qe extends Ne{async _call(e){return new va(await super._call(e))}}class Ge extends Ne{async _call(e){return new Ma(await super._call(e))}}class Ue extends V{}class We extends Ue{}class He extends Ue{async _call(e){return new Ta(await super._call(e))}}class Ke extends Ue{async _call(e){return new va(await super._call(e))}}class Xe extends Ue{async _call(e){return new ka(await super._call(e))}}class Qe extends V{}class Ye extends Qe{}class Ze extends Qe{async _call(e){return new Ta(await super._call(e))}}class Je extends Qe{async _call(e){return new va(await super._call(e))}}class et extends Qe{async _call(e){return new Ma(await super._call(e))}}class tt extends Qe{async _call(e){return new ka(await super._call(e))}}class nt extends V{}class rt extends nt{}class st extends nt{async _call(e){return new Ta(await super._call(e))}}class it extends nt{async _call(e){return new va(await super._call(e))}}class ot extends nt{async _call(e){return new ka(await super._call(e))}}class at extends V{}class lt extends at{}class dt extends at{async _call(e){return new va(await super._call(e))}}class ut extends at{async _call(e){return new ka(await super._call(e))}}class ct extends at{async _call(e){return new Ta(await super._call(e))}}class pt extends V{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"];constructor(e,t,n){super(e,t),this.generation_config=n}}class ht extends pt{}class mt extends pt{}class ft extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class gt extends ft{}class _t extends ft{}class wt extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class bt extends wt{}class yt extends wt{}class vt extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class xt extends vt{}class Mt extends vt{}class Tt extends vt{async _call(e){return new va(await super._call(e))}}class kt extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class $t extends kt{}class St extends kt{}class Ct extends kt{async _call(e){return new va(await super._call(e))}}class Pt extends kt{}class Et extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class Ft extends Et{}class At extends Et{}class It extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class zt extends It{}class Bt extends It{}class Ot extends V{}class Lt extends Ot{}class Dt extends Ot{async _call(e){return new Ta(await super._call(e))}}class Rt extends Ot{async _call(e){return new va(await super._call(e))}}class Nt extends Ot{async _call(e){return new Ma(await super._call(e))}}class Vt extends Ot{async _call(e){return new ka(await super._call(e))}}class jt extends V{}class qt extends jt{}class Gt extends jt{async _call(e){return new Ta(await super._call(e))}}class Ut extends jt{async _call(e){return new va(await super._call(e))}}class Wt extends jt{async _call(e){return new Ma(await super._call(e))}}class Ht extends jt{async _call(e){return new ka(await super._call(e))}}class Kt extends V{}class Xt extends Kt{}class Qt extends Kt{async _call(e){return new Ta(await super._call(e))}}class Yt extends Kt{async _call(e){return new va(await super._call(e))}}class Zt extends Kt{async _call(e){return new Ma(await super._call(e))}}class Jt extends Kt{async _call(e){return new ka(await super._call(e))}}class en extends V{}class tn extends en{}class nn extends en{}class rn extends V{requires_attention_mask=!1;main_input_name="input_features";forward_params=["input_features","attention_mask","decoder_input_ids","decoder_attention_mask","past_key_values"];constructor(e,t,n){super(e,t),this.generation_config=n}}class sn extends rn{}class on extends rn{_prepare_generation_config(e,t){return super._prepare_generation_config(e,t,g.WhisperGenerationConfig)}_retrieve_init_tokens(e){const t=[e.decoder_start_token_id];let n=e.language;const r=e.task;if(e.is_multilingual){n||(console.warn("No language specified - defaulting to English (en)."),n="en");const s=`<|${(0,_.whisper_language_to_code)(n)}|>`;t.push(e.lang_to_id[s]),t.push(e.task_to_id[r??"transcribe"])}else if(n||r)throw new Error("Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config.");return!e.return_timestamps&&e.no_timestamps_token_id&&t.at(-1)!==e.no_timestamps_token_id?t.push(e.no_timestamps_token_id):e.return_timestamps&&t.at(-1)===e.no_timestamps_token_id&&(console.warn("<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`."),t.pop()),t.filter((e=>null!=e))}async generate({inputs:e=null,generation_config:t=null,logits_processor:n=null,stopping_criteria:r=null,...s}){t=this._prepare_generation_config(t,s);const i=this._retrieve_init_tokens(t);if(t.return_timestamps&&(n??=new d.LogitsProcessorList,n.push(new d.WhisperTimeStampLogitsProcessor(t,i))),t.begin_suppress_tokens&&(n??=new d.LogitsProcessorList,n.push(new d.SuppressTokensAtBeginLogitsProcessor(t.begin_suppress_tokens,i.length))),t.return_token_timestamps){if(!t.alignment_heads)throw new Error("Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.");"translate"===t.task&&console.warn("Token-level timestamps may not be reliable for task 'translate'."),t.output_attentions=!0,t.return_dict_in_generate=!0}const o=await super.generate({inputs:e,generation_config:t,logits_processor:n,decoder_input_ids:i,...s});return t.return_token_timestamps&&(o.token_timestamps=this._extract_token_timestamps(o,t.alignment_heads,t.num_frames)),o}_extract_token_timestamps(e,t,n=null,r=.02){if(!e.cross_attentions)throw new Error("Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.");null==n&&console.warn("`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds).");let s=this.config.median_filter_width;void 0===s&&(console.warn("Model config has no `median_filter_width`, using default value of 7."),s=7);const i=e.cross_attentions,o=Array.from({length:this.config.decoder_layers},((e,t)=>(0,c.cat)(i.map((e=>e[t])),2))),l=(0,c.stack)(t.map((([e,t])=>{if(e>=o.length)throw new Error(`Layer index ${e} is out of bounds for cross attentions (length ${o.length}).`);return n?o[e].slice(null,t,null,[0,n]):o[e].slice(null,t)}))).transpose(1,0,2,3),[d,u]=(0,c.std_mean)(l,-2,0,!0),h=l.clone();for(let e=0;e<h.dims[0];++e){const t=h[e];for(let n=0;n<t.dims[0];++n){const r=t[n],i=d[e][n][0].data,o=u[e][n][0].data;for(let e=0;e<r.dims[0];++e){let t=r[e].data;for(let e=0;e<t.length;++e)t[e]=(t[e]-o[e])/i[e];t.set((0,p.medianFilter)(t,s))}}}const m=[(0,c.mean)(h,1)],f=e.sequences.dims,g=new c.Tensor("float32",new Float32Array(f[0]*f[1]),f);for(let e=0;e<f[0];++e){const t=m[e].neg().squeeze_(0),[n,s]=(0,p.dynamic_time_warping)(t.tolist()),i=Array.from({length:n.length-1},((e,t)=>n[t+1]-n[t])),o=(0,a.mergeArrays)([1],i).map((e=>!!e)),l=[];for(let e=0;e<o.length;++e)o[e]&&l.push(s[e]*r);g[e].data.set(l,1)}return g}}class an extends V{main_input_name="pixel_values";forward_params=["pixel_values","input_ids","encoder_hidden_states","past_key_values"];constructor(e,t,n){super(e,t),this.generation_config=n}}class ln extends V{forward_params=["input_ids","pixel_values","attention_mask","position_ids","past_key_values"];constructor(e,t,n){super(e,t),this.generation_config=n}}class dn extends ln{_merge_input_ids_with_image_features({inputs_embeds:e,image_features:t,input_ids:n,attention_mask:r}){const s=this.config.image_token_index,i=n.tolist().map((e=>e.findIndex((e=>e==s)))),o=i.every((e=>-1===e)),a=i.every((e=>-1!==e));if(!o&&!a)throw new Error("Every input should contain either 0 or 1 image token.");if(o)return{inputs_embeds:e,attention_mask:r};const l=[],d=[];for(let n=0;n<i.length;++n){const s=i[n],o=e[n],a=t[n],u=r[n];l.push((0,c.cat)([o.slice([0,s]),a,o.slice([s+1,o.dims[0]])],0)),d.push((0,c.cat)([u.slice([0,s]),(0,c.ones)([a.dims[0]]),u.slice([s+1,u.dims[0]])],0))}return{inputs_embeds:(0,c.stack)(l,0),attention_mask:(0,c.stack)(d,0)}}}class un extends dn{}class cn extends V{forward_params=["input_ids","inputs_embeds","attention_mask","pixel_values","encoder_outputs","decoder_input_ids","decoder_inputs_embeds","decoder_attention_mask","past_key_values"];main_input_name="inputs_embeds";constructor(e,t,n){super(e,t),this.generation_config=n}}class pn extends cn{_merge_input_ids_with_image_features({inputs_embeds:e,image_features:t,input_ids:n,attention_mask:r}){return{inputs_embeds:(0,c.cat)([t,e],1),attention_mask:(0,c.cat)([(0,c.ones)(t.dims.slice(0,2)),r],1)}}async _prepare_inputs_embeds({input_ids:e,pixel_values:t,inputs_embeds:n,attention_mask:r}){if(!e&&!t)throw new Error("Either `input_ids` or `pixel_values` should be provided.");let s,i;return e&&(s=await this.encode_text({input_ids:e})),t&&(i=await this.encode_image({pixel_values:t})),s&&i?({inputs_embeds:n,attention_mask:r}=this._merge_input_ids_with_image_features({inputs_embeds:s,image_features:i,input_ids:e,attention_mask:r})):n=s||i,{inputs_embeds:n,attention_mask:r}}async forward({input_ids:e,pixel_values:t,attention_mask:n,decoder_input_ids:r,decoder_attention_mask:s,encoder_outputs:i,past_key_values:o,inputs_embeds:a,decoder_inputs_embeds:l}){if(a||({inputs_embeds:a,attention_mask:n}=await this._prepare_inputs_embeds({input_ids:e,pixel_values:t,inputs_embeds:a,attention_mask:n})),!i){let{last_hidden_state:e}=await B(this,{inputs_embeds:a,attention_mask:n});i=e}if(!l){if(!r)throw new Error("Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.");l=await this.encode_text({input_ids:r})}const d={inputs_embeds:l,attention_mask:s,encoder_attention_mask:n,encoder_hidden_states:i,past_key_values:o};return await O(this,d,!0)}}class hn extends V{}class mn extends hn{}class fn extends hn{static async from_pretrained(e,t={}){return t.model_file_name??="text_model",super.from_pretrained(e,t)}}class gn extends hn{static async from_pretrained(e,t={}){return t.model_file_name??="vision_model",super.from_pretrained(e,t)}}class _n extends V{}class wn extends _n{}class bn extends _n{static async from_pretrained(e,t={}){return t.model_file_name??="text_model",super.from_pretrained(e,t)}}class yn extends hn{static async from_pretrained(e,t={}){return t.model_file_name??="vision_model",super.from_pretrained(e,t)}}class vn extends V{}class xn extends vn{}class Mn extends V{}class Tn extends Mn{}class kn extends Mn{}class $n extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class Sn extends $n{}class Cn extends $n{}class Pn extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class En extends Pn{}class Fn extends Pn{}class An extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class In extends An{}class zn extends An{}class Bn extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class On extends Bn{}class Ln extends Bn{}class Dn extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class Rn extends Dn{}class Nn extends Dn{}class Vn extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class jn extends Vn{}class qn extends Vn{}class Gn extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class Un extends Gn{}class Wn extends Gn{}class Hn extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class Kn extends Hn{}class Xn extends Hn{}class Qn extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class Yn extends Qn{}class Zn extends Qn{}class Jn extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class er extends Jn{}class tr extends Jn{}class nr extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class rr extends nr{}class sr extends nr{}class ir extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class or extends ir{}class ar extends ir{}class lr extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class dr extends lr{}class ur extends lr{}class cr extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class pr extends cr{}class hr extends cr{}class mr extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class fr extends mr{}class gr extends mr{}class _r extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class wr extends _r{}class br extends _r{}class yr extends V{}class vr extends yr{}class xr extends yr{async _call(e){return new va(await super._call(e))}}class Mr extends V{}class Tr extends Mr{}class kr extends Mr{async _call(e){return new va(await super._call(e))}}class $r extends V{}class Sr extends $r{async _call(e){return new Ca(await super._call(e))}}class Cr extends V{}class Pr extends Cr{}class Er extends Cr{async _call(e){return new va(await super._call(e))}}class Fr extends V{}class Ar extends Fr{}class Ir extends Fr{async _call(e){return new va(await super._call(e))}}class zr extends V{}class Br extends zr{}class Or extends zr{}class Lr extends V{}class Dr extends Lr{}class Rr extends Lr{}class Nr extends V{}class Vr extends Nr{}class jr extends Nr{async _call(e){return new va(await super._call(e))}}class qr extends V{}class Gr extends qr{}class Ur extends qr{async _call(e){return new Hr(await super._call(e))}}class Wr extends qr{async _call(e){return new Kr(await super._call(e))}}class Hr extends j{constructor({logits:e,pred_boxes:t}){super(),this.logits=e,this.pred_boxes=t}}class Kr extends j{constructor({logits:e,pred_boxes:t,pred_masks:n}){super(),this.logits=e,this.pred_boxes=t,this.pred_masks=n}}class Xr extends V{}class Qr extends Xr{}class Yr extends Xr{async _call(e){return new Zr(await super._call(e))}}class Zr extends j{constructor({logits:e,pred_boxes:t}){super(),this.logits=e,this.pred_boxes=t}}class Jr extends V{}class es extends Jr{}class ts extends Jr{async _call(e){return new ns(await super._call(e))}}class ns extends Hr{}class rs extends V{}class ss extends rs{}class is extends rs{async _call(e){return new va(await super._call(e))}}class os extends V{}class as extends os{}class ls extends os{async _call(e){return new va(await super._call(e))}}class ds extends V{}class us extends ds{}class cs extends ds{async _call(e){return new va(await super._call(e))}}class ps extends V{}class hs extends ps{}class ms extends ps{}class fs extends V{}class gs extends fs{}class _s extends fs{}class ws extends V{}class bs extends ws{}class ys extends V{}class vs extends ys{}class xs extends ys{}class Ms extends V{}class Ts extends Ms{}class ks extends V{}class $s extends ks{}class Ss extends ks{async _call(e){return new va(await super._call(e))}}class Cs extends V{}class Ps extends Cs{}class Es extends Cs{async _call(e){return new va(await super._call(e))}}class Fs extends V{}class As extends Fs{}class Is extends Fs{async _call(e){return new va(await super._call(e))}}class zs extends V{}class Bs extends zs{}class Os extends zs{async _call(e){return new Ls(await super._call(e))}}class Ls extends j{constructor({logits:e,pred_boxes:t}){super(),this.logits=e,this.pred_boxes=t}}class Ds extends V{}class Rs extends Ds{async get_image_embeddings({pixel_values:e}){return await B(this,{pixel_values:e})}async forward(e){if(e.image_embeddings&&e.image_positional_embeddings||(e={...e,...await this.get_image_embeddings(e)}),!e.input_labels&&e.input_points){const t=e.input_points.dims.slice(0,-1),n=t.reduce(((e,t)=>e*t),1);e.input_labels=new c.Tensor("int64",new BigInt64Array(n).fill(1n),t)}const t={image_embeddings:e.image_embeddings,image_positional_embeddings:e.image_positional_embeddings};return e.input_points&&(t.input_points=e.input_points),e.input_labels&&(t.input_labels=e.input_labels),e.input_boxes&&(t.input_boxes=e.input_boxes),await E(this.sessions.prompt_encoder_mask_decoder,t)}async _call(e){return new Ns(await super._call(e))}}class Ns extends j{constructor({iou_scores:e,pred_masks:t}){super(),this.iou_scores=e,this.pred_masks=t}}class Vs extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class js extends Vs{}class qs extends Vs{}class Gs extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class Us extends Gs{}class Ws extends Gs{}class Hs extends V{}class Ks extends Hs{}class Xs extends Hs{async _call(e){return new $a(await super._call(e))}}class Qs extends Hs{async _call(e){return new va(await super._call(e))}}class Ys extends Hs{async _call(e){return new Ma(await super._call(e))}}class Zs extends V{}class Js extends Zs{}class ei extends Zs{async _call(e){return new $a(await super._call(e))}}class ti extends Zs{async _call(e){return new va(await super._call(e))}}class ni extends V{}class ri extends ni{}class si extends ni{async _call(e){return new $a(await super._call(e))}}class ii extends ni{async _call(e){return new va(await super._call(e))}}class oi extends ni{async _call(e){return new Ma(await super._call(e))}}class ai extends V{}class li extends ai{}class di extends ai{async _call(e){return new $a(await super._call(e))}}class ui extends ai{async _call(e){return new va(await super._call(e))}}class ci extends V{}class pi extends Hs{}class hi extends Hs{async _call(e){return new $a(await super._call(e))}}class mi extends Hs{async _call(e){return new va(await super._call(e))}}class fi extends V{}class gi extends fi{}class _i extends fi{async _call(e){return new $a(await super._call(e))}}class wi extends fi{async _call(e){return new va(await super._call(e))}}class bi extends fi{async _call(e){return new xa(await super._call(e))}}class yi extends fi{async _call(e){return new Ma(await super._call(e))}}class vi extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class xi extends vi{}class Mi extends vi{}class Ti extends vi{async generate_speech(e,t,{threshold:n=.5,minlenratio:r=0,maxlenratio:s=20,vocoder:i=null}={}){const o={input_ids:e},{encoder_outputs:a,encoder_attention_mask:l}=await B(this,o),d=a.dims[1]/this.config.reduction_factor,u=Math.floor(d*s),p=Math.floor(d*r),h=this.config.num_mel_bins;let m=[],f=null,g=null,_=0;for(;;){++_;const e=I(!!g);let r;r=g?g.output_sequence_out:new c.Tensor("float32",new Float32Array(h),[1,1,h]);let s={use_cache_branch:e,output_sequence:r,encoder_attention_mask:l,speaker_embeddings:t,encoder_hidden_states:a};this.addPastKeyValues(s,f),g=await E(this.sessions.decoder_model_merged,s),f=this.getPastKeyValues(g,f);const{prob:i,spectrum:o}=g;if(m.push(o),_>=p&&(Array.from(i.data).filter((e=>e>=n)).length>0||_>=u))break}const w=(0,c.cat)(m),{waveform:b}=await E(i.sessions.model,{spectrogram:w});return{spectrogram:w,waveform:b}}}class ki extends V{main_input_name="spectrogram"}class $i extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class Si extends $i{}class Ci extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class Pi extends Ci{}class Ei extends Ci{}class Fi extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class Ai extends Fi{}class Ii extends Fi{}class zi extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class Bi extends zi{}class Oi extends zi{}class Li extends V{}class Di extends Li{}class Ri extends Li{static async from_pretrained(e,t={}){return t.model_file_name??="text_model",super.from_pretrained(e,t)}}class Ni extends Li{static async from_pretrained(e,t={}){return t.model_file_name??="audio_model",super.from_pretrained(e,t)}}class Vi extends V{}class ji extends Vi{async _call(e){return new Pa(await super._call(e))}}class qi extends V{}class Gi extends qi{}class Ui extends qi{}class Wi extends qi{}class Hi extends V{constructor(e,t,n){super(e,t),this.generation_config=n}}class Ki extends Hi{}class Xi extends Hi{}class Qi extends V{}class Yi extends Qi{}class Zi extends Qi{async _call(e){return new va(await super._call(e))}}class Ji extends V{}class eo extends Ji{}class to extends Ji{}class no extends V{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"];constructor(e,t,n){super(e,t),this.generation_config=n}_apply_and_filter_by_delay_pattern_mask(e){const[t,n]=e.dims,r=this.config.decoder.num_codebooks,s=n-r;let i=0;for(let t=0;t<e.size;++t){if(e.data[t]===this.config.decoder.pad_token_id)continue;const o=t%n-Math.floor(t/n)%r;o>0&&o<=s&&(e.data[i++]=e.data[t])}const o=Math.floor(t/r),a=i/(o*r);return new c.Tensor(e.type,e.data.slice(0,i),[o,r,a])}prepare_inputs_for_generation(e,t,n){let r=structuredClone(e);for(let e=0;e<r.length;++e)for(let t=0;t<r[e].length;++t)e%this.config.decoder.num_codebooks>=t&&(r[e][t]=BigInt(this.config.decoder.pad_token_id));null!==n.guidance_scale&&n.guidance_scale>1&&(r=r.concat(r));return super.prepare_inputs_for_generation(r,t,n)}async generate(e){const t=await super.generate(e),n=this._apply_and_filter_by_delay_pattern_mask(t).unsqueeze_(0),{audio_values:r}=await E(this.sessions.encodec_decode,{audio_codes:n});return r}}class ro extends V{}class so extends ro{}class io extends ro{async _call(e){return new va(await super._call(e))}}class oo extends V{}class ao extends oo{}class lo extends oo{async _call(e){return new va(await super._call(e))}}class uo extends V{}class co extends uo{}class po extends uo{async _call(e){return new va(await super._call(e))}}class ho extends V{}class mo extends ho{}class fo extends ho{async _call(e){return new va(await super._call(e))}}class go{static MODEL_CLASS_MAPPINGS=null;static BASE_IF_FAIL=!1;static async from_pretrained(e,{progress_callback:t=null,config:n=null,cache_dir:s=null,local_files_only:i=!1,revision:o="main",model_file_name:a=null,subfolder:l="onnx",device:d=null,dtype:u=null,use_external_data_format:c=null,session_options:p={}}={}){let h={progress_callback:t,config:n,cache_dir:s,local_files_only:i,revision:o,model_file_name:a,subfolder:l,device:d,dtype:u,use_external_data_format:c,session_options:p};if(h.config=await r.AutoConfig.from_pretrained(e,h),!this.MODEL_CLASS_MAPPINGS)throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: "+this.name);for(let t of this.MODEL_CLASS_MAPPINGS){const n=t.get(h.config.model_type);if(n)return await n[1].from_pretrained(e,h)}if(this.BASE_IF_FAIL)return console.warn(`Unknown model class "${h.config.model_type}", attempting to construct from base class.`),await V.from_pretrained(e,h);throw Error(`Unsupported model type: ${h.config.model_type}`)}}const _o=new Map([["bert",["BertModel",U]],["nomic_bert",["NomicBertModel",Y]],["roformer",["RoFormerModel",J]],["electra",["ElectraModel",ce]],["esm",["EsmModel",Ve]],["convbert",["ConvBertModel",ie]],["camembert",["CamembertModel",_e]],["deberta",["DebertaModel",Me]],["deberta-v2",["DebertaV2Model",Pe]],["mpnet",["MPNetModel",Ye]],["albert",["AlbertModel",lt]],["distilbert",["DistilBertModel",Be]],["roberta",["RobertaModel",Lt]],["xlm",["XLMModel",qt]],["xlm-roberta",["XLMRobertaModel",Xt]],["clap",["ClapModel",Di]],["clip",["CLIPModel",mn]],["clipseg",["CLIPSegModel",Tn]],["chinese_clip",["ChineseCLIPModel",xn]],["siglip",["SiglipModel",wn]],["mobilebert",["MobileBertModel",We]],["squeezebert",["SqueezeBertModel",rt]],["wav2vec2",["Wav2Vec2Model",Ks]],["wav2vec2-bert",["Wav2Vec2BertModel",li]],["unispeech",["UniSpeechModel",Js]],["unispeech-sat",["UniSpeechSatModel",ri]],["hubert",["HubertModel",pi]],["wavlm",["WavLMModel",gi]],["audio-spectrogram-transformer",["ASTModel",tn]],["vits",["VitsModel",ji]],["detr",["DetrModel",Gr]],["rt_detr",["RTDetrModel",Qr]],["table-transformer",["TableTransformerModel",es]],["vit",["ViTModel",vr]],["fastvit",["FastViTModel",Tr]],["mobilevit",["MobileViTModel",Pr]],["mobilevitv2",["MobileViTV2Model",Ar]],["owlvit",["OwlViTModel",Br]],["owlv2",["Owlv2Model",Dr]],["beit",["BeitModel",Vr]],["deit",["DeiTModel",ss]],["convnext",["ConvNextModel",$s]],["convnextv2",["ConvNextV2Model",Ps]],["dinov2",["Dinov2Model",As]],["resnet",["ResNetModel",as]],["swin",["SwinModel",us]],["swin2sr",["Swin2SRModel",hs]],["donut-swin",["DonutSwinModel",Ts]],["yolos",["YolosModel",Bs]],["dpt",["DPTModel",gs]],["glpn",["GLPNModel",vs]],["hifigan",["SpeechT5HifiGan",ki]],["efficientnet",["EfficientNetModel",Yi]],["mobilenet_v1",["MobileNetV1Model",so]],["mobilenet_v2",["MobileNetV2Model",ao]],["mobilenet_v3",["MobileNetV3Model",co]],["mobilenet_v4",["MobileNetV4Model",mo]]]),wo=new Map([["t5",["T5Model",ht]],["longt5",["LongT5Model",gt]],["mt5",["MT5Model",bt]],["bart",["BartModel",xt]],["mbart",["MBartModel",$t]],["marian",["MarianModel",js]],["whisper",["WhisperModel",sn]],["m2m_100",["M2M100Model",Us]],["blenderbot",["BlenderbotModel",Ft]],["blenderbot-small",["BlenderbotSmallModel",zt]]]),bo=new Map([["bloom",["BloomModel",pr]],["gpt2",["GPT2Model",Sn]],["gptj",["GPTJModel",On]],["gpt_bigcode",["GPTBigCodeModel",Rn]],["gpt_neo",["GPTNeoModel",En]],["gpt_neox",["GPTNeoXModel",In]],["codegen",["CodeGenModel",jn]],["llama",["LlamaModel",Un]],["cohere",["CohereModel",Kn]],["gemma",["GemmaModel",Yn]],["openelm",["OpenELMModel",er]],["qwen2",["Qwen2Model",rr]],["phi",["PhiModel",or]],["phi3",["Phi3Model",dr]],["mpt",["MptModel",fr]],["opt",["OPTModel",wr]],["mistral",["MistralModel",Pi]],["starcoder2",["Starcoder2Model",Ai]],["falcon",["FalconModel",Bi]],["stablelm",["StableLmModel",Ki]]]),yo=new Map([["speecht5",["SpeechT5ForSpeechToText",Mi]],["whisper",["WhisperForConditionalGeneration",on]]]),vo=new Map([["speecht5",["SpeechT5ForTextToSpeech",Ti]]]),xo=new Map([["vits",["VitsModel",ji]],["musicgen",["MusicgenForConditionalGeneration",no]]]),Mo=new Map([["bert",["BertForSequenceClassification",H]],["roformer",["RoFormerForSequenceClassification",te]],["electra",["ElectraForSequenceClassification",he]],["esm",["EsmForSequenceClassification",qe]],["convbert",["ConvBertForSequenceClassification",ae]],["camembert",["CamembertForSequenceClassification",be]],["deberta",["DebertaForSequenceClassification",ke]],["deberta-v2",["DebertaV2ForSequenceClassification",Fe]],["mpnet",["MPNetForSequenceClassification",Je]],["albert",["AlbertForSequenceClassification",dt]],["distilbert",["DistilBertForSequenceClassification",Oe]],["roberta",["RobertaForSequenceClassification",Rt]],["xlm",["XLMForSequenceClassification",Ut]],["xlm-roberta",["XLMRobertaForSequenceClassification",Yt]],["bart",["BartForSequenceClassification",Tt]],["mbart",["MBartForSequenceClassification",Ct]],["mobilebert",["MobileBertForSequenceClassification",Ke]],["squeezebert",["SqueezeBertForSequenceClassification",it]]]),To=new Map([["bert",["BertForTokenClassification",K]],["roformer",["RoFormerForTokenClassification",ne]],["electra",["ElectraForTokenClassification",me]],["esm",["EsmForTokenClassification",Ge]],["convbert",["ConvBertForTokenClassification",le]],["camembert",["CamembertForTokenClassification",ye]],["deberta",["DebertaForTokenClassification",$e]],["deberta-v2",["DebertaV2ForTokenClassification",Ae]],["mpnet",["MPNetForTokenClassification",et]],["distilbert",["DistilBertForTokenClassification",Le]],["roberta",["RobertaForTokenClassification",Nt]],["xlm",["XLMForTokenClassification",Wt]],["xlm-roberta",["XLMRobertaForTokenClassification",Zt]]]),ko=new Map([["t5",["T5ForConditionalGeneration",mt]],["longt5",["LongT5ForConditionalGeneration",_t]],["mt5",["MT5ForConditionalGeneration",yt]],["bart",["BartForConditionalGeneration",Mt]],["mbart",["MBartForConditionalGeneration",St]],["marian",["MarianMTModel",qs]],["m2m_100",["M2M100ForConditionalGeneration",Ws]],["blenderbot",["BlenderbotForConditionalGeneration",At]],["blenderbot-small",["BlenderbotSmallForConditionalGeneration",Bt]]]),$o=new Map([["bloom",["BloomForCausalLM",hr]],["gpt2",["GPT2LMHeadModel",Cn]],["gptj",["GPTJForCausalLM",Ln]],["gpt_bigcode",["GPTBigCodeForCausalLM",Nn]],["gpt_neo",["GPTNeoForCausalLM",Fn]],["gpt_neox",["GPTNeoXForCausalLM",zn]],["codegen",["CodeGenForCausalLM",qn]],["llama",["LlamaForCausalLM",Wn]],["cohere",["CohereForCausalLM",Xn]],["gemma",["GemmaForCausalLM",Zn]],["openelm",["OpenELMForCausalLM",tr]],["qwen2",["Qwen2ForCausalLM",sr]],["phi",["PhiForCausalLM",ar]],["phi3",["Phi3ForCausalLM",ur]],["mpt",["MptForCausalLM",gr]],["opt",["OPTForCausalLM",br]],["mbart",["MBartForCausalLM",Pt]],["mistral",["MistralForCausalLM",Ei]],["starcoder2",["Starcoder2ForCausalLM",Ii]],["falcon",["FalconForCausalLM",Oi]],["trocr",["TrOCRForCausalLM",Si]],["stablelm",["StableLmForCausalLM",Xi]]]),So=new Map([["bert",["BertForMaskedLM",W]],["roformer",["RoFormerForMaskedLM",ee]],["electra",["ElectraForMaskedLM",pe]],["esm",["EsmForMaskedLM",je]],["convbert",["ConvBertForMaskedLM",oe]],["camembert",["CamembertForMaskedLM",we]],["deberta",["DebertaForMaskedLM",Te]],["deberta-v2",["DebertaV2ForMaskedLM",Ee]],["mpnet",["MPNetForMaskedLM",Ze]],["albert",["AlbertForMaskedLM",ct]],["distilbert",["DistilBertForMaskedLM",Re]],["roberta",["RobertaForMaskedLM",Dt]],["xlm",["XLMWithLMHeadModel",Gt]],["xlm-roberta",["XLMRobertaForMaskedLM",Qt]],["mobilebert",["MobileBertForMaskedLM",He]],["squeezebert",["SqueezeBertForMaskedLM",st]]]),Co=new Map([["bert",["BertForQuestionAnswering",X]],["roformer",["RoFormerForQuestionAnswering",re]],["electra",["ElectraForQuestionAnswering",fe]],["convbert",["ConvBertForQuestionAnswering",de]],["camembert",["CamembertForQuestionAnswering",ve]],["deberta",["DebertaForQuestionAnswering",Se]],["deberta-v2",["DebertaV2ForQuestionAnswering",Ie]],["mpnet",["MPNetForQuestionAnswering",tt]],["albert",["AlbertForQuestionAnswering",ut]],["distilbert",["DistilBertForQuestionAnswering",De]],["roberta",["RobertaForQuestionAnswering",Vt]],["xlm",["XLMForQuestionAnswering",Ht]],["xlm-roberta",["XLMRobertaForQuestionAnswering",Jt]],["mobilebert",["MobileBertForQuestionAnswering",Xe]],["squeezebert",["SqueezeBertForQuestionAnswering",ot]]]),Po=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",an]]]),Eo=new Map([["llava",["LlavaForConditionalGeneration",dn]],["moondream1",["Moondream1ForConditionalGeneration",un]],["florence2",["Florence2ForConditionalGeneration",pn]]]),Fo=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",an]]]),Ao=new Map([["vit",["ViTForImageClassification",xr]],["fastvit",["FastViTForImageClassification",kr]],["mobilevit",["MobileViTForImageClassification",Er]],["mobilevitv2",["MobileViTV2ForImageClassification",Ir]],["beit",["BeitForImageClassification",jr]],["deit",["DeiTForImageClassification",is]],["convnext",["ConvNextForImageClassification",Ss]],["convnextv2",["ConvNextV2ForImageClassification",Es]],["dinov2",["Dinov2ForImageClassification",Is]],["resnet",["ResNetForImageClassification",ls]],["swin",["SwinForImageClassification",cs]],["segformer",["SegformerForImageClassification",Ui]],["efficientnet",["EfficientNetForImageClassification",Zi]],["mobilenet_v1",["MobileNetV1ForImageClassification",io]],["mobilenet_v2",["MobileNetV2ForImageClassification",lo]],["mobilenet_v3",["MobileNetV3ForImageClassification",po]],["mobilenet_v4",["MobileNetV4ForImageClassification",fo]]]),Io=new Map([["detr",["DetrForObjectDetection",Ur]],["rt_detr",["RTDetrForObjectDetection",Yr]],["table-transformer",["TableTransformerForObjectDetection",ts]],["yolos",["YolosForObjectDetection",Os]]]),zo=new Map([["owlvit",["OwlViTForObjectDetection",Or]],["owlv2",["Owlv2ForObjectDetection",Rr]]]),Bo=new Map([["detr",["DetrForSegmentation",Wr]],["clipseg",["CLIPSegForImageSegmentation",kn]]]),Oo=new Map([["segformer",["SegformerForSemanticSegmentation",Wi]]]),Lo=new Map([["sam",["SamModel",Rs]]]),Do=new Map([["wav2vec2",["Wav2Vec2ForCTC",Xs]],["wav2vec2-bert",["Wav2Vec2BertForCTC",di]],["unispeech",["UniSpeechForCTC",ei]],["unispeech-sat",["UniSpeechSatForCTC",si]],["wavlm",["WavLMForCTC",_i]],["hubert",["HubertForCTC",hi]]]),Ro=new Map([["wav2vec2",["Wav2Vec2ForSequenceClassification",Qs]],["wav2vec2-bert",["Wav2Vec2BertForSequenceClassification",ui]],["unispeech",["UniSpeechForSequenceClassification",ti]],["unispeech-sat",["UniSpeechSatForSequenceClassification",ii]],["wavlm",["WavLMForSequenceClassification",wi]],["hubert",["HubertForSequenceClassification",mi]],["audio-spectrogram-transformer",["ASTForAudioClassification",nn]]]),No=new Map([["wavlm",["WavLMForXVector",bi]]]),Vo=new Map([["unispeech-sat",["UniSpeechSatForAudioFrameClassification",oi]],["wavlm",["WavLMForAudioFrameClassification",yi]],["wav2vec2",["Wav2Vec2ForAudioFrameClassification",Ys]]]),jo=new Map([["vitmatte",["VitMatteForImageMatting",Sr]]]),qo=new Map([["swin2sr",["Swin2SRForImageSuperResolution",ms]]]),Go=new Map([["dpt",["DPTForDepthEstimation",_s]],["depth_anything",["DepthAnythingForDepthEstimation",bs]],["glpn",["GLPNForDepthEstimation",xs]]]),Uo=new Map([["clip",["CLIPVisionModelWithProjection",gn]],["siglip",["SiglipVisionModel",yn]]]),Wo=[[_o,w],[wo,b],[bo,x],[Mo,w],[To,w],[ko,y],[yo,y],[$o,x],[So,w],[Co,w],[Po,v],[Eo,T],[Ao,w],[Bo,w],[Oo,w],[jo,w],[qo,w],[Go,w],[Io,w],[zo,w],[Lo,M],[Do,w],[Ro,w],[vo,y],[xo,w],[No,w],[Vo,w],[Uo,w]];for(const[e,t]of Wo)for(const[n,r]of e.values())$.set(n,t),C.set(r,n),S.set(n,r);const Ho=[["MusicgenForConditionalGeneration",no,k],["CLIPTextModelWithProjection",fn,w],["SiglipTextModel",bn,w],["ClapTextModelWithProjection",Ri,w],["ClapAudioModelWithProjection",Ni,w]];for(const[e,t,n]of Ho)$.set(e,n),C.set(t,e),S.set(e,t);class Ko extends go{static MODEL_CLASS_MAPPINGS=Wo.map((e=>e[0]));static BASE_IF_FAIL=!0}class Xo extends go{static MODEL_CLASS_MAPPINGS=[Mo]}class Qo extends go{static MODEL_CLASS_MAPPINGS=[To]}class Yo extends go{static MODEL_CLASS_MAPPINGS=[ko]}class Zo extends go{static MODEL_CLASS_MAPPINGS=[yo]}class Jo extends go{static MODEL_CLASS_MAPPINGS=[vo]}class ea extends go{static MODEL_CLASS_MAPPINGS=[xo]}class ta extends go{static MODEL_CLASS_MAPPINGS=[$o]}class na extends go{static MODEL_CLASS_MAPPINGS=[So]}class ra extends go{static MODEL_CLASS_MAPPINGS=[Co]}class sa extends go{static MODEL_CLASS_MAPPINGS=[Po]}class ia extends go{static MODEL_CLASS_MAPPINGS=[Ao]}class oa extends go{static MODEL_CLASS_MAPPINGS=[Bo]}class aa extends go{static MODEL_CLASS_MAPPINGS=[Oo]}class la extends go{static MODEL_CLASS_MAPPINGS=[Io]}class da extends go{static MODEL_CLASS_MAPPINGS=[zo]}class ua extends go{static MODEL_CLASS_MAPPINGS=[Lo]}class ca extends go{static MODEL_CLASS_MAPPINGS=[Do]}class pa extends go{static MODEL_CLASS_MAPPINGS=[Ro]}class ha extends go{static MODEL_CLASS_MAPPINGS=[No]}class ma extends go{static MODEL_CLASS_MAPPINGS=[Vo]}class fa extends go{static MODEL_CLASS_MAPPINGS=[Fo]}class ga extends go{static MODEL_CLASS_MAPPINGS=[jo]}class _a extends go{static MODEL_CLASS_MAPPINGS=[qo]}class wa extends go{static MODEL_CLASS_MAPPINGS=[Go]}class ba extends go{static MODEL_CLASS_MAPPINGS=[Uo]}class ya extends j{constructor({logits:e,past_key_values:t,encoder_outputs:n,decoder_attentions:r=null,cross_attentions:s=null}){super(),this.logits=e,this.past_key_values=t,this.encoder_outputs=n,this.decoder_attentions=r,this.cross_attentions=s}}class va extends j{constructor({logits:e}){super(),this.logits=e}}class xa extends j{constructor({logits:e,embeddings:t}){super(),this.logits=e,this.embeddings=t}}class Ma extends j{constructor({logits:e}){super(),this.logits=e}}class Ta extends j{constructor({logits:e}){super(),this.logits=e}}class ka extends j{constructor({start_logits:e,end_logits:t}){super(),this.start_logits=e,this.end_logits=t}}class $a extends j{constructor({logits:e}){super(),this.logits=e}}class Sa extends j{constructor({logits:e,past_key_values:t}){super(),this.logits=e,this.past_key_values=t}}class Ca extends j{constructor({alphas:e}){super(),this.alphas=e}}class Pa extends j{constructor({waveform:e,spectrogram:t}){super(),this.waveform=e,this.spectrogram=t}}},"./src/models/whisper/common_whisper.js":
/*!**********************************************!*\
  !*** ./src/models/whisper/common_whisper.js ***!
  \**********************************************/(e,t,n)=>{n.r(t),n.d(t,{WHISPER_LANGUAGE_MAPPING:()=>s,WHISPER_TO_LANGUAGE_CODE_MAPPING:()=>i,whisper_language_to_code:()=>o});const r=[["en","english"],["zh","chinese"],["de","german"],["es","spanish"],["ru","russian"],["ko","korean"],["fr","french"],["ja","japanese"],["pt","portuguese"],["tr","turkish"],["pl","polish"],["ca","catalan"],["nl","dutch"],["ar","arabic"],["sv","swedish"],["it","italian"],["id","indonesian"],["hi","hindi"],["fi","finnish"],["vi","vietnamese"],["he","hebrew"],["uk","ukrainian"],["el","greek"],["ms","malay"],["cs","czech"],["ro","romanian"],["da","danish"],["hu","hungarian"],["ta","tamil"],["no","norwegian"],["th","thai"],["ur","urdu"],["hr","croatian"],["bg","bulgarian"],["lt","lithuanian"],["la","latin"],["mi","maori"],["ml","malayalam"],["cy","welsh"],["sk","slovak"],["te","telugu"],["fa","persian"],["lv","latvian"],["bn","bengali"],["sr","serbian"],["az","azerbaijani"],["sl","slovenian"],["kn","kannada"],["et","estonian"],["mk","macedonian"],["br","breton"],["eu","basque"],["is","icelandic"],["hy","armenian"],["ne","nepali"],["mn","mongolian"],["bs","bosnian"],["kk","kazakh"],["sq","albanian"],["sw","swahili"],["gl","galician"],["mr","marathi"],["pa","punjabi"],["si","sinhala"],["km","khmer"],["sn","shona"],["yo","yoruba"],["so","somali"],["af","afrikaans"],["oc","occitan"],["ka","georgian"],["be","belarusian"],["tg","tajik"],["sd","sindhi"],["gu","gujarati"],["am","amharic"],["yi","yiddish"],["lo","lao"],["uz","uzbek"],["fo","faroese"],["ht","haitian creole"],["ps","pashto"],["tk","turkmen"],["nn","nynorsk"],["mt","maltese"],["sa","sanskrit"],["lb","luxembourgish"],["my","myanmar"],["bo","tibetan"],["tl","tagalog"],["mg","malagasy"],["as","assamese"],["tt","tatar"],["haw","hawaiian"],["ln","lingala"],["ha","hausa"],["ba","bashkir"],["jw","javanese"],["su","sundanese"]],s=new Map(r),i=new Map([...r.map((([e,t])=>[t,e])),["burmese","my"],["valencian","ca"],["flemish","nl"],["haitian","ht"],["letzeburgesch","lb"],["pushto","ps"],["panjabi","pa"],["moldavian","ro"],["moldovan","ro"],["sinhalese","si"],["castilian","es"]]);function o(e){e=e.toLowerCase();let t=i.get(e);if(void 0===t){if(!s.has(e)){const t=2===e.length?s.keys():s.values();throw new Error(`Language "${e}" is not supported. Must be one of: ${JSON.stringify(t)}`)}t=e}return t}},"./src/models/whisper/generation_whisper.js":
/*!**************************************************!*\
  !*** ./src/models/whisper/generation_whisper.js ***!
  \**************************************************/(e,t,n)=>{n.r(t),n.d(t,{WhisperGenerationConfig:()=>s});var r=n(/*! ../../generation/configuration_utils.js */"./src/generation/configuration_utils.js");class s extends r.GenerationConfig{return_timestamps=null;return_token_timestamps=null;num_frames=null;alignment_heads=null;task=null;language=null;no_timestamps_token_id=null;prompt_ids=null;is_multilingual=null;lang_to_id=null;task_to_id=null;max_initial_timestamp_index=1}},"./src/ops/registry.js":
/*!*****************************!*\
  !*** ./src/ops/registry.js ***!
  \*****************************/(e,t,n)=>{n.r(t),n.d(t,{TensorOpRegistry:()=>o});var r=n(/*! ../backends/onnx.js */"./src/backends/onnx.js"),s=n(/*! ../utils/tensor.js */"./src/utils/tensor.js");const i=async(e,t,n)=>{const i=await(0,r.createInferenceSession)(new Uint8Array(e),t);return async e=>{const t=Object.fromEntries(Object.entries(e).map((([e,t])=>[e,t.ort_tensor]))),r=await i.run(t);return Array.isArray(n)?n.map((e=>new s.Tensor(r[e]))):new s.Tensor(r[n])}};class o{static session_options={};static get bilinear_interpolate_4d(){return this._bilinear_interpolate_4d||(this._bilinear_interpolate_4d=i([8,9,18,0,58,128,1,10,40,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,17,10,4,109,111,100,101,34,6,108,105,110,101,97,114,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bilinear_interpolate_4d}static get bicubic_interpolate_4d(){return this._bicubic_interpolate_4d||(this._bicubic_interpolate_4d=i([8,9,18,0,58,127,10,39,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,16,10,4,109,111,100,101,34,5,99,117,98,105,99,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bicubic_interpolate_4d}static get matmul(){return this._matmul||(this._matmul=i([8,9,18,0,58,55,10,17,10,1,97,10,1,98,18,1,99,34,6,77,97,116,77,117,108,18,1,114,90,9,10,1,97,18,4,10,2,8,1,90,9,10,1,98,18,4,10,2,8,1,98,9,10,1,99,18,4,10,2,8,1,66,2,16,20],this.session_options,"c")),this._matmul}static get stft(){return this._stft||(this._stft=i([8,7,18,0,58,148,1,10,38,10,1,115,10,1,106,10,1,119,10,1,108,18,1,111,34,4,83,84,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,115,90,26,10,1,115,18,21,10,19,8,1,18,15,10,3,18,1,98,10,3,18,1,115,10,3,18,1,99,90,11,10,1,106,18,6,10,4,8,7,18,0,90,16,10,1,119,18,11,10,9,8,1,18,5,10,3,18,1,119,90,11,10,1,108,18,6,10,4,8,7,18,0,98,31,10,1,111,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,102,10,3,18,1,100,10,3,18,1,99,66,2,16,17],this.session_options,"o")),this._stft}static get rfft(){return this._rfft||(this._rfft=i([8,9,18,0,58,97,10,33,10,1,120,10,0,10,1,97,18,1,121,34,3,68,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,100,90,21,10,1,120,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,90,11,10,1,97,18,6,10,4,8,7,18,0,98,21,10,1,121,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,66,2,16,20],this.session_options,"y")),this._rfft}static get top_k(){return this._top_k||(this._top_k=i([8,10,18,0,58,73,10,18,10,1,120,10,1,107,18,1,118,18,1,105,34,4,84,111,112,75,18,1,116,90,9,10,1,120,18,4,10,2,8,1,90,15,10,1,107,18,10,10,8,8,7,18,4,10,2,8,1,98,9,10,1,118,18,4,10,2,8,1,98,9,10,1,105,18,4,10,2,8,7,66,2,16,21],this.session_options,["v","i"])),this._top_k}}},"./src/pipelines.js":
/*!**************************!*\
  !*** ./src/pipelines.js ***!
  \**************************/(e,t,n)=>{n.r(t),n.d(t,{AudioClassificationPipeline:()=>C,AutomaticSpeechRecognitionPipeline:()=>E,DepthEstimationPipeline:()=>N,DocumentQuestionAnsweringPipeline:()=>L,FeatureExtractionPipeline:()=>$,FillMaskPipeline:()=>b,ImageClassificationPipeline:()=>A,ImageFeatureExtractionPipeline:()=>S,ImageSegmentationPipeline:()=>I,ImageToImagePipeline:()=>R,ImageToTextPipeline:()=>F,ObjectDetectionPipeline:()=>B,Pipeline:()=>f,QuestionAnsweringPipeline:()=>w,SummarizationPipeline:()=>v,Text2TextGenerationPipeline:()=>y,TextClassificationPipeline:()=>g,TextGenerationPipeline:()=>T,TextToAudioPipeline:()=>D,TokenClassificationPipeline:()=>_,TranslationPipeline:()=>x,ZeroShotAudioClassificationPipeline:()=>P,ZeroShotClassificationPipeline:()=>k,ZeroShotImageClassificationPipeline:()=>z,ZeroShotObjectDetectionPipeline:()=>O,pipeline:()=>q});var r=n(/*! ./tokenizers.js */"./src/tokenizers.js"),s=n(/*! ./models.js */"./src/models.js"),i=n(/*! ./processors.js */"./src/processors.js"),o=n(/*! ./utils/generic.js */"./src/utils/generic.js"),a=n(/*! ./utils/core.js */"./src/utils/core.js"),l=n(/*! ./utils/maths.js */"./src/utils/maths.js"),d=n(/*! ./utils/audio.js */"./src/utils/audio.js"),u=n(/*! ./utils/tensor.js */"./src/utils/tensor.js"),c=n(/*! ./utils/image.js */"./src/utils/image.js");async function p(e){return Array.isArray(e)||(e=[e]),await Promise.all(e.map((e=>c.RawImage.read(e))))}async function h(e,t){return Array.isArray(e)||(e=[e]),await Promise.all(e.map((e=>"string"==typeof e||e instanceof URL?(0,d.read_audio)(e,t):e instanceof Float64Array?new Float32Array(e):e)))}function m(e,t){t&&(e=e.map((e=>0|e)));const[n,r,s,i]=e;return{xmin:n,ymin:r,xmax:s,ymax:i}}class f extends o.Callable{constructor({task:e,model:t,tokenizer:n=null,processor:r=null}){super(),this.task=e,this.model=t,this.tokenizer=n,this.processor=r}async dispose(){await this.model.dispose()}}class g extends f{constructor(e){super(e)}async _call(e,{top_k:t=1}={}){const n=this.tokenizer(e,{padding:!0,truncation:!0}),r=await this.model(n),s="multi_label_classification"===this.model.config.problem_type?e=>e.sigmoid():e=>new u.Tensor("float32",(0,l.softmax)(e.data),e.dims),i=this.model.config.id2label,o=[];for(const e of r.logits){const n=s(e),r=await(0,u.topk)(n,t),a=r[0].tolist(),l=r[1].tolist().map(((e,t)=>({label:i?i[e]:`LABEL_${e}`,score:a[t]})));1===t?o.push(...l):o.push(l)}return Array.isArray(e)||1===t?o:o[0]}}class _ extends f{constructor(e){super(e)}async _call(e,{ignore_labels:t=["O"]}={}){const n=Array.isArray(e),r=this.tokenizer(n?e:[e],{padding:!0,truncation:!0}),s=(await this.model(r)).logits,i=this.model.config.id2label,o=[];for(let e=0;e<s.dims[0];++e){const n=r.input_ids[e],a=s[e],d=[];for(let e=0;e<a.dims[0];++e){const r=a[e],s=(0,l.max)(r.data)[1],o=i?i[s]:`LABEL_${s}`;if(t.includes(o))continue;const u=this.tokenizer.decode([n[e].item()],{skip_special_tokens:!0});if(""===u)continue;const c=(0,l.softmax)(r.data);d.push({entity:o,score:c[s],index:e,word:u})}o.push(d)}return n?o:o[0]}}class w extends f{constructor(e){super(e)}async _call(e,t,{top_k:n=1}={}){const r=this.tokenizer(e,{text_pair:t,padding:!0,truncation:!0}),{start_logits:s,end_logits:i}=await this.model(r),o=r.input_ids.tolist(),d=r.attention_mask.tolist(),u=this.tokenizer.all_special_ids,c=[];for(let e=0;e<s.dims[0];++e){const t=o[e],r=t.findIndex((e=>e==this.tokenizer.sep_token_id)),p=(d[e].map(((e,n)=>1==e&&(0===n||n>r&&-1===u.findIndex((e=>e==t[n]))))),s[e].tolist()),h=i[e].tolist();for(let n=1;n<p.length;++n)(0==d[e]||n<=r||-1!==u.findIndex((e=>e==t[n])))&&(p[n]=-1/0,h[n]=-1/0);const m=(0,l.softmax)(p).map(((e,t)=>[e,t])),f=(0,l.softmax)(h).map(((e,t)=>[e,t]));m[0][0]=0,f[0][0]=0;const g=(0,a.product)(m,f).filter((e=>e[0][1]<=e[1][1])).map((e=>[e[0][1],e[1][1],e[0][0]*e[1][0]])).sort(((e,t)=>t[2]-e[2]));for(let e=0;e<Math.min(g.length,n);++e){const[n,r,s]=g[e],i=t.slice(n,r+1),o=this.tokenizer.decode(i,{skip_special_tokens:!0});c.push({answer:o,score:s})}}return 1===n?c[0]:c}}class b extends f{constructor(e){super(e)}async _call(e,{top_k:t=5}={}){const n=this.tokenizer(e,{padding:!0,truncation:!0}),{logits:r}=await this.model(n),s=[],i=n.input_ids.tolist();for(let e=0;e<i.length;++e){const n=i[e],o=n.findIndex((e=>e==this.tokenizer.mask_token_id));if(-1===o)throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);const a=r[e][o],d=await(0,u.topk)(new u.Tensor("float32",(0,l.softmax)(a.data),a.dims),t),c=d[0].tolist(),p=d[1].tolist();s.push(p.map(((e,t)=>{const r=n.slice();return r[o]=e,{score:c[t],token:Number(e),token_str:this.tokenizer.model.vocab[e],sequence:this.tokenizer.decode(r,{skip_special_tokens:!0})}})))}return Array.isArray(e)?s:s[0]}}class y extends f{_key="generated_text";constructor(e){super(e)}async _call(e,t={}){Array.isArray(e)||(e=[e]),this.model.config.prefix&&(e=e.map((e=>this.model.config.prefix+e)));const n=this.model.config.task_specific_params;n&&n[this.task]&&n[this.task].prefix&&(e=e.map((e=>n[this.task].prefix+e)));const r=this.tokenizer,s={padding:!0,truncation:!0};let i;i=this instanceof x&&"_build_translation_inputs"in r?r._build_translation_inputs(e,s,t):r(e,s);const o=await this.model.generate({...i,...t});return r.batch_decode(o,{skip_special_tokens:!0}).map((e=>({[this._key]:e})))}}class v extends y{_key="summary_text";constructor(e){super(e)}}class x extends y{_key="translation_text";constructor(e){super(e)}}function M(e){return Array.isArray(e)&&e.every((e=>"role"in e&&"content"in e))}class T extends f{constructor(e){super(e)}async _call(e,t={}){let n,r=!1,s=!1;if("string"==typeof e)n=e=[e];else if(Array.isArray(e)&&e.every((e=>"string"==typeof e)))r=!0,n=e;else{if(M(e))e=[e];else{if(!Array.isArray(e)||!e.every(M))throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");r=!0}s=!0,n=e.map((e=>this.tokenizer.apply_chat_template(e,{tokenize:!1,add_generation_prompt:!0})))}const i=t.add_special_tokens??!1,o=!s&&(t.return_full_text??!0);this.tokenizer.padding_side="left";const a=this.tokenizer(n,{add_special_tokens:i,padding:!0,truncation:!0}),l=await this.model.generate({...a,...t}),d=this.tokenizer.batch_decode(l,{skip_special_tokens:!0});let u;!o&&a.input_ids.dims.at(-1)>0&&(u=this.tokenizer.batch_decode(a.input_ids,{skip_special_tokens:!0}).map((e=>e.length)));const c=Array.from({length:e.length},(e=>[]));for(let t=0;t<d.length;++t){const n=Math.floor(t/l.dims[0]*e.length);u&&(d[t]=d[t].slice(u[n])),c[n].push({generated_text:s?[...e[n],{role:"assistant",content:d[t]}]:d[t]})}return r||1!==c.length?c:c[0]}}class k extends f{constructor(e){super(e),this.label2id=Object.fromEntries(Object.entries(this.model.config.label2id).map((([e,t])=>[e.toLowerCase(),t]))),this.entailment_id=this.label2id.entailment,void 0===this.entailment_id&&(console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id."),this.entailment_id=2),this.contradiction_id=this.label2id.contradiction??this.label2id.not_entailment,void 0===this.contradiction_id&&(console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id."),this.contradiction_id=0)}async _call(e,t,{hypothesis_template:n="This example is {}.",multi_label:r=!1}={}){const s=Array.isArray(e);s||(e=[e]),Array.isArray(t)||(t=[t]);const i=t.map((e=>n.replace("{}",e))),o=r||1===t.length,a=[];for(const n of e){const e=[];for(const t of i){const r=this.tokenizer(n,{text_pair:t,padding:!0,truncation:!0}),s=await this.model(r);o?e.push([s.logits.data[this.contradiction_id],s.logits.data[this.entailment_id]]):e.push(s.logits.data[this.entailment_id])}const r=(o?e.map((e=>(0,l.softmax)(e)[1])):(0,l.softmax)(e)).map(((e,t)=>[e,t])).sort(((e,t)=>t[0]-e[0]));a.push({sequence:n,labels:r.map((e=>t[e[1]])),scores:r.map((e=>e[0]))})}return s?a:a[0]}}class $ extends f{constructor(e){super(e)}async _call(e,{pooling:t="none",normalize:n=!1,quantize:r=!1,precision:s="binary"}={}){const i=this.tokenizer(e,{padding:!0,truncation:!0}),o=await this.model(i);let a=o.last_hidden_state??o.logits??o.token_embeddings;if("none"===t);else if("mean"===t)a=(0,u.mean_pooling)(a,i.attention_mask);else{if("cls"!==t)throw Error(`Pooling method '${t}' not supported.`);a=a.slice(null,0)}return n&&(a=a.normalize(2,-1)),r&&(a=(0,u.quantize_embeddings)(a,s)),a}}class S extends f{constructor(e){super(e)}async _call(e,{pool:t=null}={}){const n=await p(e),{pixel_values:r}=await this.processor(n),s=await this.model({pixel_values:r});let i;if(t){if(!("pooler_output"in s))throw Error("No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.");i=s.pooler_output}else i=s.last_hidden_state??s.logits??s.image_embeds;return i}}class C extends f{constructor(e){super(e)}async _call(e,{top_k:t=5}={}){const n=this.processor.feature_extractor.config.sampling_rate,r=await h(e,n),s=this.model.config.id2label,i=[];for(const e of r){const n=await this.processor(e),r=(await this.model(n)).logits[0],o=await(0,u.topk)(new u.Tensor("float32",(0,l.softmax)(r.data),r.dims),t),a=o[0].tolist(),d=o[1].tolist().map(((e,t)=>({label:s?s[e]:`LABEL_${e}`,score:a[t]})));i.push(d)}return Array.isArray(e)?i:i[0]}}class P extends f{constructor(e){super(e)}async _call(e,t,{hypothesis_template:n="This is a sound of {}."}={}){const r=!Array.isArray(e);r&&(e=[e]);const s=t.map((e=>n.replace("{}",e))),i=this.tokenizer(s,{padding:!0,truncation:!0}),o=this.processor.feature_extractor.config.sampling_rate,a=await h(e,o),d=[];for(const e of a){const n=await this.processor(e),r=await this.model({...i,...n}),s=(0,l.softmax)(r.logits_per_audio.data);d.push([...s].map(((e,n)=>({score:e,label:t[n]}))))}return r?d[0]:d}}class E extends f{constructor(e){super(e)}async _call(e,t={}){switch(this.model.config.model_type){case"whisper":return this._call_whisper(e,t);case"wav2vec2":case"wav2vec2-bert":case"unispeech":case"unispeech-sat":case"hubert":return this._call_wav2vec2(e,t);default:throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`)}}async _call_wav2vec2(e,t){t.language&&console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".'),t.task&&console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');const n=!Array.isArray(e);n&&(e=[e]);const r=this.processor.feature_extractor.config.sampling_rate,s=await h(e,r),i=[];for(const e of s){const t=await this.processor(e),n=(await this.model(t)).logits[0],r=[];for(const e of n)r.push((0,l.max)(e.data)[1]);const s=this.tokenizer.decode(r);i.push({text:s})}return n?i[0]:i}async _call_whisper(e,t){const n=t.return_timestamps??!1,r=t.chunk_length_s??0,s=t.force_full_sequences??!1;let i=t.stride_length_s??null;const o={...t};"word"===n&&(o.return_token_timestamps=!0,o.return_timestamps=!1);const a=!Array.isArray(e);a&&(e=[e]);const d=this.processor.feature_extractor.config.chunk_length/this.model.config.max_source_positions,u=this.processor.feature_extractor.config.hop_length,c=this.processor.feature_extractor.config.sampling_rate,p=await h(e,c),m=[];for(const e of p){let t=[];if(r>0){if(null===i)i=r/6;else if(r<=i)throw Error("`chunk_length_s` must be larger than `stride_length_s`.");const n=c*r,s=c*i,o=n-2*s;let a=0;for(;;){const r=a+n,i=e.subarray(a,r),l=await this.processor(i),d=0===a,u=r>=e.length;if(t.push({stride:[i.length,d?0:s,u?0:s],input_features:l.input_features,is_last:u}),u)break;a+=o}}else t=[{stride:[e.length,0,0],input_features:(await this.processor(e)).input_features,is_last:!0}];for(const e of t){o.num_frames=Math.floor(e.stride[0]/u);const t=await this.model.generate({inputs:e.input_features,...o});"word"===n?(e.tokens=t.sequences.tolist()[0],e.token_timestamps=t.token_timestamps.tolist()[0].map((e=>(0,l.round)(e,2)))):e.tokens=t[0].tolist(),e.stride=e.stride.map((e=>e/c))}const[a,p]=this.tokenizer._decode_asr(t,{time_precision:d,return_timestamps:n,force_full_sequences:s});m.push({text:a,...p})}return a?m[0]:m}}class F extends f{constructor(e){super(e)}async _call(e,t={}){const n=Array.isArray(e),r=await p(e),{pixel_values:s}=await this.processor(r),i=[];for(const e of s){e.dims=[1,...e.dims];const n=await this.model.generate({inputs:e,...t}),r=this.tokenizer.batch_decode(n,{skip_special_tokens:!0}).map((e=>({generated_text:e.trim()})));i.push(r)}return n?i:i[0]}}class A extends f{constructor(e){super(e)}async _call(e,{top_k:t=5}={}){const n=await p(e),{pixel_values:r}=await this.processor(n),s=await this.model({pixel_values:r}),i=this.model.config.id2label,o=[];for(const e of s.logits){const n=await(0,u.topk)(new u.Tensor("float32",(0,l.softmax)(e.data),e.dims),t),r=n[0].tolist(),s=n[1].tolist().map(((e,t)=>({label:i?i[e]:`LABEL_${e}`,score:r[t]})));o.push(s)}return Array.isArray(e)?o:o[0]}}class I extends f{constructor(e){super(e),this.subtasks_mapping={panoptic:"post_process_panoptic_segmentation",instance:"post_process_instance_segmentation",semantic:"post_process_semantic_segmentation"}}async _call(e,{threshold:t=.5,mask_threshold:n=.5,overlap_mask_area_threshold:r=.8,label_ids_to_fuse:s=null,target_sizes:i=null,subtask:o=null}={}){if(Array.isArray(e)&&1!==e.length)throw Error("Image segmentation pipeline currently only supports a batch size of 1.");const a=await p(e),l=a.map((e=>[e.height,e.width])),{pixel_values:d,pixel_mask:u}=await this.processor(a),h=await this.model({pixel_values:d,pixel_mask:u});let m=null;if(null!==o)m=this.subtasks_mapping[o];else for(let[e,t]of Object.entries(this.subtasks_mapping))if(t in this.processor.feature_extractor){m=this.processor.feature_extractor[t].bind(this.processor.feature_extractor),o=e;break}const f=this.model.config.id2label,g=[];if("panoptic"===o||"instance"===o){const e=m(h,t,n,r,s,i??l)[0],o=e.segmentation;for(const t of e.segments_info){const e=new Uint8ClampedArray(o.data.length);for(let n=0;n<o.data.length;++n)o.data[n]===t.id&&(e[n]=255);const n=new c.RawImage(e,o.dims[1],o.dims[0],1);g.push({score:t.score,label:f[t.label_id],mask:n})}}else{if("semantic"!==o)throw Error(`Subtask ${o} not supported.`);{const{segmentation:e,labels:t}=m(h,i??l)[0];for(const n of t){const t=new Uint8ClampedArray(e.data.length);for(let r=0;r<e.data.length;++r)e.data[r]===n&&(t[r]=255);const r=new c.RawImage(t,e.dims[1],e.dims[0],1);g.push({score:null,label:f[n],mask:r})}}}return g}}class z extends f{constructor(e){super(e)}async _call(e,t,{hypothesis_template:n="This is a photo of {}"}={}){const r=Array.isArray(e),s=await p(e),i=t.map((e=>n.replace("{}",e))),o=this.tokenizer(i,{padding:"siglip"!==this.model.config.model_type||"max_length",truncation:!0}),{pixel_values:a}=await this.processor(s),d=await this.model({...o,pixel_values:a}),u="siglip"===this.model.config.model_type?e=>e.sigmoid().data:e=>(0,l.softmax)(e.data),c=[];for(const e of d.logits_per_image){const n=[...u(e)].map(((e,n)=>({score:e,label:t[n]})));n.sort(((e,t)=>t.score-e.score)),c.push(n)}return r?c:c[0]}}class B extends f{constructor(e){super(e)}async _call(e,{threshold:t=.9,percentage:n=!1}={}){const r=Array.isArray(e);if(r&&1!==e.length)throw Error("Object detection pipeline currently only supports a batch size of 1.");const s=await p(e),i=n?null:s.map((e=>[e.height,e.width])),{pixel_values:o,pixel_mask:a}=await this.processor(s),l=await this.model({pixel_values:o,pixel_mask:a}),d=this.processor.feature_extractor.post_process_object_detection(l,t,i),u=this.model.config.id2label,c=d.map((e=>e.boxes.map(((t,r)=>({score:e.scores[r],label:u[e.classes[r]],box:m(t,!n)})))));return r?c:c[0]}}class O extends f{constructor(e){super(e)}async _call(e,t,{threshold:n=.1,top_k:r=null,percentage:s=!1}={}){const i=Array.isArray(e),o=await p(e),a=this.tokenizer(t,{padding:!0,truncation:!0}),l=await this.processor(o),d=[];for(let e=0;e<o.length;++e){const i=o[e],u=s?null:[[i.height,i.width]],c=l.pixel_values[e].unsqueeze_(0),p=await this.model({...a,pixel_values:c}),h=this.processor.feature_extractor.post_process_object_detection(p,n,u,!0)[0];let f=h.boxes.map(((e,n)=>({score:h.scores[n],label:t[h.classes[n]],box:m(e,!s)}))).sort(((e,t)=>t.score-e.score));null!==r&&(f=f.slice(0,r)),d.push(f)}return i?d:d[0]}}class L extends f{constructor(e){super(e)}async _call(e,t,n={}){throw new Error("This pipeline is not yet supported in Transformers.js v3.")}}class D extends f{DEFAULT_VOCODER_ID="Xenova/speecht5_hifigan";constructor(e){super(e),this.vocoder=e.vocoder??null}async _call(e,{speaker_embeddings:t=null}={}){return this.processor?this._call_text_to_spectrogram(e,{speaker_embeddings:t}):this._call_text_to_waveform(e)}async _call_text_to_waveform(e){const t=this.tokenizer(e,{padding:!0,truncation:!0}),{waveform:n}=await this.model(t),r=this.model.config.sampling_rate;return{audio:n.data,sampling_rate:r}}async _call_text_to_spectrogram(e,{speaker_embeddings:t}){if(this.vocoder||(console.log("No vocoder specified, using default HifiGan vocoder."),this.vocoder=await s.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID,{dtype:"fp32"})),("string"==typeof t||t instanceof URL)&&(t=new Float32Array(await(await fetch(t)).arrayBuffer())),t instanceof Float32Array)t=new u.Tensor("float32",t,[1,t.length]);else if(!(t instanceof u.Tensor))throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");const{input_ids:n}=this.tokenizer(e,{padding:!0,truncation:!0}),{waveform:r}=await this.model.generate_speech(n,t,{vocoder:this.vocoder}),i=this.processor.feature_extractor.config.sampling_rate;return{audio:r.data,sampling_rate:i}}}class R extends f{constructor(e){super(e)}async _call(e){const t=await p(e),n=await this.processor(t),r=await this.model(n),s=[];for(const e of r.reconstruction){const t=e.squeeze().clamp_(0,1).mul_(255).round_().to("uint8");s.push(c.RawImage.fromTensor(t))}return s.length>1?s:s[0]}}class N extends f{constructor(e){super(e)}async _call(e){const t=await p(e),n=await this.processor(t),{predicted_depth:r}=await this.model(n),s=[];for(let e=0;e<t.length;++e){const n=(0,u.interpolate)(r[e],t[e].size.reverse(),"bilinear",!1),i=n.mul_(255/(0,l.max)(n.data)[0]).to("uint8");s.push({predicted_depth:r[e],depth:c.RawImage.fromTensor(i)})}return s.length>1?s:s[0]}}const V=Object.freeze({"text-classification":{tokenizer:r.AutoTokenizer,pipeline:g,model:s.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-finetuned-sst-2-english"},type:"text"},"token-classification":{tokenizer:r.AutoTokenizer,pipeline:_,model:s.AutoModelForTokenClassification,default:{model:"Xenova/bert-base-multilingual-cased-ner-hrl"},type:"text"},"question-answering":{tokenizer:r.AutoTokenizer,pipeline:w,model:s.AutoModelForQuestionAnswering,default:{model:"Xenova/distilbert-base-cased-distilled-squad"},type:"text"},"fill-mask":{tokenizer:r.AutoTokenizer,pipeline:b,model:s.AutoModelForMaskedLM,default:{model:"Xenova/bert-base-uncased"},type:"text"},summarization:{tokenizer:r.AutoTokenizer,pipeline:v,model:s.AutoModelForSeq2SeqLM,default:{model:"Xenova/distilbart-cnn-6-6"},type:"text"},translation:{tokenizer:r.AutoTokenizer,pipeline:x,model:s.AutoModelForSeq2SeqLM,default:{model:"Xenova/t5-small"},type:"text"},"text2text-generation":{tokenizer:r.AutoTokenizer,pipeline:y,model:s.AutoModelForSeq2SeqLM,default:{model:"Xenova/flan-t5-small"},type:"text"},"text-generation":{tokenizer:r.AutoTokenizer,pipeline:T,model:s.AutoModelForCausalLM,default:{model:"Xenova/gpt2"},type:"text"},"zero-shot-classification":{tokenizer:r.AutoTokenizer,pipeline:k,model:s.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-mnli"},type:"text"},"audio-classification":{pipeline:C,model:s.AutoModelForAudioClassification,processor:i.AutoProcessor,default:{model:"Xenova/wav2vec2-base-superb-ks"},type:"audio"},"zero-shot-audio-classification":{tokenizer:r.AutoTokenizer,pipeline:P,model:s.AutoModel,processor:i.AutoProcessor,default:{model:"Xenova/clap-htsat-unfused"},type:"multimodal"},"automatic-speech-recognition":{tokenizer:r.AutoTokenizer,pipeline:E,model:[s.AutoModelForSpeechSeq2Seq,s.AutoModelForCTC],processor:i.AutoProcessor,default:{model:"Xenova/whisper-tiny.en"},type:"multimodal"},"text-to-audio":{tokenizer:r.AutoTokenizer,pipeline:D,model:[s.AutoModelForTextToWaveform,s.AutoModelForTextToSpectrogram],processor:[i.AutoProcessor,null],default:{model:"Xenova/speecht5_tts"},type:"text"},"image-to-text":{tokenizer:r.AutoTokenizer,pipeline:F,model:s.AutoModelForVision2Seq,processor:i.AutoProcessor,default:{model:"Xenova/vit-gpt2-image-captioning"},type:"multimodal"},"image-classification":{pipeline:A,model:s.AutoModelForImageClassification,processor:i.AutoProcessor,default:{model:"Xenova/vit-base-patch16-224"},type:"multimodal"},"image-segmentation":{pipeline:I,model:[s.AutoModelForImageSegmentation,s.AutoModelForSemanticSegmentation],processor:i.AutoProcessor,default:{model:"Xenova/detr-resnet-50-panoptic"},type:"multimodal"},"zero-shot-image-classification":{tokenizer:r.AutoTokenizer,pipeline:z,model:s.AutoModel,processor:i.AutoProcessor,default:{model:"Xenova/clip-vit-base-patch32"},type:"multimodal"},"object-detection":{pipeline:B,model:s.AutoModelForObjectDetection,processor:i.AutoProcessor,default:{model:"Xenova/detr-resnet-50"},type:"multimodal"},"zero-shot-object-detection":{tokenizer:r.AutoTokenizer,pipeline:O,model:s.AutoModelForZeroShotObjectDetection,processor:i.AutoProcessor,default:{model:"Xenova/owlvit-base-patch32"},type:"multimodal"},"document-question-answering":{tokenizer:r.AutoTokenizer,pipeline:L,model:s.AutoModelForDocumentQuestionAnswering,processor:i.AutoProcessor,default:{model:"Xenova/donut-base-finetuned-docvqa"},type:"multimodal"},"image-to-image":{pipeline:R,model:s.AutoModelForImageToImage,processor:i.AutoProcessor,default:{model:"Xenova/swin2SR-classical-sr-x2-64"},type:"image"},"depth-estimation":{pipeline:N,model:s.AutoModelForDepthEstimation,processor:i.AutoProcessor,default:{model:"Xenova/dpt-large"},type:"image"},"feature-extraction":{tokenizer:r.AutoTokenizer,pipeline:$,model:s.AutoModel,default:{model:"Xenova/all-MiniLM-L6-v2"},type:"text"},"image-feature-extraction":{processor:i.AutoProcessor,pipeline:S,model:[s.AutoModelForImageFeatureExtraction,s.AutoModel],default:{model:"Xenova/vit-base-patch16-224-in21k"},type:"image"}}),j=Object.freeze({"sentiment-analysis":"text-classification",ner:"token-classification",asr:"automatic-speech-recognition","text-to-speech":"text-to-audio",embeddings:"feature-extraction"});async function q(e,t=null,{progress_callback:n=null,config:r=null,cache_dir:s=null,local_files_only:i=!1,revision:o="main",device:l=null,dtype:d=null,model_file_name:u=null,session_options:c={}}={}){e=j[e]??e;const p=V[e.split("_",1)[0]];if(!p)throw Error(`Unsupported pipeline: ${e}. Must be one of [${Object.keys(V)}]`);t||(t=p.default.model,console.log(`No model specified. Using default model: "${t}".`));const h={progress_callback:n,config:r,cache_dir:s,local_files_only:i,revision:o,device:l,dtype:d,model_file_name:u,session_options:c},m=new Map([["tokenizer",p.tokenizer],["model",p.model],["processor",p.processor]]),f=await async function(e,t,n){const r=Object.create(null),s=[];for(let[i,o]of e.entries()){if(!o)continue;let e;e=Array.isArray(o)?new Promise((async(e,r)=>{let s;for(let i of o){if(null===i)return void e(null);try{return void e(await i.from_pretrained(t,n))}catch(e){if(e.message?.includes("Unsupported model type"))s=e;else{if(!e.message?.includes("Could not locate file"))return void r(e);s=e}}}r(s)})):o.from_pretrained(t,n),r[i]=e,s.push(e)}await Promise.all(s);for(let[e,t]of Object.entries(r))r[e]=await t;return r}(m,t,h);f.task=e,(0,a.dispatchCallback)(n,{status:"ready",task:e,model:t});return new(0,p.pipeline)(f)}},"./src/processors.js":
/*!***************************!*\
  !*** ./src/processors.js ***!
  \***************************/(e,t,n)=>{n.r(t),n.d(t,{ASTFeatureExtractor:()=>Y,AutoProcessor:()=>ae,BeitFeatureExtractor:()=>N,BitImageProcessor:()=>b,CLIPFeatureExtractor:()=>v,CLIPImageProcessor:()=>x,ChineseCLIPFeatureExtractor:()=>M,ClapFeatureExtractor:()=>Z,ConvNextFeatureExtractor:()=>k,ConvNextImageProcessor:()=>$,DPTFeatureExtractor:()=>_,DPTImageProcessor:()=>w,DeiTFeatureExtractor:()=>R,DetrFeatureExtractor:()=>q,DonutFeatureExtractor:()=>V,EfficientNetImageProcessor:()=>P,FeatureExtractor:()=>m,Florence2Processor:()=>oe,GLPNFeatureExtractor:()=>y,ImageFeatureExtractor:()=>f,MobileNetV1FeatureExtractor:()=>E,MobileNetV2FeatureExtractor:()=>F,MobileNetV3FeatureExtractor:()=>A,MobileNetV4FeatureExtractor:()=>I,MobileViTFeatureExtractor:()=>z,MobileViTImageProcessor:()=>B,NougatImageProcessor:()=>j,OwlViTFeatureExtractor:()=>O,OwlViTProcessor:()=>ie,Owlv2ImageProcessor:()=>L,Processor:()=>ee,RTDetrImageProcessor:()=>D,SamImageProcessor:()=>U,SamProcessor:()=>te,SeamlessM4TFeatureExtractor:()=>Q,SegformerFeatureExtractor:()=>g,SiglipImageProcessor:()=>T,SpeechT5FeatureExtractor:()=>J,SpeechT5Processor:()=>se,Swin2SRImageProcessor:()=>W,ViTFeatureExtractor:()=>S,ViTImageProcessor:()=>C,VitMatteImageProcessor:()=>H,Wav2Vec2FeatureExtractor:()=>X,Wav2Vec2ProcessorWithLM:()=>re,WhisperFeatureExtractor:()=>K,WhisperProcessor:()=>ne,YolosFeatureExtractor:()=>G});var r=n(/*! ./utils/generic.js */"./src/utils/generic.js"),s=n(/*! ./utils/core.js */"./src/utils/core.js"),i=n(/*! ./utils/hub.js */"./src/utils/hub.js"),o=n(/*! ./utils/maths.js */"./src/utils/maths.js"),a=n(/*! ./utils/tensor.js */"./src/utils/tensor.js"),l=(n(/*! ./utils/image.js */"./src/utils/image.js"),n(/*! ./utils/audio.js */"./src/utils/audio.js"));function d([e,t,n,r]){return[e-n/2,t-r/2,e+n/2,t+r/2]}function u(e,t=.5,n=null,r=!1){const s=e.logits,i=e.pred_boxes,[a,l,u]=s.dims;if(null!==n&&n.length!==a)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let c=[];for(let e=0;e<a;++e){let a=null!==n?n[e]:null,p={boxes:[],classes:[],scores:[]},h=s[e],m=i[e];for(let e=0;e<l;++e){let n,s=h[e],i=[];if(r){n=s.sigmoid().data;for(let e=0;e<n.length;++e)n[e]>t&&i.push(e)}else{let e=(0,o.max)(s.data)[1];if(e===u-1)continue;if(n=(0,o.softmax)(s.data),n[e]<t)continue;i.push(e)}for(const t of i){let r=m[e].data;r=d(r),null!==a&&(r=r.map(((e,t)=>e*a[(t+1)%2]))),p.boxes.push(r),p.classes.push(t),p.scores.push(n[t])}}c.push(p)}return c}function c(e,t){if(!(e instanceof Float32Array||e instanceof Float64Array))throw new Error(`${t} expects input to be a Float32Array or a Float64Array, but got ${e?.constructor?.name??typeof e} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`)}function p(e,t,n=0,r=null){const s=e/t;let i=(0,o.bankers_round)(s)*t;return null!==r&&i>r&&(i=Math.floor(s)*t),i<n&&(i=Math.ceil(s)*t),i}function h([e,t],n){return[Math.max(Math.floor(e/n),1)*n,Math.max(Math.floor(t/n),1)*n]}class m extends r.Callable{constructor(e){super(),this.config=e}}class f extends m{constructor(e){super(e),this.image_mean=this.config.image_mean??this.config.mean,this.image_std=this.config.image_std??this.config.std,this.resample=this.config.resample??2,this.do_rescale=this.config.do_rescale??!0,this.rescale_factor=this.config.rescale_factor??1/255,this.do_normalize=this.config.do_normalize,this.do_resize=this.config.do_resize,this.do_thumbnail=this.config.do_thumbnail,this.size=this.config.size,this.size_divisibility=this.config.size_divisibility??this.config.size_divisor,this.do_center_crop=this.config.do_center_crop,this.crop_size=this.config.crop_size,this.do_convert_rgb=this.config.do_convert_rgb??!0,this.do_crop_margin=this.config.do_crop_margin,this.pad_size=this.config.pad_size,this.do_pad=this.config.do_pad,this.do_pad&&!this.pad_size&&this.size&&void 0!==this.size.width&&void 0!==this.size.height&&(this.pad_size=this.size),this.do_flip_channel_order=this.config.do_flip_channel_order??!1}async thumbnail(e,t,n=2){const r=e.height,s=e.width,i=t.height,o=t.width;let a=Math.min(r,i),l=Math.min(s,o);return a===r&&l===s?e:(r>s?l=Math.floor(s*a/r):s>r&&(a=Math.floor(r*l/s)),await e.resize(l,a,{resample:n}))}async crop_margin(e,t=200){const n=e.clone().grayscale(),r=(0,o.min)(n.data)[0],s=(0,o.max)(n.data)[0]-r;if(0===s)return e;const i=t/255;let a=n.width,l=n.height,d=0,u=0;const c=n.data;for(let e=0;e<n.height;++e){const t=e*n.width;for(let o=0;o<n.width;++o)(c[t+o]-r)/s<i&&(a=Math.min(a,o),l=Math.min(l,e),d=Math.max(d,o),u=Math.max(u,e))}return e=await e.crop([a,l,d,u])}pad_image(e,t,n,{mode:r="constant",center:i=!1,constant_values:o=0}={}){const[a,l,d]=t;let u,c;if("number"==typeof n?(u=n,c=n):(u=n.width,c=n.height),u!==l||c!==a){const n=new Float32Array(u*c*d);if(Array.isArray(o))for(let e=0;e<n.length;++e)n[e]=o[e%d];else 0!==o&&n.fill(o);const[p,h]=i?[Math.floor((u-l)/2),Math.floor((c-a)/2)]:[0,0];for(let t=0;t<a;++t){const r=(t+h)*u,s=t*l;for(let t=0;t<l;++t){const i=(r+t+p)*d,o=(s+t)*d;for(let t=0;t<d;++t)n[i+t]=e[o+t]}}if("symmetric"===r){if(i)throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");const t=a-1,r=l-1;for(let i=0;i<c;++i){const o=i*u,c=(0,s.calculateReflectOffset)(i,t)*l;for(let t=0;t<u;++t){if(i<a&&t<l)continue;const u=(o+t)*d,p=(c+(0,s.calculateReflectOffset)(t,r))*d;for(let t=0;t<d;++t)n[u+t]=e[p+t]}}}e=n,t=[c,u,d]}return[e,t]}rescale(e){for(let t=0;t<e.length;++t)e[t]=this.rescale_factor*e[t]}get_resize_output_image_size(e,t){const[n,r]=e.size;let s,i;if(this.do_thumbnail){const{height:e,width:n}=t;s=Math.min(e,n)}else Number.isInteger(t)?(s=t,i=this.config.max_size??s):void 0!==t&&(s=t.shortest_edge,i=t.longest_edge);if(void 0!==s||void 0!==i){const e=void 0===s?1:Math.max(s/n,s/r),t=n*e,o=r*e,a=void 0===i?1:Math.min(i/t,i/o);let l=Math.floor(Number((t*a).toFixed(2))),d=Math.floor(Number((o*a).toFixed(2)));return void 0!==this.size_divisibility&&([l,d]=h([l,d],this.size_divisibility)),[l,d]}if(void 0!==t&&void 0!==t.width&&void 0!==t.height){let e=t.width,s=t.height;if(this.config.keep_aspect_ratio&&this.config.ensure_multiple_of){let t=s/r,i=e/n;Math.abs(1-i)<Math.abs(1-t)?t=i:i=t,s=p(t*r,this.config.ensure_multiple_of),e=p(i*n,this.config.ensure_multiple_of)}return[e,s]}if(void 0!==this.size_divisibility)return h([n,r],this.size_divisibility);throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(t)}`)}async resize(e){const[t,n]=this.get_resize_output_image_size(e,this.size);return await e.resize(t,n,{resample:this.resample})}async preprocess(e,{do_normalize:t=null,do_pad:n=null,do_convert_rgb:r=null,do_convert_grayscale:s=null,do_flip_channel_order:i=null}={}){this.do_crop_margin&&(e=await this.crop_margin(e));const[o,l]=e.size;if(r??this.do_convert_rgb?e=e.rgb():s&&(e=e.grayscale()),this.do_resize&&(e=await this.resize(e)),this.do_thumbnail&&(e=await this.thumbnail(e,this.size,this.resample)),this.do_center_crop){let t,n;Number.isInteger(this.crop_size)?(t=this.crop_size,n=this.crop_size):(t=this.crop_size.width,n=this.crop_size.height),e=await e.center_crop(t,n)}const d=[e.height,e.width];let u=Float32Array.from(e.data),c=[e.height,e.width,e.channels];if(this.do_rescale&&this.rescale(u),t??this.do_normalize){let t=this.image_mean;Array.isArray(this.image_mean)||(t=new Array(e.channels).fill(t));let n=this.image_std;if(Array.isArray(this.image_std)||(n=new Array(e.channels).fill(t)),t.length!==e.channels||n.length!==e.channels)throw new Error(`When set to arrays, the length of \`image_mean\` (${t.length}) and \`image_std\` (${n.length}) must match the number of channels in the image (${e.channels}).`);for(let r=0;r<u.length;r+=e.channels)for(let s=0;s<e.channels;++s)u[r+s]=(u[r+s]-t[s])/n[s]}if(n??this.do_pad)if(this.pad_size){const t=this.pad_image(u,[e.height,e.width,e.channels],this.pad_size);[u,c]=t}else if(this.size_divisibility){const[e,t]=h([c[1],c[0]],this.size_divisibility);[u,c]=this.pad_image(u,c,{width:e,height:t})}if(i??this.do_flip_channel_order){if(3!==c[2])throw new Error("Flipping channel order is only supported for RGB images.");for(let e=0;e<u.length;e+=3){const t=u[e];u[e]=u[e+2],u[e+2]=t}}return{original_size:[l,o],reshaped_input_size:d,pixel_values:new a.Tensor("float32",u,c).permute(2,0,1)}}async _call(e,...t){Array.isArray(e)||(e=[e]);const n=await Promise.all(e.map((e=>this.preprocess(e))));return{pixel_values:(0,a.stack)(n.map((e=>e.pixel_values)),0),original_sizes:n.map((e=>e.original_size)),reshaped_input_sizes:n.map((e=>e.reshaped_input_size))}}}class g extends f{post_process_semantic_segmentation(e,t=null){const n=e.logits,r=n.dims[0];if(null!==t&&t.length!==r)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const s=[];for(let e=0;e<r;++e){const r=null!==t?t[e]:null;let i=n[e];null!==r&&(i=(0,a.interpolate)(i,r,"bilinear",!1));const[o,l]=r??i.dims.slice(-2),d=new a.Tensor("int32",new Int32Array(o*l),[o,l]),u=i[0].data,c=d.data;for(let e=1;e<i.dims[0];++e){const t=i[e].data;for(let n=0;n<t.length;++n)t[n]>u[n]&&(u[n]=t[n],c[n]=e)}const p=new Array(i.dims[0]),h=d.data;for(let e=0;e<h.length;++e){const t=h[e];p[t]=t}const m=p.filter((e=>void 0!==e));s.push({segmentation:d,labels:m})}return s}}class _ extends f{}class w extends _{}class b extends f{}class y extends f{}class v extends f{}class x extends v{}class M extends f{}class T extends f{}class k extends f{constructor(e){super(e),this.crop_pct=this.config.crop_pct??.875}async resize(e){const t=this.size?.shortest_edge;if(void 0===t)throw new Error("Size dictionary must contain 'shortest_edge' key.");if(t<384){const n=Math.floor(t/this.crop_pct),[r,s]=this.get_resize_output_image_size(e,{shortest_edge:n});e=await e.resize(r,s,{resample:this.resample}),e=await e.center_crop(t,t)}else e=await e.resize(t,t,{resample:this.resample});return e}}class $ extends k{}class S extends f{}class C extends f{}class P extends f{constructor(e){super(e),this.include_top=this.config.include_top??!0,this.include_top&&(this.image_std=this.image_std.map((e=>e*e)))}}class E extends f{}class F extends f{}class A extends f{}class I extends f{}class z extends f{}class B extends z{}class O extends f{post_process_object_detection(...e){return u(...e)}}class L extends O{}class D extends f{post_process_object_detection(...e){return u(...e)}}class R extends f{}class N extends f{}class V extends f{pad_image(e,t,n,r={}){const[s,i,o]=t;let a=this.image_mean;Array.isArray(this.image_mean)||(a=new Array(o).fill(a));let l=this.image_std;Array.isArray(l)||(l=new Array(o).fill(a));const d=a.map(((e,t)=>-e/l[t]));return super.pad_image(e,t,n,{center:!0,constant_values:d,...r})}}class j extends V{}class q extends f{async _call(e){const t=await super._call(e),n=[t.pixel_values.dims[0],64,64],r=new a.Tensor("int64",new BigInt64Array(n.reduce(((e,t)=>e*t))).fill(1n),n);return{...t,pixel_mask:r}}post_process_object_detection(...e){return u(...e)}remove_low_and_no_objects(e,t,n,r){let s=[],i=[],a=[];for(let l=0;l<e.dims[0];++l){let d=e[l],u=t[l],c=(0,o.max)(d.data)[1];if(c===r)continue;let p=(0,o.softmax)(d.data)[c];p>n&&(s.push(u),i.push(p),a.push(c))}return[s,i,a]}check_segment_validity(e,t,n,r=.5,s=.8){let i=[],o=0,a=0;const l=t[n].data;for(let t=0;t<e.length;++t)e[t]===n&&(i.push(t),++o),l[t]>=r&&++a;let d=o>0&&a>0;if(d){d=o/a>s}return[d,i]}compute_segments(e,t,n,r,s,i=null,o=null){let[l,d]=o??e[0].dims,u=new a.Tensor("int32",new Int32Array(l*d),[l,d]),c=[];if(null!==o)for(let t=0;t<e.length;++t)e[t]=(0,a.interpolate)(e[t],o,"bilinear",!1);let p=new Int32Array(e[0].data.length),h=new Float32Array(e[0].data.length);for(let n=0;n<e.length;++n){let r=t[n];const s=e[n].data;for(let e=0;e<s.length;++e)s[e]*=r,s[e]>h[e]&&(p[e]=n,h[e]=s[e])}let m=0;const f=u.data;for(let i=0;i<n.length;++i){let o=n[i],[a,l]=this.check_segment_validity(p,e,i,r,s);if(a){++m;for(let e of l)f[e]=m;c.push({id:m,label_id:o,score:t[i]})}}return[u,c]}post_process_panoptic_segmentation(e,t=.5,n=.5,r=.8,s=null,i=null){null===s&&(console.warn("`label_ids_to_fuse` unset. No instance will be fused."),s=new Set);const o=e.logits,l=e.pred_masks.sigmoid();let[d,u,c]=o.dims;if(c-=1,null!==i&&i.length!==d)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let p=[];for(let e=0;e<d;++e){let d=null!==i?i[e]:null,u=o[e],h=l[e],[m,f,g]=this.remove_low_and_no_objects(u,h,t,c);if(0===g.length){let[e,t]=d??h.dims.slice(-2),n=new a.Tensor("int32",new Int32Array(e*t).fill(-1),[e,t]);p.push({segmentation:n,segments_info:[]});continue}let[_,w]=this.compute_segments(m,f,g,n,r,s,d);p.push({segmentation:_,segments_info:w})}return p}post_process_instance_segmentation(){throw Error("Not implemented yet")}}class G extends f{post_process_object_detection(...e){return u(...e)}}class U extends f{reshape_input_points(e,t,n,r=!1){e=structuredClone(e);let i=(0,s.calculateDimensions)(e);if(3===i.length)r||(i=[1,...i]),e=[e];else if(4!==i.length)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");for(let r=0;r<e.length;++r){let s=t[r],i=n[r],o=[i[0]/s[0],i[1]/s[1]];for(let t=0;t<e[r].length;++t)for(let n=0;n<e[r][t].length;++n)for(let s=0;s<e[r][t][n].length;++s)e[r][t][n][s]*=o[s%2]}return new a.Tensor("float32",Float32Array.from(e.flat(1/0)),i)}add_input_labels(e,t){let n=(0,s.calculateDimensions)(e);if(2===n.length)n=[1,...n],e=[e];else if(3!==n.length)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");if(n.some(((e,n)=>e!==t.dims[n])))throw Error(`The first ${n.length} dimensions of 'input_points' and 'input_labels' must be the same.`);return new a.Tensor("int64",e.flat(1/0).map(BigInt),n)}async _call(e,{input_points:t=null,input_labels:n=null,input_boxes:r=null}={}){const s=await super._call(e);if(t&&(s.input_points=this.reshape_input_points(t,s.original_sizes,s.reshaped_input_sizes)),n){if(!s.input_points)throw Error("`input_points` must be provided if `input_labels` are provided.");s.input_labels=this.add_input_labels(n,s.input_points)}return r&&(s.input_boxes=this.reshape_input_points(r,s.original_sizes,s.reshaped_input_sizes,!0)),s}async post_process_masks(e,t,n,{mask_threshold:r=0,binarize:s=!0,pad_size:i=null}={}){const o=[],l=[(i=i??this.pad_size).height,i.width];for(let i=0;i<t.length;++i){const d=t[i],u=n[i];let c=await(0,a.interpolate_4d)(e[i],{mode:"bilinear",size:l});if(c=c.slice(null,null,[0,u[0]],[0,u[1]]),c=await(0,a.interpolate_4d)(c,{mode:"bilinear",size:d}),s){const e=c.data,t=new Uint8Array(e.length);for(let n=0;n<e.length;++n)e[n]>r&&(t[n]=1);c=new a.Tensor("bool",t,c.dims)}o.push(c)}return o}generate_crop_boxes(e,t,{crop_n_layers:n=0,overlap_ratio:r=512/1500,points_per_crop:s=32,crop_n_points_downscale_factor:i=1}={}){}}class W extends f{pad_image(e,t,n,r={}){const[s,i,o]=t;return super.pad_image(e,t,{width:i+(n-i%n)%n,height:s+(n-s%n)%n},{mode:"symmetric",center:!1,constant_values:-1,...r})}}class H extends f{async _call(e,t){Array.isArray(e)||(e=[e]),Array.isArray(t)||(t=[t]);const n=await Promise.all(e.map((e=>this.preprocess(e)))),r=await Promise.all(t.map((e=>this.preprocess(e,{do_normalize:!1,do_convert_rgb:!1,do_convert_grayscale:!0}))));return{pixel_values:(0,a.stack)(n.map(((e,t)=>(0,a.cat)([e.pixel_values,r[t].pixel_values],0))),0),original_sizes:n.map((e=>e.original_size)),reshaped_input_sizes:n.map((e=>e.reshaped_input_size))}}}class K extends m{constructor(e){super(e),this.config.mel_filters??=(0,l.mel_filter_bank)(Math.floor(1+this.config.n_fft/2),this.config.feature_size,0,8e3,this.config.sampling_rate,"slaney","slaney"),this.window=(0,l.window_function)(this.config.n_fft,"hann")}async _extract_fbank_features(e){const t=await(0,l.spectrogram)(e,this.window,this.config.n_fft,this.config.hop_length,{power:2,mel_filters:this.config.mel_filters,log_mel:"log10",max_num_frames:this.config.nb_max_frames}),n=t.data,r=(0,o.max)(n)[0];for(let e=0;e<n.length;++e)n[e]=(Math.max(n[e],r-8)+4)/4;return t}async _call(e){let t;c(e,"WhisperFeatureExtractor"),e.length>this.config.n_samples?(console.warn("Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."),t=e.slice(0,this.config.n_samples)):(t=new Float32Array(this.config.n_samples),t.set(e));return{input_features:(await this._extract_fbank_features(t)).unsqueeze_(0)}}}class X extends m{_zero_mean_unit_var_norm(e){const t=e.reduce(((e,t)=>e+t),0)/e.length,n=e.reduce(((e,n)=>e+(n-t)**2),0)/e.length;return e.map((e=>(e-t)/Math.sqrt(n+1e-7)))}async _call(e){c(e,"Wav2Vec2FeatureExtractor"),e instanceof Float64Array&&(e=new Float32Array(e));let t=e;this.config.do_normalize&&(t=this._zero_mean_unit_var_norm(t));const n=[1,t.length];return{input_values:new a.Tensor("float32",t,n),attention_mask:new a.Tensor("int64",new BigInt64Array(t.length).fill(1n),n)}}}class Q extends m{constructor(e){super(e);const t=this.config.sampling_rate,n=(0,l.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(t/2),t,null,"kaldi",!0);for(let e=0;e<n.length;++e)n[e].push(0);this.mel_filters=n,this.window=(0,l.window_function)(400,"povey",{periodic:!1})}async _extract_fbank_features(e,t){return e=e.map((e=>32768*e)),(0,l.spectrogram)(e,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1.192092955078125e-7,remove_dc_offset:!0,max_num_frames:t,transpose:!0})}async _call(e,{padding:t=!0,pad_to_multiple_of:n=2,do_normalize_per_mel_bins:r=!0,return_attention_mask:s=!0}={}){c(e,"SeamlessM4TFeatureExtractor");let i,o=await this._extract_fbank_features(e,this.config.max_length);if(r){const[e,t]=o.dims,n=o.data;for(let r=0;r<t;++r){let s=0;for(let i=0;i<e;++i)s+=n[i*t+r];const i=s/e;let o=0;for(let s=0;s<e;++s)o+=(n[s*t+r]-i)**2;o/=e-1;const a=Math.sqrt(o+1e-7);for(let s=0;s<e;++s){const e=s*t+r;n[e]=(n[e]-i)/a}}}if(t){const[e,t]=o.dims,r=o.data,l=e%n;if(l>0){const n=new Float32Array(t*(e+l));n.set(r),n.fill(this.config.padding_value,r.length);const d=e+l;o=new a.Tensor(o.type,n,[d,t]),s&&(i=new a.Tensor("int64",new BigInt64Array(d),[1,d]),i.data.fill(1n,0,e))}}const[l,d]=o.dims,u=this.config.stride;if(0!==l%u)throw new Error(`The number of frames (${l}) must be a multiple of the stride (${u}).`);const p=o.view(1,Math.floor(l/u),d*u),h={input_features:p};if(s){const e=p.dims[1],t=new BigInt64Array(e);if(i){const e=i.data;for(let n=1,r=0;n<l;n+=u,++r)t[r]=e[n]}else t.fill(1n);h.attention_mask=new a.Tensor("int64",t,[1,e])}return h}}class Y extends m{constructor(e){super(e);const t=this.config.sampling_rate,n=(0,l.mel_filter_bank)(256,this.config.num_mel_bins,20,Math.floor(t/2),t,null,"kaldi",!0);for(let e=0;e<n.length;++e)n[e].push(0);this.mel_filters=n,this.window=(0,l.window_function)(400,"hann",{periodic:!1}),this.mean=this.config.mean,this.std=this.config.std}async _extract_fbank_features(e,t){return(0,l.spectrogram)(e,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1.192092955078125e-7,remove_dc_offset:!0,max_num_frames:t,transpose:!0})}async _call(e){c(e,"ASTFeatureExtractor");const t=await this._extract_fbank_features(e,this.config.max_length);if(this.config.do_normalize){const e=2*this.std,n=t.data;for(let t=0;t<n.length;++t)n[t]=(n[t]-this.mean)/e}return{input_values:t.unsqueeze_(0)}}}class Z extends m{constructor(e){super(e),this.mel_filters=(0,l.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,null,"htk"),this.mel_filters_slaney=(0,l.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,"slaney","slaney"),this.window=(0,l.window_function)(this.config.fft_window_size,"hann")}async _get_input_mel(e,t,n,r){let s,i=!1;const o=e.length-t;if(o>0){if("rand_trunc"!==n)throw new Error(`Truncation strategy "${n}" not implemented`);{i=!0;const n=Math.floor(Math.random()*(o+1));e=e.subarray(n,n+t),s=await this._extract_fbank_features(e,this.mel_filters_slaney,this.config.nb_max_samples)}}else{if(o<0){let n=new Float64Array(t);if(n.set(e),"repeat"===r)for(let r=e.length;r<t;r+=e.length)n.set(e.subarray(0,Math.min(e.length,t-r)),r);else if("repeatpad"===r)for(let t=e.length;t<-o;t+=e.length)n.set(e,t);e=n}if("fusion"===n)throw new Error(`Truncation strategy "${n}" not implemented`);s=await this._extract_fbank_features(e,this.mel_filters_slaney,this.config.nb_max_samples)}return s.unsqueeze_(0)}async _extract_fbank_features(e,t,n=null){return(0,l.spectrogram)(e,this.window,this.config.fft_window_size,this.config.hop_length,{power:2,mel_filters:t,log_mel:"dB",max_num_frames:n,do_pad:!1,transpose:!0})}async _call(e,{max_length:t=null}={}){c(e,"ClapFeatureExtractor");return{input_features:(await this._get_input_mel(e,t??this.config.nb_max_samples,this.config.truncation,this.config.padding)).unsqueeze_(0)}}}class J extends m{}class ee extends r.Callable{constructor(e){super(),this.feature_extractor=e}async _call(e,...t){return await this.feature_extractor(e,...t)}}class te extends ee{async _call(...e){return await this.feature_extractor(...e)}post_process_masks(...e){return this.feature_extractor.post_process_masks(...e)}reshape_input_points(...e){return this.feature_extractor.reshape_input_points(...e)}}class ne extends ee{async _call(e){return await this.feature_extractor(e)}}class re extends ee{async _call(e){return await this.feature_extractor(e)}}class se extends ee{async _call(e){return await this.feature_extractor(e)}}class ie extends ee{}class oe extends ee{constructor(e){super(e);const{tasks_answer_post_processing_type:t,task_prompts_without_inputs:n,task_prompts_with_input:r}=e.config;this.tasks_answer_post_processing_type=new Map(Object.entries(t??{})),this.task_prompts_without_inputs=new Map(Object.entries(n??{})),this.task_prompts_with_input=new Map(Object.entries(r??{})),this.regexes={quad_boxes:/(.+?)<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm,bboxes:/([^<]+)?<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm},this.size_per_bin=1e3}construct_prompts(e){"string"==typeof e&&(e=[e]);const t=[];for(const n of e)if(this.task_prompts_without_inputs.has(n))t.push(this.task_prompts_without_inputs.get(n));else{for(const[e,r]of this.task_prompts_with_input)if(n.includes(e)){t.push(r.replaceAll("{input}",n).replaceAll(e,""));break}t.length!==e.length&&t.push(n)}return t}post_process_generation(e,t,n){const r=this.tasks_answer_post_processing_type.get(t)??"pure_text";let s;switch(e=e.replaceAll("<s>","").replaceAll("</s>",""),r){case"pure_text":s=e;break;case"description_with_bboxes":case"bboxes":case"phrase_grounding":case"ocr":const i="ocr"===r?"quad_boxes":"bboxes",o=e.matchAll(this.regexes[i]),a=[],l=[];for(const[e,t,...r]of o)a.push(t?t.trim():a.at(-1)??""),l.push(r.map(((e,t)=>(Number(e)+.5)/this.size_per_bin*n[t%2])));s={labels:a,[i]:l};break;default:throw new Error(`Task "${t}" (of type "${r}") not yet implemented.`)}return{[t]:s}}}class ae{static FEATURE_EXTRACTOR_CLASS_MAPPING={ImageFeatureExtractor:f,WhisperFeatureExtractor:K,ViTFeatureExtractor:S,MobileViTFeatureExtractor:z,MobileViTImageProcessor:B,MobileNetV1FeatureExtractor:E,MobileNetV2FeatureExtractor:F,MobileNetV3FeatureExtractor:A,MobileNetV4FeatureExtractor:I,OwlViTFeatureExtractor:O,Owlv2ImageProcessor:L,CLIPFeatureExtractor:v,CLIPImageProcessor:x,Florence2Processor:oe,ChineseCLIPFeatureExtractor:M,SiglipImageProcessor:T,ConvNextFeatureExtractor:k,ConvNextImageProcessor:$,SegformerFeatureExtractor:g,BitImageProcessor:b,DPTImageProcessor:w,DPTFeatureExtractor:_,GLPNFeatureExtractor:y,BeitFeatureExtractor:N,DeiTFeatureExtractor:R,DetrFeatureExtractor:q,RTDetrImageProcessor:D,YolosFeatureExtractor:G,DonutFeatureExtractor:V,NougatImageProcessor:j,EfficientNetImageProcessor:P,ViTImageProcessor:C,VitMatteImageProcessor:H,SamImageProcessor:U,Swin2SRImageProcessor:W,Wav2Vec2FeatureExtractor:X,SeamlessM4TFeatureExtractor:Q,SpeechT5FeatureExtractor:J,ASTFeatureExtractor:Y,ClapFeatureExtractor:Z};static PROCESSOR_CLASS_MAPPING={WhisperProcessor:ne,Wav2Vec2ProcessorWithLM:re,SamProcessor:te,SpeechT5Processor:se,OwlViTProcessor:ie,Florence2Processor:oe};static async from_pretrained(e,{progress_callback:t=null,config:n=null,cache_dir:r=null,local_files_only:s=!1,revision:o="main"}={}){let a=n??await(0,i.getModelJSON)(e,"preprocessor_config.json",!0,{progress_callback:t,config:n,cache_dir:r,local_files_only:s,revision:o}),l=a.feature_extractor_type??a.image_processor_type,d=this.FEATURE_EXTRACTOR_CLASS_MAPPING[l];if(!d){if(void 0===a.size)throw new Error(`Unknown Feature Extractor type: ${l}`);console.warn(`Feature extractor type "${l}" not found, assuming ImageFeatureExtractor due to size parameter in config.`),d=f}return new(this.PROCESSOR_CLASS_MAPPING[a.processor_class]??ee)(new d(a))}}},"./src/tokenizers.js":
/*!***************************!*\
  !*** ./src/tokenizers.js ***!
  \***************************/(e,t,n)=>{n.r(t),n.d(t,{AlbertTokenizer:()=>xe,AutoTokenizer:()=>ht,BartTokenizer:()=>Oe,BertTokenizer:()=>ve,BlenderbotSmallTokenizer:()=>lt,BlenderbotTokenizer:()=>at,BloomTokenizer:()=>Ne,CLIPTokenizer:()=>rt,CamembertTokenizer:()=>Fe,CodeGenTokenizer:()=>nt,CodeLlamaTokenizer:()=>qe,CohereTokenizer:()=>pt,ConvBertTokenizer:()=>Ce,DebertaTokenizer:()=>ke,DebertaV2Tokenizer:()=>$e,DistilBertTokenizer:()=>Ee,ElectraTokenizer:()=>Ie,EsmTokenizer:()=>Ke,FalconTokenizer:()=>We,GPT2Tokenizer:()=>Be,GPTNeoXTokenizer:()=>He,GemmaTokenizer:()=>Qe,Grok1Tokenizer:()=>Ye,HerbertTokenizer:()=>Se,LlamaTokenizer:()=>je,M2M100Tokenizer:()=>et,MBart50Tokenizer:()=>De,MBartTokenizer:()=>Le,MPNetTokenizer:()=>Ue,MarianTokenizer:()=>it,MobileBertTokenizer:()=>Me,NllbTokenizer:()=>Je,NougatTokenizer:()=>ut,PreTrainedTokenizer:()=>ye,Qwen2Tokenizer:()=>Xe,RoFormerTokenizer:()=>Pe,RobertaTokenizer:()=>Re,SiglipTokenizer:()=>st,SpeechT5Tokenizer:()=>dt,SqueezeBertTokenizer:()=>Te,T5Tokenizer:()=>ze,TokenizerModel:()=>M,VitsTokenizer:()=>ct,Wav2Vec2CTCTokenizer:()=>ot,WhisperTokenizer:()=>tt,XLMRobertaTokenizer:()=>Ge,XLMTokenizer:()=>Ae,is_chinese_char:()=>w});var r=n(/*! ./utils/generic.js */"./src/utils/generic.js"),s=n(/*! ./utils/core.js */"./src/utils/core.js"),i=n(/*! ./utils/hub.js */"./src/utils/hub.js"),o=n(/*! ./utils/maths.js */"./src/utils/maths.js"),a=n(/*! ./utils/tensor.js */"./src/utils/tensor.js"),l=n(/*! ./utils/data-structures.js */"./src/utils/data-structures.js"),d=n(/*! @huggingface/jinja */"./node_modules/@huggingface/jinja/dist/index.js"),u=n(/*! ./models/whisper/common_whisper.js */"./src/models/whisper/common_whisper.js"),c=n(/*! ./utils/constants.js */"./src/utils/constants.js");async function p(e,t){const n=await Promise.all([(0,i.getModelJSON)(e,"tokenizer.json",!0,t),(0,i.getModelJSON)(e,"tokenizer_config.json",!0,t)]);return null!==t.legacy&&(n[1].legacy=t.legacy),n}function h(e,t=!0){if(void 0!==e.Regex){let t=e.Regex.replace(/\\([#&~])/g,"$1");for(const[e,n]of v)t=t.replaceAll(e,n);return new RegExp(t,"gu")}if(void 0!==e.String){const n=(0,s.escapeRegExp)(e.String);return new RegExp(t?n:`(${n})`,"gu")}return console.warn("Unknown pattern type:",e),null}function m(e){return new Map(Object.entries(e))}function f(e){const t=e.dims;switch(t.length){case 1:return e.tolist();case 2:if(1!==t[0])throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");return e.tolist()[0];default:throw new Error(`Expected tensor to have 1-2 dimensions, got ${t.length}.`)}}function g(e){return e.replace(/ \./g,".").replace(/ \?/g,"?").replace(/ \!/g,"!").replace(/ ,/g,",").replace(/ \' /g,"'").replace(/ n\'t/g,"n't").replace(/ \'m/g,"'m").replace(/ \'s/g,"'s").replace(/ \'ve/g,"'ve").replace(/ \'re/g,"'re")}function _(e){return e.replace(/[\u0300-\u036f]/g,"")}function w(e){return e>=19968&&e<=40959||e>=13312&&e<=19903||e>=131072&&e<=173791||e>=173824&&e<=177983||e>=177984&&e<=178207||e>=178208&&e<=183983||e>=63744&&e<=64255||e>=194560&&e<=195103}const b="\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E",y=new RegExp(`^[${b}]+$`,"gu"),v=new Map([["(?i:'s|'t|'re|'ve|'m|'ll|'d)","(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"]]);class x{constructor(e){this.content=e.content,this.id=e.id,this.single_word=e.single_word??!1,this.lstrip=e.lstrip??!1,this.rstrip=e.rstrip??!1,this.special=e.special??!1,this.normalized=e.normalized??null}}class M extends r.Callable{constructor(e){super(),this.config=e,this.vocab=[],this.tokens_to_ids=new Map,this.unk_token_id=void 0,this.unk_token=void 0,this.end_of_word_suffix=void 0,this.fuse_unk=this.config.fuse_unk??!1}static fromConfig(e,...t){switch(e.type){case"WordPiece":return new T(e);case"Unigram":return new k(e,...t);case"BPE":return new C(e);default:if(e.vocab)return new P(e,...t);throw new Error(`Unknown TokenizerModel type: ${e.type}`)}}_call(e){let t=this.encode(e);return this.fuse_unk&&(t=function(e,t,n){const r=[];let s=0;for(;s<e.length;)if(r.push(e[s]),(n.get(e[s])??t)===t)for(;s<e.length&&(n.get(e[s])??t)===t;)++s;else++s;return r}(t,this.unk_token_id,this.tokens_to_ids)),t}encode(e){throw Error("encode should be implemented in subclass.")}convert_tokens_to_ids(e){return e.map((e=>this.tokens_to_ids.get(e)??this.unk_token_id))}convert_ids_to_tokens(e){return e.map((e=>this.vocab[e]??this.unk_token))}}class T extends M{constructor(e){super(e),this.tokens_to_ids=m(e.vocab),this.unk_token_id=this.tokens_to_ids.get(e.unk_token),this.unk_token=e.unk_token,this.max_input_chars_per_word=e.max_input_chars_per_word??100,this.vocab=new Array(this.tokens_to_ids.size);for(const[e,t]of this.tokens_to_ids)this.vocab[t]=e}encode(e){const t=[];for(const n of e){const e=[...n];if(e.length>this.max_input_chars_per_word){t.push(this.unk_token);continue}let r=!1,s=0;const i=[];for(;s<e.length;){let t=e.length,n=null;for(;s<t;){let r=e.slice(s,t).join("");if(s>0&&(r=this.config.continuing_subword_prefix+r),this.tokens_to_ids.has(r)){n=r;break}--t}if(null===n){r=!0;break}i.push(n),s=t}r?t.push(this.unk_token):t.push(...i)}return t}}class k extends M{constructor(e,t){super(e);const n=e.vocab.length;this.vocab=new Array(n),this.scores=new Array(n);for(let t=0;t<n;++t){const n=e.vocab[t];this.vocab[t]=n[0],this.scores[t]=n[1]}this.unk_token_id=e.unk_id,this.unk_token=this.vocab[e.unk_id],this.tokens_to_ids=new Map(this.vocab.map(((e,t)=>[e,t]))),this.bosToken=" ",this.bosTokenId=this.tokens_to_ids.get(this.bosToken),this.eosToken=t.eos_token,this.eosTokenId=this.tokens_to_ids.get(this.eosToken),this.unkToken=this.vocab[this.unk_token_id],this.minScore=(0,o.min)(this.scores)[0],this.unkScore=this.minScore-10,this.scores[this.unk_token_id]=this.unkScore,this.trie=new l.CharTrie,this.trie.extend(this.vocab),this.fuse_unk=!0}populateNodes(e){const t=e.sentence,n=t.length;let r=0;for(;r<n;){const n=1;let s=!1;const i=[];for(let o of this.trie.commonPrefixSearch(t.slice(r))){i.push(o);const t=this.tokens_to_ids.get(o),a=this.scores[t],l=o.length;e.insert(r,l,a,t),s||l!==n||(s=!0)}s||e.insert(r,n,this.unkScore,this.unk_token_id),r+=n}}tokenize(e){const t=new l.TokenLattice(e,this.bosTokenId,this.eosTokenId);return this.populateNodes(t),t.tokens()}encode(e){const t=[];for(const n of e){const e=this.tokenize(n);t.push(...e)}return t}}const $=(()=>{const e=[...Array.from({length:"~".charCodeAt(0)-"!".charCodeAt(0)+1},((e,t)=>t+"!".charCodeAt(0))),...Array.from({length:"¬".charCodeAt(0)-"¡".charCodeAt(0)+1},((e,t)=>t+"¡".charCodeAt(0))),...Array.from({length:"ÿ".charCodeAt(0)-"®".charCodeAt(0)+1},((e,t)=>t+"®".charCodeAt(0)))],t=e.slice();let n=0;for(let r=0;r<256;++r)e.includes(r)||(e.push(r),t.push(256+n),n+=1);const r=t.map((e=>String.fromCharCode(e)));return Object.fromEntries(e.map(((e,t)=>[e,r[t]])))})(),S=(0,s.reverseDictionary)($);class C extends M{constructor(e){super(e),this.BPE_SPLIT_TOKEN=" ",this.tokens_to_ids=m(e.vocab),this.unk_token_id=this.tokens_to_ids.get(e.unk_token),this.unk_token=e.unk_token,this.vocab=new Array(this.tokens_to_ids.size);for(const[e,t]of this.tokens_to_ids)this.vocab[t]=e;this.bpe_ranks=new Map(e.merges.map(((e,t)=>[e,t]))),this.merges=e.merges.map((e=>e.split(this.BPE_SPLIT_TOKEN))),this.end_of_word_suffix=e.end_of_word_suffix,this.continuing_subword_suffix=e.continuing_subword_suffix??null,this.byte_fallback=this.config.byte_fallback??!1,this.byte_fallback&&(this.text_encoder=new TextEncoder),this.ignore_merges=this.config.ignore_merges??!1,this.cache=new Map}bpe(e){if(0===e.length)return[];const t=this.cache.get(e);if(void 0!==t)return t;const n=Array.from(e);this.end_of_word_suffix&&(n[n.length-1]+=this.end_of_word_suffix);let r=[];if(n.length>1){const e=new l.PriorityQueue(((e,t)=>e.score<t.score));let t={token:n[0],bias:0,prev:null,next:null},s=t;for(let t=1;t<n.length;++t){const r={bias:t/n.length,token:n[t],prev:s,next:null};s.next=r,this._add_node(e,s),s=r}for(;!e.isEmpty();){const n=e.pop();if(n.deleted||!n.next||n.next.deleted)continue;if(n.deleted=!0,n.next.deleted=!0,n.prev){const e={...n.prev};n.prev.deleted=!0,n.prev=e,e.prev?e.prev.next=e:t=e}const r={token:n.token+n.next.token,bias:n.bias,prev:n.prev,next:n.next.next};r.prev?(r.prev.next=r,this._add_node(e,r.prev)):t=r,r.next&&(r.next.prev=r,this._add_node(e,r))}for(let e=t;null!==e;e=e.next)r.push(e.token)}else r=n;if(this.continuing_subword_suffix)for(let e=0;e<r.length-1;++e)r[e]+=this.continuing_subword_suffix;return this.cache.set(e,r),r}_add_node(e,t){const n=this.bpe_ranks.get(t.token+this.BPE_SPLIT_TOKEN+t.next.token);void 0!==n&&(t.score=n+t.bias,e.push(t))}encode(e){const t=[];for(const n of e){if(this.ignore_merges&&this.tokens_to_ids.has(n)){t.push(n);continue}const e=this.bpe(n);for(const n of e)this.tokens_to_ids.has(n)?t.push(n):this.byte_fallback?t.push(...Array.from(this.text_encoder.encode(n)).map((e=>`<0x${e.toString(16).toUpperCase().padStart(2,"0")}>`))):t.push(this.unk_token)}return t}}class P extends M{constructor(e,t){super(e),this.tokens_to_ids=m(t.target_lang?e.vocab[t.target_lang]:e.vocab),this.bos_token=t.bos_token,this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=t.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.pad_token=t.pad_token,this.pad_token_id=this.tokens_to_ids.get(this.pad_token),this.unk_token=t.unk_token,this.unk_token_id=this.tokens_to_ids.get(this.unk_token),this.vocab=new Array(this.tokens_to_ids.size);for(const[e,t]of this.tokens_to_ids)this.vocab[t]=e}encode(e){return e}}class E extends r.Callable{constructor(e){super(),this.config=e}static fromConfig(e){if(null===e)return null;switch(e.type){case"BertNormalizer":return new N(e);case"Precompiled":return new pe(e);case"Sequence":return new R(e);case"Replace":return new F(e);case"NFC":return new A(e);case"NFKC":return new I(e);case"NFKD":return new z(e);case"Strip":return new B(e);case"StripAccents":return new O(e);case"Lowercase":return new L(e);case"Prepend":return new D(e);default:throw new Error(`Unknown Normalizer type: ${e.type}`)}}normalize(e){throw Error("normalize should be implemented in subclass.")}_call(e){return this.normalize(e)}}class F extends E{normalize(e){const t=h(this.config.pattern);return null===t?e:e.replaceAll(t,this.config.content)}}class A extends E{normalize(e){return e=e.normalize("NFC")}}class I extends E{normalize(e){return e=e.normalize("NFKC")}}class z extends E{normalize(e){return e=e.normalize("NFKD")}}class B extends E{normalize(e){return this.config.strip_left&&this.config.strip_right?e=e.trim():(this.config.strip_left&&(e=e.trimStart()),this.config.strip_right&&(e=e.trimEnd())),e}}class O extends E{normalize(e){return e=_(e)}}class L extends E{normalize(e){return e=e.toLowerCase()}}class D extends E{normalize(e){return e=this.config.prepend+e}}class R extends E{constructor(e){super(e),this.normalizers=e.normalizers.map((e=>E.fromConfig(e)))}normalize(e){return this.normalizers.reduce(((e,t)=>t.normalize(e)),e)}}class N extends E{_tokenize_chinese_chars(e){const t=[];for(let n=0;n<e.length;++n){const r=e[n];w(r.charCodeAt(0))?(t.push(" "),t.push(r),t.push(" ")):t.push(r)}return t.join("")}stripAccents(e){return e.normalize("NFD").replace(/[\u0300-\u036f]/g,"")}_is_control(e){switch(e){case"\t":case"\n":case"\r":return!1;default:return/^\p{Cc}|\p{Cf}|\p{Co}|\p{Cs}$/u.test(e)}}_clean_text(e){const t=[];for(const n of e){const e=n.charCodeAt(0);0===e||65533===e||this._is_control(n)||(/^\s$/.test(n)?t.push(" "):t.push(n))}return t.join("")}normalize(e){return this.config.clean_text&&(e=this._clean_text(e)),this.config.handle_chinese_chars&&(e=this._tokenize_chinese_chars(e)),this.config.lowercase?(e=e.toLowerCase(),!1!==this.config.strip_accents&&(e=this.stripAccents(e))):this.config.strip_accents&&(e=this.stripAccents(e)),e}}class V extends r.Callable{static fromConfig(e){if(null===e)return null;switch(e.type){case"BertPreTokenizer":return new j(e);case"Sequence":return new he(e);case"Whitespace":return new me(e);case"WhitespaceSplit":return new fe(e);case"Metaspace":return new ue(e);case"ByteLevel":return new q(e);case"Split":return new G(e);case"Punctuation":return new U(e);case"Digits":return new W(e);case"Replace":return new ge(e);default:throw new Error(`Unknown PreTokenizer type: ${e.type}`)}}pre_tokenize_text(e,t){throw Error("pre_tokenize_text should be implemented in subclass.")}pre_tokenize(e,t){return(Array.isArray(e)?e.map((e=>this.pre_tokenize_text(e,t))):this.pre_tokenize_text(e,t)).flat()}_call(e,t){return this.pre_tokenize(e,t)}}class j extends V{constructor(e){super(),this.pattern=new RegExp(`[^\\s${b}]+|[${b}]`,"gu")}pre_tokenize_text(e,t){return e.trim().match(this.pattern)||[]}}class q extends V{constructor(e){super(),this.config=e,this.add_prefix_space=this.config.add_prefix_space,this.trim_offsets=this.config.trim_offsets,this.use_regex=this.config.use_regex??!0,this.pattern=/'s|'t|'re|'ve|'m|'ll|'d| ?\p{L}+| ?\p{N}+| ?[^\s\p{L}\p{N}]+|\s+(?!\S)|\s+/gu,this.byte_encoder=$,this.text_encoder=new TextEncoder}pre_tokenize_text(e,t){this.add_prefix_space&&!e.startsWith(" ")&&(e=" "+e);return(this.use_regex?e.match(this.pattern)||[]:[e]).map((e=>Array.from(this.text_encoder.encode(e),(e=>this.byte_encoder[e])).join("")))}}class G extends V{constructor(e){super(),this.config=e,this.pattern=h(this.config.pattern,this.config.invert)}pre_tokenize_text(e,t){return null===this.pattern?[]:this.config.invert?e.match(this.pattern)||[]:function(e,t){const n=[];let r=0;for(const s of e.matchAll(t)){const t=s[0];r<s.index&&n.push(e.slice(r,s.index)),t.length>0&&n.push(t),r=s.index+t.length}return r<e.length&&n.push(e.slice(r)),n}(e,this.pattern)}}class U extends V{constructor(e){super(),this.config=e,this.pattern=new RegExp(`[^${b}]+|[${b}]+`,"gu")}pre_tokenize_text(e,t){return e.match(this.pattern)||[]}}class W extends V{constructor(e){super(),this.config=e;const t="[^\\d]+|\\d"+(this.config.individual_digits?"":"+");this.pattern=new RegExp(t,"gu")}pre_tokenize_text(e,t){return e.match(this.pattern)||[]}}class H extends r.Callable{constructor(e){super(),this.config=e}static fromConfig(e){if(null===e)return null;switch(e.type){case"TemplateProcessing":return new Q(e);case"ByteLevel":return new Y(e);case"RobertaProcessing":return new X(e);case"BertProcessing":return new K(e);case"Sequence":return new Z(e);default:throw new Error(`Unknown PostProcessor type: ${e.type}`)}}post_process(e,...t){throw Error("post_process should be implemented in subclass.")}_call(e,...t){return this.post_process(e,...t)}}class K extends H{constructor(e){super(e),this.cls=e.cls[0],this.sep=e.sep[0]}post_process(e,t=null,{add_special_tokens:n=!0}={}){n&&(e=(0,s.mergeArrays)([this.cls],e,[this.sep]));let r=new Array(e.length).fill(0);if(null!==t){const i=n&&this instanceof X?[this.sep]:[],o=n?[this.sep]:[];e=(0,s.mergeArrays)(e,i,t,o),r=(0,s.mergeArrays)(r,new Array(t.length+i.length+o.length).fill(1))}return{tokens:e,token_type_ids:r}}}class X extends K{}class Q extends H{constructor(e){super(e),this.single=e.single,this.pair=e.pair}post_process(e,t=null,{add_special_tokens:n=!0}={}){const r=null===t?this.single:this.pair;let i=[],o=[];for(const a of r)"SpecialToken"in a?n&&(i.push(a.SpecialToken.id),o.push(a.SpecialToken.type_id)):"Sequence"in a&&("A"===a.Sequence.id?(i=(0,s.mergeArrays)(i,e),o=(0,s.mergeArrays)(o,new Array(e.length).fill(a.Sequence.type_id))):"B"===a.Sequence.id&&(i=(0,s.mergeArrays)(i,t),o=(0,s.mergeArrays)(o,new Array(t.length).fill(a.Sequence.type_id))));return{tokens:i,token_type_ids:o}}}class Y extends H{post_process(e,t=null){return t&&(e=(0,s.mergeArrays)(e,t)),{tokens:e}}}class Z extends H{constructor(e){super(e),this.processors=e.processors.map((e=>H.fromConfig(e)))}post_process(e,t=null,n={}){let r;for(const s of this.processors)if(s instanceof Y){if(e=s.post_process(e).tokens,t){t=s.post_process(t).tokens}}else{const i=s.post_process(e,t,n);e=i.tokens,r=i.token_type_ids}return{tokens:e,token_type_ids:r}}}class J extends r.Callable{constructor(e){super(),this.config=e,this.added_tokens=[],this.end_of_word_suffix=null,this.trim_offsets=e.trim_offsets}static fromConfig(e){if(null===e)return null;switch(e.type){case"WordPiece":return new se(e);case"Metaspace":return new ce(e);case"ByteLevel":return new ie(e);case"Replace":return new ee(e);case"ByteFallback":return new te(e);case"Fuse":return new ne(e);case"Strip":return new re(e);case"Sequence":return new ae(e);case"CTC":return new oe(e);case"BPEDecoder":return new le(e);default:throw new Error(`Unknown Decoder type: ${e.type}`)}}_call(e){return this.decode(e)}decode(e){return this.decode_chain(e).join("")}decode_chain(e){throw Error("`decode_chain` should be implemented in subclass.")}}class ee extends J{decode_chain(e){const t=h(this.config.pattern);return null===t?e:e.map((e=>e.replaceAll(t,this.config.content)))}}class te extends J{constructor(e){super(e),this.text_decoder=new TextDecoder}decode_chain(e){const t=[];let n=[];for(const r of e){let e=null;if(6===r.length&&r.startsWith("<0x")&&r.endsWith(">")){const t=parseInt(r.slice(3,5),16);isNaN(t)||(e=t)}if(null!==e)n.push(e);else{if(n.length>0){const e=this.text_decoder.decode(Uint8Array.from(n));t.push(e),n=[]}t.push(r)}}if(n.length>0){const e=this.text_decoder.decode(Uint8Array.from(n));t.push(e),n=[]}return t}}class ne extends J{decode_chain(e){return[e.join("")]}}class re extends J{constructor(e){super(e),this.content=this.config.content,this.start=this.config.start,this.stop=this.config.stop}decode_chain(e){return e.map((e=>{let t=0;for(let n=0;n<this.start&&e[n]===this.content;++n)t=n+1;let n=e.length;for(let t=0;t<this.stop;++t){const r=e.length-t-1;if(e[r]!==this.content)break;n=r}return e.slice(t,n)}))}}class se extends J{constructor(e){super(e),this.cleanup=e.cleanup}decode_chain(e){return e.map(((e,t)=>(0!==t&&(e=e.startsWith(this.config.prefix)?e.replace(this.config.prefix,""):" "+e),this.cleanup&&(e=g(e)),e)))}}class ie extends J{constructor(e){super(e),this.byte_decoder=S,this.text_decoder=new TextDecoder("utf-8",{fatal:!1,ignoreBOM:!0}),this.end_of_word_suffix=null}convert_tokens_to_string(e){const t=e.join(""),n=new Uint8Array([...t].map((e=>this.byte_decoder[e])));return this.text_decoder.decode(n)}decode_chain(e){const t=[];let n=[];for(const r of e)void 0!==this.added_tokens.find((e=>e.content===r))?(n.length>0&&(t.push(this.convert_tokens_to_string(n)),n=[]),t.push(r)):n.push(r);return n.length>0&&t.push(this.convert_tokens_to_string(n)),t}}class oe extends J{constructor(e){super(e),this.pad_token=this.config.pad_token,this.word_delimiter_token=this.config.word_delimiter_token,this.cleanup=this.config.cleanup}convert_tokens_to_string(e){if(0===e.length)return"";const t=[e[0]];for(let n=1;n<e.length;++n)e[n]!==t.at(-1)&&t.push(e[n]);let n=t.filter((e=>e!==this.pad_token)).join("");return this.cleanup&&(n=g(n).replaceAll(this.word_delimiter_token," ").trim()),n}decode_chain(e){return[this.convert_tokens_to_string(e)]}}class ae extends J{constructor(e){super(e),this.decoders=e.decoders.map((e=>J.fromConfig(e)))}decode_chain(e){return this.decoders.reduce(((e,t)=>t.decode_chain(e)),e)}}class le extends J{constructor(e){super(e),this.suffix=this.config.suffix}decode_chain(e){return e.map(((t,n)=>t.replaceAll(this.suffix,n===e.length-1?"":" ")))}}class de extends J{decode_chain(e){let t="";for(let n=1;n<e.length;n+=2)t+=e[n];return[t]}}class ue extends V{constructor(e){super(),this.addPrefixSpace=e.add_prefix_space,this.replacement=e.replacement,this.strRep=e.str_rep||this.replacement,this.prepend_scheme=e.prepend_scheme??"always"}pre_tokenize_text(e,{section_index:t}={}){let n=e.replaceAll(" ",this.strRep);return this.addPrefixSpace&&!n.startsWith(this.replacement)&&("always"===this.prepend_scheme||"first"===this.prepend_scheme&&0===t)&&(n=this.strRep+n),[n]}}class ce extends J{constructor(e){super(e),this.addPrefixSpace=e.add_prefix_space,this.replacement=e.replacement}decode_chain(e){const t=[];for(let n=0;n<e.length;++n){let r=e[n].replaceAll(this.replacement," ");this.addPrefixSpace&&0==n&&r.startsWith(" ")&&(r=r.substring(1)),t.push(r)}return t}}class pe extends E{constructor(e){super(e),this.charsmap=e.precompiled_charsmap}normalize(e){if((e=(e=e.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm,"")).replace(/[\u0009\u000A\u000C\u000D\u1680\u200B\u200C\u200E\u200F\u2028\u2029\u2581\uFEFF\uFFFD]/gm," ")).includes("～")){const t=e.split("～");e=t.map((e=>e.normalize("NFKC"))).join("～")}else e=e.normalize("NFKC");return e}}class he extends V{constructor(e){super(),this.tokenizers=e.pretokenizers.map((e=>V.fromConfig(e)))}pre_tokenize_text(e,t){return this.tokenizers.reduce(((e,n)=>n.pre_tokenize(e,t)),[e])}}class me extends V{constructor(e){super()}pre_tokenize_text(e,t){return e.match(/\w+|[^\w\s]+/g)||[]}}class fe extends V{constructor(e){super()}pre_tokenize_text(e,t){return function(e){return e.match(/\S+/g)||[]}(e)}}class ge extends V{constructor(e){super(),this.config=e,this.pattern=h(this.config.pattern),this.content=this.config.content}pre_tokenize_text(e,t){return null===this.pattern?[e]:[e.replaceAll(this.pattern,this.config.content)]}}const _e=["bos_token","eos_token","unk_token","sep_token","pad_token","cls_token","mask_token"];function we(e,t,n,r){for(const i of Object.keys(e)){const o=t-e[i].length,a=n(i),l=new Array(o).fill(a);e[i]="right"===r?(0,s.mergeArrays)(e[i],l):(0,s.mergeArrays)(l,e[i])}}function be(e,t){for(const n of Object.keys(e))e[n].length=t}class ye extends r.Callable{return_token_type_ids=!1;_default_chat_template="{% for message in messages %}{{'<|im_start|>' + message['role'] + '\n' + message['content'] + '<|im_end|>' + '\n'}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant\n' }}{% endif %}";padding_side="right";constructor(e,t){super(),this._tokenizer_config=t,this.normalizer=E.fromConfig(e.normalizer),this.pre_tokenizer=V.fromConfig(e.pre_tokenizer),this.model=M.fromConfig(e.model,t),this.post_processor=H.fromConfig(e.post_processor),this.decoder=J.fromConfig(e.decoder),this.special_tokens=[],this.all_special_ids=[],this.added_tokens=[];for(const t of e.added_tokens){const e=new x(t);this.added_tokens.push(e),this.model.tokens_to_ids.set(e.content,e.id),this.model.vocab[e.id]=e.content,e.special&&(this.special_tokens.push(e.content),this.all_special_ids.push(e.id))}if(this.additional_special_tokens=t.additional_special_tokens??[],this.special_tokens.push(...this.additional_special_tokens),this.special_tokens=[...new Set(this.special_tokens)],this.decoder&&(this.decoder.added_tokens=this.added_tokens,this.decoder.end_of_word_suffix=this.model.end_of_word_suffix),this.added_tokens_regex=this.added_tokens.length>0?new RegExp(this.added_tokens.toSorted(((e,t)=>t.content.length-e.content.length)).map((e=>`${e.lstrip?"\\s*":""}(${(0,s.escapeRegExp)(e.content)})${e.rstrip?"\\s*":""}`)).join("|")):null,this.mask_token=this.getToken("mask_token"),this.mask_token_id=this.model.tokens_to_ids.get(this.mask_token),this.pad_token=this.getToken("pad_token","eos_token"),this.pad_token_id=this.model.tokens_to_ids.get(this.pad_token),this.sep_token=this.getToken("sep_token"),this.sep_token_id=this.model.tokens_to_ids.get(this.sep_token),this.unk_token=this.getToken("unk_token"),this.unk_token_id=this.model.tokens_to_ids.get(this.unk_token),this.model_max_length=t.model_max_length,this.remove_space=t.remove_space,this.clean_up_tokenization_spaces=t.clean_up_tokenization_spaces??!0,this.do_lowercase_and_remove_accent=t.do_lowercase_and_remove_accent??!1,t.padding_side&&(this.padding_side=t.padding_side),this.legacy=!1,this.chat_template=t.chat_template??null,Array.isArray(this.chat_template)){const e=Object.create(null);for(const{name:t,template:n}of this.chat_template){if("string"!=typeof t||"string"!=typeof n)throw new Error('Chat template must be a list of objects with "name" and "template" properties');e[t]=n}this.chat_template=e}this._compiled_template_cache=new Map}getToken(...e){for(const t of e){const e=this._tokenizer_config[t];if(e){if("object"==typeof e){if("AddedToken"===e.__type)return e.content;throw Error(`Unknown token: ${e}`)}return e}}return null}static async from_pretrained(e,{progress_callback:t=null,config:n=null,cache_dir:r=null,local_files_only:s=!1,revision:i="main",legacy:o=null}={}){return new this(...await p(e,{progress_callback:t,config:n,cache_dir:r,local_files_only:s,revision:i,legacy:o}))}_call(e,{text_pair:t=null,add_special_tokens:n=!0,padding:r=!1,truncation:s=null,max_length:i=null,return_tensor:l=!0,return_token_type_ids:d=null}={}){const u=Array.isArray(e);let c;if(u){if(0===e.length)throw Error("text array must be non-empty");if(null!==t){if(!Array.isArray(t))throw Error("text_pair must also be an array");if(e.length!==t.length)throw Error("text and text_pair must have the same length");c=e.map(((e,r)=>this._encode_plus(e,{text_pair:t[r],add_special_tokens:n,return_token_type_ids:d})))}else c=e.map((e=>this._encode_plus(e,{add_special_tokens:n,return_token_type_ids:d})))}else{if(null==e)throw Error("text may not be null or undefined");if(Array.isArray(t))throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");c=[this._encode_plus(e,{text_pair:t,add_special_tokens:n,return_token_type_ids:d})]}if(null===i?i="max_length"===r?this.model_max_length:(0,o.max)(c.map((e=>e.input_ids.length)))[0]:s||console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation=true` to explicitly truncate examples to max length."),i=Math.min(i,this.model_max_length??1/0),r||s)for(let e=0;e<c.length;++e)c[e].input_ids.length!==i&&(c[e].input_ids.length>i?s&&be(c[e],i):r&&we(c[e],i,(e=>"input_ids"===e?this.pad_token_id:0),this.padding_side));const p={};if(l){if((!r||!s)&&c.some((e=>{for(const t of Object.keys(e))if(e[t].length!==c[0][t]?.length)return!0;return!1})))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.");const e=[c.length,c[0].input_ids.length];for(const t of Object.keys(c[0]))p[t]=new a.Tensor("int64",BigInt64Array.from(c.flatMap((e=>e[t])).map(BigInt)),e)}else{for(const e of Object.keys(c[0]))p[e]=c.map((t=>t[e]));if(!u)for(const e of Object.keys(p))p[e]=p[e][0]}return p}_encode_text(e){if(null===e)return null;const t=(this.added_tokens_regex?e.split(this.added_tokens_regex).filter((e=>e)):[e]).map(((e,t)=>{if(void 0!==this.added_tokens.find((t=>t.content===e)))return e;{if(!0===this.remove_space&&(e=e.trim().split(/\s+/).join(" ")),this.do_lowercase_and_remove_accent&&(e=function(e){return _(e.toLowerCase())}(e)),null!==this.normalizer&&(e=this.normalizer(e)),0===e.length)return[];const n=null!==this.pre_tokenizer?this.pre_tokenizer(e,{section_index:t}):[e];return this.model(n)}})).flat();return t}_encode_plus(e,{text_pair:t=null,add_special_tokens:n=!0,return_token_type_ids:r=null}={}){const{tokens:s,token_type_ids:i}=this._tokenize_helper(e,{pair:t,add_special_tokens:n}),o=this.model.convert_tokens_to_ids(s),a={input_ids:o,attention_mask:new Array(o.length).fill(1)};return(r??this.return_token_type_ids)&&i&&(a.token_type_ids=i),a}_tokenize_helper(e,{pair:t=null,add_special_tokens:n=!1}={}){const r=this._encode_text(e),i=this._encode_text(t);return this.post_processor?this.post_processor(r,i,{add_special_tokens:n}):{tokens:(0,s.mergeArrays)(r??[],i??[])}}tokenize(e,{pair:t=null,add_special_tokens:n=!1}={}){return this._tokenize_helper(e,{pair:t,add_special_tokens:n}).tokens}encode(e,{text_pair:t=null,add_special_tokens:n=!0,return_token_type_ids:r=null}={}){return this._encode_plus(e,{text_pair:t,add_special_tokens:n,return_token_type_ids:r}).input_ids}batch_decode(e,t={}){return e instanceof a.Tensor&&(e=e.tolist()),e.map((e=>this.decode(e,t)))}decode(e,t={}){if(e instanceof a.Tensor&&(e=f(e)),!Array.isArray(e)||0===e.length||!(0,s.isIntegralNumber)(e[0]))throw Error("token_ids must be a non-empty array of integers.");return this.decode_single(e,t)}decode_single(e,{skip_special_tokens:t=!1,clean_up_tokenization_spaces:n=null}){let r=this.model.convert_ids_to_tokens(e);t&&(r=r.filter((e=>!this.special_tokens.includes(e))));let s=this.decoder?this.decoder(r):r.join(" ");return this.decoder&&this.decoder.end_of_word_suffix&&(s=s.replaceAll(this.decoder.end_of_word_suffix," "),t&&(s=s.trim())),(n??this.clean_up_tokenization_spaces)&&(s=g(s)),s}get default_chat_template(){return this._warned_about_chat_template||(console.warn("No chat template is defined for this tokenizer - using a default chat template that implements the ChatML format. If the default is not appropriate for your model, please set `tokenizer.chat_template` to an appropriate template. See https://huggingface.co/docs/transformers/main/chat_templating for more information."),this._warned_about_chat_template=!0),this._default_chat_template}apply_chat_template(e,{chat_template:t=null,add_generation_prompt:n=!1,tokenize:r=!0,padding:s=!1,truncation:i=!1,max_length:o=null,return_tensor:a=!0,return_dict:l=!1,tokenizer_kwargs:u={},...c}={}){if(this.chat_template&&"object"==typeof this.chat_template||null===this.chat_template&&this.default_chat_template&&"object"==typeof this.default_chat_template){const e=this.chat_template??this.default_chat_template;if(null!==t&&Object.hasOwn(e,t))t=e[t];else if(null===t&&"default"in e)t=e.default;else if(null===t)throw Error(`This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(e).sort()}.`)}else t??=this.chat_template??this.default_chat_template;if("string"!=typeof t)throw Error("chat_template must be a string, but got "+typeof t);let p=this._compiled_template_cache.get(t);void 0===p&&(p=new d.Template(t),this._compiled_template_cache.set(t,p));const h=Object.create(null);for(const e of _e){const t=this.getToken(e);t&&(h[e]=t)}const m=p.render({messages:e,add_generation_prompt:n,...h,...c});if(r){const e=this._call(m,{add_special_tokens:!1,padding:s,truncation:i,max_length:o,return_tensor:a,...u});return l?e:e.input_ids}return m}}class ve extends ye{return_token_type_ids=!0}class xe extends ye{return_token_type_ids=!0}class Me extends ye{return_token_type_ids=!0}class Te extends ye{return_token_type_ids=!0}class ke extends ye{return_token_type_ids=!0}class $e extends ye{return_token_type_ids=!0}class Se extends ye{return_token_type_ids=!0}class Ce extends ye{return_token_type_ids=!0}class Pe extends ye{return_token_type_ids=!0}class Ee extends ye{}class Fe extends ye{}class Ae extends ye{return_token_type_ids=!0;constructor(e,t){super(e,t),console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}}class Ie extends ye{return_token_type_ids=!0}class ze extends ye{}class Be extends ye{_default_chat_template='{% for message in messages %}" "{{ message.content }}{{ eos_token }}" "{% endfor %}'}class Oe extends ye{}class Le extends ye{constructor(e,t){super(e,t),this.languageRegex=/^[a-z]{2}_[A-Z]{2}$/,this.language_codes=this.special_tokens.filter((e=>this.languageRegex.test(e))),this.lang_to_token=e=>e}_build_translation_inputs(e,t,n){return Ze(this,e,t,n)}}class De extends Le{}class Re extends ye{}class Ne extends Be{constructor(e,t){const n=".,!?…。，、।۔،",r=e.pre_tokenizer?.pretokenizers[0]?.pattern;r&&r.Regex===` ?[^(\\s|[${n}])]+`&&(r.Regex=` ?[^\\s${n}]+`),super(e,t)}}const Ve="▁";class je extends ye{_default_chat_template="{% if messages[0]['role'] == 'system' %}{% set loop_messages = messages[1:] %}{% set system_message = messages[0]['content'] %}{% elif USE_DEFAULT_PROMPT == true and not '<<SYS>>' in messages[0]['content'] %}{% set loop_messages = messages %}{% set system_message = 'DEFAULT_SYSTEM_MESSAGE' %}{% else %}{% set loop_messages = messages %}{% set system_message = false %}{% endif %}{% for message in loop_messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if loop.index0 == 0 and system_message != false %}{% set content = '<<SYS>>\n' + system_message + '\n<</SYS>>\n\n' + message['content'] %}{% else %}{% set content = message['content'] %}{% endif %}{% if message['role'] == 'user' %}{{ bos_token + '[INST] ' + content.strip() + ' [/INST]' }}{% elif message['role'] == 'system' %}{{ '<<SYS>>\n' + content.strip() + '\n<</SYS>>\n\n' }}{% elif message['role'] == 'assistant' %}{{ ' '  + content.strip() + ' ' + eos_token }}{% endif %}{% endfor %}";DEFAULT_SYSTEM_PROMPT="You are a helpful, respectful and honest assistant. Always answer as helpfully as possible, while being safe. Your answers should not include any harmful, unethical, racist, sexist, toxic, dangerous, or illegal content. Please ensure that your responses are socially unbiased and positive in nature.\n\nIf a question does not make any sense, or is not factually coherent, explain why instead of answering something not correct. If you don't know the answer to a question, please don't share false information.";padding_side="left";constructor(e,t){super(e,t),this.use_default_system_prompt=t.use_default_system_prompt??!1,this.legacy=t.legacy??!0,this.legacy||(this.normalizer=null,this.pre_tokenizer=new ue({replacement:Ve,add_prefix_space:!0,prepend_scheme:"first"}))}_encode_text(e){if(null===e)return null;if(this.legacy||0===e.length)return super._encode_text(e);let t=super._encode_text(Ve+e.replaceAll(Ve," "));return t.length>1&&t[0]===Ve&&this.special_tokens.includes(t[1])&&(t=t.slice(1)),t}get default_chat_template(){return super.default_chat_template.replaceAll("USE_DEFAULT_PROMPT",this.use_default_system_prompt?"true":"false").replaceAll("DEFAULT_SYSTEM_MESSAGE",this.DEFAULT_SYSTEM_PROMPT.replaceAll("\n","\\n").replaceAll("'","\\'"))}}class qe extends je{}class Ge extends ye{}class Ue extends ye{}class We extends ye{}class He extends ye{}class Ke extends ye{}class Xe extends ye{}class Qe extends ye{_default_chat_template="{% if messages[0]['role'] == 'system' %}{{ raise_exception('System role not supported') }}{% endif %}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if (message['role'] == 'assistant') %}{% set role = 'model' %}{% else %}{% set role = message['role'] %}{% endif %}{{ '<start_of_turn>' + role + '\n' + message['content'] | trim + '<end_of_turn>\n' }}{% endfor %}{% if add_generation_prompt %}{{'<start_of_turn>model\n'}}{% endif %}"}class Ye extends ye{}function Ze(e,t,n,r){if(!("language_codes"in e)||!Array.isArray(e.language_codes))throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");if(!("languageRegex"in e&&e.languageRegex instanceof RegExp))throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");if(!("lang_to_token"in e)||"function"!=typeof e.lang_to_token)throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");const s=r.src_lang,i=r.tgt_lang;if(!e.language_codes.includes(i))throw new Error(`Target language code "${i}" is not valid. Must be one of: {${e.language_codes.join(", ")}}`);if(void 0!==s){if(!e.language_codes.includes(s))throw new Error(`Source language code "${s}" is not valid. Must be one of: {${e.language_codes.join(", ")}}`);for(const t of e.post_processor.config.single)if("SpecialToken"in t&&e.languageRegex.test(t.SpecialToken.id)){t.SpecialToken.id=e.lang_to_token(s);break}}return r.forced_bos_token_id=e.model.convert_tokens_to_ids([e.lang_to_token(i)])[0],e._call(t,n)}class Je extends ye{constructor(e,t){super(e,t),this.languageRegex=/^[a-z]{3}_[A-Z][a-z]{3}$/,this.language_codes=this.special_tokens.filter((e=>this.languageRegex.test(e))),this.lang_to_token=e=>e}_build_translation_inputs(e,t,n){return Ze(this,e,t,n)}}class et extends ye{constructor(e,t){super(e,t),this.languageRegex=/^__[a-z]{2,3}__$/,this.language_codes=this.special_tokens.filter((e=>this.languageRegex.test(e))).map((e=>e.slice(2,-2))),this.lang_to_token=e=>`__${e}__`}_build_translation_inputs(e,t,n){return Ze(this,e,t,n)}}class tt extends ye{_default_chat_template='{% for message in messages %}" "{{ message.content }}{{ eos_token }}" "{% endfor %}';get timestamp_begin(){return this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0]+1}_decode_asr(e,{return_timestamps:t=!1,return_language:n=!1,time_precision:r=null,force_full_sequences:s=!0}={}){if(null===r)throw Error("Must specify time_precision");let i=null;const a="word"===t;function l(){return{language:i,timestamp:[null,null],text:""}}const d=[];let c=l(),p=0;const h=this.timestamp_begin;let m=[],f=[],g=!1,_=null;const w=new Set(this.all_special_ids);for(const n of e){const e=n.tokens,s=a?n.token_timestamps:null;let b=null,v=h;if("stride"in n){const[t,s,i]=n.stride;if(p-=s,_=t-i,s&&(v=s/r+h),i)for(let t=e.length-1;t>=0;--t){const n=Number(e[t]);if(n>=h){if(null!==b&&(n-h)*r<_)break;b=n}}}let x=[],M=[];for(let n=0;n<e.length;++n){const _=Number(e[n]);if(w.has(_)){const e=this.decode([_]),n=u.WHISPER_LANGUAGE_MAPPING.get(e.slice(2,-2));if(void 0!==n){if(null!==i&&n!==i&&!t){m.push(x);const e=this.findLongestCommonSequence(m)[0],t=this.decode(e);c.text=t,d.push(c),m=[],x=[],c=l()}i=c.language=n}}else if(_>=h){const e=(_-h)*r+p,t=(0,o.round)(e,2);if(null!==b&&_>=b)g=!0;else if(g||m.length>0&&_<v)g=!1;else if(null===c.timestamp[0])c.timestamp[0]=t;else if(t===c.timestamp[0]);else{c.timestamp[1]=t,m.push(x),a&&f.push(M);const[e,n]=this.findLongestCommonSequence(m,f),r=this.decode(e);c.text=r,a&&(c.words=this.collateWordTimestamps(e,n,i)),d.push(c),m=[],x=[],f=[],M=[],c=l()}}else if(x.push(_),a){let e,t=(0,o.round)(s[n]+p,2);if(n+1<s.length){e=(0,o.round)(s[n+1]+p,2);const i=this.decode([_]);y.test(i)&&(e=(0,o.round)(Math.min(t+r,e),2))}else e=null;M.push([t,e])}}if("stride"in n){const[e,t,r]=n.stride;p+=e-r}x.length>0?(m.push(x),a&&f.push(M)):m.every((e=>0===e.length))&&(c=l(),m=[],x=[],f=[],M=[])}if(m.length>0){if(s&&t)throw new Error("Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.");const[e,n]=this.findLongestCommonSequence(m,f),r=this.decode(e);c.text=r,a&&(c.words=this.collateWordTimestamps(e,n,i)),d.push(c)}let b=Object.create(null);const v=d.map((e=>e.text)).join("");if(t||n){for(let e=0;e<d.length;++e){const r=d[e];t||delete r.timestamp,n||delete r.language}if(a){const e=[];for(const t of d)for(const n of t.words)e.push(n);b={chunks:e}}else b={chunks:d}}return[v,b]}findLongestCommonSequence(e,t=null){let n=e[0],r=n.length,s=[];const i=Array.isArray(t)&&t.length>0;let o=i?[]:null,a=i?t[0]:null;for(let l=1;l<e.length;++l){const d=e[l];let u=0,c=[r,r,0,0];const p=d.length;for(let e=1;e<r+p;++e){const s=Math.max(0,r-e),o=Math.min(r,r+p-e),h=n.slice(s,o),m=Math.max(0,e-r),f=Math.min(p,e),g=d.slice(m,f);if(h.length!==g.length)throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");let _;_=i?h.filter(((e,n)=>e===g[n]&&a[s+n]<=t[l][m+n])).length:h.filter(((e,t)=>e===g[t])).length;const w=_/e+e/1e4;_>1&&w>u&&(u=w,c=[s,o,m,f])}const[h,m,f,g]=c,_=Math.floor((m+h)/2),w=Math.floor((g+f)/2);s.push(...n.slice(0,_)),n=d.slice(w),r=n.length,i&&(o.push(...a.slice(0,_)),a=t[l].slice(w))}return s.push(...n),i?(o.push(...a),[s,o]):[s,[]]}collateWordTimestamps(e,t,n){const[r,s,i]=this.combineTokensIntoWords(e,n),o=[];for(let e=0;e<r.length;++e){const n=i[e];o.push({text:r[e],timestamp:[t[n.at(0)][0],t[n.at(-1)][1]]})}return o}combineTokensIntoWords(e,t,n="\"'“¡¿([{-",r="\"'.。,，!！?？:：”)]}、"){let s,i,o;return["chinese","japanese","thai","lao","myanmar"].includes(t=t??"english")?[s,i,o]=this.splitTokensOnUnicode(e):[s,i,o]=this.splitTokensOnSpaces(e),this.mergePunctuations(s,i,o,n,r)}decode(e,t){let n;return t?.decode_with_timestamps?(e instanceof a.Tensor&&(e=f(e)),n=this.decodeWithTimestamps(e,t)):n=super.decode(e,t),n}decodeWithTimestamps(e,t){const n=t?.time_precision??.02,r=Array.from(this.all_special_ids).at(-1)+1;let s=[[]];for(let t of e)if(t=Number(t),t>=r){const e=((t-r)*n).toFixed(2);s.push(`<|${e}|>`),s.push([])}else s[s.length-1].push(t);return s=s.map((e=>"string"==typeof e?e:super.decode(e,t))),s.join("")}splitTokensOnUnicode(e){const t=this.decode(e,{decode_with_timestamps:!0}),n=[],r=[],s=[];let i=[],o=[],a=0;for(let l=0;l<e.length;++l){const d=e[l];i.push(d),o.push(l);const u=this.decode(i,{decode_with_timestamps:!0});u.includes("�")&&"�"!==t[a+u.indexOf("�")]||(n.push(u),r.push(i),s.push(o),i=[],o=[],a+=u.length)}return[n,r,s]}splitTokensOnSpaces(e){const[t,n,r]=this.splitTokensOnUnicode(e),s=[],i=[],o=[],a=new RegExp(`^[${b}]$`,"gu");for(let e=0;e<t.length;++e){const l=t[e],d=n[e],u=r[e],c=d[0]>=this.model.tokens_to_ids.get("<|endoftext|>"),p=l.startsWith(" "),h=l.trim(),m=a.test(h);if(c||p||m||0===s.length)s.push(l),i.push(d),o.push(u);else{const e=s.length-1;s[e]+=l,i[e].push(...d),o[e].push(...u)}}return[s,i,o]}mergePunctuations(e,t,n,r,i){const o=structuredClone(e),a=structuredClone(t),l=structuredClone(n);let d=o.length-2,u=o.length-1;for(;d>=0;)o[d].startsWith(" ")&&r.includes(o[d].trim())?(o[u]=o[d]+o[u],a[u]=(0,s.mergeArrays)(a[d],a[u]),l[u]=(0,s.mergeArrays)(l[d],l[u]),o[d]="",a[d]=[],l[d]=[]):u=d,--d;for(d=0,u=1;u<o.length;)!o[d].endsWith(" ")&&i.includes(o[u])?(o[d]+=o[u],a[d]=(0,s.mergeArrays)(a[d],a[u]),l[d]=(0,s.mergeArrays)(l[d],l[u]),o[u]="",a[u]=[],l[u]=[]):d=u,++u;return[o.filter((e=>e)),a.filter((e=>e.length>0)),l.filter((e=>e.length>0))]}get_decoder_prompt_ids({language:e=null,task:t=null,no_timestamps:n=!0}={}){const r=[];if(e){const t=(0,u.whisper_language_to_code)(e),n=this.model.tokens_to_ids.get(`<|${t}|>`);if(void 0===n)throw new Error(`Unable to find language "${t}" in model vocabulary. Please report this issue at ${c.GITHUB_ISSUE_URL}.`);r.push(n)}else r.push(null);if(t){if("transcribe"!==(t=t.toLowerCase())&&"translate"!==t)throw new Error(`Task "${t}" is not supported. Must be one of: ["transcribe", "translate"]`);const e=this.model.tokens_to_ids.get(`<|${t}|>`);if(void 0===e)throw new Error(`Unable to find task "${t}" in model vocabulary. Please report this issue at ${c.GITHUB_ISSUE_URL}.`);r.push(e)}else r.push(null);if(n){const e=this.model.tokens_to_ids.get("<|notimestamps|>");if(void 0===e)throw new Error(`Unable to find "<|notimestamps|>" in model vocabulary. Please report this issue at ${c.GITHUB_ISSUE_URL}.`);r.push(e)}return r.map(((e,t)=>[t+1,e])).filter((e=>null!==e[1]))}}class nt extends ye{}class rt extends ye{}class st extends ye{}class it extends ye{constructor(e,t){super(e,t),this.languageRegex=/^(>>\w+<<)\s*/g,this.supported_language_codes=this.model.vocab.filter((e=>this.languageRegex.test(e))),console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}_encode_text(e){if(null===e)return null;const[t,...n]=e.trim().split(this.languageRegex);if(0===n.length)return super._encode_text(t);if(2===n.length){const[e,t]=n;return this.supported_language_codes.includes(e)||console.warn(`Unsupported language code "${e}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`),(0,s.mergeArrays)([e],super._encode_text(t))}}}class ot extends ye{}class at extends ye{_default_chat_template="{% for message in messages %}{% if message['role'] == 'user' %}{{ ' ' }}{% endif %}{{ message['content'] }}{% if not loop.last %}{{ '  ' }}{% endif %}{% endfor %}{{ eos_token }}"}class lt extends at{}class dt extends ye{}class ut extends ye{}class ct extends ye{constructor(e,t){super(e,t),this.decoder=new de({})}}class pt extends ye{}class ht{static TOKENIZER_CLASS_MAPPING={T5Tokenizer:ze,DistilBertTokenizer:Ee,CamembertTokenizer:Fe,DebertaTokenizer:ke,DebertaV2Tokenizer:$e,BertTokenizer:ve,HerbertTokenizer:Se,ConvBertTokenizer:Ce,RoFormerTokenizer:Pe,XLMTokenizer:Ae,ElectraTokenizer:Ie,MobileBertTokenizer:Me,SqueezeBertTokenizer:Te,AlbertTokenizer:xe,GPT2Tokenizer:Be,BartTokenizer:Oe,MBartTokenizer:Le,MBart50Tokenizer:De,RobertaTokenizer:Re,WhisperTokenizer:tt,CodeGenTokenizer:nt,CLIPTokenizer:rt,SiglipTokenizer:st,MarianTokenizer:it,BloomTokenizer:Ne,NllbTokenizer:Je,M2M100Tokenizer:et,LlamaTokenizer:je,CodeLlamaTokenizer:qe,XLMRobertaTokenizer:Ge,MPNetTokenizer:Ue,FalconTokenizer:We,GPTNeoXTokenizer:He,EsmTokenizer:Ke,Wav2Vec2CTCTokenizer:ot,BlenderbotTokenizer:at,BlenderbotSmallTokenizer:lt,SpeechT5Tokenizer:dt,NougatTokenizer:ut,VitsTokenizer:ct,Qwen2Tokenizer:Xe,GemmaTokenizer:Qe,Grok1Tokenizer:Ye,CohereTokenizer:pt,PreTrainedTokenizer:ye};static async from_pretrained(e,{progress_callback:t=null,config:n=null,cache_dir:r=null,local_files_only:s=!1,revision:i="main",legacy:o=null}={}){const[a,l]=await p(e,{progress_callback:t,config:n,cache_dir:r,local_files_only:s,revision:i,legacy:o}),d=l.tokenizer_class?.replace(/Fast$/,"")??"PreTrainedTokenizer";let u=this.TOKENIZER_CLASS_MAPPING[d];return u||(console.warn(`Unknown tokenizer class "${d}", attempting to construct from base class.`),u=ye),new u(a,l)}}},"./src/utils/audio.js":
/*!****************************!*\
  !*** ./src/utils/audio.js ***!
  \****************************/(e,t,n)=>{n.r(t),n.d(t,{hanning:()=>l,mel_filter_bank:()=>h,read_audio:()=>a,spectrogram:()=>f,window_function:()=>g});var r=n(/*! ./hub.js */"./src/utils/hub.js"),s=n(/*! ./maths.js */"./src/utils/maths.js"),i=n(/*! ./core.js */"./src/utils/core.js"),o=n(/*! ./tensor.js */"./src/utils/tensor.js");async function a(e,t){if("undefined"==typeof AudioContext)throw Error("Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.");const n=await(await(0,r.getFile)(e)).arrayBuffer(),s=new AudioContext({sampleRate:t});void 0===t&&console.warn(`No sampling rate provided, using default of ${s.sampleRate}Hz.`);const i=await s.decodeAudioData(n);let o;if(2===i.numberOfChannels){const e=Math.sqrt(2),t=i.getChannelData(0),n=i.getChannelData(1);o=new Float32Array(t.length);for(let r=0;r<i.length;++r)o[r]=e*(t[r]+n[r])/2}else o=i.getChannelData(0);return o}function l(e){if(e<1)return new Float64Array;if(1===e)return new Float64Array([1]);const t=e-1,n=Math.PI/t,r=new Float64Array(e);for(let s=0;s<e;++s){const e=2*s-t;r[s]=.5+.5*Math.cos(n*e)}return r}const d={htk:e=>2595*Math.log10(1+e/700),kaldi:e=>1127*Math.log(1+e/700),slaney:(e,t=1e3,n=15,r=27/Math.log(6.4))=>e>=t?n+Math.log(e/t)*r:3*e/200};function u(e,t="htk"){const n=d[t];if(!n)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return"number"==typeof e?n(e):e.map((e=>n(e)))}const c={htk:e=>700*(10**(e/2595)-1),kaldi:e=>700*(Math.exp(e/1127)-1),slaney:(e,t=1e3,n=15,r=Math.log(6.4)/27)=>e>=n?t*Math.exp(r*(e-n)):200*e/3};function p(e,t,n){const r=(t-e)/(n-1);return Float64Array.from({length:n},((t,n)=>e+r*n))}function h(e,t,n,r,s,i=null,o="htk",a=!1){if(null!==i&&"slaney"!==i)throw new Error('norm must be one of null or "slaney"');const l=p(u(n,o),u(r,o),t+2);let d,h=function(e,t="htk"){const n=c[t];if(!n)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return"number"==typeof e?n(e):e.map((e=>n(e)))}(l,o);if(a){const t=s/(2*e);d=u(Float64Array.from({length:e},((e,n)=>n*t)),o),h=l}else d=p(0,Math.floor(s/2),e);const m=function(e,t){const n=Float64Array.from({length:t.length-1},((e,n)=>t[n+1]-t[n])),r=Array.from({length:e.length},(()=>new Array(t.length)));for(let n=0;n<e.length;++n){const s=r[n];for(let r=0;r<t.length;++r)s[r]=t[r]-e[n]}const s=t.length-2,i=Array.from({length:s},(()=>new Array(e.length)));for(let t=0;t<e.length;++t){const e=r[t];for(let r=0;r<s;++r){const s=-e[r]/n[r],o=e[r+2]/n[r+1];i[r][t]=Math.max(0,Math.min(s,o))}}return i}(d,h);if(null!==i&&"slaney"===i)for(let n=0;n<t;++n){const t=m[n],r=2/(h[n+2]-h[n]);for(let n=0;n<e;++n)t[n]*=r}return m}function m(e,t,n,r,i){if(n<=0)throw new Error("reference must be greater than zero");if(r<=0)throw new Error("min_value must be greater than zero");n=Math.max(r,n);const o=Math.log10(n);for(let n=0;n<e.length;++n)e[n]=t*Math.log10(Math.max(r,e[n])-o);if(null!==i){if(i<=0)throw new Error("db_range must be greater than zero");const t=(0,s.max)(e)[0]-i;for(let n=0;n<e.length;++n)e[n]=Math.max(e[n],t)}return e}async function f(e,t,n,r,{fft_length:a=null,power:l=1,center:d=!0,pad_mode:u="reflect",onesided:c=!0,preemphasis:p=null,mel_filters:h=null,mel_floor:f=1e-10,log_mel:g=null,reference:_=1,min_value:w=1e-10,db_range:b=null,remove_dc_offset:y=null,max_num_frames:v=null,do_pad:x=!0,transpose:M=!1}={}){const T=t.length;if(null===a&&(a=n),n>a)throw Error(`frame_length (${n}) may not be larger than fft_length (${a})`);if(T!==n)throw new Error(`Length of the window (${T}) must equal frame_length (${n})`);if(r<=0)throw new Error("hop_length must be greater than zero");if(null===l&&null!==h)throw new Error("You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue.");if(d){if("reflect"!==u)throw new Error(`pad_mode="${u}" not implemented yet.`);const t=Math.floor((a-1)/2)+1;e=function(e,t,n){const r=new e.constructor(e.length+t+n),s=e.length-1;for(let n=0;n<e.length;++n)r[t+n]=e[n];for(let n=1;n<=t;++n)r[t-n]=e[(0,i.calculateReflectOffset)(n,s)];for(let o=1;o<=n;++o)r[s+t+o]=e[(0,i.calculateReflectOffset)(s-o,s)];return r}(e,t,t)}const k=Math.floor(1+Math.floor((e.length-n)/r)),$=c?Math.floor(a/2)+1:a;let S=k,C=k;null!==v&&(v>k?x&&(C=v):C=S=v);const P=new s.FFT(a),E=new Float64Array(a),F=new Float64Array(P.outputBufferSize),A=new Float32Array($*C);for(let s=0;s<S;++s){const i=s*r;for(let t=0;t<n;++t)E[t]=e[i+t];if(y){let e=0;for(let t=0;t<n;++t)e+=E[t];const t=e/n;for(let e=0;e<n;++e)E[e]-=t}if(null!==p){for(let e=n-1;e>=1;--e)E[e]-=p*E[e-1];E[0]*=1-p}for(let e=0;e<t.length;++e)E[e]*=t[e];P.realTransform(F,E);for(let e=0;e<$;++e){const t=e<<1;A[e*C+s]=F[t]**2+F[t+1]**2}}if(null!==l&&2!==l){const e=2/l;for(let t=0;t<A.length;++t)A[t]**=e}const I=h.length;let z=await(0,o.matmul)(new o.Tensor("float32",h.flat(),[I,$]),new o.Tensor("float32",A,[$,C]));M&&(z=z.transpose(1,0));const B=z.data;for(let e=0;e<B.length;++e)B[e]=Math.max(f,B[e]);if(null!==l&&null!==g){const e=Math.min(B.length,S*I);switch(g){case"log":for(let t=0;t<e;++t)B[t]=Math.log(B[t]);break;case"log10":for(let t=0;t<e;++t)B[t]=Math.log10(B[t]);break;case"dB":if(1===l)!function(e,t=1,n=1e-5,r=null){m(e,20,t,n,r)}(B,_,w,b);else{if(2!==l)throw new Error(`Cannot use log_mel option '${g}' with power ${l}`);!function(e,t=1,n=1e-10,r=null){m(e,10,t,n,r)}(B,_,w,b)}break;default:throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${g}'`)}}return z}function g(e,t,{periodic:n=!0,frame_length:r=null,center:s=!0}={}){const i=n?e+1:e;let o;switch(t){case"boxcar":o=new Float64Array(i).fill(1);break;case"hann":case"hann_window":o=l(i);break;case"povey":o=l(i).map((e=>Math.pow(e,.85)));break;default:throw new Error(`Unknown window type ${t}.`)}if(n&&(o=o.subarray(0,e)),null===r)return o;if(e>r)throw new Error(`Length of the window (${e}) may not be larger than frame_length (${r})`);return o}},"./src/utils/constants.js":
/*!********************************!*\
  !*** ./src/utils/constants.js ***!
  \********************************/(e,t,n)=>{n.r(t),n.d(t,{GITHUB_ISSUE_URL:()=>r});const r="https://github.com/xenova/transformers.js/issues/new/choose"},"./src/utils/core.js":
/*!***************************!*\
  !*** ./src/utils/core.js ***!
  \***************************/(e,t,n)=>{function r(e,t){e&&e(t)}function s(e){return Object.fromEntries(Object.entries(e).map((([e,t])=>[t,e])))}function i(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function o(e){return"TypedArray"===e?.prototype?.__proto__?.constructor?.name}function a(e){return Number.isInteger(e)||"bigint"==typeof e}function l(e){const t=[];let n=e;for(;Array.isArray(n);)t.push(n.length),n=n[0];return t}function d(e,t,n=void 0){const r=e[t];if(void 0!==r)return delete e[t],r;if(void 0===n)throw Error(`Key ${t} does not exist in object.`);return n}function u(...e){return Array.prototype.concat.apply([],e)}function c(...e){return e.reduce(((e,t)=>e.flatMap((e=>t.map((t=>[e,t]))))))}function p(e,t){return Math.abs((e+t)%(2*t)-t)}function h(e,t){return Object.assign({},...t.map((t=>{if(void 0!==e[t])return{[t]:e[t]}})))}n.r(t),n.d(t,{calculateDimensions:()=>l,calculateReflectOffset:()=>p,dispatchCallback:()=>r,escapeRegExp:()=>i,isIntegralNumber:()=>a,isTypedArray:()=>o,mergeArrays:()=>u,pick:()=>h,pop:()=>d,product:()=>c,reverseDictionary:()=>s})},"./src/utils/data-structures.js":
/*!**************************************!*\
  !*** ./src/utils/data-structures.js ***!
  \**************************************/(e,t,n)=>{n.r(t),n.d(t,{CharTrie:()=>s,PriorityQueue:()=>r,TokenLattice:()=>o});class r{constructor(e=((e,t)=>e>t),t=1/0){this._heap=[],this._comparator=e,this._maxSize=t}get size(){return this._heap.length}isEmpty(){return 0===this.size}peek(){return this._heap[0]}push(...e){return this.extend(e)}extend(e){for(const t of e)if(this.size<this._maxSize)this._heap.push(t),this._siftUp();else{const e=this._smallest();this._comparator(t,this._heap[e])&&(this._heap[e]=t,this._siftUpFrom(e))}return this.size}pop(){const e=this.peek(),t=this.size-1;return t>0&&this._swap(0,t),this._heap.pop(),this._siftDown(),e}replace(e){const t=this.peek();return this._heap[0]=e,this._siftDown(),t}_parent(e){return(e+1>>>1)-1}_left(e){return 1+(e<<1)}_right(e){return e+1<<1}_greater(e,t){return this._comparator(this._heap[e],this._heap[t])}_swap(e,t){const n=this._heap[e];this._heap[e]=this._heap[t],this._heap[t]=n}_siftUp(){this._siftUpFrom(this.size-1)}_siftUpFrom(e){for(;e>0&&this._greater(e,this._parent(e));)this._swap(e,this._parent(e)),e=this._parent(e)}_siftDown(){let e=0;for(;this._left(e)<this.size&&this._greater(this._left(e),e)||this._right(e)<this.size&&this._greater(this._right(e),e);){const t=this._right(e)<this.size&&this._greater(this._right(e),this._left(e))?this._right(e):this._left(e);this._swap(e,t),e=t}}_smallest(){return 2**Math.floor(Math.log2(this.size))-1}}class s{constructor(){this.root=i.default()}extend(e){for(let t of e)this.push(t)}push(e){let t=this.root;for(let n of e){let e=t.children.get(n);void 0===e&&(e=i.default(),t.children.set(n,e)),t=e}t.isLeaf=!0}*commonPrefixSearch(e){let t=this.root,n="";for(let r=0;r<e.length&&void 0!==t;++r){const s=e[r];n+=s,t=t.children.get(s),void 0!==t&&t.isLeaf&&(yield n)}}}class i{constructor(e,t){this.isLeaf=e,this.children=t}static default(){return new i(!1,new Map)}}class o{constructor(e,t,n){this.sentence=e,this.len=e.length,this.bosTokenId=t,this.eosTokenId=n,this.nodes=[],this.beginNodes=Array.from({length:this.len+1},(()=>[])),this.endNodes=Array.from({length:this.len+1},(()=>[]));const r=new a(this.bosTokenId,0,0,0,0),s=new a(this.eosTokenId,1,this.len,0,0);this.nodes.push(r.clone()),this.nodes.push(s.clone()),this.beginNodes[this.len].push(s),this.endNodes[0].push(r)}insert(e,t,n,r){const s=this.nodes.length,i=new a(r,s,e,t,n);this.beginNodes[e].push(i),this.endNodes[e+t].push(i),this.nodes.push(i)}viterbi(){const e=this.len;let t=0;for(;t<=e;){if(0==this.beginNodes[t].length)return[];for(let e of this.beginNodes[t]){e.prev=null;let n=0,r=null;for(let s of this.endNodes[t]){const t=s.backtraceScore+e.score;(null===r||t>n)&&(r=s.clone(),n=t)}if(null===r)return[];e.prev=r,e.backtraceScore=n}++t}const n=[],r=this.beginNodes[e][0].prev;if(null===r)return[];let s=r.clone();for(;null!==s.prev;){n.push(s.clone());const e=s.clone();s=e.prev.clone()}return n.reverse(),n}piece(e){return this.sentence.slice(e.pos,e.pos+e.length)}tokens(){return this.viterbi().map((e=>this.piece(e)))}tokenIds(){return this.viterbi().map((e=>e.tokenId))}}class a{constructor(e,t,n,r,s){this.tokenId=e,this.nodeId=t,this.pos=n,this.length=r,this.score=s,this.prev=null,this.backtraceScore=0}clone(){const e=new a(this.tokenId,this.nodeId,this.pos,this.length,this.score);return e.prev=this.prev,e.backtraceScore=this.backtraceScore,e}}},"./src/utils/devices.js":
/*!******************************!*\
  !*** ./src/utils/devices.js ***!
  \******************************/(e,t,n)=>{n.r(t),n.d(t,{DEVICE_TYPES:()=>r});const r=Object.freeze({cpu:"cpu",gpu:"gpu",wasm:"wasm",webgpu:"webgpu"})},"./src/utils/dtypes.js":
/*!*****************************!*\
  !*** ./src/utils/dtypes.js ***!
  \*****************************/(e,t,n)=>{n.r(t),n.d(t,{DATA_TYPES:()=>o,DEFAULT_DEVICE_DTYPE_MAPPING:()=>a,DEFAULT_DTYPE_SUFFIX_MAPPING:()=>l,isFp16Supported:()=>i});var r=n(/*! ../env.js */"./src/env.js"),s=n(/*! ./devices.js */"./src/utils/devices.js");const i=function(){let e;return async function(){if(void 0===e)if(r.apis.IS_NODE_ENV)e=!0;else if(r.apis.IS_WEBGPU_AVAILABLE)try{const t=await navigator.gpu.requestAdapter();e=t.features.has("shader-f16")}catch(t){e=!1}else e=!1;return e}}(),o=Object.freeze({fp32:"fp32",fp16:"fp16",q8:"q8",int8:"int8",uint8:"uint8",q4:"q4",bnb4:"bnb4",q4f16:"q4f16"}),a=Object.freeze({[s.DEVICE_TYPES.cpu]:o.q8,[s.DEVICE_TYPES.gpu]:o.fp32,[s.DEVICE_TYPES.wasm]:o.q8,[s.DEVICE_TYPES.webgpu]:o.fp32}),l=Object.freeze({[o.fp32]:"",[o.fp16]:"_fp16",[o.int8]:"_int8",[o.uint8]:"_uint8",[o.q8]:"_quantized",[o.q4]:"_q4",[o.q4f16]:"_q4f16",[o.bnb4]:"_bnb4"})},"./src/utils/generic.js":
/*!******************************!*\
  !*** ./src/utils/generic.js ***!
  \******************************/(e,t,n)=>{n.r(t),n.d(t,{Callable:()=>r});const r=class{constructor(){let e=function(...t){return e._call(...t)};return Object.setPrototypeOf(e,new.target.prototype)}_call(...e){throw Error("Must implement _call method in subclass")}}},"./src/utils/hub.js":
/*!**************************!*\
  !*** ./src/utils/hub.js ***!
  \**************************/(e,t,n)=>{n.r(t),n.d(t,{getFile:()=>d,getModelFile:()=>p,getModelJSON:()=>h});var r=n(/*! fs */"?7a2c"),s=n(/*! path */"?a42a"),i=n(/*! ../env.js */"./src/env.js"),o=n(/*! ./core.js */"./src/utils/core.js");class a{_CONTENT_TYPE_MAP={txt:"text/plain",html:"text/html",css:"text/css",js:"text/javascript",json:"application/json",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif"};constructor(e){if(this.filePath=e,this.headers=new Headers,this.exists=r.existsSync(e),this.exists){this.status=200,this.statusText="OK";let t=r.statSync(e);this.headers.set("content-length",t.size.toString()),this.updateContentType();let n=this;this.body=new ReadableStream({start(e){n.arrayBuffer().then((t=>{e.enqueue(new Uint8Array(t)),e.close()}))}})}else this.status=404,this.statusText="Not Found",this.body=null}updateContentType(){const e=this.filePath.toString().split(".").pop().toLowerCase();this.headers.set("content-type",this._CONTENT_TYPE_MAP[e]??"application/octet-stream")}clone(){let e=new a(this.filePath);return e.exists=this.exists,e.status=this.status,e.statusText=this.statusText,e.headers=new Headers(this.headers),e}async arrayBuffer(){return(await r.promises.readFile(this.filePath)).buffer}async blob(){const e=await r.promises.readFile(this.filePath);return new Blob([e],{type:this.headers.get("content-type")})}async text(){return await r.promises.readFile(this.filePath,"utf8")}async json(){return JSON.parse(await this.text())}}function l(e,t=null,n=null){let r;try{r=new URL(e)}catch(e){return!1}return!(t&&!t.includes(r.protocol))&&!(n&&!n.includes(r.hostname))}async function d(e){if(i.env.useFS&&!l(e,["http:","https:","blob:"]))return new a(e);if("undefined"!=typeof process&&"node"===process?.release?.name){const t=!!process.env?.TESTING_REMOTELY,n=i.env.version,r=new Headers;r.set("User-Agent",`transformers.js/${n}; is_ci/${t};`);if(l(e,["http:","https:"],["huggingface.co","hf.co"])){const e=process.env?.HF_TOKEN??process.env?.HF_ACCESS_TOKEN;e&&r.set("Authorization",`Bearer ${e}`)}return fetch(e,{headers:r})}return fetch(e)}const u={400:"Bad request error occurred while trying to load file",401:"Unauthorized access to file",403:"Forbidden access to file",404:"Could not locate file",408:"Request timeout error occurred while trying to load file",500:"Internal server error error occurred while trying to load file",502:"Bad gateway error occurred while trying to load file",503:"Service unavailable error occurred while trying to load file",504:"Gateway timeout error occurred while trying to load file"};class c{constructor(e){this.path=e}async match(e){let t=s.join(this.path,e),n=new a(t);return n.exists?n:void 0}async put(e,t){const n=Buffer.from(await t.arrayBuffer());let i=s.join(this.path,e);try{await r.promises.mkdir(s.dirname(i),{recursive:!0}),await r.promises.writeFile(i,n)}catch(e){console.warn("An error occurred while writing the file to cache:",e)}}}async function p(e,t,n=!0,r={}){if(!i.env.allowLocalModels){if(r.local_files_only)throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");if(!i.env.allowRemoteModels)throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.")}let s;if((0,o.dispatchCallback)(r.progress_callback,{status:"initiate",name:e,file:t}),!s&&i.env.useBrowserCache){if("undefined"==typeof caches)throw Error("Browser cache is not available in this environment.");try{s=await caches.open("transformers-cache")}catch(e){console.warn("An error occurred while opening the browser cache:",e)}}if(!s&&i.env.useFSCache&&(s=new c(r.cache_dir??i.env.cacheDir)),!s&&i.env.useCustomCache){if(!i.env.customCache)throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");if(!i.env.customCache.match||!i.env.customCache.put)throw new Error("`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache");s=i.env.customCache}const a=r.revision??"main";let p,h,f=m(e,t),g=m(i.env.localModelPath,f),_=m(i.env.remoteHost,i.env.remotePathTemplate.replaceAll("{model}",e).replaceAll("{revision}",encodeURIComponent(a)),t),w="main"===a?f:m(e,a,t),b=s instanceof c?w:_,y=!1;s&&(h=await async function(e,...t){for(let n of t)try{let t=await e.match(n);if(t)return t}catch(e){continue}}(s,g,b));const v=void 0!==h;if(void 0===h){if(i.env.allowLocalModels){if(l(f,["http:","https:"])){if(r.local_files_only)throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${f}.`);if(!i.env.allowRemoteModels)throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${f}.`)}else try{h=await d(g),p=g}catch(e){console.warn(`Unable to load from local path "${g}": "${e}"`)}}if(void 0===h||404===h.status){if(r.local_files_only||!i.env.allowRemoteModels){if(n)throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${g}".`);return null}if(h=await d(_),200!==h.status)return function(e,t,n){if(!n)return null;const r=u[e]??`Error (${e}) occurred while trying to load file`;throw Error(`${r}: "${t}".`)}(h.status,_,n);p=b}y=s&&"undefined"!=typeof Response&&h instanceof Response&&200===h.status}(0,o.dispatchCallback)(r.progress_callback,{status:"download",name:e,file:t});const x={status:"progress",name:e,file:t};let M;return r.progress_callback?v&&"undefined"!=typeof navigator&&/firefox/i.test(navigator.userAgent)?(M=new Uint8Array(await h.arrayBuffer()),(0,o.dispatchCallback)(r.progress_callback,{...x,progress:100,loaded:M.length,total:M.length})):M=await async function(e,t){const n=e.headers.get("Content-Length");null===n&&console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");let r=parseInt(n??"0"),s=new Uint8Array(r),i=0;const o=e.body.getReader();async function a(){const{done:e,value:n}=await o.read();if(e)return;let l=i+n.length;if(l>r){r=l;let e=new Uint8Array(r);e.set(s),s=e}s.set(n,i),i=l;return t({progress:i/r*100,loaded:i,total:r}),a()}return await a(),s}(h,(e=>{(0,o.dispatchCallback)(r.progress_callback,{...x,...e})})):M=new Uint8Array(await h.arrayBuffer()),y&&p&&void 0===await s.match(p)&&await s.put(p,new Response(M,{headers:h.headers})).catch((e=>{console.warn(`Unable to add response to browser cache: ${e}.`)})),(0,o.dispatchCallback)(r.progress_callback,{status:"done",name:e,file:t}),M}async function h(e,t,n=!0,r={}){let s=await p(e,t,n,r);if(null===s)return{};let i=new TextDecoder("utf-8").decode(s);return JSON.parse(i)}function m(...e){return(e=e.map(((t,n)=>(n&&(t=t.replace(new RegExp("^/"),"")),n!==e.length-1&&(t=t.replace(new RegExp("/$"),"")),t)))).join("/")}},"./src/utils/image.js":
/*!****************************!*\
  !*** ./src/utils/image.js ***!
  \****************************/(e,t,n)=>{n.r(t),n.d(t,{RawImage:()=>m});var r=n(/*! ./hub.js */"./src/utils/hub.js"),s=n(/*! ../env.js */"./src/env.js"),i=n(/*! ./tensor.js */"./src/utils/tensor.js"),o=n(/*! sharp */"?2b25");const a="undefined"!=typeof self,l=a&&"DedicatedWorkerGlobalScope"===self.constructor.name;let d,u,c;if(a)d=(e,t)=>{if(!self.OffscreenCanvas)throw new Error("OffscreenCanvas not supported by this browser.");return new self.OffscreenCanvas(e,t)},c=self.createImageBitmap,u=self.ImageData;else{if(!o)throw new Error("Unable to load image processing library.");c=async e=>{const t=(await e.metadata()).channels,{data:n,info:r}=await e.rotate().raw().toBuffer({resolveWithObject:!0}),s=new m(new Uint8ClampedArray(n),r.width,r.height,r.channels);return void 0!==t&&t!==r.channels&&s.convert(t),s}}const p={0:"nearest",1:"lanczos",2:"bilinear",3:"bicubic",4:"box",5:"hamming"},h=new Map([["png","image/png"],["jpg","image/jpeg"],["jpeg","image/jpeg"],["gif","image/gif"]]);class m{constructor(e,t,n,r){this.data=e,this.width=t,this.height=n,this.channels=r}get size(){return[this.width,this.height]}static async read(e){if(e instanceof m)return e;if("string"==typeof e||e instanceof URL)return await this.fromURL(e);throw new Error("Unsupported input type: "+typeof e)}static fromCanvas(e){if(!a)throw new Error("fromCanvas() is only supported in browser environments.");const t=e.getContext("2d").getImageData(0,0,e.width,e.height).data;return new m(t,e.width,e.height,4)}static async fromURL(e){const t=await(0,r.getFile)(e);if(200!==t.status)throw new Error(`Unable to read image from "${e}" (${t.status} ${t.statusText})`);const n=await t.blob();return this.fromBlob(n)}static async fromBlob(e){if(a){const t=await c(e),n=d(t.width,t.height).getContext("2d");return n.drawImage(t,0,0),new this(n.getImageData(0,0,t.width,t.height).data,t.width,t.height,4)}{const t=o(await e.arrayBuffer());return await c(t)}}static fromTensor(e,t="CHW"){if(3!==e.dims.length)throw new Error(`Tensor should have 3 dimensions, but has ${e.dims.length} dimensions.`);if("CHW"===t)e=e.transpose(1,2,0);else if("HWC"!==t)throw new Error(`Unsupported channel format: ${t}`);if(!(e.data instanceof Uint8ClampedArray||e.data instanceof Uint8Array))throw new Error(`Unsupported tensor type: ${e.type}`);switch(e.dims[2]){case 1:case 2:case 3:case 4:return new m(e.data,e.dims[1],e.dims[0],e.dims[2]);default:throw new Error(`Unsupported number of channels: ${e.dims[2]}`)}}grayscale(){if(1===this.channels)return this;const e=new Uint8ClampedArray(this.width*this.height*1);switch(this.channels){case 3:case 4:for(let t=0,n=0;t<this.data.length;t+=this.channels){const r=this.data[t],s=this.data[t+1],i=this.data[t+2];e[n++]=Math.round(.2989*r+.587*s+.114*i)}break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(e,this.width,this.height,1)}rgb(){if(3===this.channels)return this;const e=new Uint8ClampedArray(this.width*this.height*3);switch(this.channels){case 1:for(let t=0,n=0;t<this.data.length;++t)e[n++]=this.data[t],e[n++]=this.data[t],e[n++]=this.data[t];break;case 4:for(let t=0,n=0;t<this.data.length;t+=4)e[n++]=this.data[t],e[n++]=this.data[t+1],e[n++]=this.data[t+2];break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(e,this.width,this.height,3)}rgba(){if(4===this.channels)return this;const e=new Uint8ClampedArray(this.width*this.height*4);switch(this.channels){case 1:for(let t=0,n=0;t<this.data.length;++t)e[n++]=this.data[t],e[n++]=this.data[t],e[n++]=this.data[t],e[n++]=255;break;case 3:for(let t=0,n=0;t<this.data.length;t+=3)e[n++]=this.data[t],e[n++]=this.data[t+1],e[n++]=this.data[t+2],e[n++]=255;break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(e,this.width,this.height,4)}async resize(e,t,{resample:n=2}={}){let r=p[n]??n;if(a){const n=this.channels,r=this.toCanvas(),s=d(e,t).getContext("2d");s.drawImage(r,0,0,e,t);return new m(s.getImageData(0,0,e,t).data,e,t,4).convert(n)}{let n=this.toSharp();switch(r){case"box":case"hamming":"box"!==r&&"hamming"!==r||(console.warn(`Resampling method ${r} is not yet supported. Using bilinear instead.`),r="bilinear");case"nearest":case"bilinear":case"bicubic":n=n.affine([e/this.width,0,0,t/this.height],{interpolator:r});break;case"lanczos":n=n.resize({width:e,height:t,fit:"fill",kernel:"lanczos3"});break;default:throw new Error(`Resampling method ${r} is not supported.`)}return await c(n)}}async pad([e,t,n,r]){if(e=Math.max(e,0),t=Math.max(t,0),n=Math.max(n,0),r=Math.max(r,0),0===e&&0===t&&0===n&&0===r)return this;if(a){const s=this.channels,i=this.toCanvas(),o=this.width+e+t,a=this.height+n+r,l=d(o,a).getContext("2d");l.drawImage(i,0,0,this.width,this.height,e,n,o,a);return new m(l.getImageData(0,0,o,a).data,o,a,4).convert(s)}{const s=this.toSharp().extend({left:e,right:t,top:n,bottom:r});return await c(s)}}async crop([e,t,n,r]){if(e=Math.max(e,0),t=Math.max(t,0),n=Math.min(n,this.width-1),r=Math.min(r,this.height-1),0===e&&0===t&&n===this.width-1&&r===this.height-1)return this;const s=n-e+1,i=r-t+1;if(a){const n=this.channels,r=this.toCanvas(),o=d(s,i).getContext("2d");o.drawImage(r,e,t,s,i,0,0,s,i);return new m(o.getImageData(0,0,s,i).data,s,i,4).convert(n)}{const n=this.toSharp().extract({left:e,top:t,width:s,height:i});return await c(n)}}async center_crop(e,t){if(this.width===e&&this.height===t)return this;const n=(this.width-e)/2,r=(this.height-t)/2;if(a){const s=this.channels,i=this.toCanvas(),o=d(e,t).getContext("2d");let a=0,l=0,u=0,c=0;n>=0?a=n:u=-n,r>=0?l=r:c=-r,o.drawImage(i,a,l,e,t,u,c,e,t);return new m(o.getImageData(0,0,e,t).data,e,t,4).convert(s)}{let s=this.toSharp();if(n>=0&&r>=0)s=s.extract({left:Math.floor(n),top:Math.floor(r),width:e,height:t});else if(n<=0&&r<=0){const i=Math.floor(-r),o=Math.floor(-n);s=s.extend({top:i,left:o,right:e-this.width-o,bottom:t-this.height-i})}else{let i=[0,0],o=0;r<0?(i[0]=Math.floor(-r),i[1]=t-this.height-i[0]):o=Math.floor(r);let a=[0,0],l=0;n<0?(a[0]=Math.floor(-n),a[1]=e-this.width-a[0]):l=Math.floor(n),s=s.extend({top:i[0],bottom:i[1],left:a[0],right:a[1]}).extract({left:l,top:o,width:e,height:t})}return await c(s)}}async toBlob(e="image/png",t=1){if(!a)throw new Error("toBlob() is only supported in browser environments.");const n=this.toCanvas();return await n.convertToBlob({type:e,quality:t})}toTensor(e="CHW"){let t=new i.Tensor("uint8",new Uint8Array(this.data),[this.height,this.width,this.channels]);if("HWC"===e);else{if("CHW"!==e)throw new Error(`Unsupported channel format: ${e}`);t=t.permute(2,0,1)}return t}toCanvas(){if(!a)throw new Error("toCanvas() is only supported in browser environments.");const e=this.clone().rgba(),t=d(e.width,e.height),n=new u(e.data,e.width,e.height);return t.getContext("2d").putImageData(n,0,0),t}_update(e,t,n,r=null){return this.data=e,this.width=t,this.height=n,null!==r&&(this.channels=r),this}clone(){return new m(this.data.slice(),this.width,this.height,this.channels)}convert(e){if(this.channels===e)return this;switch(e){case 1:this.grayscale();break;case 3:this.rgb();break;case 4:this.rgba();break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this}async save(e){if(!a){if(s.env.useFS){const t=this.toSharp();return await t.toFile(e)}throw new Error("Unable to save the image because filesystem is disabled in this environment.")}{if(l)throw new Error("Unable to save an image from a Web Worker.");const t=e.split(".").pop().toLowerCase(),n=h.get(t)??"image/png",r=await this.toBlob(n),s=URL.createObjectURL(r),i=document.createElement("a");i.href=s,i.download=e,i.click(),i.remove()}}toSharp(){if(a)throw new Error("toSharp() is only supported in server-side environments.");return o(this.data,{raw:{width:this.width,height:this.height,channels:this.channels}})}}},"./src/utils/maths.js":
/*!****************************!*\
  !*** ./src/utils/maths.js ***!
  \****************************/(e,t,n)=>{function r(e,[t,n,r],[s,i],o="bilinear",a=!1){const l=i/r,d=s/n,u=new e.constructor(s*i*t),c=n*r,p=s*i;for(let o=0;o<s;++o)for(let s=0;s<i;++s){const a=o*i+s,h=(s+.5)/l-.5,m=(o+.5)/d-.5;let f=Math.floor(h),g=Math.floor(m);const _=Math.min(f+1,r-1),w=Math.min(g+1,n-1);f=Math.max(f,0),g=Math.max(g,0);const b=h-f,y=m-g,v=(1-b)*(1-y),x=b*(1-y),M=(1-b)*y,T=b*y,k=g*r,$=w*r,S=k+f,C=k+_,P=$+f,E=$+_;for(let n=0;n<t;++n){const t=n*c;u[n*p+a]=v*e[t+S]+x*e[t+C]+M*e[t+P]+T*e[t+E]}}return u}function s(e,t,n){const r=new Array(n.length),s=new Array(n.length);for(let e=n.length-1,i=1;e>=0;--e)s[e]=i,r[e]=t[n[e]],i*=r[e];const i=n.map(((e,t)=>s[n.indexOf(t)])),o=new e.constructor(e.length);for(let n=0;n<e.length;++n){let r=0;for(let e=t.length-1,s=n;e>=0;--e)r+=s%t[e]*i[e],s=Math.floor(s/t[e]);o[r]=e[n]}return[o,r]}function i(e){const t=c(e)[0],n=e.map((e=>Math.exp(e-t))),r=n.reduce(((e,t)=>e+t),0);return n.map((e=>e/r))}function o(e){return i(e).map((e=>Math.log(e)))}function a(e,t){let n=0;for(let r=0;r<e.length;++r)n+=e[r]*t[r];return n}function l(e,t){return a(e,t)/(d(e)*d(t))}function d(e){return Math.sqrt(e.reduce(((e,t)=>e+t*t),0))}function u(e){if(0===e.length)throw Error("Array must not be empty");let t=e[0],n=0;for(let r=1;r<e.length;++r)e[r]<t&&(t=e[r],n=r);return[t,n]}function c(e){if(0===e.length)throw Error("Array must not be empty");let t=e[0],n=0;for(let r=1;r<e.length;++r)e[r]>t&&(t=e[r],n=r);return[Number(t),n]}function p(e){return e>0&&0==(e&e-1)}n.r(t),n.d(t,{FFT:()=>f,bankers_round:()=>w,cos_sim:()=>l,dot:()=>a,dynamic_time_warping:()=>b,interpolate_data:()=>r,log_softmax:()=>o,magnitude:()=>d,max:()=>c,medianFilter:()=>g,min:()=>u,permute_data:()=>s,round:()=>_,softmax:()=>i});class h{constructor(e){if(this.size=0|e,this.size<=1||!p(this.size))throw new Error("FFT size must be a power of two larger than 1");this._csize=e<<1,this.table=new Float64Array(2*this.size);for(let e=0;e<this.table.length;e+=2){const t=Math.PI*e/this.size;this.table[e]=Math.cos(t),this.table[e+1]=-Math.sin(t)}let t=0;for(let e=1;this.size>e;e<<=1)++t;this._width=t%2==0?t-1:t,this._bitrev=new Int32Array(1<<this._width);for(let e=0;e<this._bitrev.length;++e){this._bitrev[e]=0;for(let t=0;t<this._width;t+=2){const n=this._width-t-2;this._bitrev[e]|=(e>>>t&3)<<n}}}createComplexArray(){return new Float64Array(this._csize)}fromComplexArray(e,t){const n=t||new Array(e.length>>>1);for(let t=0;t<e.length;t+=2)n[t>>>1]=e[t];return n}toComplexArray(e,t){const n=t||this.createComplexArray();for(let t=0;t<n.length;t+=2)n[t]=e[t>>>1],n[t+1]=0;return n}transform(e,t){if(e===t)throw new Error("Input and output buffers must be different");this._transform4(e,t,1)}realTransform(e,t){if(e===t)throw new Error("Input and output buffers must be different");this._realTransform4(e,t,1)}inverseTransform(e,t){if(e===t)throw new Error("Input and output buffers must be different");this._transform4(e,t,-1);for(let t=0;t<e.length;++t)e[t]/=this.size}_transform4(e,t,n){const r=this._csize;let s,i,o=1<<this._width,a=r/o<<1;const l=this._bitrev;if(4===a)for(s=0,i=0;s<r;s+=a,++i){const n=l[i];this._singleTransform2(t,e,s,n,o)}else for(s=0,i=0;s<r;s+=a,++i){const r=l[i];this._singleTransform4(t,e,s,r,o,n)}const d=this.table;for(o>>=2;o>=2;o>>=2){a=r/o<<1;const t=a>>>2;for(s=0;s<r;s+=a){const r=s+t-1;for(let i=s,a=0;i<r;i+=2,a+=o){const r=i,s=r+t,o=s+t,l=o+t,u=e[r],c=e[r+1],p=e[s],h=e[s+1],m=e[o],f=e[o+1],g=e[l],_=e[l+1],w=d[a],b=n*d[a+1],y=p*w-h*b,v=p*b+h*w,x=d[2*a],M=n*d[2*a+1],T=m*x-f*M,k=m*M+f*x,$=d[3*a],S=n*d[3*a+1],C=g*$-_*S,P=g*S+_*$,E=u+T,F=c+k,A=u-T,I=c-k,z=y+C,B=v+P,O=n*(y-C),L=n*(v-P);e[r]=E+z,e[r+1]=F+B,e[s]=A+L,e[s+1]=I-O,e[o]=E-z,e[o+1]=F-B,e[l]=A-L,e[l+1]=I+O}}}}_singleTransform2(e,t,n,r,s){const i=e[r],o=e[r+1],a=e[r+s],l=e[r+s+1];t[n]=i+a,t[n+1]=o+l,t[n+2]=i-a,t[n+3]=o-l}_singleTransform4(e,t,n,r,s,i){const o=2*s,a=3*s,l=e[r],d=e[r+1],u=e[r+s],c=e[r+s+1],p=e[r+o],h=e[r+o+1],m=e[r+a],f=e[r+a+1],g=l+p,_=d+h,w=l-p,b=d-h,y=u+m,v=c+f,x=i*(u-m),M=i*(c-f);t[n]=g+y,t[n+1]=_+v,t[n+2]=w+M,t[n+3]=b-x,t[n+4]=g-y,t[n+5]=_-v,t[n+6]=w-M,t[n+7]=b+x}_realTransform4(e,t,n){const r=this._csize;let s,i,o=1<<this._width,a=r/o<<1;const l=this._bitrev;if(4===a)for(s=0,i=0;s<r;s+=a,++i){const n=l[i];this._singleRealTransform2(t,e,s,n>>>1,o>>>1)}else for(s=0,i=0;s<r;s+=a,++i){const r=l[i];this._singleRealTransform4(t,e,s,r>>>1,o>>>1,n)}const d=this.table;for(o>>=2;o>=2;o>>=2){a=r/o<<1;const t=a>>>1,i=t>>>1,l=i>>>1;for(s=0;s<r;s+=a)for(let r=0,a=0;r<=l;r+=2,a+=o){const o=s+r,u=o+i,c=u+i,p=c+i,h=e[o],m=e[o+1],f=e[u],g=e[u+1],_=e[c],w=e[c+1],b=e[p],y=e[p+1],v=h,x=m,M=d[a],T=n*d[a+1],k=f*M-g*T,$=f*T+g*M,S=d[2*a],C=n*d[2*a+1],P=_*S-w*C,E=_*C+w*S,F=d[3*a],A=n*d[3*a+1],I=b*F-y*A,z=b*A+y*F,B=v+P,O=x+E,L=v-P,D=x-E,R=k+I,N=$+z,V=n*(k-I),j=n*($-z);if(e[o]=B+R,e[o+1]=O+N,e[u]=L+j,e[u+1]=D-V,0===r){e[c]=B-R,e[c+1]=O-N;continue}if(r===l)continue;const q=s+i-r,G=s+t-r;e[q]=L-n*j,e[q+1]=-D-n*V,e[G]=B-n*R,e[G+1]=n*N-O}}const u=r>>>1;for(let t=2;t<u;t+=2)e[r-t]=e[t],e[r-t+1]=-e[t+1]}_singleRealTransform2(e,t,n,r,s){const i=e[r],o=e[r+s];t[n]=i+o,t[n+1]=0,t[n+2]=i-o,t[n+3]=0}_singleRealTransform4(e,t,n,r,s,i){const o=2*s,a=3*s,l=e[r],d=e[r+s],u=e[r+o],c=e[r+a],p=l+u,h=l-u,m=d+c,f=i*(d-c);t[n]=p+m,t[n+1]=0,t[n+2]=h,t[n+3]=-f,t[n+4]=p-m,t[n+5]=0,t[n+6]=h,t[n+7]=f}}class m{constructor(e){const t=2*(e-1),n=2*(2*e-1),r=2**Math.ceil(Math.log2(n));this.bufferSize=r,this._a=t;const s=new Float64Array(n),i=new Float64Array(r);this._chirpBuffer=new Float64Array(r),this._buffer1=new Float64Array(r),this._buffer2=new Float64Array(r),this._outBuffer1=new Float64Array(r),this._outBuffer2=new Float64Array(r);const o=-2*Math.PI/e,a=Math.cos(o),l=Math.sin(o);for(let t=0;t<n>>1;++t){const n=(t+1-e)**2/2,r=Math.sqrt(a**2+l**2)**n,o=n*Math.atan2(l,a),d=2*t;s[d]=r*Math.cos(o),s[d+1]=r*Math.sin(o),i[d]=s[d],i[d+1]=-s[d+1]}this._slicedChirpBuffer=s.subarray(t,n),this._f=new h(r>>1),this._f.transform(this._chirpBuffer,i)}_transform(e,t,n){const r=this._buffer1,s=this._buffer2,i=this._outBuffer1,o=this._outBuffer2,a=this._chirpBuffer,l=this._slicedChirpBuffer,d=this._a;if(n)for(let e=0;e<l.length;e+=2){const n=e+1,s=t[e>>1];r[e]=s*l[e],r[n]=s*l[n]}else for(let e=0;e<l.length;e+=2){const n=e+1;r[e]=t[e]*l[e]-t[n]*l[n],r[n]=t[e]*l[n]+t[n]*l[e]}this._f.transform(i,r);for(let e=0;e<a.length;e+=2){const t=e+1;s[e]=i[e]*a[e]-i[t]*a[t],s[t]=i[e]*a[t]+i[t]*a[e]}this._f.inverseTransform(o,s);for(let t=0;t<o.length;t+=2){const n=o[t+d],r=o[t+d+1],s=l[t],i=l[t+1];e[t]=n*s-r*i,e[t+1]=n*i+r*s}}transform(e,t){this._transform(e,t,!1)}realTransform(e,t){this._transform(e,t,!0)}}class f{constructor(e){this.fft_length=e,this.isPowerOfTwo=p(e),this.isPowerOfTwo?(this.fft=new h(e),this.outputBufferSize=2*e):(this.fft=new m(e),this.outputBufferSize=this.fft.bufferSize)}realTransform(e,t){this.fft.realTransform(e,t)}transform(e,t){this.fft.transform(e,t)}}function g(e,t){if(t%2==0||t<=0)throw new Error("Window size must be a positive odd number");const n=new e.constructor(e.length),r=new e.constructor(t),s=Math.floor(t/2);for(let t=0;t<e.length;++t){let i=0;for(let n=-s;n<=s;++n){let s=t+n;s<0?s=Math.abs(s):s>=e.length&&(s=2*(e.length-1)-s),r[i++]=e[s]}r.sort(),n[t]=r[s]}return n}function _(e,t){const n=Math.pow(10,t);return Math.round(e*n)/n}function w(e){const t=Math.round(e);return Math.abs(e)%1==.5?t%2==0?t:t-1:t}function b(e){const t=e.length,n=e[0].length,r=[t+1,n+1],s=Array.from({length:r[0]},(()=>Array(r[1]).fill(1/0)));s[0][0]=0;const i=Array.from({length:r[0]},(()=>Array(r[1]).fill(-1)));for(let t=1;t<r[1];++t)for(let n=1;n<r[0];++n){const r=s[n-1][t-1],o=s[n-1][t],a=s[n][t-1];let l,d;r<o&&r<a?(l=r,d=0):o<r&&o<a?(l=o,d=1):(l=a,d=2),s[n][t]=e[n-1][t-1]+l,i[n][t]=d}for(let e=0;e<r[1];++e)i[0][e]=2;for(let e=0;e<r[0];++e)i[e][0]=1;let o=t,a=n,l=[],d=[];for(;o>0||a>0;)switch(l.push(o-1),d.push(a-1),i[o][a]){case 0:--o,--a;break;case 1:--o;break;case 2:--a;break;default:throw new Error(`Internal error in dynamic time warping. Unexpected trace[${o}, ${a}]. Please file a bug report.`)}return l.reverse(),d.reverse(),[l,d]}},"./src/utils/tensor.js":
/*!*****************************!*\
  !*** ./src/utils/tensor.js ***!
  \*****************************/(e,t,n)=>{n.r(t),n.d(t,{Tensor:()=>a,cat:()=>b,full:()=>T,full_like:()=>k,interpolate:()=>d,interpolate_4d:()=>u,layer_norm:()=>f,matmul:()=>c,mean:()=>x,mean_pooling:()=>m,ones:()=>$,ones_like:()=>S,permute:()=>l,quantize_embeddings:()=>E,rfft:()=>p,stack:()=>y,std_mean:()=>v,topk:()=>h,zeros:()=>C,zeros_like:()=>P});var r=n(/*! ./maths.js */"./src/utils/maths.js"),s=n(/*! ../backends/onnx.js */"./src/backends/onnx.js"),i=n(/*! ../ops/registry.js */"./src/ops/registry.js");const o=Object.freeze({float32:Float32Array,float16:Uint16Array,float64:Float64Array,string:Array,int8:Int8Array,uint8:Uint8Array,int16:Int16Array,uint16:Uint16Array,int32:Int32Array,uint32:Uint32Array,int64:BigInt64Array,uint64:BigUint64Array,bool:Uint8Array});class a{get dims(){return this.ort_tensor.dims}set dims(e){this.ort_tensor.dims=e}get type(){return this.ort_tensor.type}get data(){return this.ort_tensor.data}get size(){return this.ort_tensor.size}get location(){return this.ort_tensor.location}ort_tensor;constructor(...e){return(0,s.isONNXTensor)(e[0])?this.ort_tensor=e[0]:this.ort_tensor=new s.Tensor(e[0],e[1],e[2]),new Proxy(this,{get:(e,t)=>{if("string"==typeof t){let n=Number(t);if(Number.isInteger(n))return e._getitem(n)}return e[t]},set:(e,t,n)=>e[t]=n})}dispose(){this.ort_tensor.dispose()}*[Symbol.iterator](){const[e,...t]=this.dims;if(t.length>0){const n=t.reduce(((e,t)=>e*t));for(let r=0;r<e;++r)yield this._subarray(r,n,t)}else yield*this.data}_getitem(e){const[t,...n]=this.dims;if(e=w(e,t),n.length>0){const t=n.reduce(((e,t)=>e*t));return this._subarray(e,t,n)}return new a(this.type,[this.data[e]],n)}indexOf(e){const t=this.data;for(let n=0;n<t.length;++n)if(t[n]==e)return n;return-1}_subarray(e,t,n){const r=e*t,s=(e+1)*t,i="subarray"in this.data?this.data.subarray(r,s):this.data.slice(r,s);return new a(this.type,i,n)}item(){const e=this.data;if(1!==e.length)throw new Error(`a Tensor with ${e.length} elements cannot be converted to Scalar`);return e[0]}tolist(){return function(e,t){const n=e.length,r=t.reduce(((e,t)=>e*t));if(n!==r)throw Error(`cannot reshape array of size ${n} into shape (${t})`);let s=e;for(let e=t.length-1;e>=0;e--)s=s.reduce(((n,r)=>{let s=n[n.length-1];return s.length<t[e]?s.push(r):n.push([r]),n}),[[]]);return s[0]}(this.data,this.dims)}sigmoid(){return this.clone().sigmoid_()}sigmoid_(){const e=this.data;for(let t=0;t<e.length;++t)e[t]=1/(1+Math.exp(-e[t]));return this}mul(e){return this.clone().mul_(e)}mul_(e){const t=this.data;for(let n=0;n<t.length;++n)t[n]*=e;return this}div(e){return this.clone().div_(e)}div_(e){const t=this.data;for(let n=0;n<t.length;++n)t[n]/=e;return this}add(e){return this.clone().add_(e)}add_(e){const t=this.data;for(let n=0;n<t.length;++n)t[n]+=e;return this}clone(){return new a(this.type,this.data.slice(),this.dims.slice())}slice(...e){const t=[],n=[];for(let r=0;r<this.dims.length;++r){let s=e[r];if(null==s)n.push([0,this.dims[r]]),t.push(this.dims[r]);else if("number"==typeof s)s=w(s,this.dims[r],r),n.push([s,s+1]);else{if(!Array.isArray(s)||2!==s.length)throw new Error(`Invalid slice: ${s}`);{let[e,i]=s;if(e=null===e?0:w(e,this.dims[r],r,!1),i=null===i?this.dims[r]:w(i,this.dims[r],r,!1),e>i)throw new Error(`Invalid slice: ${s}`);const o=[Math.max(e,0),Math.min(i,this.dims[r])];n.push(o),t.push(o[1]-o[0])}}}const r=n.map((([e,t])=>t-e)),s=r.reduce(((e,t)=>e*t)),i=this.data,o=new i.constructor(s),l=this.stride();for(let e=0;e<s;++e){let t=0;for(let s=r.length-1,i=e;s>=0;--s){const e=r[s];t+=(i%e+n[s][0])*l[s],i=Math.floor(i/e)}o[e]=i[t]}return new a(this.type,o,t)}permute(...e){return l(this,e)}transpose(...e){return this.permute(...e)}sum(e=null,t=!1){return this.norm(1,e,t)}norm(e="fro",t=null,n=!1){if("fro"===e)e=2;else if("string"==typeof e)throw Error(`Unsupported norm: ${e}`);const r=this.data;if(null===t){let t=r.reduce(((t,n)=>t+n**e),0)**(1/e);return new a(this.type,[t],[])}t=w(t,this.dims.length);const s=this.dims.slice();s[t]=1;const i=new r.constructor(r.length/this.dims[t]);for(let n=0;n<r.length;++n){let o=0;for(let e=this.dims.length-1,r=n,i=1;e>=0;--e){const n=this.dims[e];if(e!==t){o+=r%n*i,i*=s[e]}r=Math.floor(r/n)}i[o]+=r[n]**e}if(1!==e)for(let t=0;t<i.length;++t)i[t]=i[t]**(1/e);return n||s.splice(t,1),new a(this.type,i,s)}normalize_(e=2,t=1){t=w(t,this.dims.length);const n=this.norm(e,t,!0),r=this.data,s=n.data;for(let e=0;e<r.length;++e){let n=0;for(let r=this.dims.length-1,s=e,i=1;r>=0;--r){const e=this.dims[r];if(r!==t){n+=s%e*i,i*=this.dims[r]}s=Math.floor(s/e)}r[e]/=s[n]}return this}normalize(e=2,t=1){return this.clone().normalize_(e,t)}stride(){return function(e){const t=new Array(e.length);for(let n=e.length-1,r=1;n>=0;--n)t[n]=r,r*=e[n];return t}(this.dims)}squeeze(e=null){return new a(this.type,this.data,g(this.dims,e))}squeeze_(e=null){return this.dims=g(this.dims,e),this}unsqueeze(e=null){return new a(this.type,this.data,_(this.dims,e))}unsqueeze_(e=null){return this.dims=_(this.dims,e),this}flatten_(e=0,t=-1){t=(t+this.dims.length)%this.dims.length;let n=this.dims.slice(0,e),r=this.dims.slice(e,t+1),s=this.dims.slice(t+1);return this.dims=[...n,r.reduce(((e,t)=>e*t),1),...s],this}flatten(e=0,t=-1){return this.clone().flatten_(e,t)}view(...e){let t=-1;for(let n=0;n<e.length;++n)if(-1===e[n]){if(-1!==t)throw new Error("Only one dimension can be inferred");t=n}const n=this.data;if(-1!==t){const r=e.reduce(((e,n,r)=>r!==t?e*n:e),1);e[t]=n.length/r}return new a(this.type,n,e)}neg_(){const e=this.data;for(let t=0;t<e.length;++t)e[t]=-e[t];return this}neg(){return this.clone().neg_()}clamp_(e,t){const n=this.data;for(let r=0;r<n.length;++r)n[r]=Math.min(Math.max(n[r],e),t);return this}clamp(e,t){return this.clone().clamp_(e,t)}round_(){const e=this.data;for(let t=0;t<e.length;++t)e[t]=Math.round(e[t]);return this}round(){return this.clone().round_()}mean(e=null,t=!1){return x(this,e,t)}to(e){if(this.type===e)return this;if(!o.hasOwnProperty(e))throw new Error(`Unsupported type: ${e}`);return new a(e,o[e].from(this.data),this.dims)}}function l(e,t){const[n,s]=(0,r.permute_data)(e.data,e.dims,t);return new a(e.type,n,s)}function d(e,[t,n],s="bilinear",i=!1){const o=e.dims.at(-3)??1,l=e.dims.at(-2),d=e.dims.at(-1);let u=(0,r.interpolate_data)(e.data,[o,l,d],[t,n],s,i);return new a(e.type,u,[o,t,n])}async function u(e,{size:t=null,mode:n="bilinear"}={}){if(4!==e.dims.length)throw new Error("`interpolate_4d` currently only supports 4D input.");if(!t)throw new Error("`interpolate_4d` requires a `size` argument.");let r,s;if(2===t.length)r=[...e.dims.slice(0,2),...t];else if(3===t.length)r=[e.dims[0],...t];else{if(4!==t.length)throw new Error("`size` must be of length 2, 3, or 4.");r=t}if("bilinear"===n)s=await i.TensorOpRegistry.bilinear_interpolate_4d;else{if("bicubic"!==n)throw new Error(`Unsupported mode: ${n}`);s=await i.TensorOpRegistry.bicubic_interpolate_4d}const o=new a("int64",new BigInt64Array(r.map(BigInt)),[r.length]);return await s({x:e,s:o})}async function c(e,t){const n=await i.TensorOpRegistry.matmul;return await n({a:e,b:t})}async function p(e,t){const n=await i.TensorOpRegistry.rfft;return await n({x:e,a:t})}async function h(e,t){const n=await i.TensorOpRegistry.top_k;return t=null===t?e.dims.at(-1):Math.min(t,e.dims.at(-1)),await n({x:e,k:new a("int64",[BigInt(t)],[1])})}function m(e,t){const n=e.data,r=t.data,s=[e.dims[0],e.dims[2]],i=new n.constructor(s[0]*s[1]),[o,l,d]=e.dims;let u=0;for(let e=0;e<o;++e){const t=e*d*l;for(let s=0;s<d;++s){let o=0,a=0;const c=e*l,p=t+s;for(let e=0;e<l;++e){const t=Number(r[c+e]);a+=t,o+=n[p+e*d]*t}const h=o/a;i[u++]=h}}return new a(e.type,i,s)}function f(e,t,{eps:n=1e-5}={}){if(2!==e.dims.length)throw new Error("`layer_norm` currently only supports 2D input.");const[r,s]=e.dims;if(1!==t.length&&t[0]!==s)throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");const[i,o]=v(e,1,0,!0),l=i.data,d=o.data,u=e.data,c=new u.constructor(u.length);for(let e=0;e<r;++e){const t=e*s;for(let r=0;r<s;++r){const s=t+r;c[s]=(u[s]-d[e])/(l[e]+n)}}return new a(e.type,c,e.dims)}function g(e,t){return e=e.slice(),null===t?e=e.filter((e=>1!==e)):"number"==typeof t?1===e[t]&&e.splice(t,1):Array.isArray(t)&&(e=e.filter(((e,n)=>1!==e||!t.includes(n)))),e}function _(e,t){return t=w(t,e.length+1),(e=e.slice()).splice(t,0,1),e}function w(e,t,n=null,r=!0){if(r&&(e<-t||e>=t))throw new Error(`IndexError: index ${e} is out of bounds for dimension${null===n?"":" "+n} with size ${t}`);return e<0&&(e=(e%t+t)%t),e}function b(e,t=0){t=w(t,e[0].dims.length);const n=e[0].dims.slice();n[t]=e.reduce(((e,n)=>e+n.dims[t]),0);const r=n.reduce(((e,t)=>e*t),1),s=new e[0].data.constructor(r),i=e[0].type;if(0===t){let t=0;for(const n of e){const e=n.data;s.set(e,t),t+=e.length}}else{let r=0;for(let i=0;i<e.length;++i){const{data:o,dims:a}=e[i];for(let e=0;e<o.length;++e){let i=0;for(let s=a.length-1,o=e,l=1;s>=0;--s){const e=a[s];let d=o%e;s===t&&(d+=r),i+=d*l,l*=n[s],o=Math.floor(o/e)}s[i]=o[e]}r+=a[t]}}return new a(i,s,n)}function y(e,t=0){return b(e.map((e=>e.unsqueeze(t))),t)}function v(e,t=null,n=1,r=!1){const s=e.data,i=e.dims;if(null===t){const t=s.reduce(((e,t)=>e+t),0)/s.length,r=Math.sqrt(s.reduce(((e,n)=>e+(n-t)**2),0)/(s.length-n)),i=new a(e.type,[t],[]);return[new a(e.type,[r],[]),i]}const o=x(e,t=w(t,i.length),r),l=o.data,d=i.slice();d[t]=1;const u=new s.constructor(s.length/i[t]);for(let e=0;e<s.length;++e){let n=0;for(let r=i.length-1,s=e,o=1;r>=0;--r){const e=i[r];if(r!==t){n+=s%e*o,o*=d[r]}s=Math.floor(s/e)}u[n]+=(s[e]-l[n])**2}for(let e=0;e<u.length;++e)u[e]=Math.sqrt(u[e]/(i[t]-n));r||d.splice(t,1);return[new a(e.type,u,d),o]}function x(e,t=null,n=!1){const r=e.data;if(null===t){const t=r.reduce(((e,t)=>e+t),0);return new a(e.type,[t/r.length],[])}const s=e.dims;t=w(t,s.length);const i=s.slice();i[t]=1;const o=new r.constructor(r.length/s[t]);for(let e=0;e<r.length;++e){let n=0;for(let r=s.length-1,o=e,a=1;r>=0;--r){const e=s[r];if(r!==t){n+=o%e*a,a*=i[r]}o=Math.floor(o/e)}o[n]+=r[e]}if(1!==s[t])for(let e=0;e<o.length;++e)o[e]=o[e]/s[t];return n||i.splice(t,1),new a(e.type,o,i)}function M(e,t,n,r){const s=e.reduce(((e,t)=>e*t),1);return new a(n,new r(s).fill(t),e)}function T(e,t){let n,r;if("number"==typeof t)n="float32",r=Float32Array;else{if("bigint"!=typeof t)throw new Error("Unsupported data type: "+typeof t);n="int64",r=BigInt64Array}return M(e,t,n,r)}function k(e,t){return T(e.dims,t)}function $(e){return M(e,1n,"int64",BigInt64Array)}function S(e){return $(e.dims)}function C(e){return M(e,0n,"int64",BigInt64Array)}function P(e){return C(e.dims)}function E(e,t){if(2!==e.dims.length)throw new Error("The tensor must have 2 dimensions");if(e.dims.at(-1)%8!=0)throw new Error("The last dimension of the tensor must be a multiple of 8");if(!["binary","ubinary"].includes(t))throw new Error("The precision must be either 'binary' or 'ubinary'");const n="binary"===t,r=n?"int8":"uint8",s=n?Int8Array:Uint8Array,i=e.data,o=new s(i.length/8);for(let e=0;e<i.length;++e){const t=i[e]>0?1:0,r=Math.floor(e/8),s=e%8;o[r]|=t<<7-s,n&&0===s&&(o[r]-=128)}return new a(r,o,[e.dims[0],e.dims[1]/8])}}},r={};function s(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={exports:{}};return n[e](i,i.exports,s),i.exports}t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var i=Object.create(null);s.r(i);var o={};e=e||[null,t({}),t([]),t(t)];for(var a=2&r&&n;"object"==typeof a&&!~e.indexOf(a);a=t(a))Object.getOwnPropertyNames(a).forEach((e=>o[e]=()=>n[e]));return o.default=()=>n,s.d(i,o),i},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};(()=>{
/*!*****************************!*\
  !*** ./src/transformers.js ***!
  \*****************************/
s.r(i),s.d(i,{ASTFeatureExtractor:()=>o.ASTFeatureExtractor,ASTForAudioClassification:()=>n.ASTForAudioClassification,ASTModel:()=>n.ASTModel,ASTPreTrainedModel:()=>n.ASTPreTrainedModel,AlbertForMaskedLM:()=>n.AlbertForMaskedLM,AlbertForQuestionAnswering:()=>n.AlbertForQuestionAnswering,AlbertForSequenceClassification:()=>n.AlbertForSequenceClassification,AlbertModel:()=>n.AlbertModel,AlbertPreTrainedModel:()=>n.AlbertPreTrainedModel,AlbertTokenizer:()=>r.AlbertTokenizer,AudioClassificationPipeline:()=>t.AudioClassificationPipeline,AutoConfig:()=>a.AutoConfig,AutoModel:()=>n.AutoModel,AutoModelForAudioClassification:()=>n.AutoModelForAudioClassification,AutoModelForAudioFrameClassification:()=>n.AutoModelForAudioFrameClassification,AutoModelForCTC:()=>n.AutoModelForCTC,AutoModelForCausalLM:()=>n.AutoModelForCausalLM,AutoModelForDepthEstimation:()=>n.AutoModelForDepthEstimation,AutoModelForDocumentQuestionAnswering:()=>n.AutoModelForDocumentQuestionAnswering,AutoModelForImageClassification:()=>n.AutoModelForImageClassification,AutoModelForImageFeatureExtraction:()=>n.AutoModelForImageFeatureExtraction,AutoModelForImageMatting:()=>n.AutoModelForImageMatting,AutoModelForImageSegmentation:()=>n.AutoModelForImageSegmentation,AutoModelForImageToImage:()=>n.AutoModelForImageToImage,AutoModelForMaskGeneration:()=>n.AutoModelForMaskGeneration,AutoModelForMaskedLM:()=>n.AutoModelForMaskedLM,AutoModelForObjectDetection:()=>n.AutoModelForObjectDetection,AutoModelForQuestionAnswering:()=>n.AutoModelForQuestionAnswering,AutoModelForSemanticSegmentation:()=>n.AutoModelForSemanticSegmentation,AutoModelForSeq2SeqLM:()=>n.AutoModelForSeq2SeqLM,AutoModelForSequenceClassification:()=>n.AutoModelForSequenceClassification,AutoModelForSpeechSeq2Seq:()=>n.AutoModelForSpeechSeq2Seq,AutoModelForTextToSpectrogram:()=>n.AutoModelForTextToSpectrogram,AutoModelForTextToWaveform:()=>n.AutoModelForTextToWaveform,AutoModelForTokenClassification:()=>n.AutoModelForTokenClassification,AutoModelForVision2Seq:()=>n.AutoModelForVision2Seq,AutoModelForXVector:()=>n.AutoModelForXVector,AutoModelForZeroShotObjectDetection:()=>n.AutoModelForZeroShotObjectDetection,AutoProcessor:()=>o.AutoProcessor,AutoTokenizer:()=>r.AutoTokenizer,AutomaticSpeechRecognitionPipeline:()=>t.AutomaticSpeechRecognitionPipeline,BartForConditionalGeneration:()=>n.BartForConditionalGeneration,BartForSequenceClassification:()=>n.BartForSequenceClassification,BartModel:()=>n.BartModel,BartPretrainedModel:()=>n.BartPretrainedModel,BartTokenizer:()=>r.BartTokenizer,BaseModelOutput:()=>n.BaseModelOutput,BaseStreamer:()=>p.BaseStreamer,BeitFeatureExtractor:()=>o.BeitFeatureExtractor,BeitForImageClassification:()=>n.BeitForImageClassification,BeitModel:()=>n.BeitModel,BeitPreTrainedModel:()=>n.BeitPreTrainedModel,BertForMaskedLM:()=>n.BertForMaskedLM,BertForQuestionAnswering:()=>n.BertForQuestionAnswering,BertForSequenceClassification:()=>n.BertForSequenceClassification,BertForTokenClassification:()=>n.BertForTokenClassification,BertModel:()=>n.BertModel,BertPreTrainedModel:()=>n.BertPreTrainedModel,BertTokenizer:()=>r.BertTokenizer,BitImageProcessor:()=>o.BitImageProcessor,BlenderbotForConditionalGeneration:()=>n.BlenderbotForConditionalGeneration,BlenderbotModel:()=>n.BlenderbotModel,BlenderbotPreTrainedModel:()=>n.BlenderbotPreTrainedModel,BlenderbotSmallForConditionalGeneration:()=>n.BlenderbotSmallForConditionalGeneration,BlenderbotSmallModel:()=>n.BlenderbotSmallModel,BlenderbotSmallPreTrainedModel:()=>n.BlenderbotSmallPreTrainedModel,BlenderbotSmallTokenizer:()=>r.BlenderbotSmallTokenizer,BlenderbotTokenizer:()=>r.BlenderbotTokenizer,BloomForCausalLM:()=>n.BloomForCausalLM,BloomModel:()=>n.BloomModel,BloomPreTrainedModel:()=>n.BloomPreTrainedModel,BloomTokenizer:()=>r.BloomTokenizer,CLIPFeatureExtractor:()=>o.CLIPFeatureExtractor,CLIPImageProcessor:()=>o.CLIPImageProcessor,CLIPModel:()=>n.CLIPModel,CLIPPreTrainedModel:()=>n.CLIPPreTrainedModel,CLIPSegForImageSegmentation:()=>n.CLIPSegForImageSegmentation,CLIPSegModel:()=>n.CLIPSegModel,CLIPSegPreTrainedModel:()=>n.CLIPSegPreTrainedModel,CLIPTextModelWithProjection:()=>n.CLIPTextModelWithProjection,CLIPTokenizer:()=>r.CLIPTokenizer,CLIPVisionModelWithProjection:()=>n.CLIPVisionModelWithProjection,CamembertForMaskedLM:()=>n.CamembertForMaskedLM,CamembertForQuestionAnswering:()=>n.CamembertForQuestionAnswering,CamembertForSequenceClassification:()=>n.CamembertForSequenceClassification,CamembertForTokenClassification:()=>n.CamembertForTokenClassification,CamembertModel:()=>n.CamembertModel,CamembertPreTrainedModel:()=>n.CamembertPreTrainedModel,CamembertTokenizer:()=>r.CamembertTokenizer,CausalLMOutput:()=>n.CausalLMOutput,CausalLMOutputWithPast:()=>n.CausalLMOutputWithPast,ChineseCLIPFeatureExtractor:()=>o.ChineseCLIPFeatureExtractor,ChineseCLIPModel:()=>n.ChineseCLIPModel,ChineseCLIPPreTrainedModel:()=>n.ChineseCLIPPreTrainedModel,ClapAudioModelWithProjection:()=>n.ClapAudioModelWithProjection,ClapFeatureExtractor:()=>o.ClapFeatureExtractor,ClapModel:()=>n.ClapModel,ClapPreTrainedModel:()=>n.ClapPreTrainedModel,ClapTextModelWithProjection:()=>n.ClapTextModelWithProjection,CodeGenForCausalLM:()=>n.CodeGenForCausalLM,CodeGenModel:()=>n.CodeGenModel,CodeGenPreTrainedModel:()=>n.CodeGenPreTrainedModel,CodeGenTokenizer:()=>r.CodeGenTokenizer,CodeLlamaTokenizer:()=>r.CodeLlamaTokenizer,CohereForCausalLM:()=>n.CohereForCausalLM,CohereModel:()=>n.CohereModel,CoherePreTrainedModel:()=>n.CoherePreTrainedModel,CohereTokenizer:()=>r.CohereTokenizer,ConvBertForMaskedLM:()=>n.ConvBertForMaskedLM,ConvBertForQuestionAnswering:()=>n.ConvBertForQuestionAnswering,ConvBertForSequenceClassification:()=>n.ConvBertForSequenceClassification,ConvBertForTokenClassification:()=>n.ConvBertForTokenClassification,ConvBertModel:()=>n.ConvBertModel,ConvBertPreTrainedModel:()=>n.ConvBertPreTrainedModel,ConvBertTokenizer:()=>r.ConvBertTokenizer,ConvNextFeatureExtractor:()=>o.ConvNextFeatureExtractor,ConvNextForImageClassification:()=>n.ConvNextForImageClassification,ConvNextImageProcessor:()=>o.ConvNextImageProcessor,ConvNextModel:()=>n.ConvNextModel,ConvNextPreTrainedModel:()=>n.ConvNextPreTrainedModel,ConvNextV2ForImageClassification:()=>n.ConvNextV2ForImageClassification,ConvNextV2Model:()=>n.ConvNextV2Model,ConvNextV2PreTrainedModel:()=>n.ConvNextV2PreTrainedModel,DPTFeatureExtractor:()=>o.DPTFeatureExtractor,DPTForDepthEstimation:()=>n.DPTForDepthEstimation,DPTImageProcessor:()=>o.DPTImageProcessor,DPTModel:()=>n.DPTModel,DPTPreTrainedModel:()=>n.DPTPreTrainedModel,DebertaForMaskedLM:()=>n.DebertaForMaskedLM,DebertaForQuestionAnswering:()=>n.DebertaForQuestionAnswering,DebertaForSequenceClassification:()=>n.DebertaForSequenceClassification,DebertaForTokenClassification:()=>n.DebertaForTokenClassification,DebertaModel:()=>n.DebertaModel,DebertaPreTrainedModel:()=>n.DebertaPreTrainedModel,DebertaTokenizer:()=>r.DebertaTokenizer,DebertaV2ForMaskedLM:()=>n.DebertaV2ForMaskedLM,DebertaV2ForQuestionAnswering:()=>n.DebertaV2ForQuestionAnswering,DebertaV2ForSequenceClassification:()=>n.DebertaV2ForSequenceClassification,DebertaV2ForTokenClassification:()=>n.DebertaV2ForTokenClassification,DebertaV2Model:()=>n.DebertaV2Model,DebertaV2PreTrainedModel:()=>n.DebertaV2PreTrainedModel,DebertaV2Tokenizer:()=>r.DebertaV2Tokenizer,DeiTFeatureExtractor:()=>o.DeiTFeatureExtractor,DeiTForImageClassification:()=>n.DeiTForImageClassification,DeiTModel:()=>n.DeiTModel,DeiTPreTrainedModel:()=>n.DeiTPreTrainedModel,DepthAnythingForDepthEstimation:()=>n.DepthAnythingForDepthEstimation,DepthAnythingPreTrainedModel:()=>n.DepthAnythingPreTrainedModel,DepthEstimationPipeline:()=>t.DepthEstimationPipeline,DetrFeatureExtractor:()=>o.DetrFeatureExtractor,DetrForObjectDetection:()=>n.DetrForObjectDetection,DetrForSegmentation:()=>n.DetrForSegmentation,DetrModel:()=>n.DetrModel,DetrObjectDetectionOutput:()=>n.DetrObjectDetectionOutput,DetrPreTrainedModel:()=>n.DetrPreTrainedModel,DetrSegmentationOutput:()=>n.DetrSegmentationOutput,Dinov2ForImageClassification:()=>n.Dinov2ForImageClassification,Dinov2Model:()=>n.Dinov2Model,Dinov2PreTrainedModel:()=>n.Dinov2PreTrainedModel,DistilBertForMaskedLM:()=>n.DistilBertForMaskedLM,DistilBertForQuestionAnswering:()=>n.DistilBertForQuestionAnswering,DistilBertForSequenceClassification:()=>n.DistilBertForSequenceClassification,DistilBertForTokenClassification:()=>n.DistilBertForTokenClassification,DistilBertModel:()=>n.DistilBertModel,DistilBertPreTrainedModel:()=>n.DistilBertPreTrainedModel,DistilBertTokenizer:()=>r.DistilBertTokenizer,DocumentQuestionAnsweringPipeline:()=>t.DocumentQuestionAnsweringPipeline,DonutFeatureExtractor:()=>o.DonutFeatureExtractor,DonutSwinModel:()=>n.DonutSwinModel,DonutSwinPreTrainedModel:()=>n.DonutSwinPreTrainedModel,EfficientNetForImageClassification:()=>n.EfficientNetForImageClassification,EfficientNetImageProcessor:()=>o.EfficientNetImageProcessor,EfficientNetModel:()=>n.EfficientNetModel,EfficientNetPreTrainedModel:()=>n.EfficientNetPreTrainedModel,ElectraForMaskedLM:()=>n.ElectraForMaskedLM,ElectraForQuestionAnswering:()=>n.ElectraForQuestionAnswering,ElectraForSequenceClassification:()=>n.ElectraForSequenceClassification,ElectraForTokenClassification:()=>n.ElectraForTokenClassification,ElectraModel:()=>n.ElectraModel,ElectraPreTrainedModel:()=>n.ElectraPreTrainedModel,ElectraTokenizer:()=>r.ElectraTokenizer,EosTokenCriteria:()=>h.EosTokenCriteria,EsmForMaskedLM:()=>n.EsmForMaskedLM,EsmForSequenceClassification:()=>n.EsmForSequenceClassification,EsmForTokenClassification:()=>n.EsmForTokenClassification,EsmModel:()=>n.EsmModel,EsmPreTrainedModel:()=>n.EsmPreTrainedModel,EsmTokenizer:()=>r.EsmTokenizer,FFT:()=>c.FFT,FalconForCausalLM:()=>n.FalconForCausalLM,FalconModel:()=>n.FalconModel,FalconPreTrainedModel:()=>n.FalconPreTrainedModel,FalconTokenizer:()=>r.FalconTokenizer,FastViTForImageClassification:()=>n.FastViTForImageClassification,FastViTModel:()=>n.FastViTModel,FastViTPreTrainedModel:()=>n.FastViTPreTrainedModel,FeatureExtractionPipeline:()=>t.FeatureExtractionPipeline,FeatureExtractor:()=>o.FeatureExtractor,FillMaskPipeline:()=>t.FillMaskPipeline,Florence2ForConditionalGeneration:()=>n.Florence2ForConditionalGeneration,Florence2PreTrainedModel:()=>n.Florence2PreTrainedModel,Florence2Processor:()=>o.Florence2Processor,GLPNFeatureExtractor:()=>o.GLPNFeatureExtractor,GLPNForDepthEstimation:()=>n.GLPNForDepthEstimation,GLPNModel:()=>n.GLPNModel,GLPNPreTrainedModel:()=>n.GLPNPreTrainedModel,GPT2LMHeadModel:()=>n.GPT2LMHeadModel,GPT2Model:()=>n.GPT2Model,GPT2PreTrainedModel:()=>n.GPT2PreTrainedModel,GPT2Tokenizer:()=>r.GPT2Tokenizer,GPTBigCodeForCausalLM:()=>n.GPTBigCodeForCausalLM,GPTBigCodeModel:()=>n.GPTBigCodeModel,GPTBigCodePreTrainedModel:()=>n.GPTBigCodePreTrainedModel,GPTJForCausalLM:()=>n.GPTJForCausalLM,GPTJModel:()=>n.GPTJModel,GPTJPreTrainedModel:()=>n.GPTJPreTrainedModel,GPTNeoForCausalLM:()=>n.GPTNeoForCausalLM,GPTNeoModel:()=>n.GPTNeoModel,GPTNeoPreTrainedModel:()=>n.GPTNeoPreTrainedModel,GPTNeoXForCausalLM:()=>n.GPTNeoXForCausalLM,GPTNeoXModel:()=>n.GPTNeoXModel,GPTNeoXPreTrainedModel:()=>n.GPTNeoXPreTrainedModel,GPTNeoXTokenizer:()=>r.GPTNeoXTokenizer,GemmaForCausalLM:()=>n.GemmaForCausalLM,GemmaModel:()=>n.GemmaModel,GemmaPreTrainedModel:()=>n.GemmaPreTrainedModel,GemmaTokenizer:()=>r.GemmaTokenizer,Grok1Tokenizer:()=>r.Grok1Tokenizer,HerbertTokenizer:()=>r.HerbertTokenizer,HubertForCTC:()=>n.HubertForCTC,HubertForSequenceClassification:()=>n.HubertForSequenceClassification,HubertModel:()=>n.HubertModel,HubertPreTrainedModel:()=>n.HubertPreTrainedModel,ImageClassificationPipeline:()=>t.ImageClassificationPipeline,ImageFeatureExtractionPipeline:()=>t.ImageFeatureExtractionPipeline,ImageFeatureExtractor:()=>o.ImageFeatureExtractor,ImageMattingOutput:()=>n.ImageMattingOutput,ImageSegmentationPipeline:()=>t.ImageSegmentationPipeline,ImageToImagePipeline:()=>t.ImageToImagePipeline,ImageToTextPipeline:()=>t.ImageToTextPipeline,InterruptableStoppingCriteria:()=>h.InterruptableStoppingCriteria,LlamaForCausalLM:()=>n.LlamaForCausalLM,LlamaModel:()=>n.LlamaModel,LlamaPreTrainedModel:()=>n.LlamaPreTrainedModel,LlamaTokenizer:()=>r.LlamaTokenizer,LlavaForConditionalGeneration:()=>n.LlavaForConditionalGeneration,LlavaPreTrainedModel:()=>n.LlavaPreTrainedModel,LongT5ForConditionalGeneration:()=>n.LongT5ForConditionalGeneration,LongT5Model:()=>n.LongT5Model,LongT5PreTrainedModel:()=>n.LongT5PreTrainedModel,M2M100ForConditionalGeneration:()=>n.M2M100ForConditionalGeneration,M2M100Model:()=>n.M2M100Model,M2M100PreTrainedModel:()=>n.M2M100PreTrainedModel,M2M100Tokenizer:()=>r.M2M100Tokenizer,MBart50Tokenizer:()=>r.MBart50Tokenizer,MBartForCausalLM:()=>n.MBartForCausalLM,MBartForConditionalGeneration:()=>n.MBartForConditionalGeneration,MBartForSequenceClassification:()=>n.MBartForSequenceClassification,MBartModel:()=>n.MBartModel,MBartPreTrainedModel:()=>n.MBartPreTrainedModel,MBartTokenizer:()=>r.MBartTokenizer,MPNetForMaskedLM:()=>n.MPNetForMaskedLM,MPNetForQuestionAnswering:()=>n.MPNetForQuestionAnswering,MPNetForSequenceClassification:()=>n.MPNetForSequenceClassification,MPNetForTokenClassification:()=>n.MPNetForTokenClassification,MPNetModel:()=>n.MPNetModel,MPNetPreTrainedModel:()=>n.MPNetPreTrainedModel,MPNetTokenizer:()=>r.MPNetTokenizer,MT5ForConditionalGeneration:()=>n.MT5ForConditionalGeneration,MT5Model:()=>n.MT5Model,MT5PreTrainedModel:()=>n.MT5PreTrainedModel,MarianMTModel:()=>n.MarianMTModel,MarianModel:()=>n.MarianModel,MarianPreTrainedModel:()=>n.MarianPreTrainedModel,MarianTokenizer:()=>r.MarianTokenizer,MaskedLMOutput:()=>n.MaskedLMOutput,MaxLengthCriteria:()=>h.MaxLengthCriteria,MistralForCausalLM:()=>n.MistralForCausalLM,MistralModel:()=>n.MistralModel,MistralPreTrainedModel:()=>n.MistralPreTrainedModel,MobileBertForMaskedLM:()=>n.MobileBertForMaskedLM,MobileBertForQuestionAnswering:()=>n.MobileBertForQuestionAnswering,MobileBertForSequenceClassification:()=>n.MobileBertForSequenceClassification,MobileBertModel:()=>n.MobileBertModel,MobileBertPreTrainedModel:()=>n.MobileBertPreTrainedModel,MobileBertTokenizer:()=>r.MobileBertTokenizer,MobileNetV1FeatureExtractor:()=>o.MobileNetV1FeatureExtractor,MobileNetV1ForImageClassification:()=>n.MobileNetV1ForImageClassification,MobileNetV1Model:()=>n.MobileNetV1Model,MobileNetV1PreTrainedModel:()=>n.MobileNetV1PreTrainedModel,MobileNetV2FeatureExtractor:()=>o.MobileNetV2FeatureExtractor,MobileNetV2ForImageClassification:()=>n.MobileNetV2ForImageClassification,MobileNetV2Model:()=>n.MobileNetV2Model,MobileNetV2PreTrainedModel:()=>n.MobileNetV2PreTrainedModel,MobileNetV3FeatureExtractor:()=>o.MobileNetV3FeatureExtractor,MobileNetV3ForImageClassification:()=>n.MobileNetV3ForImageClassification,MobileNetV3Model:()=>n.MobileNetV3Model,MobileNetV3PreTrainedModel:()=>n.MobileNetV3PreTrainedModel,MobileNetV4FeatureExtractor:()=>o.MobileNetV4FeatureExtractor,MobileNetV4ForImageClassification:()=>n.MobileNetV4ForImageClassification,MobileNetV4Model:()=>n.MobileNetV4Model,MobileNetV4PreTrainedModel:()=>n.MobileNetV4PreTrainedModel,MobileViTFeatureExtractor:()=>o.MobileViTFeatureExtractor,MobileViTForImageClassification:()=>n.MobileViTForImageClassification,MobileViTImageProcessor:()=>o.MobileViTImageProcessor,MobileViTModel:()=>n.MobileViTModel,MobileViTPreTrainedModel:()=>n.MobileViTPreTrainedModel,MobileViTV2ForImageClassification:()=>n.MobileViTV2ForImageClassification,MobileViTV2Model:()=>n.MobileViTV2Model,MobileViTV2PreTrainedModel:()=>n.MobileViTV2PreTrainedModel,ModelOutput:()=>n.ModelOutput,Moondream1ForConditionalGeneration:()=>n.Moondream1ForConditionalGeneration,MptForCausalLM:()=>n.MptForCausalLM,MptModel:()=>n.MptModel,MptPreTrainedModel:()=>n.MptPreTrainedModel,MusicgenForCausalLM:()=>n.MusicgenForCausalLM,MusicgenForConditionalGeneration:()=>n.MusicgenForConditionalGeneration,MusicgenModel:()=>n.MusicgenModel,MusicgenPreTrainedModel:()=>n.MusicgenPreTrainedModel,NllbTokenizer:()=>r.NllbTokenizer,NomicBertModel:()=>n.NomicBertModel,NomicBertPreTrainedModel:()=>n.NomicBertPreTrainedModel,NougatImageProcessor:()=>o.NougatImageProcessor,NougatTokenizer:()=>r.NougatTokenizer,OPTForCausalLM:()=>n.OPTForCausalLM,OPTModel:()=>n.OPTModel,OPTPreTrainedModel:()=>n.OPTPreTrainedModel,ObjectDetectionPipeline:()=>t.ObjectDetectionPipeline,OpenELMForCausalLM:()=>n.OpenELMForCausalLM,OpenELMModel:()=>n.OpenELMModel,OpenELMPreTrainedModel:()=>n.OpenELMPreTrainedModel,OwlViTFeatureExtractor:()=>o.OwlViTFeatureExtractor,OwlViTForObjectDetection:()=>n.OwlViTForObjectDetection,OwlViTModel:()=>n.OwlViTModel,OwlViTPreTrainedModel:()=>n.OwlViTPreTrainedModel,OwlViTProcessor:()=>o.OwlViTProcessor,Owlv2ForObjectDetection:()=>n.Owlv2ForObjectDetection,Owlv2ImageProcessor:()=>o.Owlv2ImageProcessor,Owlv2Model:()=>n.Owlv2Model,Owlv2PreTrainedModel:()=>n.Owlv2PreTrainedModel,Phi3ForCausalLM:()=>n.Phi3ForCausalLM,Phi3Model:()=>n.Phi3Model,Phi3PreTrainedModel:()=>n.Phi3PreTrainedModel,PhiForCausalLM:()=>n.PhiForCausalLM,PhiModel:()=>n.PhiModel,PhiPreTrainedModel:()=>n.PhiPreTrainedModel,Pipeline:()=>t.Pipeline,PreTrainedModel:()=>n.PreTrainedModel,PreTrainedTokenizer:()=>r.PreTrainedTokenizer,PretrainedConfig:()=>a.PretrainedConfig,PretrainedMixin:()=>n.PretrainedMixin,Processor:()=>o.Processor,QuestionAnsweringModelOutput:()=>n.QuestionAnsweringModelOutput,QuestionAnsweringPipeline:()=>t.QuestionAnsweringPipeline,Qwen2ForCausalLM:()=>n.Qwen2ForCausalLM,Qwen2Model:()=>n.Qwen2Model,Qwen2PreTrainedModel:()=>n.Qwen2PreTrainedModel,Qwen2Tokenizer:()=>r.Qwen2Tokenizer,RTDetrForObjectDetection:()=>n.RTDetrForObjectDetection,RTDetrImageProcessor:()=>o.RTDetrImageProcessor,RTDetrModel:()=>n.RTDetrModel,RTDetrObjectDetectionOutput:()=>n.RTDetrObjectDetectionOutput,RTDetrPreTrainedModel:()=>n.RTDetrPreTrainedModel,RawImage:()=>d.RawImage,ResNetForImageClassification:()=>n.ResNetForImageClassification,ResNetModel:()=>n.ResNetModel,ResNetPreTrainedModel:()=>n.ResNetPreTrainedModel,RoFormerForMaskedLM:()=>n.RoFormerForMaskedLM,RoFormerForQuestionAnswering:()=>n.RoFormerForQuestionAnswering,RoFormerForSequenceClassification:()=>n.RoFormerForSequenceClassification,RoFormerForTokenClassification:()=>n.RoFormerForTokenClassification,RoFormerModel:()=>n.RoFormerModel,RoFormerPreTrainedModel:()=>n.RoFormerPreTrainedModel,RoFormerTokenizer:()=>r.RoFormerTokenizer,RobertaForMaskedLM:()=>n.RobertaForMaskedLM,RobertaForQuestionAnswering:()=>n.RobertaForQuestionAnswering,RobertaForSequenceClassification:()=>n.RobertaForSequenceClassification,RobertaForTokenClassification:()=>n.RobertaForTokenClassification,RobertaModel:()=>n.RobertaModel,RobertaPreTrainedModel:()=>n.RobertaPreTrainedModel,RobertaTokenizer:()=>r.RobertaTokenizer,SamImageProcessor:()=>o.SamImageProcessor,SamImageSegmentationOutput:()=>n.SamImageSegmentationOutput,SamModel:()=>n.SamModel,SamPreTrainedModel:()=>n.SamPreTrainedModel,SamProcessor:()=>o.SamProcessor,SeamlessM4TFeatureExtractor:()=>o.SeamlessM4TFeatureExtractor,SegformerFeatureExtractor:()=>o.SegformerFeatureExtractor,SegformerForImageClassification:()=>n.SegformerForImageClassification,SegformerForSemanticSegmentation:()=>n.SegformerForSemanticSegmentation,SegformerModel:()=>n.SegformerModel,SegformerPreTrainedModel:()=>n.SegformerPreTrainedModel,Seq2SeqLMOutput:()=>n.Seq2SeqLMOutput,SequenceClassifierOutput:()=>n.SequenceClassifierOutput,SiglipImageProcessor:()=>o.SiglipImageProcessor,SiglipModel:()=>n.SiglipModel,SiglipPreTrainedModel:()=>n.SiglipPreTrainedModel,SiglipTextModel:()=>n.SiglipTextModel,SiglipTokenizer:()=>r.SiglipTokenizer,SiglipVisionModel:()=>n.SiglipVisionModel,SpeechT5FeatureExtractor:()=>o.SpeechT5FeatureExtractor,SpeechT5ForSpeechToText:()=>n.SpeechT5ForSpeechToText,SpeechT5ForTextToSpeech:()=>n.SpeechT5ForTextToSpeech,SpeechT5HifiGan:()=>n.SpeechT5HifiGan,SpeechT5Model:()=>n.SpeechT5Model,SpeechT5PreTrainedModel:()=>n.SpeechT5PreTrainedModel,SpeechT5Processor:()=>o.SpeechT5Processor,SpeechT5Tokenizer:()=>r.SpeechT5Tokenizer,SqueezeBertForMaskedLM:()=>n.SqueezeBertForMaskedLM,SqueezeBertForQuestionAnswering:()=>n.SqueezeBertForQuestionAnswering,SqueezeBertForSequenceClassification:()=>n.SqueezeBertForSequenceClassification,SqueezeBertModel:()=>n.SqueezeBertModel,SqueezeBertPreTrainedModel:()=>n.SqueezeBertPreTrainedModel,SqueezeBertTokenizer:()=>r.SqueezeBertTokenizer,StableLmForCausalLM:()=>n.StableLmForCausalLM,StableLmModel:()=>n.StableLmModel,StableLmPreTrainedModel:()=>n.StableLmPreTrainedModel,Starcoder2ForCausalLM:()=>n.Starcoder2ForCausalLM,Starcoder2Model:()=>n.Starcoder2Model,Starcoder2PreTrainedModel:()=>n.Starcoder2PreTrainedModel,StoppingCriteria:()=>h.StoppingCriteria,StoppingCriteriaList:()=>h.StoppingCriteriaList,SummarizationPipeline:()=>t.SummarizationPipeline,Swin2SRForImageSuperResolution:()=>n.Swin2SRForImageSuperResolution,Swin2SRImageProcessor:()=>o.Swin2SRImageProcessor,Swin2SRModel:()=>n.Swin2SRModel,Swin2SRPreTrainedModel:()=>n.Swin2SRPreTrainedModel,SwinForImageClassification:()=>n.SwinForImageClassification,SwinModel:()=>n.SwinModel,SwinPreTrainedModel:()=>n.SwinPreTrainedModel,T5ForConditionalGeneration:()=>n.T5ForConditionalGeneration,T5Model:()=>n.T5Model,T5PreTrainedModel:()=>n.T5PreTrainedModel,T5Tokenizer:()=>r.T5Tokenizer,TableTransformerForObjectDetection:()=>n.TableTransformerForObjectDetection,TableTransformerModel:()=>n.TableTransformerModel,TableTransformerObjectDetectionOutput:()=>n.TableTransformerObjectDetectionOutput,TableTransformerPreTrainedModel:()=>n.TableTransformerPreTrainedModel,Tensor:()=>u.Tensor,Text2TextGenerationPipeline:()=>t.Text2TextGenerationPipeline,TextClassificationPipeline:()=>t.TextClassificationPipeline,TextGenerationPipeline:()=>t.TextGenerationPipeline,TextStreamer:()=>p.TextStreamer,TextToAudioPipeline:()=>t.TextToAudioPipeline,TokenClassificationPipeline:()=>t.TokenClassificationPipeline,TokenClassifierOutput:()=>n.TokenClassifierOutput,TokenizerModel:()=>r.TokenizerModel,TrOCRForCausalLM:()=>n.TrOCRForCausalLM,TrOCRPreTrainedModel:()=>n.TrOCRPreTrainedModel,TranslationPipeline:()=>t.TranslationPipeline,UniSpeechForCTC:()=>n.UniSpeechForCTC,UniSpeechForSequenceClassification:()=>n.UniSpeechForSequenceClassification,UniSpeechModel:()=>n.UniSpeechModel,UniSpeechPreTrainedModel:()=>n.UniSpeechPreTrainedModel,UniSpeechSatForAudioFrameClassification:()=>n.UniSpeechSatForAudioFrameClassification,UniSpeechSatForCTC:()=>n.UniSpeechSatForCTC,UniSpeechSatForSequenceClassification:()=>n.UniSpeechSatForSequenceClassification,UniSpeechSatModel:()=>n.UniSpeechSatModel,UniSpeechSatPreTrainedModel:()=>n.UniSpeechSatPreTrainedModel,ViTFeatureExtractor:()=>o.ViTFeatureExtractor,ViTForImageClassification:()=>n.ViTForImageClassification,ViTImageProcessor:()=>o.ViTImageProcessor,ViTModel:()=>n.ViTModel,ViTPreTrainedModel:()=>n.ViTPreTrainedModel,VisionEncoderDecoderModel:()=>n.VisionEncoderDecoderModel,VitMatteForImageMatting:()=>n.VitMatteForImageMatting,VitMatteImageProcessor:()=>o.VitMatteImageProcessor,VitMattePreTrainedModel:()=>n.VitMattePreTrainedModel,VitsModel:()=>n.VitsModel,VitsModelOutput:()=>n.VitsModelOutput,VitsPreTrainedModel:()=>n.VitsPreTrainedModel,VitsTokenizer:()=>r.VitsTokenizer,Wav2Vec2BertForCTC:()=>n.Wav2Vec2BertForCTC,Wav2Vec2BertForSequenceClassification:()=>n.Wav2Vec2BertForSequenceClassification,Wav2Vec2BertModel:()=>n.Wav2Vec2BertModel,Wav2Vec2BertPreTrainedModel:()=>n.Wav2Vec2BertPreTrainedModel,Wav2Vec2CTCTokenizer:()=>r.Wav2Vec2CTCTokenizer,Wav2Vec2FeatureExtractor:()=>o.Wav2Vec2FeatureExtractor,Wav2Vec2ForAudioFrameClassification:()=>n.Wav2Vec2ForAudioFrameClassification,Wav2Vec2ForCTC:()=>n.Wav2Vec2ForCTC,Wav2Vec2ForSequenceClassification:()=>n.Wav2Vec2ForSequenceClassification,Wav2Vec2Model:()=>n.Wav2Vec2Model,Wav2Vec2PreTrainedModel:()=>n.Wav2Vec2PreTrainedModel,Wav2Vec2ProcessorWithLM:()=>o.Wav2Vec2ProcessorWithLM,WavLMForAudioFrameClassification:()=>n.WavLMForAudioFrameClassification,WavLMForCTC:()=>n.WavLMForCTC,WavLMForSequenceClassification:()=>n.WavLMForSequenceClassification,WavLMForXVector:()=>n.WavLMForXVector,WavLMModel:()=>n.WavLMModel,WavLMPreTrainedModel:()=>n.WavLMPreTrainedModel,WhisperFeatureExtractor:()=>o.WhisperFeatureExtractor,WhisperForConditionalGeneration:()=>n.WhisperForConditionalGeneration,WhisperModel:()=>n.WhisperModel,WhisperPreTrainedModel:()=>n.WhisperPreTrainedModel,WhisperProcessor:()=>o.WhisperProcessor,WhisperTextStreamer:()=>p.WhisperTextStreamer,WhisperTokenizer:()=>r.WhisperTokenizer,XLMForQuestionAnswering:()=>n.XLMForQuestionAnswering,XLMForSequenceClassification:()=>n.XLMForSequenceClassification,XLMForTokenClassification:()=>n.XLMForTokenClassification,XLMModel:()=>n.XLMModel,XLMPreTrainedModel:()=>n.XLMPreTrainedModel,XLMRobertaForMaskedLM:()=>n.XLMRobertaForMaskedLM,XLMRobertaForQuestionAnswering:()=>n.XLMRobertaForQuestionAnswering,XLMRobertaForSequenceClassification:()=>n.XLMRobertaForSequenceClassification,XLMRobertaForTokenClassification:()=>n.XLMRobertaForTokenClassification,XLMRobertaModel:()=>n.XLMRobertaModel,XLMRobertaPreTrainedModel:()=>n.XLMRobertaPreTrainedModel,XLMRobertaTokenizer:()=>r.XLMRobertaTokenizer,XLMTokenizer:()=>r.XLMTokenizer,XLMWithLMHeadModel:()=>n.XLMWithLMHeadModel,XVectorOutput:()=>n.XVectorOutput,YolosFeatureExtractor:()=>o.YolosFeatureExtractor,YolosForObjectDetection:()=>n.YolosForObjectDetection,YolosModel:()=>n.YolosModel,YolosObjectDetectionOutput:()=>n.YolosObjectDetectionOutput,YolosPreTrainedModel:()=>n.YolosPreTrainedModel,ZeroShotAudioClassificationPipeline:()=>t.ZeroShotAudioClassificationPipeline,ZeroShotClassificationPipeline:()=>t.ZeroShotClassificationPipeline,ZeroShotImageClassificationPipeline:()=>t.ZeroShotImageClassificationPipeline,ZeroShotObjectDetectionPipeline:()=>t.ZeroShotObjectDetectionPipeline,bankers_round:()=>c.bankers_round,cat:()=>u.cat,cos_sim:()=>c.cos_sim,dot:()=>c.dot,dynamic_time_warping:()=>c.dynamic_time_warping,env:()=>e.env,full:()=>u.full,full_like:()=>u.full_like,getKeyValueShapes:()=>a.getKeyValueShapes,hanning:()=>l.hanning,interpolate:()=>u.interpolate,interpolate_4d:()=>u.interpolate_4d,interpolate_data:()=>c.interpolate_data,is_chinese_char:()=>r.is_chinese_char,layer_norm:()=>u.layer_norm,log_softmax:()=>c.log_softmax,magnitude:()=>c.magnitude,matmul:()=>u.matmul,max:()=>c.max,mean:()=>u.mean,mean_pooling:()=>u.mean_pooling,medianFilter:()=>c.medianFilter,mel_filter_bank:()=>l.mel_filter_bank,min:()=>c.min,ones:()=>u.ones,ones_like:()=>u.ones_like,permute:()=>u.permute,permute_data:()=>c.permute_data,pipeline:()=>t.pipeline,quantize_embeddings:()=>u.quantize_embeddings,read_audio:()=>l.read_audio,rfft:()=>u.rfft,round:()=>c.round,softmax:()=>c.softmax,spectrogram:()=>l.spectrogram,stack:()=>u.stack,std_mean:()=>u.std_mean,topk:()=>u.topk,window_function:()=>l.window_function,zeros:()=>u.zeros,zeros_like:()=>u.zeros_like});var e=s(/*! ./env.js */"./src/env.js"),t=s(/*! ./pipelines.js */"./src/pipelines.js"),n=s(/*! ./models.js */"./src/models.js"),r=s(/*! ./tokenizers.js */"./src/tokenizers.js"),o=s(/*! ./processors.js */"./src/processors.js"),a=s(/*! ./configs.js */"./src/configs.js"),l=s(/*! ./utils/audio.js */"./src/utils/audio.js"),d=s(/*! ./utils/image.js */"./src/utils/image.js"),u=s(/*! ./utils/tensor.js */"./src/utils/tensor.js"),c=s(/*! ./utils/maths.js */"./src/utils/maths.js"),p=s(/*! ./generation/streamers.js */"./src/generation/streamers.js"),h=s(/*! ./generation/stopping_criteria.js */"./src/generation/stopping_criteria.js")})();var o=i.ASTFeatureExtractor,a=i.ASTForAudioClassification,l=i.ASTModel,d=i.ASTPreTrainedModel,u=i.AlbertForMaskedLM,c=i.AlbertForQuestionAnswering,p=i.AlbertForSequenceClassification,h=i.AlbertModel,m=i.AlbertPreTrainedModel,f=i.AlbertTokenizer,g=i.AudioClassificationPipeline,_=i.AutoConfig,w=i.AutoModel,b=i.AutoModelForAudioClassification,y=i.AutoModelForAudioFrameClassification,v=i.AutoModelForCTC,x=i.AutoModelForCausalLM,M=i.AutoModelForDepthEstimation,T=i.AutoModelForDocumentQuestionAnswering,k=i.AutoModelForImageClassification,$=i.AutoModelForImageFeatureExtraction,S=i.AutoModelForImageMatting,C=i.AutoModelForImageSegmentation,P=i.AutoModelForImageToImage,E=i.AutoModelForMaskGeneration,F=i.AutoModelForMaskedLM,A=i.AutoModelForObjectDetection,I=i.AutoModelForQuestionAnswering,z=i.AutoModelForSemanticSegmentation,B=i.AutoModelForSeq2SeqLM,O=i.AutoModelForSequenceClassification,L=i.AutoModelForSpeechSeq2Seq,D=i.AutoModelForTextToSpectrogram,R=i.AutoModelForTextToWaveform,N=i.AutoModelForTokenClassification,V=i.AutoModelForVision2Seq,j=i.AutoModelForXVector,q=i.AutoModelForZeroShotObjectDetection,G=i.AutoProcessor,U=i.AutoTokenizer,W=i.AutomaticSpeechRecognitionPipeline,H=i.BartForConditionalGeneration,K=i.BartForSequenceClassification,X=i.BartModel,Q=i.BartPretrainedModel,Y=i.BartTokenizer,Z=i.BaseModelOutput,J=i.BaseStreamer,ee=i.BeitFeatureExtractor,te=i.BeitForImageClassification,ne=i.BeitModel,re=i.BeitPreTrainedModel,se=i.BertForMaskedLM,ie=i.BertForQuestionAnswering,oe=i.BertForSequenceClassification,ae=i.BertForTokenClassification,le=i.BertModel,de=i.BertPreTrainedModel,ue=i.BertTokenizer,ce=i.BitImageProcessor,pe=i.BlenderbotForConditionalGeneration,he=i.BlenderbotModel,me=i.BlenderbotPreTrainedModel,fe=i.BlenderbotSmallForConditionalGeneration,ge=i.BlenderbotSmallModel,_e=i.BlenderbotSmallPreTrainedModel,we=i.BlenderbotSmallTokenizer,be=i.BlenderbotTokenizer,ye=i.BloomForCausalLM,ve=i.BloomModel,xe=i.BloomPreTrainedModel,Me=i.BloomTokenizer,Te=i.CLIPFeatureExtractor,ke=i.CLIPImageProcessor,$e=i.CLIPModel,Se=i.CLIPPreTrainedModel,Ce=i.CLIPSegForImageSegmentation,Pe=i.CLIPSegModel,Ee=i.CLIPSegPreTrainedModel,Fe=i.CLIPTextModelWithProjection,Ae=i.CLIPTokenizer,Ie=i.CLIPVisionModelWithProjection,ze=i.CamembertForMaskedLM,Be=i.CamembertForQuestionAnswering,Oe=i.CamembertForSequenceClassification,Le=i.CamembertForTokenClassification,De=i.CamembertModel,Re=i.CamembertPreTrainedModel,Ne=i.CamembertTokenizer,Ve=i.CausalLMOutput,je=i.CausalLMOutputWithPast,qe=i.ChineseCLIPFeatureExtractor,Ge=i.ChineseCLIPModel,Ue=i.ChineseCLIPPreTrainedModel,We=i.ClapAudioModelWithProjection,He=i.ClapFeatureExtractor,Ke=i.ClapModel,Xe=i.ClapPreTrainedModel,Qe=i.ClapTextModelWithProjection,Ye=i.CodeGenForCausalLM,Ze=i.CodeGenModel,Je=i.CodeGenPreTrainedModel,et=i.CodeGenTokenizer,tt=i.CodeLlamaTokenizer,nt=i.CohereForCausalLM,rt=i.CohereModel,st=i.CoherePreTrainedModel,it=i.CohereTokenizer,ot=i.ConvBertForMaskedLM,at=i.ConvBertForQuestionAnswering,lt=i.ConvBertForSequenceClassification,dt=i.ConvBertForTokenClassification,ut=i.ConvBertModel,ct=i.ConvBertPreTrainedModel,pt=i.ConvBertTokenizer,ht=i.ConvNextFeatureExtractor,mt=i.ConvNextForImageClassification,ft=i.ConvNextImageProcessor,gt=i.ConvNextModel,_t=i.ConvNextPreTrainedModel,wt=i.ConvNextV2ForImageClassification,bt=i.ConvNextV2Model,yt=i.ConvNextV2PreTrainedModel,vt=i.DPTFeatureExtractor,xt=i.DPTForDepthEstimation,Mt=i.DPTImageProcessor,Tt=i.DPTModel,kt=i.DPTPreTrainedModel,$t=i.DebertaForMaskedLM,St=i.DebertaForQuestionAnswering,Ct=i.DebertaForSequenceClassification,Pt=i.DebertaForTokenClassification,Et=i.DebertaModel,Ft=i.DebertaPreTrainedModel,At=i.DebertaTokenizer,It=i.DebertaV2ForMaskedLM,zt=i.DebertaV2ForQuestionAnswering,Bt=i.DebertaV2ForSequenceClassification,Ot=i.DebertaV2ForTokenClassification,Lt=i.DebertaV2Model,Dt=i.DebertaV2PreTrainedModel,Rt=i.DebertaV2Tokenizer,Nt=i.DeiTFeatureExtractor,Vt=i.DeiTForImageClassification,jt=i.DeiTModel,qt=i.DeiTPreTrainedModel,Gt=i.DepthAnythingForDepthEstimation,Ut=i.DepthAnythingPreTrainedModel,Wt=i.DepthEstimationPipeline,Ht=i.DetrFeatureExtractor,Kt=i.DetrForObjectDetection,Xt=i.DetrForSegmentation,Qt=i.DetrModel,Yt=i.DetrObjectDetectionOutput,Zt=i.DetrPreTrainedModel,Jt=i.DetrSegmentationOutput,en=i.Dinov2ForImageClassification,tn=i.Dinov2Model,nn=i.Dinov2PreTrainedModel,rn=i.DistilBertForMaskedLM,sn=i.DistilBertForQuestionAnswering,on=i.DistilBertForSequenceClassification,an=i.DistilBertForTokenClassification,ln=i.DistilBertModel,dn=i.DistilBertPreTrainedModel,un=i.DistilBertTokenizer,cn=i.DocumentQuestionAnsweringPipeline,pn=i.DonutFeatureExtractor,hn=i.DonutSwinModel,mn=i.DonutSwinPreTrainedModel,fn=i.EfficientNetForImageClassification,gn=i.EfficientNetImageProcessor,_n=i.EfficientNetModel,wn=i.EfficientNetPreTrainedModel,bn=i.ElectraForMaskedLM,yn=i.ElectraForQuestionAnswering,vn=i.ElectraForSequenceClassification,xn=i.ElectraForTokenClassification,Mn=i.ElectraModel,Tn=i.ElectraPreTrainedModel,kn=i.ElectraTokenizer,$n=i.EosTokenCriteria,Sn=i.EsmForMaskedLM,Cn=i.EsmForSequenceClassification,Pn=i.EsmForTokenClassification,En=i.EsmModel,Fn=i.EsmPreTrainedModel,An=i.EsmTokenizer,In=i.FFT,zn=i.FalconForCausalLM,Bn=i.FalconModel,On=i.FalconPreTrainedModel,Ln=i.FalconTokenizer,Dn=i.FastViTForImageClassification,Rn=i.FastViTModel,Nn=i.FastViTPreTrainedModel,Vn=i.FeatureExtractionPipeline,jn=i.FeatureExtractor,qn=i.FillMaskPipeline,Gn=i.Florence2ForConditionalGeneration,Un=i.Florence2PreTrainedModel,Wn=i.Florence2Processor,Hn=i.GLPNFeatureExtractor,Kn=i.GLPNForDepthEstimation,Xn=i.GLPNModel,Qn=i.GLPNPreTrainedModel,Yn=i.GPT2LMHeadModel,Zn=i.GPT2Model,Jn=i.GPT2PreTrainedModel,er=i.GPT2Tokenizer,tr=i.GPTBigCodeForCausalLM,nr=i.GPTBigCodeModel,rr=i.GPTBigCodePreTrainedModel,sr=i.GPTJForCausalLM,ir=i.GPTJModel,or=i.GPTJPreTrainedModel,ar=i.GPTNeoForCausalLM,lr=i.GPTNeoModel,dr=i.GPTNeoPreTrainedModel,ur=i.GPTNeoXForCausalLM,cr=i.GPTNeoXModel,pr=i.GPTNeoXPreTrainedModel,hr=i.GPTNeoXTokenizer,mr=i.GemmaForCausalLM,fr=i.GemmaModel,gr=i.GemmaPreTrainedModel,_r=i.GemmaTokenizer,wr=i.Grok1Tokenizer,br=i.HerbertTokenizer,yr=i.HubertForCTC,vr=i.HubertForSequenceClassification,xr=i.HubertModel,Mr=i.HubertPreTrainedModel,Tr=i.ImageClassificationPipeline,kr=i.ImageFeatureExtractionPipeline,$r=i.ImageFeatureExtractor,Sr=i.ImageMattingOutput,Cr=i.ImageSegmentationPipeline,Pr=i.ImageToImagePipeline,Er=i.ImageToTextPipeline,Fr=i.InterruptableStoppingCriteria,Ar=i.LlamaForCausalLM,Ir=i.LlamaModel,zr=i.LlamaPreTrainedModel,Br=i.LlamaTokenizer,Or=i.LlavaForConditionalGeneration,Lr=i.LlavaPreTrainedModel,Dr=i.LongT5ForConditionalGeneration,Rr=i.LongT5Model,Nr=i.LongT5PreTrainedModel,Vr=i.M2M100ForConditionalGeneration,jr=i.M2M100Model,qr=i.M2M100PreTrainedModel,Gr=i.M2M100Tokenizer,Ur=i.MBart50Tokenizer,Wr=i.MBartForCausalLM,Hr=i.MBartForConditionalGeneration,Kr=i.MBartForSequenceClassification,Xr=i.MBartModel,Qr=i.MBartPreTrainedModel,Yr=i.MBartTokenizer,Zr=i.MPNetForMaskedLM,Jr=i.MPNetForQuestionAnswering,es=i.MPNetForSequenceClassification,ts=i.MPNetForTokenClassification,ns=i.MPNetModel,rs=i.MPNetPreTrainedModel,ss=i.MPNetTokenizer,is=i.MT5ForConditionalGeneration,os=i.MT5Model,as=i.MT5PreTrainedModel,ls=i.MarianMTModel,ds=i.MarianModel,us=i.MarianPreTrainedModel,cs=i.MarianTokenizer,ps=i.MaskedLMOutput,hs=i.MaxLengthCriteria,ms=i.MistralForCausalLM,fs=i.MistralModel,gs=i.MistralPreTrainedModel,_s=i.MobileBertForMaskedLM,ws=i.MobileBertForQuestionAnswering,bs=i.MobileBertForSequenceClassification,ys=i.MobileBertModel,vs=i.MobileBertPreTrainedModel,xs=i.MobileBertTokenizer,Ms=i.MobileNetV1FeatureExtractor,Ts=i.MobileNetV1ForImageClassification,ks=i.MobileNetV1Model,$s=i.MobileNetV1PreTrainedModel,Ss=i.MobileNetV2FeatureExtractor,Cs=i.MobileNetV2ForImageClassification,Ps=i.MobileNetV2Model,Es=i.MobileNetV2PreTrainedModel,Fs=i.MobileNetV3FeatureExtractor,As=i.MobileNetV3ForImageClassification,Is=i.MobileNetV3Model,zs=i.MobileNetV3PreTrainedModel,Bs=i.MobileNetV4FeatureExtractor,Os=i.MobileNetV4ForImageClassification,Ls=i.MobileNetV4Model,Ds=i.MobileNetV4PreTrainedModel,Rs=i.MobileViTFeatureExtractor,Ns=i.MobileViTForImageClassification,Vs=i.MobileViTImageProcessor,js=i.MobileViTModel,qs=i.MobileViTPreTrainedModel,Gs=i.MobileViTV2ForImageClassification,Us=i.MobileViTV2Model,Ws=i.MobileViTV2PreTrainedModel,Hs=i.ModelOutput,Ks=i.Moondream1ForConditionalGeneration,Xs=i.MptForCausalLM,Qs=i.MptModel,Ys=i.MptPreTrainedModel,Zs=i.MusicgenForCausalLM,Js=i.MusicgenForConditionalGeneration,ei=i.MusicgenModel,ti=i.MusicgenPreTrainedModel,ni=i.NllbTokenizer,ri=i.NomicBertModel,si=i.NomicBertPreTrainedModel,ii=i.NougatImageProcessor,oi=i.NougatTokenizer,ai=i.OPTForCausalLM,li=i.OPTModel,di=i.OPTPreTrainedModel,ui=i.ObjectDetectionPipeline,ci=i.OpenELMForCausalLM,pi=i.OpenELMModel,hi=i.OpenELMPreTrainedModel,mi=i.OwlViTFeatureExtractor,fi=i.OwlViTForObjectDetection,gi=i.OwlViTModel,_i=i.OwlViTPreTrainedModel,wi=i.OwlViTProcessor,bi=i.Owlv2ForObjectDetection,yi=i.Owlv2ImageProcessor,vi=i.Owlv2Model,xi=i.Owlv2PreTrainedModel,Mi=i.Phi3ForCausalLM,Ti=i.Phi3Model,ki=i.Phi3PreTrainedModel,$i=i.PhiForCausalLM,Si=i.PhiModel,Ci=i.PhiPreTrainedModel,Pi=i.Pipeline,Ei=i.PreTrainedModel,Fi=i.PreTrainedTokenizer,Ai=i.PretrainedConfig,Ii=i.PretrainedMixin,zi=i.Processor,Bi=i.QuestionAnsweringModelOutput,Oi=i.QuestionAnsweringPipeline,Li=i.Qwen2ForCausalLM,Di=i.Qwen2Model,Ri=i.Qwen2PreTrainedModel,Ni=i.Qwen2Tokenizer,Vi=i.RTDetrForObjectDetection,ji=i.RTDetrImageProcessor,qi=i.RTDetrModel,Gi=i.RTDetrObjectDetectionOutput,Ui=i.RTDetrPreTrainedModel,Wi=i.RawImage,Hi=i.ResNetForImageClassification,Ki=i.ResNetModel,Xi=i.ResNetPreTrainedModel,Qi=i.RoFormerForMaskedLM,Yi=i.RoFormerForQuestionAnswering,Zi=i.RoFormerForSequenceClassification,Ji=i.RoFormerForTokenClassification,eo=i.RoFormerModel,to=i.RoFormerPreTrainedModel,no=i.RoFormerTokenizer,ro=i.RobertaForMaskedLM,so=i.RobertaForQuestionAnswering,io=i.RobertaForSequenceClassification,oo=i.RobertaForTokenClassification,ao=i.RobertaModel,lo=i.RobertaPreTrainedModel,uo=i.RobertaTokenizer,co=i.SamImageProcessor,po=i.SamImageSegmentationOutput,ho=i.SamModel,mo=i.SamPreTrainedModel,fo=i.SamProcessor,go=i.SeamlessM4TFeatureExtractor,_o=i.SegformerFeatureExtractor,wo=i.SegformerForImageClassification,bo=i.SegformerForSemanticSegmentation,yo=i.SegformerModel,vo=i.SegformerPreTrainedModel,xo=i.Seq2SeqLMOutput,Mo=i.SequenceClassifierOutput,To=i.SiglipImageProcessor,ko=i.SiglipModel,$o=i.SiglipPreTrainedModel,So=i.SiglipTextModel,Co=i.SiglipTokenizer,Po=i.SiglipVisionModel,Eo=i.SpeechT5FeatureExtractor,Fo=i.SpeechT5ForSpeechToText,Ao=i.SpeechT5ForTextToSpeech,Io=i.SpeechT5HifiGan,zo=i.SpeechT5Model,Bo=i.SpeechT5PreTrainedModel,Oo=i.SpeechT5Processor,Lo=i.SpeechT5Tokenizer,Do=i.SqueezeBertForMaskedLM,Ro=i.SqueezeBertForQuestionAnswering,No=i.SqueezeBertForSequenceClassification,Vo=i.SqueezeBertModel,jo=i.SqueezeBertPreTrainedModel,qo=i.SqueezeBertTokenizer,Go=i.StableLmForCausalLM,Uo=i.StableLmModel,Wo=i.StableLmPreTrainedModel,Ho=i.Starcoder2ForCausalLM,Ko=i.Starcoder2Model,Xo=i.Starcoder2PreTrainedModel,Qo=i.StoppingCriteria,Yo=i.StoppingCriteriaList,Zo=i.SummarizationPipeline,Jo=i.Swin2SRForImageSuperResolution,ea=i.Swin2SRImageProcessor,ta=i.Swin2SRModel,na=i.Swin2SRPreTrainedModel,ra=i.SwinForImageClassification,sa=i.SwinModel,ia=i.SwinPreTrainedModel,oa=i.T5ForConditionalGeneration,aa=i.T5Model,la=i.T5PreTrainedModel,da=i.T5Tokenizer,ua=i.TableTransformerForObjectDetection,ca=i.TableTransformerModel,pa=i.TableTransformerObjectDetectionOutput,ha=i.TableTransformerPreTrainedModel,ma=i.Tensor,fa=i.Text2TextGenerationPipeline,ga=i.TextClassificationPipeline,_a=i.TextGenerationPipeline,wa=i.TextStreamer,ba=i.TextToAudioPipeline,ya=i.TokenClassificationPipeline,va=i.TokenClassifierOutput,xa=i.TokenizerModel,Ma=i.TrOCRForCausalLM,Ta=i.TrOCRPreTrainedModel,ka=i.TranslationPipeline,$a=i.UniSpeechForCTC,Sa=i.UniSpeechForSequenceClassification,Ca=i.UniSpeechModel,Pa=i.UniSpeechPreTrainedModel,Ea=i.UniSpeechSatForAudioFrameClassification,Fa=i.UniSpeechSatForCTC,Aa=i.UniSpeechSatForSequenceClassification,Ia=i.UniSpeechSatModel,za=i.UniSpeechSatPreTrainedModel,Ba=i.ViTFeatureExtractor,Oa=i.ViTForImageClassification,La=i.ViTImageProcessor,Da=i.ViTModel,Ra=i.ViTPreTrainedModel,Na=i.VisionEncoderDecoderModel,Va=i.VitMatteForImageMatting,ja=i.VitMatteImageProcessor,qa=i.VitMattePreTrainedModel,Ga=i.VitsModel,Ua=i.VitsModelOutput,Wa=i.VitsPreTrainedModel,Ha=i.VitsTokenizer,Ka=i.Wav2Vec2BertForCTC,Xa=i.Wav2Vec2BertForSequenceClassification,Qa=i.Wav2Vec2BertModel,Ya=i.Wav2Vec2BertPreTrainedModel,Za=i.Wav2Vec2CTCTokenizer,Ja=i.Wav2Vec2FeatureExtractor,el=i.Wav2Vec2ForAudioFrameClassification,tl=i.Wav2Vec2ForCTC,nl=i.Wav2Vec2ForSequenceClassification,rl=i.Wav2Vec2Model,sl=i.Wav2Vec2PreTrainedModel,il=i.Wav2Vec2ProcessorWithLM,ol=i.WavLMForAudioFrameClassification,al=i.WavLMForCTC,ll=i.WavLMForSequenceClassification,dl=i.WavLMForXVector,ul=i.WavLMModel,cl=i.WavLMPreTrainedModel,pl=i.WhisperFeatureExtractor,hl=i.WhisperForConditionalGeneration,ml=i.WhisperModel,fl=i.WhisperPreTrainedModel,gl=i.WhisperProcessor,_l=i.WhisperTextStreamer,wl=i.WhisperTokenizer,bl=i.XLMForQuestionAnswering,yl=i.XLMForSequenceClassification,vl=i.XLMForTokenClassification,xl=i.XLMModel,Ml=i.XLMPreTrainedModel,Tl=i.XLMRobertaForMaskedLM,kl=i.XLMRobertaForQuestionAnswering,$l=i.XLMRobertaForSequenceClassification,Sl=i.XLMRobertaForTokenClassification,Cl=i.XLMRobertaModel,Pl=i.XLMRobertaPreTrainedModel,El=i.XLMRobertaTokenizer,Fl=i.XLMTokenizer,Al=i.XLMWithLMHeadModel,Il=i.XVectorOutput,zl=i.YolosFeatureExtractor,Bl=i.YolosForObjectDetection,Ol=i.YolosModel,Ll=i.YolosObjectDetectionOutput,Dl=i.YolosPreTrainedModel,Rl=i.ZeroShotAudioClassificationPipeline,Nl=i.ZeroShotClassificationPipeline,Vl=i.ZeroShotImageClassificationPipeline,jl=i.ZeroShotObjectDetectionPipeline,ql=i.bankers_round,Gl=i.cat,Ul=i.cos_sim,Wl=i.dot,Hl=i.dynamic_time_warping,Kl=i.env,Xl=i.full,Ql=i.full_like,Yl=i.getKeyValueShapes,Zl=i.hanning,Jl=i.interpolate,ed=i.interpolate_4d,td=i.interpolate_data,nd=i.is_chinese_char,rd=i.layer_norm,sd=i.log_softmax,id=i.magnitude,od=i.matmul,ad=i.max,ld=i.mean,dd=i.mean_pooling,ud=i.medianFilter,cd=i.mel_filter_bank,pd=i.min,hd=i.ones,md=i.ones_like,fd=i.permute,gd=i.permute_data,_d=i.pipeline,wd=i.quantize_embeddings,bd=i.read_audio,yd=i.rfft,vd=i.round,xd=i.softmax,Md=i.spectrogram,Td=i.stack,kd=i.std_mean,$d=i.topk,Sd=i.window_function,Cd=i.zeros,Pd=i.zeros_like;export{o as ASTFeatureExtractor,a as ASTForAudioClassification,l as ASTModel,d as ASTPreTrainedModel,u as AlbertForMaskedLM,c as AlbertForQuestionAnswering,p as AlbertForSequenceClassification,h as AlbertModel,m as AlbertPreTrainedModel,f as AlbertTokenizer,g as AudioClassificationPipeline,_ as AutoConfig,w as AutoModel,b as AutoModelForAudioClassification,y as AutoModelForAudioFrameClassification,v as AutoModelForCTC,x as AutoModelForCausalLM,M as AutoModelForDepthEstimation,T as AutoModelForDocumentQuestionAnswering,k as AutoModelForImageClassification,$ as AutoModelForImageFeatureExtraction,S as AutoModelForImageMatting,C as AutoModelForImageSegmentation,P as AutoModelForImageToImage,E as AutoModelForMaskGeneration,F as AutoModelForMaskedLM,A as AutoModelForObjectDetection,I as AutoModelForQuestionAnswering,z as AutoModelForSemanticSegmentation,B as AutoModelForSeq2SeqLM,O as AutoModelForSequenceClassification,L as AutoModelForSpeechSeq2Seq,D as AutoModelForTextToSpectrogram,R as AutoModelForTextToWaveform,N as AutoModelForTokenClassification,V as AutoModelForVision2Seq,j as AutoModelForXVector,q as AutoModelForZeroShotObjectDetection,G as AutoProcessor,U as AutoTokenizer,W as AutomaticSpeechRecognitionPipeline,H as BartForConditionalGeneration,K as BartForSequenceClassification,X as BartModel,Q as BartPretrainedModel,Y as BartTokenizer,Z as BaseModelOutput,J as BaseStreamer,ee as BeitFeatureExtractor,te as BeitForImageClassification,ne as BeitModel,re as BeitPreTrainedModel,se as BertForMaskedLM,ie as BertForQuestionAnswering,oe as BertForSequenceClassification,ae as BertForTokenClassification,le as BertModel,de as BertPreTrainedModel,ue as BertTokenizer,ce as BitImageProcessor,pe as BlenderbotForConditionalGeneration,he as BlenderbotModel,me as BlenderbotPreTrainedModel,fe as BlenderbotSmallForConditionalGeneration,ge as BlenderbotSmallModel,_e as BlenderbotSmallPreTrainedModel,we as BlenderbotSmallTokenizer,be as BlenderbotTokenizer,ye as BloomForCausalLM,ve as BloomModel,xe as BloomPreTrainedModel,Me as BloomTokenizer,Te as CLIPFeatureExtractor,ke as CLIPImageProcessor,$e as CLIPModel,Se as CLIPPreTrainedModel,Ce as CLIPSegForImageSegmentation,Pe as CLIPSegModel,Ee as CLIPSegPreTrainedModel,Fe as CLIPTextModelWithProjection,Ae as CLIPTokenizer,Ie as CLIPVisionModelWithProjection,ze as CamembertForMaskedLM,Be as CamembertForQuestionAnswering,Oe as CamembertForSequenceClassification,Le as CamembertForTokenClassification,De as CamembertModel,Re as CamembertPreTrainedModel,Ne as CamembertTokenizer,Ve as CausalLMOutput,je as CausalLMOutputWithPast,qe as ChineseCLIPFeatureExtractor,Ge as ChineseCLIPModel,Ue as ChineseCLIPPreTrainedModel,We as ClapAudioModelWithProjection,He as ClapFeatureExtractor,Ke as ClapModel,Xe as ClapPreTrainedModel,Qe as ClapTextModelWithProjection,Ye as CodeGenForCausalLM,Ze as CodeGenModel,Je as CodeGenPreTrainedModel,et as CodeGenTokenizer,tt as CodeLlamaTokenizer,nt as CohereForCausalLM,rt as CohereModel,st as CoherePreTrainedModel,it as CohereTokenizer,ot as ConvBertForMaskedLM,at as ConvBertForQuestionAnswering,lt as ConvBertForSequenceClassification,dt as ConvBertForTokenClassification,ut as ConvBertModel,ct as ConvBertPreTrainedModel,pt as ConvBertTokenizer,ht as ConvNextFeatureExtractor,mt as ConvNextForImageClassification,ft as ConvNextImageProcessor,gt as ConvNextModel,_t as ConvNextPreTrainedModel,wt as ConvNextV2ForImageClassification,bt as ConvNextV2Model,yt as ConvNextV2PreTrainedModel,vt as DPTFeatureExtractor,xt as DPTForDepthEstimation,Mt as DPTImageProcessor,Tt as DPTModel,kt as DPTPreTrainedModel,$t as DebertaForMaskedLM,St as DebertaForQuestionAnswering,Ct as DebertaForSequenceClassification,Pt as DebertaForTokenClassification,Et as DebertaModel,Ft as DebertaPreTrainedModel,At as DebertaTokenizer,It as DebertaV2ForMaskedLM,zt as DebertaV2ForQuestionAnswering,Bt as DebertaV2ForSequenceClassification,Ot as DebertaV2ForTokenClassification,Lt as DebertaV2Model,Dt as DebertaV2PreTrainedModel,Rt as DebertaV2Tokenizer,Nt as DeiTFeatureExtractor,Vt as DeiTForImageClassification,jt as DeiTModel,qt as DeiTPreTrainedModel,Gt as DepthAnythingForDepthEstimation,Ut as DepthAnythingPreTrainedModel,Wt as DepthEstimationPipeline,Ht as DetrFeatureExtractor,Kt as DetrForObjectDetection,Xt as DetrForSegmentation,Qt as DetrModel,Yt as DetrObjectDetectionOutput,Zt as DetrPreTrainedModel,Jt as DetrSegmentationOutput,en as Dinov2ForImageClassification,tn as Dinov2Model,nn as Dinov2PreTrainedModel,rn as DistilBertForMaskedLM,sn as DistilBertForQuestionAnswering,on as DistilBertForSequenceClassification,an as DistilBertForTokenClassification,ln as DistilBertModel,dn as DistilBertPreTrainedModel,un as DistilBertTokenizer,cn as DocumentQuestionAnsweringPipeline,pn as DonutFeatureExtractor,hn as DonutSwinModel,mn as DonutSwinPreTrainedModel,fn as EfficientNetForImageClassification,gn as EfficientNetImageProcessor,_n as EfficientNetModel,wn as EfficientNetPreTrainedModel,bn as ElectraForMaskedLM,yn as ElectraForQuestionAnswering,vn as ElectraForSequenceClassification,xn as ElectraForTokenClassification,Mn as ElectraModel,Tn as ElectraPreTrainedModel,kn as ElectraTokenizer,$n as EosTokenCriteria,Sn as EsmForMaskedLM,Cn as EsmForSequenceClassification,Pn as EsmForTokenClassification,En as EsmModel,Fn as EsmPreTrainedModel,An as EsmTokenizer,In as FFT,zn as FalconForCausalLM,Bn as FalconModel,On as FalconPreTrainedModel,Ln as FalconTokenizer,Dn as FastViTForImageClassification,Rn as FastViTModel,Nn as FastViTPreTrainedModel,Vn as FeatureExtractionPipeline,jn as FeatureExtractor,qn as FillMaskPipeline,Gn as Florence2ForConditionalGeneration,Un as Florence2PreTrainedModel,Wn as Florence2Processor,Hn as GLPNFeatureExtractor,Kn as GLPNForDepthEstimation,Xn as GLPNModel,Qn as GLPNPreTrainedModel,Yn as GPT2LMHeadModel,Zn as GPT2Model,Jn as GPT2PreTrainedModel,er as GPT2Tokenizer,tr as GPTBigCodeForCausalLM,nr as GPTBigCodeModel,rr as GPTBigCodePreTrainedModel,sr as GPTJForCausalLM,ir as GPTJModel,or as GPTJPreTrainedModel,ar as GPTNeoForCausalLM,lr as GPTNeoModel,dr as GPTNeoPreTrainedModel,ur as GPTNeoXForCausalLM,cr as GPTNeoXModel,pr as GPTNeoXPreTrainedModel,hr as GPTNeoXTokenizer,mr as GemmaForCausalLM,fr as GemmaModel,gr as GemmaPreTrainedModel,_r as GemmaTokenizer,wr as Grok1Tokenizer,br as HerbertTokenizer,yr as HubertForCTC,vr as HubertForSequenceClassification,xr as HubertModel,Mr as HubertPreTrainedModel,Tr as ImageClassificationPipeline,kr as ImageFeatureExtractionPipeline,$r as ImageFeatureExtractor,Sr as ImageMattingOutput,Cr as ImageSegmentationPipeline,Pr as ImageToImagePipeline,Er as ImageToTextPipeline,Fr as InterruptableStoppingCriteria,Ar as LlamaForCausalLM,Ir as LlamaModel,zr as LlamaPreTrainedModel,Br as LlamaTokenizer,Or as LlavaForConditionalGeneration,Lr as LlavaPreTrainedModel,Dr as LongT5ForConditionalGeneration,Rr as LongT5Model,Nr as LongT5PreTrainedModel,Vr as M2M100ForConditionalGeneration,jr as M2M100Model,qr as M2M100PreTrainedModel,Gr as M2M100Tokenizer,Ur as MBart50Tokenizer,Wr as MBartForCausalLM,Hr as MBartForConditionalGeneration,Kr as MBartForSequenceClassification,Xr as MBartModel,Qr as MBartPreTrainedModel,Yr as MBartTokenizer,Zr as MPNetForMaskedLM,Jr as MPNetForQuestionAnswering,es as MPNetForSequenceClassification,ts as MPNetForTokenClassification,ns as MPNetModel,rs as MPNetPreTrainedModel,ss as MPNetTokenizer,is as MT5ForConditionalGeneration,os as MT5Model,as as MT5PreTrainedModel,ls as MarianMTModel,ds as MarianModel,us as MarianPreTrainedModel,cs as MarianTokenizer,ps as MaskedLMOutput,hs as MaxLengthCriteria,ms as MistralForCausalLM,fs as MistralModel,gs as MistralPreTrainedModel,_s as MobileBertForMaskedLM,ws as MobileBertForQuestionAnswering,bs as MobileBertForSequenceClassification,ys as MobileBertModel,vs as MobileBertPreTrainedModel,xs as MobileBertTokenizer,Ms as MobileNetV1FeatureExtractor,Ts as MobileNetV1ForImageClassification,ks as MobileNetV1Model,$s as MobileNetV1PreTrainedModel,Ss as MobileNetV2FeatureExtractor,Cs as MobileNetV2ForImageClassification,Ps as MobileNetV2Model,Es as MobileNetV2PreTrainedModel,Fs as MobileNetV3FeatureExtractor,As as MobileNetV3ForImageClassification,Is as MobileNetV3Model,zs as MobileNetV3PreTrainedModel,Bs as MobileNetV4FeatureExtractor,Os as MobileNetV4ForImageClassification,Ls as MobileNetV4Model,Ds as MobileNetV4PreTrainedModel,Rs as MobileViTFeatureExtractor,Ns as MobileViTForImageClassification,Vs as MobileViTImageProcessor,js as MobileViTModel,qs as MobileViTPreTrainedModel,Gs as MobileViTV2ForImageClassification,Us as MobileViTV2Model,Ws as MobileViTV2PreTrainedModel,Hs as ModelOutput,Ks as Moondream1ForConditionalGeneration,Xs as MptForCausalLM,Qs as MptModel,Ys as MptPreTrainedModel,Zs as MusicgenForCausalLM,Js as MusicgenForConditionalGeneration,ei as MusicgenModel,ti as MusicgenPreTrainedModel,ni as NllbTokenizer,ri as NomicBertModel,si as NomicBertPreTrainedModel,ii as NougatImageProcessor,oi as NougatTokenizer,ai as OPTForCausalLM,li as OPTModel,di as OPTPreTrainedModel,ui as ObjectDetectionPipeline,ci as OpenELMForCausalLM,pi as OpenELMModel,hi as OpenELMPreTrainedModel,mi as OwlViTFeatureExtractor,fi as OwlViTForObjectDetection,gi as OwlViTModel,_i as OwlViTPreTrainedModel,wi as OwlViTProcessor,bi as Owlv2ForObjectDetection,yi as Owlv2ImageProcessor,vi as Owlv2Model,xi as Owlv2PreTrainedModel,Mi as Phi3ForCausalLM,Ti as Phi3Model,ki as Phi3PreTrainedModel,$i as PhiForCausalLM,Si as PhiModel,Ci as PhiPreTrainedModel,Pi as Pipeline,Ei as PreTrainedModel,Fi as PreTrainedTokenizer,Ai as PretrainedConfig,Ii as PretrainedMixin,zi as Processor,Bi as QuestionAnsweringModelOutput,Oi as QuestionAnsweringPipeline,Li as Qwen2ForCausalLM,Di as Qwen2Model,Ri as Qwen2PreTrainedModel,Ni as Qwen2Tokenizer,Vi as RTDetrForObjectDetection,ji as RTDetrImageProcessor,qi as RTDetrModel,Gi as RTDetrObjectDetectionOutput,Ui as RTDetrPreTrainedModel,Wi as RawImage,Hi as ResNetForImageClassification,Ki as ResNetModel,Xi as ResNetPreTrainedModel,Qi as RoFormerForMaskedLM,Yi as RoFormerForQuestionAnswering,Zi as RoFormerForSequenceClassification,Ji as RoFormerForTokenClassification,eo as RoFormerModel,to as RoFormerPreTrainedModel,no as RoFormerTokenizer,ro as RobertaForMaskedLM,so as RobertaForQuestionAnswering,io as RobertaForSequenceClassification,oo as RobertaForTokenClassification,ao as RobertaModel,lo as RobertaPreTrainedModel,uo as RobertaTokenizer,co as SamImageProcessor,po as SamImageSegmentationOutput,ho as SamModel,mo as SamPreTrainedModel,fo as SamProcessor,go as SeamlessM4TFeatureExtractor,_o as SegformerFeatureExtractor,wo as SegformerForImageClassification,bo as SegformerForSemanticSegmentation,yo as SegformerModel,vo as SegformerPreTrainedModel,xo as Seq2SeqLMOutput,Mo as SequenceClassifierOutput,To as SiglipImageProcessor,ko as SiglipModel,$o as SiglipPreTrainedModel,So as SiglipTextModel,Co as SiglipTokenizer,Po as SiglipVisionModel,Eo as SpeechT5FeatureExtractor,Fo as SpeechT5ForSpeechToText,Ao as SpeechT5ForTextToSpeech,Io as SpeechT5HifiGan,zo as SpeechT5Model,Bo as SpeechT5PreTrainedModel,Oo as SpeechT5Processor,Lo as SpeechT5Tokenizer,Do as SqueezeBertForMaskedLM,Ro as SqueezeBertForQuestionAnswering,No as SqueezeBertForSequenceClassification,Vo as SqueezeBertModel,jo as SqueezeBertPreTrainedModel,qo as SqueezeBertTokenizer,Go as StableLmForCausalLM,Uo as StableLmModel,Wo as StableLmPreTrainedModel,Ho as Starcoder2ForCausalLM,Ko as Starcoder2Model,Xo as Starcoder2PreTrainedModel,Qo as StoppingCriteria,Yo as StoppingCriteriaList,Zo as SummarizationPipeline,Jo as Swin2SRForImageSuperResolution,ea as Swin2SRImageProcessor,ta as Swin2SRModel,na as Swin2SRPreTrainedModel,ra as SwinForImageClassification,sa as SwinModel,ia as SwinPreTrainedModel,oa as T5ForConditionalGeneration,aa as T5Model,la as T5PreTrainedModel,da as T5Tokenizer,ua as TableTransformerForObjectDetection,ca as TableTransformerModel,pa as TableTransformerObjectDetectionOutput,ha as TableTransformerPreTrainedModel,ma as Tensor,fa as Text2TextGenerationPipeline,ga as TextClassificationPipeline,_a as TextGenerationPipeline,wa as TextStreamer,ba as TextToAudioPipeline,ya as TokenClassificationPipeline,va as TokenClassifierOutput,xa as TokenizerModel,Ma as TrOCRForCausalLM,Ta as TrOCRPreTrainedModel,ka as TranslationPipeline,$a as UniSpeechForCTC,Sa as UniSpeechForSequenceClassification,Ca as UniSpeechModel,Pa as UniSpeechPreTrainedModel,Ea as UniSpeechSatForAudioFrameClassification,Fa as UniSpeechSatForCTC,Aa as UniSpeechSatForSequenceClassification,Ia as UniSpeechSatModel,za as UniSpeechSatPreTrainedModel,Ba as ViTFeatureExtractor,Oa as ViTForImageClassification,La as ViTImageProcessor,Da as ViTModel,Ra as ViTPreTrainedModel,Na as VisionEncoderDecoderModel,Va as VitMatteForImageMatting,ja as VitMatteImageProcessor,qa as VitMattePreTrainedModel,Ga as VitsModel,Ua as VitsModelOutput,Wa as VitsPreTrainedModel,Ha as VitsTokenizer,Ka as Wav2Vec2BertForCTC,Xa as Wav2Vec2BertForSequenceClassification,Qa as Wav2Vec2BertModel,Ya as Wav2Vec2BertPreTrainedModel,Za as Wav2Vec2CTCTokenizer,Ja as Wav2Vec2FeatureExtractor,el as Wav2Vec2ForAudioFrameClassification,tl as Wav2Vec2ForCTC,nl as Wav2Vec2ForSequenceClassification,rl as Wav2Vec2Model,sl as Wav2Vec2PreTrainedModel,il as Wav2Vec2ProcessorWithLM,ol as WavLMForAudioFrameClassification,al as WavLMForCTC,ll as WavLMForSequenceClassification,dl as WavLMForXVector,ul as WavLMModel,cl as WavLMPreTrainedModel,pl as WhisperFeatureExtractor,hl as WhisperForConditionalGeneration,ml as WhisperModel,fl as WhisperPreTrainedModel,gl as WhisperProcessor,_l as WhisperTextStreamer,wl as WhisperTokenizer,bl as XLMForQuestionAnswering,yl as XLMForSequenceClassification,vl as XLMForTokenClassification,xl as XLMModel,Ml as XLMPreTrainedModel,Tl as XLMRobertaForMaskedLM,kl as XLMRobertaForQuestionAnswering,$l as XLMRobertaForSequenceClassification,Sl as XLMRobertaForTokenClassification,Cl as XLMRobertaModel,Pl as XLMRobertaPreTrainedModel,El as XLMRobertaTokenizer,Fl as XLMTokenizer,Al as XLMWithLMHeadModel,Il as XVectorOutput,zl as YolosFeatureExtractor,Bl as YolosForObjectDetection,Ol as YolosModel,Ll as YolosObjectDetectionOutput,Dl as YolosPreTrainedModel,Rl as ZeroShotAudioClassificationPipeline,Nl as ZeroShotClassificationPipeline,Vl as ZeroShotImageClassificationPipeline,jl as ZeroShotObjectDetectionPipeline,ql as bankers_round,Gl as cat,Ul as cos_sim,Wl as dot,Hl as dynamic_time_warping,Kl as env,Xl as full,Ql as full_like,Yl as getKeyValueShapes,Zl as hanning,Jl as interpolate,ed as interpolate_4d,td as interpolate_data,nd as is_chinese_char,rd as layer_norm,sd as log_softmax,id as magnitude,od as matmul,ad as max,ld as mean,dd as mean_pooling,ud as medianFilter,cd as mel_filter_bank,pd as min,hd as ones,md as ones_like,fd as permute,gd as permute_data,_d as pipeline,wd as quantize_embeddings,bd as read_audio,yd as rfft,vd as round,xd as softmax,Md as spectrogram,Td as stack,kd as std_mean,$d as topk,Sd as window_function,Cd as zeros,Pd as zeros_like};
//# sourceMappingURL=transformers.min.js.map